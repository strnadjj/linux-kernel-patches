---------------
./core/rtw_ap.c
---------------
CHECK: Logical continuations should be on the previous line
#262: FILE: ./core/rtw_ap.c:262:
+			if (psta->sleepq_len > (NR_XMITFRAME / pstapriv->asoc_list_cnt)
+				&& padapter->xmitpriv.free_xmitframe_cnt < ((

CHECK: Lines should not end with a '('
#262: FILE: ./core/rtw_ap.c:262:
+				&& padapter->xmitpriv.free_xmitframe_cnt < ((

CHECK: Avoid CamelCase: <add_RATid>
#323: FILE: ./core/rtw_ap.c:323:
+void add_RATid(struct adapter *padapter, struct sta_info *psta, u8 rssi_level)

CHECK: Avoid CamelCase: <shortGIrate>
#325: FILE: ./core/rtw_ap.c:325:
+	unsigned char sta_band = 0, shortGIrate = false;

CHECK: Avoid CamelCase: <supportRateNum>
#373: FILE: ./core/rtw_ap.c:373:
+	int supportRateNum = 0;

CHECK: line length of 114 exceeds 100 columns
#396: FILE: ./core/rtw_ap.c:396:
+		/* psta->dot118021XPrivacy = _NO_PRIVACY_;//!!! remove it, because it has been set before this. */

CHECK: Blank lines aren't necessary before a close brace '}'
#442: FILE: ./core/rtw_ap.c:442:
+
+	}

CHECK: Avoid CamelCase: <dot11AuthAlgrthm>
#470: FILE: ./core/rtw_ap.c:470:
+	if (psecuritypriv->dot11AuthAlgrthm == dot11AuthAlgrthm_8021X)

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_8021X>
#470: FILE: ./core/rtw_ap.c:470:
+	if (psecuritypriv->dot11AuthAlgrthm == dot11AuthAlgrthm_8021X)

CHECK: Lines should not end with a '('
#485: FILE: ./core/rtw_ap.c:485:
+		phtpriv_sta->rx_ampdu_min_spacing = (

CHECK: Lines should not end with a '('
#490: FILE: ./core/rtw_ap.c:490:
+		if ((

CHECK: Lines should not end with a '('
#503: FILE: ./core/rtw_ap.c:503:
+		if ((

CHECK: Lines should not end with a '('
#509: FILE: ./core/rtw_ap.c:509:
+		if ((

CHECK: Unnecessary parentheses around '&phtpriv_sta->ht_cap'
#521: FILE: ./core/rtw_ap.c:521:
+		if (TEST_FLAG(phtpriv_ap->ldpc_cap, LDPC_HT_ENABLE_TX) &&
+		    GET_HT_CAPABILITY_ELE_LDPC_CAP((u8 *)(&phtpriv_sta->ht_cap)))

CHECK: Unnecessary parentheses around '&phtpriv_sta->ht_cap'
#526: FILE: ./core/rtw_ap.c:526:
+		if (TEST_FLAG(phtpriv_ap->stbc_cap, STBC_HT_ENABLE_TX) &&
+		    GET_HT_CAPABILITY_ELE_RX_STBC((u8 *)(&phtpriv_sta->ht_cap)))

CHECK: Unnecessary parentheses around 'phtpriv_ap->ht_cap.cap_info'
#583: FILE: ./core/rtw_ap.c:583:
+		if ((phtpriv_ap->ht_cap.cap_info) & cpu_to_le16(IEEE80211_HT_CAP_SGI_20))

CHECK: Unnecessary parentheses around 'phtpriv_ap->ht_cap.cap_info'
#587: FILE: ./core/rtw_ap.c:587:
+		if ((phtpriv_ap->ht_cap.cap_info) & cpu_to_le16(IEEE80211_HT_CAP_SGI_40))

CHECK: Lines should not end with a '('
#630: FILE: ./core/rtw_ap.c:630:
+	pmlmeinfo->SM_PS = (le16_to_cpu(

CHECK: line length of 101 exceeds 100 columns
#664: FILE: ./core/rtw_ap.c:664:
+	/* if there is wpsie in beacon, the hostapd will update beacon twice when stating hostapd, */

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm != _WEP40_'
#687: FILE: ./core/rtw_ap.c:687:
+		if ((psecuritypriv->dot11PrivacyAlgrthm != _WEP40_) &&
+		    (psecuritypriv->dot11PrivacyAlgrthm != _WEP104_))

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm != _WEP104_'
#687: FILE: ./core/rtw_ap.c:687:
+		if ((psecuritypriv->dot11PrivacyAlgrthm != _WEP40_) &&
+		    (psecuritypriv->dot11PrivacyAlgrthm != _WEP104_))

CHECK: Avoid CamelCase: <dot11PrivacyAlgrthm>
#687: FILE: ./core/rtw_ap.c:687:
+		if ((psecuritypriv->dot11PrivacyAlgrthm != _WEP40_) &&

CHECK: Avoid CamelCase: <Set_MSR>
#693: FILE: ./core/rtw_ap.c:693:
+	Set_MSR(padapter, _HW_STATE_AP_);

CHECK: Lines should not end with a '('
#710: FILE: ./core/rtw_ap.c:710:
+	val8 = (

CHECK: Avoid CamelCase: <Switch_DM_Func>
#730: FILE: ./core/rtw_ap.c:730:
+		Switch_DM_Func(padapter, DYNAMIC_ALL_FUNC_ENABLE, true);

CHECK: Avoid CamelCase: <UpdateBrateTbl>
#788: FILE: ./core/rtw_ap.c:788:
+	UpdateBrateTbl(padapter, pnetwork->supported_rates);

CHECK: Lines should not end with a '('
#792: FILE: ./core/rtw_ap.c:792:
+	update_capinfo(

CHECK: Avoid CamelCase: <pHT_caps_ie>
#814: FILE: ./core/rtw_ap.c:814:
+	u8 *pHT_caps_ie = NULL;

CHECK: Avoid CamelCase: <pHT_info_ie>
#815: FILE: ./core/rtw_ap.c:815:
+	u8 *pHT_info_ie = NULL;

CHECK: Avoid CamelCase: <supportRate>
#820: FILE: ./core/rtw_ap.c:820:
+	u8 channel, network_type, supportRate[NDIS_802_11_LENGTH_RATES_EX];

CHECK: Avoid CamelCase: <Ndis802_11APMode>
#843: FILE: ./core/rtw_ap.c:843:
+	if (pbss_network->infrastructure_mode != Ndis802_11APMode)

CHECK: line length of 112 exceeds 100 columns
#851: FILE: ./core/rtw_ap.c:851:
+	p = rtw_get_beacon_interval_from_ie(ie);/* ie + 8;	8: TimeStamp, 2: Beacon Interval 2:Capability */

CHECK: Lines should not end with a '('
#861: FILE: ./core/rtw_ap.c:861:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#876: FILE: ./core/rtw_ap.c:876:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#888: FILE: ./core/rtw_ap.c:888:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#900: FILE: ./core/rtw_ap.c:900:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#916: FILE: ./core/rtw_ap.c:916:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#937: FILE: ./core/rtw_ap.c:937:
+	p = rtw_get_ie(

CHECK: Lines should not end with a '('
#944: FILE: ./core/rtw_ap.c:944:
+		if (rtw_parse_wpa2_ie(

CHECK: Lines should not end with a '('
#967: FILE: ./core/rtw_ap.c:967:
+		p = rtw_get_ie(

CHECK: Lines should not end with a '('
#974: FILE: ./core/rtw_ap.c:974:
+			if (rtw_parse_wpa_ie(

CHECK: Lines should not end with a '('
#1003: FILE: ./core/rtw_ap.c:1003:
+			p = rtw_get_ie(

CHECK: Lines should not end with a '('
#1030: FILE: ./core/rtw_ap.c:1030:
+	p = rtw_get_ie(

CHECK: Using comparison to false is error prone
#1047: FILE: ./core/rtw_ap.c:1047:
+		if (pmlmepriv->htpriv.sgi_20m == false)

CHECK: Using comparison to false is error prone
#1050: FILE: ./core/rtw_ap.c:1050:
+		if (pmlmepriv->htpriv.sgi_40m == false)

CHECK: Lines should not end with a '('
#1062: FILE: ./core/rtw_ap.c:1062:
+		pht_cap->ampdu_params_info &= ~(

CHECK: Lines should not end with a '('
#1075: FILE: ./core/rtw_ap.c:1075:
+		rtw_hal_get_def_var(

CHECK: Lines should not end with a '('
#1080: FILE: ./core/rtw_ap.c:1080:
+		pht_cap->ampdu_params_info |= (

CHECK: Lines should not end with a '('
#1091: FILE: ./core/rtw_ap.c:1091:
+	p = rtw_get_ie(

CHECK: Avoid CamelCase: <Ndis802_11DS>
#1102: FILE: ./core/rtw_ap.c:1102:
+		pbss_network->network_type_in_use = Ndis802_11DS;

CHECK: Avoid CamelCase: <Ndis802_11OFDM24>
#1108: FILE: ./core/rtw_ap.c:1108:
+		pbss_network->network_type_in_use = Ndis802_11OFDM24;

CHECK: Lines should not end with a '('
#1138: FILE: ./core/rtw_ap.c:1138:
+	pbss_network->length = get_wlan_bssid_ex_sz(

CHECK: line length of 115 exceeds 100 columns
#1157: FILE: ./core/rtw_ap.c:1157:
+	psta->state |= WIFI_AP_STATE;		/* Aries, add, fix bug of flush_cam_entry at STOP AP mode , 0724 */

CHECK: Using comparison to true is error prone
#1196: FILE: ./core/rtw_ap.c:1196:
+			if (paclnode->valid == true) {

CHECK: Lines should not end with a '('
#1247: FILE: ./core/rtw_ap.c:1247:
+		if (

CHECK: Blank lines aren't necessary before a close brace '}'
#1263: FILE: ./core/rtw_ap.c:1263:
+
+}

CHECK: Avoid CamelCase: <_SetStaKey_CMD_>
#1285: FILE: ./core/rtw_ap.c:1285:
+	init_h2fwcmd_w_parm_no_rsp(ph2c, psetstakey_para, _SetStaKey_CMD_);

CHECK: Avoid CamelCase: <dot118021XPrivacy>
#1287: FILE: ./core/rtw_ap.c:1287:
+	psetstakey_para->algorithm = (u8)psta->dot118021XPrivacy;

CHECK: Avoid CamelCase: <dot118021x_UncstKey>
#1291: FILE: ./core/rtw_ap.c:1291:
+	memcpy(psetstakey_para->key, &psta->dot118021x_UncstKey, 16);

CHECK: Lines should not end with a '('
#1300: FILE: ./core/rtw_ap.c:1300:
+static int rtw_ap_set_key(

CHECK: Avoid CamelCase: <_SetKey_CMD_>
#1350: FILE: ./core/rtw_ap.c:1350:
+	pcmd->cmdcode = _SetKey_CMD_;

CHECK: Lines should not end with a '('
#1370: FILE: ./core/rtw_ap.c:1370:
+int rtw_ap_set_wep_key(

CHECK: Lines should not end with a '('
#1411: FILE: ./core/rtw_ap.c:1411:
+	p = rtw_get_ie(

CHECK: Avoid CamelCase: <pIE>
#1418: FILE: ./core/rtw_ap.c:1418:
+		struct ndis_80211_var_ie *pIE = (struct ndis_80211_var_ie *)p;

CHECK: Lines should not end with a '('
#1423: FILE: ./core/rtw_ap.c:1423:
+			pIE->data[0] &= ~(

CHECK: Lines should not end with a '('
#1471: FILE: ./core/rtw_ap.c:1471:
+	pwps_ie = rtw_get_wps_ie(

CHECK: spaces preferred around that '+' (ctx:VxV)
#1500: FILE: ./core/rtw_ap.c:1500:
+		pwps_ie += (wps_ielen+2);
 		                     ^

CHECK: Logical continuations should be on the previous line
#1629: FILE: ./core/rtw_ap.c:1629:
+	if (!(pmlmepriv->ht_op_mode & IEEE80211_HT_OP_MODE_NON_GF_STA_PRSNT)
+	    && pmlmepriv->num_sta_ht_no_gf) {

CHECK: Lines should not end with a '('
#1661: FILE: ./core/rtw_ap.c:1661:
+	else if (

CHECK: Logical continuations should be on the previous line
#1663: FILE: ./core/rtw_ap.c:1663:
+		(le16_to_cpu(phtpriv_ap->ht_cap.cap_info) & IEEE80211_HT_CAP_SUP_WIDTH)
+		&& pmlmepriv->num_sta_ht_20mhz)

CHECK: Unnecessary parentheses around 'pmlmeext->cur_wireless_mode > WIRELESS_11B'
#1715: FILE: ./core/rtw_ap.c:1715:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_preamble == 1)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->num_sta_no_short_preamble == 1'
#1715: FILE: ./core/rtw_ap.c:1715:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_preamble == 1)) {

CHECK: Unnecessary parentheses around 'pmlmeext->cur_wireless_mode > WIRELESS_11B'
#1727: FILE: ./core/rtw_ap.c:1727:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_preamble == 0)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->num_sta_no_short_preamble == 0'
#1727: FILE: ./core/rtw_ap.c:1727:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_preamble == 0)) {

CHECK: Unnecessary parentheses around 'pmlmeext->cur_wireless_mode > WIRELESS_11B'
#1765: FILE: ./core/rtw_ap.c:1765:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_slot_time == 1)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->num_sta_no_short_slot_time == 1'
#1765: FILE: ./core/rtw_ap.c:1765:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_slot_time == 1)) {

CHECK: Unnecessary parentheses around 'pmlmeext->cur_wireless_mode > WIRELESS_11B'
#1777: FILE: ./core/rtw_ap.c:1777:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_slot_time == 0)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->num_sta_no_short_slot_time == 0'
#1777: FILE: ./core/rtw_ap.c:1777:
+			if ((pmlmeext->cur_wireless_mode > WIRELESS_11B) &&
+			    (pmlmepriv->num_sta_no_short_slot_time == 0)) {

CHECK: Logical continuations should be on the previous line
#1836: FILE: ./core/rtw_ap.c:1836:
+		if (pmlmeext->cur_wireless_mode > WIRELESS_11B
+		    && pmlmepriv->num_sta_no_short_preamble == 0){

CHECK: Logical continuations should be on the previous line
#1855: FILE: ./core/rtw_ap.c:1855:
+		if (pmlmeext->cur_wireless_mode > WIRELESS_11B
+		    && pmlmepriv->num_sta_no_short_slot_time == 0){

CHECK: Lines should not end with a '('
#1884: FILE: ./core/rtw_ap.c:1884:
+u8 ap_free_sta(

CHECK: Please use a blank line after function/struct/union/enum declarations
#2003: FILE: ./core/rtw_ap.c:2003:
+}
+/* restore hw setting from sw data structures */

CHECK: Lines should not end with a '('
#2017: FILE: ./core/rtw_ap.c:2017:
+	set_channel_bwmode(

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_'
#2026: FILE: ./core/rtw_ap.c:2026:
+	if ((padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_) ||
+	    (padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm == _AES_'
#2026: FILE: ./core/rtw_ap.c:2026:
+	if ((padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_) ||
+	    (padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Lines should not end with a '('
#2029: FILE: ./core/rtw_ap.c:2029:
+		rtw_set_key(

CHECK: Avoid CamelCase: <dot118021XGrpKeyid>
#2032: FILE: ./core/rtw_ap.c:2032:
+			psecuritypriv->dot118021XGrpKeyid,

CHECK: Avoid CamelCase: <Update_RA_Entry>
#2061: FILE: ./core/rtw_ap.c:2061:
+			Update_RA_Entry(padapter, psta);

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm == _TKIP_'
#2064: FILE: ./core/rtw_ap.c:2064:
+			if ((psecuritypriv->dot11PrivacyAlgrthm == _TKIP_) ||
+			    (psecuritypriv->dot11PrivacyAlgrthm == _AES_)) {

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm == _AES_'
#2064: FILE: ./core/rtw_ap.c:2064:
+			if ((psecuritypriv->dot11PrivacyAlgrthm == _TKIP_) ||
+			    (psecuritypriv->dot11PrivacyAlgrthm == _AES_)) {

CHECK: Lines should not end with a '('
#2136: FILE: ./core/rtw_ap.c:2136:
+	memset(

CHECK: Avoid CamelCase: <Ndis802_11AuthModeOpen>
#2141: FILE: ./core/rtw_ap.c:2141:
+	padapter->securitypriv.ndisauthtype = Ndis802_11AuthModeOpen;

CHECK: Avoid CamelCase: <Ndis802_11WEPDisabled>
#2142: FILE: ./core/rtw_ap.c:2142:
+	padapter->securitypriv.ndisencryptstatus = Ndis802_11WEPDisabled;

CHECK: Avoid CamelCase: <rtw_btcoex_MediaStatusNotify>
#2172: FILE: ./core/rtw_ap.c:2172:
+	rtw_btcoex_MediaStatusNotify(padapter, 0); /* disconnect */

total: 0 errors, 0 warnings, 94 checks, 2173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ap.c has style problems, please review.
---------------
./core/rtw_ap.o
---------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ap.o has style problems, please review.
-------------------
./core/rtw_btcoex.c
-------------------
CHECK: Unnecessary parentheses around 'media_status == RT_MEDIA_CONNECT'
#13: FILE: ./core/rtw_btcoex.c:13:
+	if ((media_status == RT_MEDIA_CONNECT)
+		&& (check_fwstate(&padapter->mlmepriv, WIFI_AP_STATE) == true)) {

CHECK: Logical continuations should be on the previous line
#14: FILE: ./core/rtw_btcoex.c:14:
+	if ((media_status == RT_MEDIA_CONNECT)
+		&& (check_fwstate(&padapter->mlmepriv, WIFI_AP_STATE) == true)) {

CHECK: Avoid CamelCase: <hal_btcoex_MediaStatusNotify>
#18: FILE: ./core/rtw_btcoex.c:18:
+	hal_btcoex_MediaStatusNotify(padapter, media_status);

CHECK: Avoid CamelCase: <rtw_btcoex_HaltNotify>
#21: FILE: ./core/rtw_btcoex.c:21:
+void rtw_btcoex_HaltNotify(struct adapter *padapter)

CHECK: Avoid CamelCase: <bSurpriseRemoved>
#26: FILE: ./core/rtw_btcoex.c:26:
+	if (padapter->bSurpriseRemoved)

CHECK: Avoid CamelCase: <hal_btcoex_HaltNotify>
#29: FILE: ./core/rtw_btcoex.c:29:
+	hal_btcoex_HaltNotify(padapter);

CHECK: Avoid CamelCase: <rtw_btcoex_RejectApAggregatedPacket>
#35: FILE: ./core/rtw_btcoex.c:35:
+void rtw_btcoex_RejectApAggregatedPacket(struct adapter *padapter, u8 enable)

CHECK: Avoid CamelCase: <rtw_btcoex_LPS_Enter>
#52: FILE: ./core/rtw_btcoex.c:52:
+void rtw_btcoex_LPS_Enter(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#57: FILE: ./core/rtw_btcoex.c:57:
+
+

CHECK: Avoid CamelCase: <hal_btcoex_LpsVal>
#61: FILE: ./core/rtw_btcoex.c:61:
+	lps_val = hal_btcoex_LpsVal(padapter);

CHECK: Avoid CamelCase: <rtw_btcoex_LPS_Leave>
#65: FILE: ./core/rtw_btcoex.c:65:
+void rtw_btcoex_LPS_Leave(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#69: FILE: ./core/rtw_btcoex.c:69:
+
+

total: 0 errors, 0 warnings, 12 checks, 77 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_btcoex.c has style problems, please review.
-------------------
./core/rtw_btcoex.o
-------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_btcoex.o has style problems, please review.
----------------
./core/rtw_cmd.c
----------------
CHECK: Avoid CamelCase: <_Read_MACREG>
#12: FILE: ./core/rtw_cmd.c:12:
+	{GEN_CMD_CODE(_Read_MACREG), NULL}, /*0*/

CHECK: Avoid CamelCase: <_Write_MACREG>
#13: FILE: ./core/rtw_cmd.c:13:
+	{GEN_CMD_CODE(_Write_MACREG), NULL},

CHECK: Avoid CamelCase: <_Read_BBREG>
#14: FILE: ./core/rtw_cmd.c:14:
+	{GEN_CMD_CODE(_Read_BBREG), &rtw_getbbrfreg_cmdrsp_callback},

CHECK: Avoid CamelCase: <_Write_BBREG>
#15: FILE: ./core/rtw_cmd.c:15:
+	{GEN_CMD_CODE(_Write_BBREG), NULL},

CHECK: Avoid CamelCase: <_Read_RFREG>
#16: FILE: ./core/rtw_cmd.c:16:
+	{GEN_CMD_CODE(_Read_RFREG), &rtw_getbbrfreg_cmdrsp_callback},

CHECK: Avoid CamelCase: <_Write_RFREG>
#17: FILE: ./core/rtw_cmd.c:17:
+	{GEN_CMD_CODE(_Write_RFREG), NULL}, /*5*/

CHECK: Avoid CamelCase: <_Read_EEPROM>
#18: FILE: ./core/rtw_cmd.c:18:
+	{GEN_CMD_CODE(_Read_EEPROM), NULL},

CHECK: Avoid CamelCase: <_Write_EEPROM>
#19: FILE: ./core/rtw_cmd.c:19:
+	{GEN_CMD_CODE(_Write_EEPROM), NULL},

CHECK: Avoid CamelCase: <_Read_EFUSE>
#20: FILE: ./core/rtw_cmd.c:20:
+	{GEN_CMD_CODE(_Read_EFUSE), NULL},

CHECK: Avoid CamelCase: <_Write_EFUSE>
#21: FILE: ./core/rtw_cmd.c:21:
+	{GEN_CMD_CODE(_Write_EFUSE), NULL},

CHECK: Avoid CamelCase: <_Read_CAM>
#23: FILE: ./core/rtw_cmd.c:23:
+	{GEN_CMD_CODE(_Read_CAM),	NULL},	/*10*/

CHECK: Avoid CamelCase: <_Write_CAM>
#24: FILE: ./core/rtw_cmd.c:24:
+	{GEN_CMD_CODE(_Write_CAM),	 NULL},

CHECK: Avoid CamelCase: <_setBCNITV>
#25: FILE: ./core/rtw_cmd.c:25:
+	{GEN_CMD_CODE(_setBCNITV), NULL},

CHECK: Avoid CamelCase: <_setMBIDCFG>
#26: FILE: ./core/rtw_cmd.c:26:
+	{GEN_CMD_CODE(_setMBIDCFG), NULL},

CHECK: Avoid CamelCase: <_JoinBss>
#27: FILE: ./core/rtw_cmd.c:27:
+	{GEN_CMD_CODE(_JoinBss), &rtw_joinbss_cmd_callback},  /*14*/

CHECK: Avoid CamelCase: <_DisConnect>
#28: FILE: ./core/rtw_cmd.c:28:
+	{GEN_CMD_CODE(_DisConnect), &rtw_disassoc_cmd_callback}, /*15*/

CHECK: Avoid CamelCase: <_CreateBss>
#29: FILE: ./core/rtw_cmd.c:29:
+	{GEN_CMD_CODE(_CreateBss), &rtw_createbss_cmd_callback},

CHECK: Avoid CamelCase: <_SetOpMode>
#30: FILE: ./core/rtw_cmd.c:30:
+	{GEN_CMD_CODE(_SetOpMode), NULL},

CHECK: Avoid CamelCase: <_SiteSurvey>
#31: FILE: ./core/rtw_cmd.c:31:
+	{GEN_CMD_CODE(_SiteSurvey), &rtw_survey_cmd_callback}, /*18*/

CHECK: Avoid CamelCase: <_SetAuth>
#32: FILE: ./core/rtw_cmd.c:32:
+	{GEN_CMD_CODE(_SetAuth), NULL},

CHECK: Avoid CamelCase: <_SetKey>
#34: FILE: ./core/rtw_cmd.c:34:
+	{GEN_CMD_CODE(_SetKey), NULL},	/*20*/

CHECK: Avoid CamelCase: <_SetStaKey>
#35: FILE: ./core/rtw_cmd.c:35:
+	{GEN_CMD_CODE(_SetStaKey), &rtw_setstaKey_cmdrsp_callback},

CHECK: Avoid CamelCase: <rtw_setstaKey_cmdrsp_callback>
#35: FILE: ./core/rtw_cmd.c:35:
+	{GEN_CMD_CODE(_SetStaKey), &rtw_setstaKey_cmdrsp_callback},

CHECK: Avoid CamelCase: <_SetAssocSta>
#36: FILE: ./core/rtw_cmd.c:36:
+	{GEN_CMD_CODE(_SetAssocSta), &rtw_setassocsta_cmdrsp_callback},

CHECK: Avoid CamelCase: <_DelAssocSta>
#37: FILE: ./core/rtw_cmd.c:37:
+	{GEN_CMD_CODE(_DelAssocSta), NULL},

CHECK: Avoid CamelCase: <_SetStaPwrState>
#38: FILE: ./core/rtw_cmd.c:38:
+	{GEN_CMD_CODE(_SetStaPwrState), NULL},

CHECK: Avoid CamelCase: <_SetBasicRate>
#39: FILE: ./core/rtw_cmd.c:39:
+	{GEN_CMD_CODE(_SetBasicRate), NULL}, /*25*/

CHECK: Avoid CamelCase: <_GetBasicRate>
#40: FILE: ./core/rtw_cmd.c:40:
+	{GEN_CMD_CODE(_GetBasicRate), NULL},

CHECK: Avoid CamelCase: <_SetDataRate>
#41: FILE: ./core/rtw_cmd.c:41:
+	{GEN_CMD_CODE(_SetDataRate), NULL},

CHECK: Avoid CamelCase: <_GetDataRate>
#42: FILE: ./core/rtw_cmd.c:42:
+	{GEN_CMD_CODE(_GetDataRate), NULL},

CHECK: Avoid CamelCase: <_SetPhyInfo>
#43: FILE: ./core/rtw_cmd.c:43:
+	{GEN_CMD_CODE(_SetPhyInfo), NULL},

CHECK: Avoid CamelCase: <_GetPhyInfo>
#45: FILE: ./core/rtw_cmd.c:45:
+	{GEN_CMD_CODE(_GetPhyInfo), NULL}, /*30*/

CHECK: Avoid CamelCase: <_SetPhy>
#46: FILE: ./core/rtw_cmd.c:46:
+	{GEN_CMD_CODE(_SetPhy), NULL},

CHECK: Avoid CamelCase: <_GetPhy>
#47: FILE: ./core/rtw_cmd.c:47:
+	{GEN_CMD_CODE(_GetPhy), NULL},

CHECK: Avoid CamelCase: <_readRssi>
#48: FILE: ./core/rtw_cmd.c:48:
+	{GEN_CMD_CODE(_readRssi), NULL},

CHECK: Avoid CamelCase: <_readGain>
#49: FILE: ./core/rtw_cmd.c:49:
+	{GEN_CMD_CODE(_readGain), NULL},

CHECK: Avoid CamelCase: <_SetAtim>
#50: FILE: ./core/rtw_cmd.c:50:
+	{GEN_CMD_CODE(_SetAtim), NULL}, /*35*/

CHECK: Avoid CamelCase: <_SetPwrMode>
#51: FILE: ./core/rtw_cmd.c:51:
+	{GEN_CMD_CODE(_SetPwrMode), NULL},

CHECK: Avoid CamelCase: <_JoinbssRpt>
#52: FILE: ./core/rtw_cmd.c:52:
+	{GEN_CMD_CODE(_JoinbssRpt), NULL},

CHECK: Avoid CamelCase: <_SetRaTable>
#53: FILE: ./core/rtw_cmd.c:53:
+	{GEN_CMD_CODE(_SetRaTable), NULL},

CHECK: Avoid CamelCase: <_GetRaTable>
#54: FILE: ./core/rtw_cmd.c:54:
+	{GEN_CMD_CODE(_GetRaTable), NULL},

CHECK: Avoid CamelCase: <_GetCCXReport>
#56: FILE: ./core/rtw_cmd.c:56:
+	{GEN_CMD_CODE(_GetCCXReport), NULL}, /*40*/

CHECK: Avoid CamelCase: <_GetDTMReport>
#57: FILE: ./core/rtw_cmd.c:57:
+	{GEN_CMD_CODE(_GetDTMReport),	NULL},

CHECK: Avoid CamelCase: <_GetTXRateStatistics>
#58: FILE: ./core/rtw_cmd.c:58:
+	{GEN_CMD_CODE(_GetTXRateStatistics), NULL},

CHECK: Avoid CamelCase: <_SetUsbSuspend>
#59: FILE: ./core/rtw_cmd.c:59:
+	{GEN_CMD_CODE(_SetUsbSuspend), NULL},

CHECK: Avoid CamelCase: <_SetH2cLbk>
#60: FILE: ./core/rtw_cmd.c:60:
+	{GEN_CMD_CODE(_SetH2cLbk), NULL},

CHECK: Avoid CamelCase: <_AddBAReq>
#61: FILE: ./core/rtw_cmd.c:61:
+	{GEN_CMD_CODE(_AddBAReq), NULL}, /*45*/

CHECK: Avoid CamelCase: <_SetChannel>
#62: FILE: ./core/rtw_cmd.c:62:
+	{GEN_CMD_CODE(_SetChannel), NULL},		/*46*/

CHECK: Avoid CamelCase: <_SetTxPower>
#63: FILE: ./core/rtw_cmd.c:63:
+	{GEN_CMD_CODE(_SetTxPower), NULL},

CHECK: Avoid CamelCase: <_SwitchAntenna>
#64: FILE: ./core/rtw_cmd.c:64:
+	{GEN_CMD_CODE(_SwitchAntenna), NULL},

CHECK: Avoid CamelCase: <_SetCrystalCap>
#65: FILE: ./core/rtw_cmd.c:65:
+	{GEN_CMD_CODE(_SetCrystalCap), NULL},

CHECK: Avoid CamelCase: <_SetSingleCarrierTx>
#66: FILE: ./core/rtw_cmd.c:66:
+	{GEN_CMD_CODE(_SetSingleCarrierTx), NULL},	/*50*/

CHECK: Avoid CamelCase: <_SetSingleToneTx>
#68: FILE: ./core/rtw_cmd.c:68:
+	{GEN_CMD_CODE(_SetSingleToneTx), NULL}, /*51*/

CHECK: Avoid CamelCase: <_SetCarrierSuppressionTx>
#69: FILE: ./core/rtw_cmd.c:69:
+	{GEN_CMD_CODE(_SetCarrierSuppressionTx), NULL},

CHECK: Avoid CamelCase: <_SetContinuousTx>
#70: FILE: ./core/rtw_cmd.c:70:
+	{GEN_CMD_CODE(_SetContinuousTx), NULL},

CHECK: Avoid CamelCase: <_SwitchBandwidth>
#71: FILE: ./core/rtw_cmd.c:71:
+	{GEN_CMD_CODE(_SwitchBandwidth), NULL},		/*54*/

CHECK: Avoid CamelCase: <_TX_Beacon>
#72: FILE: ./core/rtw_cmd.c:72:
+	{GEN_CMD_CODE(_TX_Beacon), NULL},/*55*/

CHECK: Avoid CamelCase: <_Set_MLME_EVT>
#74: FILE: ./core/rtw_cmd.c:74:
+	{GEN_CMD_CODE(_Set_MLME_EVT), NULL},/*56*/

CHECK: Avoid CamelCase: <_Set_Drv_Extra>
#75: FILE: ./core/rtw_cmd.c:75:
+	{GEN_CMD_CODE(_Set_Drv_Extra), NULL},/*57*/

CHECK: Avoid CamelCase: <_Set_H2C_MSG>
#76: FILE: ./core/rtw_cmd.c:76:
+	{GEN_CMD_CODE(_Set_H2C_MSG), NULL},/*58*/

CHECK: Avoid CamelCase: <_SetChannelPlan>
#77: FILE: ./core/rtw_cmd.c:77:
+	{GEN_CMD_CODE(_SetChannelPlan), NULL},/*59*/

CHECK: Avoid CamelCase: <_SetChannelSwitch>
#79: FILE: ./core/rtw_cmd.c:79:
+	{GEN_CMD_CODE(_SetChannelSwitch), NULL},/*60*/

CHECK: Avoid CamelCase: <_ChkBMCSleepq>
#81: FILE: ./core/rtw_cmd.c:81:
+	{GEN_CMD_CODE(_ChkBMCSleepq), NULL}, /*62*/

CHECK: Avoid CamelCase: <_RunInThreadCMD>
#83: FILE: ./core/rtw_cmd.c:83:
+	{GEN_CMD_CODE(_RunInThreadCMD), NULL},/*63*/

CHECK: Avoid CamelCase: <addBaReq_parm>
#132: FILE: ./core/rtw_cmd.c:132:
+	GEN_MLME_EXT_HANDLER(sizeof(struct addBaReq_parm), add_ba_hdl)

CHECK: Avoid CamelCase: <Tx_Beacon_param>
#142: FILE: ./core/rtw_cmd.c:142:
+	GEN_MLME_EXT_HANDLER(sizeof(struct Tx_Beacon_param), tx_beacon_hdl) /*55*/

CHECK: Avoid CamelCase: <SetChannelPlan_param>
#148: FILE: ./core/rtw_cmd.c:148:
+	GEN_MLME_EXT_HANDLER(sizeof(struct SetChannelPlan_param), set_chplan_hdl) /*59*/

CHECK: Avoid CamelCase: <SetChannelSwitch_param>
#150: FILE: ./core/rtw_cmd.c:150:
+	GEN_MLME_EXT_HANDLER(sizeof(struct SetChannelSwitch_param), set_csa_hdl) /*60*/

CHECK: Avoid CamelCase: <TDLSoption_param>
#151: FILE: ./core/rtw_cmd.c:151:
+	GEN_MLME_EXT_HANDLER(sizeof(struct TDLSoption_param), tdls_hdl) /*61*/

CHECK: Avoid CamelCase: <RunInThread_param>
#153: FILE: ./core/rtw_cmd.c:153:
+	GEN_MLME_EXT_HANDLER(sizeof(struct RunInThread_param), run_in_thread_hdl) /*63*/

CHECK: line length of 144 exceeds 100 columns
#178: FILE: ./core/rtw_cmd.c:178:
+	pcmdpriv->cmd_buf = pcmdpriv->cmd_allocated_buf  +  CMDBUFF_ALIGN_SZ - ((SIZE_PTR)(pcmdpriv->cmd_allocated_buf) & (CMDBUFF_ALIGN_SZ-1));

CHECK: spaces preferred around that '-' (ctx:VxV)
#178: FILE: ./core/rtw_cmd.c:178:
+	pcmdpriv->cmd_buf = pcmdpriv->cmd_allocated_buf  +  CMDBUFF_ALIGN_SZ - ((SIZE_PTR)(pcmdpriv->cmd_allocated_buf) & (CMDBUFF_ALIGN_SZ-1));
 	                                                                                                                                   ^

CHECK: line length of 110 exceeds 100 columns
#187: FILE: ./core/rtw_cmd.c:187:
+	pcmdpriv->rsp_buf = pcmdpriv->rsp_allocated_buf  +  4 - ((SIZE_PTR)(pcmdpriv->rsp_allocated_buf) & 3);

CHECK: spaces preferred around that '+' (ctx:VxV)
#207: FILE: ./core/rtw_cmd.c:207:
+	pevtpriv->c2h_queue = rtw_cbuf_alloc(C2H_QUEUE_MAX_LEN+1);
 	                                                      ^

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#218: FILE: ./core/rtw_cmd.c:218:
+		msleep(10);

CHECK: Avoid CamelCase: <bAllow>
#302: FILE: ./core/rtw_cmd.c:302:
+	u8 bAllow = false; /* set to true to allow enqueuing cmd when hw_init_completed is false */

CHECK: Alignment should match open parenthesis
#308: FILE: ./core/rtw_cmd.c:308:
+	if ((!pcmdpriv->padapter->hw_init_completed && !bAllow) ||
+		!atomic_read(&pcmdpriv->cmdthd_running))	/* com_thread not running */

CHECK: Unnecessary parentheses around 'pcmd->cmdcode != _JoinBss_CMD_'
#346: FILE: ./core/rtw_cmd.c:346:
+	if ((pcmd->cmdcode != _JoinBss_CMD_) &&
+	    (pcmd->cmdcode != _CreateBss_CMD_)) {

CHECK: Unnecessary parentheses around 'pcmd->cmdcode != _CreateBss_CMD_'
#346: FILE: ./core/rtw_cmd.c:346:
+	if ((pcmd->cmdcode != _JoinBss_CMD_) &&
+	    (pcmd->cmdcode != _CreateBss_CMD_)) {

CHECK: Avoid CamelCase: <_JoinBss_CMD_>
#346: FILE: ./core/rtw_cmd.c:346:
+	if ((pcmd->cmdcode != _JoinBss_CMD_) &&

CHECK: Avoid CamelCase: <_CreateBss_CMD_>
#347: FILE: ./core/rtw_cmd.c:347:
+	    (pcmd->cmdcode != _CreateBss_CMD_)) {

CHECK: Avoid CamelCase: <cmdThread>
#365: FILE: ./core/rtw_cmd.c:365:
+	if (adapter->cmdThread &&

CHECK: Alignment should match open parenthesis
#366: FILE: ./core/rtw_cmd.c:366:
+	if (adapter->cmdThread &&
+		atomic_read(&adapter->cmdpriv.cmdthd_running) &&

CHECK: line length of 134 exceeds 100 columns
#396: FILE: ./core/rtw_cmd.c:396:
+				   FUNC_ADPT_FMT " wait_for_completion_interruptible(&pcmdpriv->cmd_queue_comp) return != 0, break\n",

CHECK: Avoid CamelCase: <bDriverStopped>
#401: FILE: ./core/rtw_cmd.c:401:
+		if (padapter->bDriverStopped || padapter->bSurpriseRemoved) {

CHECK: line length of 125 exceeds 100 columns
#487: FILE: ./core/rtw_cmd.c:487:
+				pcmd_callback(pcmd->padapter, pcmd);/* need consider that free cmd_obj in rtw_cmd_callback */

CHECK: Alignment should match open parenthesis
#526: FILE: ./core/rtw_cmd.c:526:
+u8 rtw_sitesurvey_cmd(struct adapter  *padapter, struct ndis_802_11_ssid *ssid, int ssid_num,
+	struct rtw_ieee80211_channel *ch, int ch_num)

CHECK: Avoid CamelCase: <psurveyPara>
#530: FILE: ./core/rtw_cmd.c:530:
+	struct sitesurvey_parm *psurveyPara;

CHECK: line length of 105 exceeds 100 columns
#560: FILE: ./core/rtw_cmd.c:560:
+				memcpy(&psurveyPara->ssid[i], &ssid[i], sizeof(struct ndis_802_11_ssid));

CHECK: line length of 106 exceeds 100 columns
#572: FILE: ./core/rtw_cmd.c:572:
+				memcpy(&psurveyPara->ch[i], &ch[i], sizeof(struct rtw_ieee80211_channel));

CHECK: line length of 106 exceeds 100 columns
#684: FILE: ./core/rtw_cmd.c:684:
+	enum ndis_802_11_network_infrastructure ndis_network_mode = pnetwork->network.infrastructure_mode;

CHECK: Please don't use multiple blank lines
#698: FILE: ./core/rtw_cmd.c:698:
+
+

CHECK: spaces preferred around that '|' (ctx:VxV)
#700: FILE: ./core/rtw_cmd.c:700:
+	if (check_fwstate(pmlmepriv, WIFI_STATION_STATE|WIFI_ADHOC_STATE) != true) {
 	                                               ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#725: FILE: ./core/rtw_cmd.c:725:
+	if ((psecnetwork->ie_length-12) < (256-1))
 	                           ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#725: FILE: ./core/rtw_cmd.c:725:
+	if ((psecnetwork->ie_length-12) < (256-1))
 	                                      ^

CHECK: line length of 110 exceeds 100 columns
#726: FILE: ./core/rtw_cmd.c:726:
+		memcpy(&psecuritypriv->authenticator_ie[1], &psecnetwork->ies[12], psecnetwork->ie_length-12);

CHECK: spaces preferred around that '-' (ctx:VxV)
#726: FILE: ./core/rtw_cmd.c:726:
+		memcpy(&psecuritypriv->authenticator_ie[1], &psecnetwork->ies[12], psecnetwork->ie_length-12);
 		                                                                                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#728: FILE: ./core/rtw_cmd.c:728:
+		memcpy(&psecuritypriv->authenticator_ie[1], &psecnetwork->ies[12], (256-1));
 		                                                                       ^

CHECK: line length of 141 exceeds 100 columns
#739: FILE: ./core/rtw_cmd.c:739:
+	psecnetwork->ie_length = rtw_restruct_sec_ie(padapter, &pnetwork->network.ies[0], &psecnetwork->ies[0], pnetwork->network.ie_length);

CHECK: Please don't use multiple blank lines
#741: FILE: ./core/rtw_cmd.c:741:
+
+

CHECK: line length of 158 exceeds 100 columns
#745: FILE: ./core/rtw_cmd.c:745:
+		tmp_len = rtw_restruct_wmm_ie(padapter, &pnetwork->network.ies[0], &psecnetwork->ies[0], pnetwork->network.ie_length, psecnetwork->ie_length);

CHECK: line length of 120 exceeds 100 columns
#756: FILE: ./core/rtw_cmd.c:756:
+	ptmp = rtw_get_ie(&pnetwork->network.ies[12], WLAN_EID_HT_CAPABILITY, &tmp_len, pnetwork->network.ie_length-12);

CHECK: spaces preferred around that '-' (ctx:VxV)
#756: FILE: ./core/rtw_cmd.c:756:
+	ptmp = rtw_get_ie(&pnetwork->network.ies[12], WLAN_EID_HT_CAPABILITY, &tmp_len, pnetwork->network.ie_length-12);
 	                                                                                                           ^

CHECK: line length of 109 exceeds 100 columns
#759: FILE: ./core/rtw_cmd.c:759:
+		/* For the WEP mode, we will use the bg mode to do the connection to avoid some IOT issue. */

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm != _WEP40_'
#761: FILE: ./core/rtw_cmd.c:761:
+		if ((padapter->securitypriv.dot11PrivacyAlgrthm != _WEP40_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _WEP104_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _TKIP_)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm != _WEP104_'
#761: FILE: ./core/rtw_cmd.c:761:
+		if ((padapter->securitypriv.dot11PrivacyAlgrthm != _WEP40_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _WEP104_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _TKIP_)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm != _TKIP_'
#761: FILE: ./core/rtw_cmd.c:761:
+		if ((padapter->securitypriv.dot11PrivacyAlgrthm != _WEP40_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _WEP104_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _TKIP_)) {

CHECK: Alignment should match open parenthesis
#762: FILE: ./core/rtw_cmd.c:762:
+		if ((padapter->securitypriv.dot11PrivacyAlgrthm != _WEP40_) &&
+			(padapter->securitypriv.dot11PrivacyAlgrthm != _WEP104_) &&

CHECK: line length of 102 exceeds 100 columns
#766: FILE: ./core/rtw_cmd.c:766:
+			rtw_build_wmm_ie_ht(padapter, &psecnetwork->ies[12], &psecnetwork->ie_length);

CHECK: line length of 105 exceeds 100 columns
#769: FILE: ./core/rtw_cmd.c:769:
+			rtw_restructure_ht_ie(padapter, &pnetwork->network.ies[12], &psecnetwork->ies[0],

CHECK: line length of 128 exceeds 100 columns
#770: FILE: ./core/rtw_cmd.c:770:
+									pnetwork->network.ie_length-12, &psecnetwork->ie_length,

CHECK: Alignment should match open parenthesis
#770: FILE: ./core/rtw_cmd.c:770:
+			rtw_restructure_ht_ie(padapter, &pnetwork->network.ies[12], &psecnetwork->ies[0],
+									pnetwork->network.ie_length-12, &psecnetwork->ie_length,

CHECK: spaces preferred around that '-' (ctx:VxV)
#770: FILE: ./core/rtw_cmd.c:770:
+									pnetwork->network.ie_length-12, &psecnetwork->ie_length,
 									                           ^

CHECK: line length of 115 exceeds 100 columns
#771: FILE: ./core/rtw_cmd.c:771:
+									pnetwork->network.configuration.ds_config);

CHECK: line length of 104 exceeds 100 columns
#777: FILE: ./core/rtw_cmd.c:777:
+	pmlmeinfo->assoc_AP_vendor = check_assoc_AP(pnetwork->network.ies, pnetwork->network.ie_length);

CHECK: line length of 101 exceeds 100 columns
#793: FILE: ./core/rtw_cmd.c:793:
+u8 rtw_disassoc_cmd(struct adapter *padapter, u32 deauth_timeout_ms, bool enqueue) /* for sta_mode */

CHECK: Avoid CamelCase: <_DisConnect_CMD_>
#816: FILE: ./core/rtw_cmd.c:816:
+		init_h2fwcmd_w_parm_no_rsp(cmdobj, param, _DisConnect_CMD_);

CHECK: line length of 114 exceeds 100 columns
#829: FILE: ./core/rtw_cmd.c:829:
+u8 rtw_setopmode_cmd(struct adapter  *padapter, enum ndis_802_11_network_infrastructure networktype, bool enqueue)

CHECK: Avoid CamelCase: <_SetOpMode_CMD_>
#853: FILE: ./core/rtw_cmd.c:853:
+		init_h2fwcmd_w_parm_no_rsp(ph2c, psetop, _SetOpMode_CMD_);

CHECK: line length of 124 exceeds 100 columns
#889: FILE: ./core/rtw_cmd.c:889:
+		memcpy(&psetstakey_para->key, &psecuritypriv->dot118021XGrpKey[psecuritypriv->dot118021XGrpKeyid].skey, 16);

CHECK: Avoid CamelCase: <dot118021XGrpKey>
#889: FILE: ./core/rtw_cmd.c:889:
+		memcpy(&psetstakey_para->key, &psecuritypriv->dot118021XGrpKey[psecuritypriv->dot118021XGrpKeyid].skey, 16);

CHECK: Please use a blank line after function/struct/union/enum declarations
#1007: FILE: ./core/rtw_cmd.c:1007:
+}
+/* add for CONFIG_IEEE80211W, none 11w can use it */

CHECK: Please don't use multiple blank lines
#1035: FILE: ./core/rtw_cmd.c:1035:
+
+

CHECK: Please don't use multiple blank lines
#1102: FILE: ./core/rtw_cmd.c:1102:
+
+

CHECK: line length of 123 exceeds 100 columns
#1124: FILE: ./core/rtw_cmd.c:1124:
+	pdvobjpriv->traffic_stat.cur_tx_bytes = pdvobjpriv->traffic_stat.tx_bytes - pdvobjpriv->traffic_stat.last_tx_bytes;

CHECK: line length of 123 exceeds 100 columns
#1125: FILE: ./core/rtw_cmd.c:1125:
+	pdvobjpriv->traffic_stat.cur_rx_bytes = pdvobjpriv->traffic_stat.rx_bytes - pdvobjpriv->traffic_stat.last_rx_bytes;

CHECK: line length of 106 exceeds 100 columns
#1129: FILE: ./core/rtw_cmd.c:1129:
+	pdvobjpriv->traffic_stat.cur_tx_tp = (u32)(pdvobjpriv->traffic_stat.cur_tx_bytes * 8/2/1024/1024);

CHECK: spaces preferred around that '/' (ctx:VxV)
#1129: FILE: ./core/rtw_cmd.c:1129:
+	pdvobjpriv->traffic_stat.cur_tx_tp = (u32)(pdvobjpriv->traffic_stat.cur_tx_bytes * 8/2/1024/1024);
 	                                                                                    ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1129: FILE: ./core/rtw_cmd.c:1129:
+	pdvobjpriv->traffic_stat.cur_tx_tp = (u32)(pdvobjpriv->traffic_stat.cur_tx_bytes * 8/2/1024/1024);
 	                                                                                      ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1129: FILE: ./core/rtw_cmd.c:1129:
+	pdvobjpriv->traffic_stat.cur_tx_tp = (u32)(pdvobjpriv->traffic_stat.cur_tx_bytes * 8/2/1024/1024);
 	                                                                                           ^

CHECK: line length of 106 exceeds 100 columns
#1130: FILE: ./core/rtw_cmd.c:1130:
+	pdvobjpriv->traffic_stat.cur_rx_tp = (u32)(pdvobjpriv->traffic_stat.cur_rx_bytes * 8/2/1024/1024);

CHECK: spaces preferred around that '/' (ctx:VxV)
#1130: FILE: ./core/rtw_cmd.c:1130:
+	pdvobjpriv->traffic_stat.cur_rx_tp = (u32)(pdvobjpriv->traffic_stat.cur_rx_bytes * 8/2/1024/1024);
 	                                                                                    ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1130: FILE: ./core/rtw_cmd.c:1130:
+	pdvobjpriv->traffic_stat.cur_rx_tp = (u32)(pdvobjpriv->traffic_stat.cur_rx_bytes * 8/2/1024/1024);
 	                                                                                      ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1130: FILE: ./core/rtw_cmd.c:1130:
+	pdvobjpriv->traffic_stat.cur_rx_tp = (u32)(pdvobjpriv->traffic_stat.cur_rx_bytes * 8/2/1024/1024);
 	                                                                                           ^

CHECK: Avoid CamelCase: <bEnterPS>
#1135: FILE: ./core/rtw_cmd.c:1135:
+	u8 bEnterPS = false;

CHECK: Avoid CamelCase: <BusyThresholdHigh>
#1136: FILE: ./core/rtw_cmd.c:1136:
+	u16 BusyThresholdHigh = 25;

CHECK: Avoid CamelCase: <BusyThresholdLow>
#1137: FILE: ./core/rtw_cmd.c:1137:
+	u16 BusyThresholdLow = 10;

CHECK: Avoid CamelCase: <BusyThreshold>
#1138: FILE: ./core/rtw_cmd.c:1138:
+	u16 BusyThreshold = BusyThresholdHigh;

CHECK: Avoid CamelCase: <bBusyTraffic>
#1139: FILE: ./core/rtw_cmd.c:1139:
+	u8 bBusyTraffic = false, bTxBusyTraffic = false, bRxBusyTraffic = false;

CHECK: Avoid CamelCase: <bTxBusyTraffic>
#1139: FILE: ./core/rtw_cmd.c:1139:
+	u8 bBusyTraffic = false, bTxBusyTraffic = false, bRxBusyTraffic = false;

CHECK: Avoid CamelCase: <bRxBusyTraffic>
#1139: FILE: ./core/rtw_cmd.c:1139:
+	u8 bBusyTraffic = false, bTxBusyTraffic = false, bRxBusyTraffic = false;

CHECK: Avoid CamelCase: <bHigherBusyTraffic>
#1140: FILE: ./core/rtw_cmd.c:1140:
+	u8 bHigherBusyTraffic = false, bHigherBusyRxTraffic = false, bHigherBusyTxTraffic = false;

CHECK: Avoid CamelCase: <bHigherBusyRxTraffic>
#1140: FILE: ./core/rtw_cmd.c:1140:
+	u8 bHigherBusyTraffic = false, bHigherBusyRxTraffic = false, bHigherBusyTxTraffic = false;

CHECK: Avoid CamelCase: <bHigherBusyTxTraffic>
#1140: FILE: ./core/rtw_cmd.c:1140:
+	u8 bHigherBusyTraffic = false, bHigherBusyRxTraffic = false, bHigherBusyTxTraffic = false;

CHECK: Avoid CamelCase: <LinkDetectInfo>
#1151: FILE: ./core/rtw_cmd.c:1151:
+		if (pmlmepriv->LinkDetectInfo.bBusyTraffic)

CHECK: Avoid CamelCase: <NumRxOkInPeriod>
#1154: FILE: ./core/rtw_cmd.c:1154:
+		if (pmlmepriv->LinkDetectInfo.NumRxOkInPeriod > BusyThreshold ||

CHECK: Alignment should match open parenthesis
#1155: FILE: ./core/rtw_cmd.c:1155:
+		if (pmlmepriv->LinkDetectInfo.NumRxOkInPeriod > BusyThreshold ||
+			pmlmepriv->LinkDetectInfo.NumTxOkInPeriod > BusyThreshold) {

CHECK: Avoid CamelCase: <NumTxOkInPeriod>
#1155: FILE: ./core/rtw_cmd.c:1155:
+			pmlmepriv->LinkDetectInfo.NumTxOkInPeriod > BusyThreshold) {

CHECK: line length of 114 exceeds 100 columns
#1158: FILE: ./core/rtw_cmd.c:1158:
+			if (pmlmepriv->LinkDetectInfo.NumRxOkInPeriod > pmlmepriv->LinkDetectInfo.NumTxOkInPeriod)

CHECK: Alignment should match open parenthesis
#1166: FILE: ./core/rtw_cmd.c:1166:
+		if (pmlmepriv->LinkDetectInfo.NumRxOkInPeriod > 4000 ||
+			pmlmepriv->LinkDetectInfo.NumTxOkInPeriod > 4000) {

CHECK: line length of 114 exceeds 100 columns
#1169: FILE: ./core/rtw_cmd.c:1169:
+			if (pmlmepriv->LinkDetectInfo.NumRxOkInPeriod > pmlmepriv->LinkDetectInfo.NumTxOkInPeriod)

CHECK: line length of 123 exceeds 100 columns
#1176: FILE: ./core/rtw_cmd.c:1176:
+		if (((pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod + pmlmepriv->LinkDetectInfo.NumTxOkInPeriod) > 8) ||

CHECK: Unnecessary parentheses around 'pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod > 2'
#1176: FILE: ./core/rtw_cmd.c:1176:
+		if (((pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod + pmlmepriv->LinkDetectInfo.NumTxOkInPeriod) > 8) ||
+			(pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod > 2)) {

CHECK: Avoid CamelCase: <NumRxUnicastOkInPeriod>
#1176: FILE: ./core/rtw_cmd.c:1176:
+		if (((pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod + pmlmepriv->LinkDetectInfo.NumTxOkInPeriod) > 8) ||

CHECK: Alignment should match open parenthesis
#1177: FILE: ./core/rtw_cmd.c:1177:
+		if (((pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod + pmlmepriv->LinkDetectInfo.NumTxOkInPeriod) > 8) ||
+			(pmlmepriv->LinkDetectInfo.NumRxUnicastOkInPeriod > 2)) {

CHECK: Avoid CamelCase: <TrafficTransitionCount>
#1181: FILE: ./core/rtw_cmd.c:1181:
+				if (pmlmepriv->LinkDetectInfo.TrafficTransitionCount <= 4)

CHECK: line length of 116 exceeds 100 columns
#1186: FILE: ./core/rtw_cmd.c:1186:
+				if (pmlmepriv->LinkDetectInfo.TrafficTransitionCount > 30/*TrafficTransitionLevel*/)

CHECK: Blank lines aren't necessary before a close brace '}'
#1232: FILE: ./core/rtw_cmd.c:1232:
+
+}

CHECK: Avoid CamelCase: <hal_btcoex_Handler>
#1257: FILE: ./core/rtw_cmd.c:1257:
+	hal_btcoex_Handler(padapter);

CHECK: Please don't use multiple blank lines
#1259: FILE: ./core/rtw_cmd.c:1259:
+
+

CHECK: Alignment should match open parenthesis
#1272: FILE: ./core/rtw_cmd.c:1272:
+	if (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) ||
+		check_fwstate(pmlmepriv, WIFI_ADHOC_STATE)) {

CHECK: Avoid CamelCase: <hal_btcoex_ScanNotify>
#1278: FILE: ./core/rtw_cmd.c:1278:
+		hal_btcoex_ScanNotify(padapter, true);

CHECK: Avoid CamelCase: <LpsIdleCount>
#1291: FILE: ./core/rtw_cmd.c:1291:
+		pwrpriv->LpsIdleCount = 0;

CHECK: Avoid CamelCase: <DelayLPSLastTimeStamp>
#1302: FILE: ./core/rtw_cmd.c:1302:
+		pwrpriv->DelayLPSLastTimeStamp = jiffies;

CHECK: Avoid CamelCase: <hal_btcoex_SpecialPacketNotify>
#1303: FILE: ./core/rtw_cmd.c:1303:
+		hal_btcoex_SpecialPacketNotify(padapter, PACKET_DHCP);

WARNING: please, no space before tabs
#1326: FILE: ./core/rtw_cmd.c:1326:
+^I/* ^Ireturn res; */$

CHECK: Please don't use multiple blank lines
#1370: FILE: ./core/rtw_cmd.c:1370:
+
+

CHECK: Avoid CamelCase: <hal_btcoex_IsBtControlLps>
#1404: FILE: ./core/rtw_cmd.c:1404:
+	if (hal_btcoex_IsBtControlLps(padapter))

CHECK: Unnecessary parentheses around 'pwrpriv->pwr_mode > PS_MODE_ACTIVE'
#1411: FILE: ./core/rtw_cmd.c:1411:
+	if (pwrpriv->fw_current_in_ps_mode && (pwrpriv->pwr_mode > PS_MODE_ACTIVE)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#1459: FILE: ./core/rtw_cmd.c:1459:
+
+}

CHECK: Blank lines aren't necessary before a close brace '}'
#1529: FILE: ./core/rtw_cmd.c:1529:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1531: FILE: ./core/rtw_cmd.c:1531:
+
+}

CHECK: Avoid CamelCase: <bConnection>
#1570: FILE: ./core/rtw_cmd.c:1570:
+	u8 bConnection:1;

CHECK: Avoid CamelCase: <bSCOeSCO>
#1571: FILE: ./core/rtw_cmd.c:1571:
+	u8 bSCOeSCO:1;

CHECK: Avoid CamelCase: <bInQPage>
#1572: FILE: ./core/rtw_cmd.c:1572:
+	u8 bInQPage:1;

CHECK: Avoid CamelCase: <bACLBusy>
#1573: FILE: ./core/rtw_cmd.c:1573:
+	u8 bACLBusy:1;

CHECK: Avoid CamelCase: <bSCOBusy>
#1574: FILE: ./core/rtw_cmd.c:1574:
+	u8 bSCOBusy:1;

CHECK: Avoid CamelCase: <bHID>
#1575: FILE: ./core/rtw_cmd.c:1575:
+	u8 bHID:1;

CHECK: Avoid CamelCase: <bA2DP>
#1576: FILE: ./core/rtw_cmd.c:1576:
+	u8 bA2DP:1;

CHECK: Avoid CamelCase: <bFTP>
#1577: FILE: ./core/rtw_cmd.c:1577:
+	u8 bFTP:1;

CHECK: Avoid CamelCase: <eSCO_SCO>
#1593: FILE: ./core/rtw_cmd.c:1593:
+	u8 eSCO_SCO:1;

CHECK: Avoid CamelCase: <Master_Slave>
#1594: FILE: ./core/rtw_cmd.c:1594:
+	u8 Master_Slave:1;

CHECK: spaces preferred around that '-' (ctx:VxV)
#1610: FILE: ./core/rtw_cmd.c:1610:
+	if (info->len > buf_len-2) {
 	                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1612: FILE: ./core/rtw_cmd.c:1612:
+		len = buf_len-2;
 		             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1622: FILE: ./core/rtw_cmd.c:1622:
+	hal_btcoex_BtInfoNotify(adapter, len+1, &buf[1]);
 	                                    ^

CHECK: Avoid CamelCase: <hal_btcoex_BtInfoNotify>
#1622: FILE: ./core/rtw_cmd.c:1622:
+	hal_btcoex_BtInfoNotify(adapter, len+1, &buf[1]);

CHECK: spaces required around that '?' (ctx:VxV)
#1682: FILE: ./core/rtw_cmd.c:1682:
+	pdrvextra_cmd_parm->size =  c2h_evt?16:0;
 	                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1682: FILE: ./core/rtw_cmd.c:1682:
+	pdrvextra_cmd_parm->size =  c2h_evt?16:0;
 	                                      ^

CHECK: line length of 128 exceeds 100 columns
#1751: FILE: ./core/rtw_cmd.c:1751:
+	case DYNAMIC_CHK_WK_CID:/* only  primary padapter go to this cmd, but execute dynamic_chk_wk_hdl() for two interfaces */

CHECK: line length of 114 exceeds 100 columns
#1777: FILE: ./core/rtw_cmd.c:1777:
+		rtw_hal_set_hwreg_with_buf(padapter, HW_VAR_C2H_HANDLE, pdrvextra_cmd->pbuf, pdrvextra_cmd->size);

CHECK: Please don't use multiple blank lines
#1853: FILE: ./core/rtw_cmd.c:1853:
+
+

CHECK: line length of 112 exceeds 100 columns
#1889: FILE: ./core/rtw_cmd.c:1889:
+		/*  we will set _FW_LINKED when there is one more sat to join us (rtw_stassoc_event_callback) */

CHECK: Blank lines aren't necessary before a close brace '}'
#1891: FILE: ./core/rtw_cmd.c:1891:
+
+	}

total: 0 errors, 2 warnings, 191 checks, 1937 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_cmd.c has style problems, please review.
----------------
./core/rtw_cmd.o
----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_cmd.o has style problems, please review.
------------------
./core/rtw_efuse.c
------------------
CHECK: Please don't use multiple blank lines
#11: FILE: ./core/rtw_efuse.c:11:
+
+

CHECK: Avoid CamelCase: <fakeEfuseBank>
#13: FILE: ./core/rtw_efuse.c:13:
+u8 fakeEfuseBank;

CHECK: Avoid CamelCase: <fakeEfuseUsedBytes>
#14: FILE: ./core/rtw_efuse.c:14:
+u32 fakeEfuseUsedBytes;

CHECK: Avoid CamelCase: <fakeEfuseContent>
#15: FILE: ./core/rtw_efuse.c:15:
+u8 fakeEfuseContent[EFUSE_MAX_HW_SIZE] = {0};

CHECK: Avoid CamelCase: <fakeEfuseInitMap>
#16: FILE: ./core/rtw_efuse.c:16:
+u8 fakeEfuseInitMap[EFUSE_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <fakeEfuseModifiedMap>
#17: FILE: ./core/rtw_efuse.c:17:
+u8 fakeEfuseModifiedMap[EFUSE_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <BTEfuseUsedBytes>
#19: FILE: ./core/rtw_efuse.c:19:
+u32 BTEfuseUsedBytes;

CHECK: Avoid CamelCase: <BTEfuseContent>
#20: FILE: ./core/rtw_efuse.c:20:
+u8 BTEfuseContent[EFUSE_MAX_BT_BANK][EFUSE_MAX_HW_SIZE];

CHECK: Avoid CamelCase: <BTEfuseInitMap>
#21: FILE: ./core/rtw_efuse.c:21:
+u8 BTEfuseInitMap[EFUSE_BT_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <BTEfuseModifiedMap>
#22: FILE: ./core/rtw_efuse.c:22:
+u8 BTEfuseModifiedMap[EFUSE_BT_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <fakeBTEfuseUsedBytes>
#24: FILE: ./core/rtw_efuse.c:24:
+u32 fakeBTEfuseUsedBytes;

CHECK: Avoid CamelCase: <fakeBTEfuseContent>
#25: FILE: ./core/rtw_efuse.c:25:
+u8 fakeBTEfuseContent[EFUSE_MAX_BT_BANK][EFUSE_MAX_HW_SIZE];

CHECK: Avoid CamelCase: <fakeBTEfuseInitMap>
#26: FILE: ./core/rtw_efuse.c:26:
+u8 fakeBTEfuseInitMap[EFUSE_BT_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <fakeBTEfuseModifiedMap>
#27: FILE: ./core/rtw_efuse.c:27:
+u8 fakeBTEfuseModifiedMap[EFUSE_BT_MAX_MAP_LEN] = {0};

CHECK: Avoid CamelCase: <Efuse_Read1ByteFromFakeContent>
#33: FILE: ./core/rtw_efuse.c:33:
+Efuse_Read1ByteFromFakeContent(u16 Offset, u8 *Value)

CHECK: Avoid CamelCase: <Offset>
#33: FILE: ./core/rtw_efuse.c:33:
+Efuse_Read1ByteFromFakeContent(u16 Offset, u8 *Value)

CHECK: Avoid CamelCase: <Value>
#33: FILE: ./core/rtw_efuse.c:33:
+Efuse_Read1ByteFromFakeContent(u16 Offset, u8 *Value)

CHECK: Avoid CamelCase: <Efuse_Write1ByteToFakeContent>
#45: FILE: ./core/rtw_efuse.c:45:
+Efuse_Write1ByteToFakeContent(u16 Offset, u8 Value)

WARNING: Block comments use a trailing */ on a separate line
#73: FILE: ./core/rtw_efuse.c:73:
+ *---------------------------------------------------------------------------*/

CHECK: Lines should not end with a '('
#75: FILE: ./core/rtw_efuse.c:75:
+Efuse_PowerSwitch(

CHECK: Avoid CamelCase: <Efuse_PowerSwitch>
#75: FILE: ./core/rtw_efuse.c:75:
+Efuse_PowerSwitch(

CHECK: Avoid CamelCase: <bWrite>
#77: FILE: ./core/rtw_efuse.c:77:
+u8 bWrite,

CHECK: Avoid CamelCase: <PwrState>
#78: FILE: ./core/rtw_efuse.c:78:
+u8 PwrState)

CHECK: Avoid CamelCase: <Hal_EfusePowerSwitch>
#80: FILE: ./core/rtw_efuse.c:80:
+	Hal_EfusePowerSwitch(padapter, bWrite, PwrState);

CHECK: Avoid CamelCase: <Efuse_CalculateWordCnts>
#85: FILE: ./core/rtw_efuse.c:85:
+Efuse_CalculateWordCnts(u8 word_en)

WARNING: Missing a blank line after declarations
#88: FILE: ./core/rtw_efuse.c:88:
+	u8 word_cnts = 0;
+	if (!(word_en & BIT(0)))

CHECK: Lines should not end with a '('
#118: FILE: ./core/rtw_efuse.c:118:
+efuse_ReadEFuse(

CHECK: Avoid CamelCase: <efuse_ReadEFuse>
#118: FILE: ./core/rtw_efuse.c:118:
+efuse_ReadEFuse(

CHECK: Avoid CamelCase: <Adapter>
#119: FILE: ./core/rtw_efuse.c:119:
+	struct adapter *Adapter,

CHECK: Avoid CamelCase: <efuseType>
#120: FILE: ./core/rtw_efuse.c:120:
+	u8 efuseType,

CHECK: Avoid CamelCase: <bPseudoTest>
#124: FILE: ./core/rtw_efuse.c:124:
+bool	bPseudoTest

CHECK: Lines should not end with a '('
#127: FILE: ./core/rtw_efuse.c:127:
+efuse_ReadEFuse(

CHECK: Avoid CamelCase: <Hal_ReadEFuse>
#136: FILE: ./core/rtw_efuse.c:136:
+	Hal_ReadEFuse(Adapter, efuseType, _offset, _size_byte, pbuf, bPseudoTest);

CHECK: Lines should not end with a '('
#140: FILE: ./core/rtw_efuse.c:140:
+EFUSE_GetEfuseDefinition(

CHECK: Avoid CamelCase: <pOut>
#144: FILE: ./core/rtw_efuse.c:144:
+	void	*pOut,

CHECK: Avoid CamelCase: <Hal_GetEfuseDefinition>
#148: FILE: ./core/rtw_efuse.c:148:
+	Hal_GetEfuseDefinition(padapter, efuseType, type, pOut, bPseudoTest);

WARNING: Block comments use a trailing */ on a separate line
#166: FILE: ./core/rtw_efuse.c:166:
+ *---------------------------------------------------------------------------*/

CHECK: Lines should not end with a '('
#168: FILE: ./core/rtw_efuse.c:168:
+EFUSE_Read1Byte(

CHECK: Avoid CamelCase: <Address>
#170: FILE: ./core/rtw_efuse.c:170:
+u16		Address)

CHECK: Avoid CamelCase: <Bytetemp>
#172: FILE: ./core/rtw_efuse.c:172:
+	u8 Bytetemp = {0x00};

CHECK: Avoid CamelCase: <contentLen>
#175: FILE: ./core/rtw_efuse.c:175:
+	u16 contentLen = 0;

CHECK: line length of 111 exceeds 100 columns
#177: FILE: ./core/rtw_efuse.c:177:
+	EFUSE_GetEfuseDefinition(Adapter, EFUSE_WIFI, TYPE_EFUSE_REAL_CONTENT_LEN, (void *)&contentLen, false);

CHECK: braces {} should be used on all arms of this statement
#179: FILE: ./core/rtw_efuse.c:179:
+	if (Address < contentLen) {/* E-fuse 512Byte */
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#202: FILE: ./core/rtw_efuse.c:202:
+	} else

CHECK: Lines should not end with a '('
#209: FILE: ./core/rtw_efuse.c:209:
+efuse_OneByteRead(

CHECK: Avoid CamelCase: <efuse_OneByteRead>
#209: FILE: ./core/rtw_efuse.c:209:
+efuse_OneByteRead(

CHECK: Avoid CamelCase: <bResult>
#216: FILE: ./core/rtw_efuse.c:216:
+	u8 bResult;

CHECK: Avoid CamelCase: <efuse_OneByteWrite>
#254: FILE: ./core/rtw_efuse.c:254:
+u8 efuse_OneByteWrite(struct adapter *padapter, u16 addr, u8 data, bool bPseudoTest)

CHECK: Avoid CamelCase: <Efuse_WordEnableDataWrite>
#290: FILE: ./core/rtw_efuse.c:290:
+Efuse_WordEnableDataWrite(struct adapter *padapter,

CHECK: Alignment should match open parenthesis
#291: FILE: ./core/rtw_efuse.c:291:
+Efuse_WordEnableDataWrite(struct adapter *padapter,
+						u16		efuse_addr,

CHECK: Avoid CamelCase: <HalFunc>
#296: FILE: ./core/rtw_efuse.c:296:
+	return padapter->HalFunc.Efuse_WordEnableDataWrite(padapter, efuse_addr,

WARNING: Block comments use a trailing */ on a separate line
#316: FILE: ./core/rtw_efuse.c:316:
+ *---------------------------------------------------------------------------*/

CHECK: Lines should not end with a '('
#318: FILE: ./core/rtw_efuse.c:318:
+Efuse_ReadAllMap(

CHECK: Avoid CamelCase: <Efuse_ReadAllMap>
#318: FILE: ./core/rtw_efuse.c:318:
+Efuse_ReadAllMap(

CHECK: Avoid CamelCase: <Efuse>
#321: FILE: ./core/rtw_efuse.c:321:
+	u8 *Efuse,

CHECK: Avoid CamelCase: <mapLen>
#325: FILE: ./core/rtw_efuse.c:325:
+	u16 mapLen = 0;

CHECK: line length of 104 exceeds 100 columns
#329: FILE: ./core/rtw_efuse.c:329:
+	EFUSE_GetEfuseDefinition(padapter, efuseType, TYPE_EFUSE_MAP_LEN, (void *)&mapLen, bPseudoTest);

WARNING: Block comments use a trailing */ on a separate line
#353: FILE: ./core/rtw_efuse.c:353:
+ *---------------------------------------------------------------------------*/

CHECK: Avoid CamelCase: <efuse_ShadowRead1Byte>
#354: FILE: ./core/rtw_efuse.c:354:
+static void efuse_ShadowRead1Byte(struct adapter *padapter, u16 Offset, u8 *Value)

CHECK: Avoid CamelCase: <pEEPROM>
#356: FILE: ./core/rtw_efuse.c:356:
+	struct eeprom_priv *pEEPROM = GET_EEPROM_EFUSE_PRIV(padapter);

CHECK: Avoid CamelCase: <efuse_ShadowRead2Byte>
#363: FILE: ./core/rtw_efuse.c:363:
+static void efuse_ShadowRead2Byte(struct adapter *padapter, u16 Offset, u16 *Value)

CHECK: Avoid CamelCase: <efuse_ShadowRead4Byte>
#373: FILE: ./core/rtw_efuse.c:373:
+static void efuse_ShadowRead4Byte(struct adapter *padapter, u16 Offset, u32 *Value)

WARNING: Block comments use a trailing */ on a separate line
#399: FILE: ./core/rtw_efuse.c:399:
+ *---------------------------------------------------------------------------*/

CHECK: line length of 104 exceeds 100 columns
#405: FILE: ./core/rtw_efuse.c:405:
+	EFUSE_GetEfuseDefinition(padapter, efuseType, TYPE_EFUSE_MAP_LEN, (void *)&mapLen, bPseudoTest);

CHECK: Please don't use multiple blank lines
#416: FILE: ./core/rtw_efuse.c:416:
+
+

WARNING: Block comments use a trailing */ on a separate line
#432: FILE: ./core/rtw_efuse.c:432:
+ *---------------------------------------------------------------------------*/

CHECK: Avoid CamelCase: <Type>
#433: FILE: ./core/rtw_efuse.c:433:
+void EFUSE_ShadowRead(struct adapter *padapter, u8 Type, u16 Offset, u32 *Value)

total: 0 errors, 7 warnings, 60 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_efuse.c has style problems, please review.
------------------
./core/rtw_efuse.o
------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_efuse.o has style problems, please review.
----------------------
./core/rtw_ieee80211.c
----------------------
CHECK: Alignment should match open parenthesis
#109: FILE: ./core/rtw_ieee80211.c:109:
+u8 *rtw_set_fixed_ie(unsigned char *pbuf, unsigned int len, unsigned char *source,
+				unsigned int *frlen)

WARNING: Block comments use * on subsequent lines
#136: FILE: ./core/rtw_ieee80211.c:136:
+/*----------------------------------------------------------------------------
+index: the information element id index, limit is the limit for search

WARNING: Block comments use a trailing */ on a separate line
#137: FILE: ./core/rtw_ieee80211.c:137:
+-----------------------------------------------------------------------------*/

CHECK: line length of 112 exceeds 100 columns
#170: FILE: ./core/rtw_ieee80211.c:170:
+ * @ie: If not NULL and the specific IE is found, the IE will be copied to the buf starting from the specific IE

CHECK: Logical continuations should be on the previous line
#190: FILE: ./core/rtw_ieee80211.c:190:
+		if (eid == in_ie[cnt]
+			&& (!oui || !memcmp(&in_ie[cnt+2], oui, oui_len))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#190: FILE: ./core/rtw_ieee80211.c:190:
+			&& (!oui || !memcmp(&in_ie[cnt+2], oui, oui_len))) {
 			                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#194: FILE: ./core/rtw_ieee80211.c:194:
+				memcpy(ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#194: FILE: ./core/rtw_ieee80211.c:194:
+				memcpy(ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#197: FILE: ./core/rtw_ieee80211.c:197:
+				*ielen = in_ie[cnt+1]+2;
 				                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#197: FILE: ./core/rtw_ieee80211.c:197:
+				*ielen = in_ie[cnt+1]+2;
 				                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#201: FILE: ./core/rtw_ieee80211.c:201:
+		cnt += in_ie[cnt+1]+2; /* goto next */
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#201: FILE: ./core/rtw_ieee80211.c:201:
+		cnt += in_ie[cnt+1]+2; /* goto next */
 		                   ^

CHECK: line length of 101 exceeds 100 columns
#233: FILE: ./core/rtw_ieee80211.c:233:
+		target_ie = rtw_get_ie_ex(start, search_len, eid, oui, oui_len, NULL, &target_ielen);

CHECK: line length of 110 exceeds 100 columns
#270: FILE: ./core/rtw_ieee80211.c:270:
+		memcpy(supported_rates + IEEE80211_CCK_RATE_LEN, WIFI_OFDMRATES, IEEE80211_NUM_OFDM_RATESLEN);

CHECK: Avoid CamelCase: <rateLen>
#288: FILE: ./core/rtw_ieee80211.c:288:
+	int	sz = 0, rateLen;

CHECK: line length of 103 exceeds 100 columns
#297: FILE: ./core/rtw_ieee80211.c:297:
+	*(__le16 *)ie = cpu_to_le16((u16)pdev_network->configuration.beacon_period);/* BCN_INTERVAL; */

CHECK: line length of 105 exceeds 100 columns
#316: FILE: ./core/rtw_ieee80211.c:316:
+	ie = rtw_set_ie(ie, WLAN_EID_SSID, pdev_network->ssid.ssid_length, pdev_network->ssid.ssid, &sz);

CHECK: line length of 124 exceeds 100 columns
#327: FILE: ./core/rtw_ieee80211.c:327:
+		/* ie = rtw_set_ie(ie, WLAN_EID_EXT_SUPP_RATES, (rateLen - 8), (pdev_network->supported_rates + 8), &sz); */

CHECK: line length of 102 exceeds 100 columns
#329: FILE: ./core/rtw_ieee80211.c:329:
+		ie = rtw_set_ie(ie, WLAN_EID_SUPP_RATES, rateLen, pdev_network->supported_rates, &sz);

CHECK: line length of 104 exceeds 100 columns
#333: FILE: ./core/rtw_ieee80211.c:333:
+	ie = rtw_set_ie(ie, WLAN_EID_DS_PARAMS, 1, (u8 *)&(pdev_network->configuration.ds_config), &sz);

CHECK: Unnecessary parentheses around pdev_network->configuration.ds_config
#333: FILE: ./core/rtw_ieee80211.c:333:
+	ie = rtw_set_ie(ie, WLAN_EID_DS_PARAMS, 1, (u8 *)&(pdev_network->configuration.ds_config), &sz);

CHECK: line length of 108 exceeds 100 columns
#337: FILE: ./core/rtw_ieee80211.c:337:
+	ie = rtw_set_ie(ie, WLAN_EID_IBSS_PARAMS, 2, (u8 *)&(pdev_network->configuration.atim_window), &sz);

CHECK: Unnecessary parentheses around pdev_network->configuration.atim_window
#337: FILE: ./core/rtw_ieee80211.c:337:
+	ie = rtw_set_ie(ie, WLAN_EID_IBSS_PARAMS, 2, (u8 *)&(pdev_network->configuration.atim_window), &sz);

CHECK: line length of 118 exceeds 100 columns
#340: FILE: ./core/rtw_ieee80211.c:340:
+		ie = rtw_set_ie(ie, WLAN_EID_EXT_SUPP_RATES, (rateLen - 8), (pdev_network->supported_rates + 8), &sz);

CHECK: Unnecessary parentheses around 'pregistrypriv->ht_enable == true'
#343: FILE: ./core/rtw_ieee80211.c:343:
+	if ((pregistrypriv->wireless_mode & WIRELESS_11_24N) &&
+	    (pregistrypriv->ht_enable == true)) {

CHECK: Using comparison to true is error prone
#344: FILE: ./core/rtw_ieee80211.c:344:
+	    (pregistrypriv->ht_enable == true)) {

CHECK: line length of 104 exceeds 100 columns
#440: FILE: ./core/rtw_ieee80211.c:440:
+int rtw_parse_wpa_ie(u8 *wpa_ie, int wpa_ie_len, int *group_cipher, int *pairwise_cipher, int *is_8021x)

CHECK: spaces preferred around that '+' (ctx:VxV)
#452: FILE: ./core/rtw_ieee80211.c:452:
+	if ((*wpa_ie != WLAN_EID_VENDOR_SPECIFIC) || (*(wpa_ie+1) != (u8)(wpa_ie_len - 2)) ||
 	                                                      ^

CHECK: Alignment should match open parenthesis
#453: FILE: ./core/rtw_ieee80211.c:453:
+	if ((*wpa_ie != WLAN_EID_VENDOR_SPECIFIC) || (*(wpa_ie+1) != (u8)(wpa_ie_len - 2)) ||
+	   (memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#453: FILE: ./core/rtw_ieee80211.c:453:
+	   (memcmp(wpa_ie+2, RTW_WPA_OUI_TYPE, WPA_SELECTOR_LEN))) {
 	                 ^

CHECK: braces {} should be used on all arms of this statement
#463: FILE: ./core/rtw_ieee80211.c:463:
+	if (left >= WPA_SELECTOR_LEN) {
[...]
+	} else if (left > 0)
[...]

CHECK: braces {} should be used on all arms of this statement
#473: FILE: ./core/rtw_ieee80211.c:473:
+	if (left >= 2) {
[...]
+	} else if (left == 1)
[...]

CHECK: line length of 105 exceeds 100 columns
#503: FILE: ./core/rtw_ieee80211.c:503:
+int rtw_parse_wpa2_ie(u8 *rsn_ie, int rsn_ie_len, int *group_cipher, int *pairwise_cipher, int *is_8021x)

CHECK: spaces preferred around that '+' (ctx:VxV)
#515: FILE: ./core/rtw_ieee80211.c:515:
+	if ((*rsn_ie != WLAN_EID_RSN) || (*(rsn_ie+1) != (u8)(rsn_ie_len - 2)))
 	                                          ^

CHECK: braces {} should be used on all arms of this statement
#523: FILE: ./core/rtw_ieee80211.c:523:
+	if (left >= RSN_SELECTOR_LEN) {
[...]
+	} else if (left > 0)
[...]

CHECK: braces {} should be used on all arms of this statement
#533: FILE: ./core/rtw_ieee80211.c:533:
+	if (left >= 2) {
[...]
+	} else if (left == 1)
[...]

CHECK: line length of 104 exceeds 100 columns
#584: FILE: ./core/rtw_ieee80211.c:584:
+		if (authmode == WLAN_EID_BSS_AC_ACCESS_DELAY && (!memcmp(&in_ie[cnt+6], wapi_oui1, 4) ||

CHECK: spaces preferred around that '+' (ctx:VxV)
#584: FILE: ./core/rtw_ieee80211.c:584:
+		if (authmode == WLAN_EID_BSS_AC_ACCESS_DELAY && (!memcmp(&in_ie[cnt+6], wapi_oui1, 4) ||
 		                                                                   ^

CHECK: Alignment should match open parenthesis
#585: FILE: ./core/rtw_ieee80211.c:585:
+		if (authmode == WLAN_EID_BSS_AC_ACCESS_DELAY && (!memcmp(&in_ie[cnt+6], wapi_oui1, 4) ||
+					!memcmp(&in_ie[cnt+6], wapi_oui2, 4))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#585: FILE: ./core/rtw_ieee80211.c:585:
+					!memcmp(&in_ie[cnt+6], wapi_oui2, 4))) {
 					                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#587: FILE: ./core/rtw_ieee80211.c:587:
+				memcpy(wapi_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#587: FILE: ./core/rtw_ieee80211.c:587:
+				memcpy(wapi_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#590: FILE: ./core/rtw_ieee80211.c:590:
+				*wapi_len = in_ie[cnt+1]+2;
 				                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#590: FILE: ./core/rtw_ieee80211.c:590:
+				*wapi_len = in_ie[cnt+1]+2;
 				                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#592: FILE: ./core/rtw_ieee80211.c:592:
+			cnt += in_ie[cnt+1]+2;  /* get next */
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#592: FILE: ./core/rtw_ieee80211.c:592:
+			cnt += in_ie[cnt+1]+2;  /* get next */
 			                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#594: FILE: ./core/rtw_ieee80211.c:594:
+			cnt += in_ie[cnt+1]+2;   /* get next */
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#594: FILE: ./core/rtw_ieee80211.c:594:
+			cnt += in_ie[cnt+1]+2;   /* get next */
 			                   ^

CHECK: Please use a blank line after function/struct/union/enum declarations
#603: FILE: ./core/rtw_ieee80211.c:603:
+}
+/* endif */

CHECK: line length of 105 exceeds 100 columns
#618: FILE: ./core/rtw_ieee80211.c:618:
+		if ((authmode == WLAN_EID_VENDOR_SPECIFIC) && (!memcmp(&in_ie[cnt+2], &wpa_oui[0], 4))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#618: FILE: ./core/rtw_ieee80211.c:618:
+		if ((authmode == WLAN_EID_VENDOR_SPECIFIC) && (!memcmp(&in_ie[cnt+2], &wpa_oui[0], 4))) {
 		                                                                 ^

CHECK: Unnecessary parentheses around 'authmode == WLAN_EID_VENDOR_SPECIFIC'
#618: FILE: ./core/rtw_ieee80211.c:618:
+		if ((authmode == WLAN_EID_VENDOR_SPECIFIC) && (!memcmp(&in_ie[cnt+2], &wpa_oui[0], 4))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#620: FILE: ./core/rtw_ieee80211.c:620:
+				memcpy(wpa_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#620: FILE: ./core/rtw_ieee80211.c:620:
+				memcpy(wpa_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#629: FILE: ./core/rtw_ieee80211.c:629:
+				*rsn_len = in_ie[cnt+1]+2;
 				                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#629: FILE: ./core/rtw_ieee80211.c:629:
+				*rsn_len = in_ie[cnt+1]+2;
 				                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#630: FILE: ./core/rtw_ieee80211.c:630:
+				cnt += in_ie[cnt+1]+2;  /* get next */
 				                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#630: FILE: ./core/rtw_ieee80211.c:630:
+				cnt += in_ie[cnt+1]+2;  /* get next */
 				                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#632: FILE: ./core/rtw_ieee80211.c:632:
+				cnt += in_ie[cnt+1]+2;   /* get next */
 				                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#632: FILE: ./core/rtw_ieee80211.c:632:
+				cnt += in_ie[cnt+1]+2;   /* get next */
 				                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#664: FILE: ./core/rtw_ieee80211.c:664:
+		if ((eid == WLAN_EID_VENDOR_SPECIFIC) && (!memcmp(&in_ie[cnt+2], wps_oui, 4))) {
 		                                                            ^

CHECK: Unnecessary parentheses around 'eid == WLAN_EID_VENDOR_SPECIFIC'
#664: FILE: ./core/rtw_ieee80211.c:664:
+		if ((eid == WLAN_EID_VENDOR_SPECIFIC) && (!memcmp(&in_ie[cnt+2], wps_oui, 4))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#668: FILE: ./core/rtw_ieee80211.c:668:
+				memcpy(wps_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#668: FILE: ./core/rtw_ieee80211.c:668:
+				memcpy(wps_ie, &in_ie[cnt], in_ie[cnt+1]+2);
 				                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#671: FILE: ./core/rtw_ieee80211.c:671:
+				*wps_ielen = in_ie[cnt+1]+2;
 				                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#671: FILE: ./core/rtw_ieee80211.c:671:
+				*wps_ielen = in_ie[cnt+1]+2;
 				                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#673: FILE: ./core/rtw_ieee80211.c:673:
+			cnt += in_ie[cnt+1]+2;
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#673: FILE: ./core/rtw_ieee80211.c:673:
+			cnt += in_ie[cnt+1]+2;
 			                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#677: FILE: ./core/rtw_ieee80211.c:677:
+		cnt += in_ie[cnt+1]+2; /* goto next */
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#677: FILE: ./core/rtw_ieee80211.c:677:
+		cnt += in_ie[cnt+1]+2; /* goto next */
 		                   ^

CHECK: line length of 120 exceeds 100 columns
#688: FILE: ./core/rtw_ieee80211.c:688:
+ * @buf_attr: If not NULL and the WPS attribute is found, WPS attribute will be copied to the buf starting from buf_attr

CHECK: line length of 108 exceeds 100 columns
#689: FILE: ./core/rtw_ieee80211.c:689:
+ * @len_attr: If not NULL and the WPS attribute is found, will set to the length of the entire WPS attribute

CHECK: Unnecessary parentheses around 'wps_ie[0] != WLAN_EID_VENDOR_SPECIFIC'
#702: FILE: ./core/rtw_ieee80211.c:702:
+	if ((wps_ie[0] != WLAN_EID_VENDOR_SPECIFIC) ||
+		(memcmp(wps_ie + 2, wps_oui, 4))) {

CHECK: Alignment should match open parenthesis
#703: FILE: ./core/rtw_ieee80211.c:703:
+	if ((wps_ie[0] != WLAN_EID_VENDOR_SPECIFIC) ||
+		(memcmp(wps_ie + 2, wps_oui, 4))) {

CHECK: line length of 134 exceeds 100 columns
#738: FILE: ./core/rtw_ieee80211.c:738:
+ * @buf_content: If not NULL and the WPS attribute is found, WPS attribute content will be copied to the buf starting from buf_content

CHECK: line length of 112 exceeds 100 columns
#739: FILE: ./core/rtw_ieee80211.c:739:
+ * @len_content: If not NULL and the WPS attribute is found, will set to the length of the WPS attribute content

CHECK: line length of 112 exceeds 100 columns
#743: FILE: ./core/rtw_ieee80211.c:743:
+u8 *rtw_get_wps_attr_content(u8 *wps_ie, uint wps_ielen, u16 target_attr_id, u8 *buf_content, uint *len_content)

CHECK: spaces preferred around that '+' (ctx:VxV)
#755: FILE: ./core/rtw_ieee80211.c:755:
+			memcpy(buf_content, attr_ptr+4, attr_len-4);
 			                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#755: FILE: ./core/rtw_ieee80211.c:755:
+			memcpy(buf_content, attr_ptr+4, attr_len-4);
 			                                        ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#758: FILE: ./core/rtw_ieee80211.c:758:
+			*len_content = attr_len-4;
 			                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#760: FILE: ./core/rtw_ieee80211.c:760:
+		return attr_ptr+4;
 		               ^

CHECK: Alignment should match open parenthesis
#767: FILE: ./core/rtw_ieee80211.c:767:
+static int rtw_ieee802_11_parse_vendor_specific(u8 *pos, uint elen,
+					    struct rtw_ieee802_11_elems *elems,

WARNING: Block comments use a trailing */ on a separate line
#774: FILE: ./core/rtw_ieee80211.c:774:
+	 * sub-type. */

WARNING: Block comments use a trailing */ on a separate line
#782: FILE: ./core/rtw_ieee80211.c:782:
+		 * subtyped */

WARNING: Block comments use a trailing */ on a separate line
#786: FILE: ./core/rtw_ieee80211.c:786:
+			 * real WPA information element */

CHECK: Avoid CamelCase: <ParseRes>
#844: FILE: ./core/rtw_ieee80211.c:844:
+enum ParseRes rtw_ieee802_11_parse_elems(u8 *start, uint len,

CHECK: Alignment should match open parenthesis
#845: FILE: ./core/rtw_ieee80211.c:845:
+enum ParseRes rtw_ieee802_11_parse_elems(u8 *start, uint len,
+				struct rtw_ieee802_11_elems *elems,

CHECK: Avoid CamelCase: <ParseFailed>
#862: FILE: ./core/rtw_ieee80211.c:862:
+			return ParseFailed;

CHECK: Alignment should match open parenthesis
#907: FILE: ./core/rtw_ieee80211.c:907:
+			if (rtw_ieee802_11_parse_vendor_specific(pos, elen,
+							     elems,

CHECK: Avoid CamelCase: <ParseUnknown>
#967: FILE: ./core/rtw_ieee80211.c:967:
+	return unknown ? ParseUnknown : ParseOK;

CHECK: Avoid CamelCase: <ParseOK>
#967: FILE: ./core/rtw_ieee80211.c:967:
+	return unknown ? ParseUnknown : ParseOK;

CHECK: line length of 102 exceeds 100 columns
#1005: FILE: ./core/rtw_ieee80211.c:1005:
+	pbuf = rtw_get_wpa_ie(&pnetwork->network.ies[12], &wpa_ielen, pnetwork->network.ie_length-12);

CHECK: spaces preferred around that '-' (ctx:VxV)
#1005: FILE: ./core/rtw_ieee80211.c:1005:
+	pbuf = rtw_get_wpa_ie(&pnetwork->network.ies[12], &wpa_ielen, pnetwork->network.ie_length-12);
 	                                                                                         ^

CHECK: Unnecessary parentheses around 'wpa_ielen > 0'
#1007: FILE: ./core/rtw_ieee80211.c:1007:
+	if (pbuf && (wpa_ielen > 0)) {

CHECK: line length of 113 exceeds 100 columns
#1008: FILE: ./core/rtw_ieee80211.c:1008:
+		if (_SUCCESS == rtw_parse_wpa_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#1008: FILE: ./core/rtw_ieee80211.c:1008:
+		if (_SUCCESS == rtw_parse_wpa_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {
 		                                                ^

WARNING: Comparisons should place the constant on the right side of the test
#1008: FILE: ./core/rtw_ieee80211.c:1008:
+		if (_SUCCESS == rtw_parse_wpa_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {

CHECK: line length of 111 exceeds 100 columns
#1015: FILE: ./core/rtw_ieee80211.c:1015:
+		pbuf = rtw_get_wpa2_ie(&pnetwork->network.ies[12], &wpa_ielen, pnetwork->network.ie_length-12);

CHECK: spaces preferred around that '-' (ctx:VxV)
#1015: FILE: ./core/rtw_ieee80211.c:1015:
+		pbuf = rtw_get_wpa2_ie(&pnetwork->network.ies[12], &wpa_ielen, pnetwork->network.ie_length-12);
 		                                                                                          ^

CHECK: Unnecessary parentheses around 'wpa_ielen > 0'
#1017: FILE: ./core/rtw_ieee80211.c:1017:
+		if (pbuf && (wpa_ielen > 0)) {

CHECK: line length of 122 exceeds 100 columns
#1018: FILE: ./core/rtw_ieee80211.c:1018:
+			if (_SUCCESS == rtw_parse_wpa2_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#1018: FILE: ./core/rtw_ieee80211.c:1018:
+			if (_SUCCESS == rtw_parse_wpa2_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {
 			                                                 ^

WARNING: Comparisons should place the constant on the right side of the test
#1018: FILE: ./core/rtw_ieee80211.c:1018:
+			if (_SUCCESS == rtw_parse_wpa2_ie(pbuf, wpa_ielen+2, &group_cipher, &pairwise_cipher, &is8021x)) {

CHECK: line length of 107 exceeds 100 columns
#1050: FILE: ./core/rtw_ieee80211.c:1050:
+	rtw_get_sec_ie(pnetwork->network.ies, pnetwork->network.ie_length, NULL, &rsn_len, NULL, &wpa_len);

CHECK: line length of 145 exceeds 100 columns
#1064: FILE: ./core/rtw_ieee80211.c:1064:
+	p = rtw_get_ie(pnetwork->network.ies + _FIXED_IE_LENGTH_, WLAN_EID_HT_CAPABILITY, &len, pnetwork->network.ie_length - _FIXED_IE_LENGTH_);

CHECK: line length of 144 exceeds 100 columns
#1072: FILE: ./core/rtw_ieee80211.c:1072:
+	p = rtw_get_ie(pnetwork->network.ies + _FIXED_IE_LENGTH_, WLAN_EID_HT_OPERATION, &len, pnetwork->network.ie_length - _FIXED_IE_LENGTH_);

CHECK: Avoid CamelCase: <bw_40MHz>
#1082: FILE: ./core/rtw_ieee80211.c:1082:
+u16 rtw_mcs_rate(u8 bw_40MHz, u8 short_GI, unsigned char *MCS_rate)

CHECK: spaces required around that '?' (ctx:VxV)
#1087: FILE: ./core/rtw_ieee80211.c:1087:
+		max_rate = (bw_40MHz) ? ((short_GI)?1500:1350):((short_GI)?722:650);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1087: FILE: ./core/rtw_ieee80211.c:1087:
+		max_rate = (bw_40MHz) ? ((short_GI)?1500:1350):((short_GI)?722:650);
 		                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1087: FILE: ./core/rtw_ieee80211.c:1087:
+		max_rate = (bw_40MHz) ? ((short_GI)?1500:1350):((short_GI)?722:650);
 		                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1087: FILE: ./core/rtw_ieee80211.c:1087:
+		max_rate = (bw_40MHz) ? ((short_GI)?1500:1350):((short_GI)?722:650);
 		                                                          ^

CHECK: spaces required around that ':' (ctx:VxV)
#1087: FILE: ./core/rtw_ieee80211.c:1087:
+		max_rate = (bw_40MHz) ? ((short_GI)?1500:1350):((short_GI)?722:650);
 		                                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1089: FILE: ./core/rtw_ieee80211.c:1089:
+		max_rate = (bw_40MHz) ? ((short_GI)?1350:1215):((short_GI)?650:585);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1089: FILE: ./core/rtw_ieee80211.c:1089:
+		max_rate = (bw_40MHz) ? ((short_GI)?1350:1215):((short_GI)?650:585);
 		                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1089: FILE: ./core/rtw_ieee80211.c:1089:
+		max_rate = (bw_40MHz) ? ((short_GI)?1350:1215):((short_GI)?650:585);
 		                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1089: FILE: ./core/rtw_ieee80211.c:1089:
+		max_rate = (bw_40MHz) ? ((short_GI)?1350:1215):((short_GI)?650:585);
 		                                                          ^

CHECK: spaces required around that ':' (ctx:VxV)
#1089: FILE: ./core/rtw_ieee80211.c:1089:
+		max_rate = (bw_40MHz) ? ((short_GI)?1350:1215):((short_GI)?650:585);
 		                                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1091: FILE: ./core/rtw_ieee80211.c:1091:
+		max_rate = (bw_40MHz) ? ((short_GI)?1200:1080):((short_GI)?578:520);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1091: FILE: ./core/rtw_ieee80211.c:1091:
+		max_rate = (bw_40MHz) ? ((short_GI)?1200:1080):((short_GI)?578:520);
 		                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1091: FILE: ./core/rtw_ieee80211.c:1091:
+		max_rate = (bw_40MHz) ? ((short_GI)?1200:1080):((short_GI)?578:520);
 		                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1091: FILE: ./core/rtw_ieee80211.c:1091:
+		max_rate = (bw_40MHz) ? ((short_GI)?1200:1080):((short_GI)?578:520);
 		                                                          ^

CHECK: spaces required around that ':' (ctx:VxV)
#1091: FILE: ./core/rtw_ieee80211.c:1091:
+		max_rate = (bw_40MHz) ? ((short_GI)?1200:1080):((short_GI)?578:520);
 		                                                              ^

CHECK: spaces required around that '?' (ctx:VxV)
#1093: FILE: ./core/rtw_ieee80211.c:1093:
+		max_rate = (bw_40MHz) ? ((short_GI)?900:810):((short_GI)?433:390);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1093: FILE: ./core/rtw_ieee80211.c:1093:
+		max_rate = (bw_40MHz) ? ((short_GI)?900:810):((short_GI)?433:390);
 		                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1093: FILE: ./core/rtw_ieee80211.c:1093:
+		max_rate = (bw_40MHz) ? ((short_GI)?900:810):((short_GI)?433:390);
 		                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1093: FILE: ./core/rtw_ieee80211.c:1093:
+		max_rate = (bw_40MHz) ? ((short_GI)?900:810):((short_GI)?433:390);
 		                                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1093: FILE: ./core/rtw_ieee80211.c:1093:
+		max_rate = (bw_40MHz) ? ((short_GI)?900:810):((short_GI)?433:390);
 		                                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1095: FILE: ./core/rtw_ieee80211.c:1095:
+		max_rate = (bw_40MHz) ? ((short_GI)?600:540):((short_GI)?289:260);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1095: FILE: ./core/rtw_ieee80211.c:1095:
+		max_rate = (bw_40MHz) ? ((short_GI)?600:540):((short_GI)?289:260);
 		                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1095: FILE: ./core/rtw_ieee80211.c:1095:
+		max_rate = (bw_40MHz) ? ((short_GI)?600:540):((short_GI)?289:260);
 		                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1095: FILE: ./core/rtw_ieee80211.c:1095:
+		max_rate = (bw_40MHz) ? ((short_GI)?600:540):((short_GI)?289:260);
 		                                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1095: FILE: ./core/rtw_ieee80211.c:1095:
+		max_rate = (bw_40MHz) ? ((short_GI)?600:540):((short_GI)?289:260);
 		                                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1097: FILE: ./core/rtw_ieee80211.c:1097:
+		max_rate = (bw_40MHz) ? ((short_GI)?450:405):((short_GI)?217:195);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1097: FILE: ./core/rtw_ieee80211.c:1097:
+		max_rate = (bw_40MHz) ? ((short_GI)?450:405):((short_GI)?217:195);
 		                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1097: FILE: ./core/rtw_ieee80211.c:1097:
+		max_rate = (bw_40MHz) ? ((short_GI)?450:405):((short_GI)?217:195);
 		                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1097: FILE: ./core/rtw_ieee80211.c:1097:
+		max_rate = (bw_40MHz) ? ((short_GI)?450:405):((short_GI)?217:195);
 		                                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1097: FILE: ./core/rtw_ieee80211.c:1097:
+		max_rate = (bw_40MHz) ? ((short_GI)?450:405):((short_GI)?217:195);
 		                                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1099: FILE: ./core/rtw_ieee80211.c:1099:
+		max_rate = (bw_40MHz) ? ((short_GI)?300:270):((short_GI)?144:130);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1099: FILE: ./core/rtw_ieee80211.c:1099:
+		max_rate = (bw_40MHz) ? ((short_GI)?300:270):((short_GI)?144:130);
 		                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1099: FILE: ./core/rtw_ieee80211.c:1099:
+		max_rate = (bw_40MHz) ? ((short_GI)?300:270):((short_GI)?144:130);
 		                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1099: FILE: ./core/rtw_ieee80211.c:1099:
+		max_rate = (bw_40MHz) ? ((short_GI)?300:270):((short_GI)?144:130);
 		                                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1099: FILE: ./core/rtw_ieee80211.c:1099:
+		max_rate = (bw_40MHz) ? ((short_GI)?300:270):((short_GI)?144:130);
 		                                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1101: FILE: ./core/rtw_ieee80211.c:1101:
+		max_rate = (bw_40MHz) ? ((short_GI)?150:135):((short_GI)?72:65);
 		                                   ^

CHECK: spaces required around that ':' (ctx:VxV)
#1101: FILE: ./core/rtw_ieee80211.c:1101:
+		max_rate = (bw_40MHz) ? ((short_GI)?150:135):((short_GI)?72:65);
 		                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1101: FILE: ./core/rtw_ieee80211.c:1101:
+		max_rate = (bw_40MHz) ? ((short_GI)?150:135):((short_GI)?72:65);
 		                                            ^

CHECK: spaces required around that '?' (ctx:VxV)
#1101: FILE: ./core/rtw_ieee80211.c:1101:
+		max_rate = (bw_40MHz) ? ((short_GI)?150:135):((short_GI)?72:65);
 		                                                        ^

CHECK: spaces required around that ':' (ctx:VxV)
#1101: FILE: ./core/rtw_ieee80211.c:1101:
+		max_rate = (bw_40MHz) ? ((short_GI)?150:135):((short_GI)?72:65);
 		                                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1115: FILE: ./core/rtw_ieee80211.c:1115:
+	if ((fc & (IEEE80211_FCTL_FTYPE|IEEE80211_FCTL_STYPE))
 	                               ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1116: FILE: ./core/rtw_ieee80211.c:1116:
+		!= (IEEE80211_FTYPE_MGMT|IEEE80211_STYPE_ACTION)
 		                        ^

WARNING: static const char * array should probably be static const char * const
#1138: FILE: ./core/rtw_ieee80211.c:1138:
+static const char *_action_public_str[] = {

total: 0 errors, 8 warnings, 142 checks, 1162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ieee80211.c has style problems, please review.
----------------------
./core/rtw_ieee80211.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ieee80211.o has style problems, please review.
---------------
./core/rtw_io.c
---------------
WARNING: Block comments use * on subsequent lines
#8: FILE: ./core/rtw_io.c:8:
+/*
+

CHECK: Please don't use multiple blank lines
#17: FILE: ./core/rtw_io.c:17:
+
+

CHECK: Unnecessary parentheses around pio_priv->intf
#34: FILE: ./core/rtw_io.c:34:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Unnecessary parentheses around pio_priv->intf
#46: FILE: ./core/rtw_io.c:46:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Unnecessary parentheses around pio_priv->intf
#58: FILE: ./core/rtw_io.c:58:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Blank lines aren't necessary before a close brace '}'
#65: FILE: ./core/rtw_io.c:65:
+
+}

CHECK: Unnecessary parentheses around pio_priv->intf
#71: FILE: ./core/rtw_io.c:71:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Please use a blank line after function/struct/union/enum declarations
#81: FILE: ./core/rtw_io.c:81:
+}
+int rtw_write16(struct adapter *adapter, u32 addr, u16 val)

CHECK: Unnecessary parentheses around pio_priv->intf
#85: FILE: ./core/rtw_io.c:85:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Please use a blank line after function/struct/union/enum declarations
#94: FILE: ./core/rtw_io.c:94:
+}
+int rtw_write32(struct adapter *adapter, u32 addr, u32 val)

CHECK: Unnecessary parentheses around pio_priv->intf
#98: FILE: ./core/rtw_io.c:98:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: Unnecessary parentheses around pio_priv->intf
#113: FILE: ./core/rtw_io.c:113:
+	struct	intf_hdl		*pintfhdl = &(pio_priv->intf);

CHECK: line length of 116 exceeds 100 columns
#120: FILE: ./core/rtw_io.c:120:
+int rtw_init_io_priv(struct adapter *padapter, void (*set_intf_ops)(struct adapter *padapter, struct _io_ops *pops))

CHECK: line length of 108 exceeds 100 columns
#138: FILE: ./core/rtw_io.c:138:
+* Increase and check if the continual_io_error of this @param dvobjprive is larger than MAX_CONTINUAL_IO_ERR

WARNING: Block comments should align the * on each line
#138: FILE: ./core/rtw_io.c:138:
+/*
+* Increase and check if the continual_io_error of this @param dvobjprive is larger than MAX_CONTINUAL_IO_ERR

WARNING: Block comments should align the * on each line
#153: FILE: ./core/rtw_io.c:153:
+/*
+* Set the continual_io_error of this @param dvobjprive to 0

total: 0 errors, 3 warnings, 13 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_io.c has style problems, please review.
----------------------
./core/rtw_ioctl_set.c
----------------------
CHECK: Logical continuations should be on the previous line
#15: FILE: ./core/rtw_ioctl_set.c:15:
+	if (is_zero_mac_addr(bssid)
+		|| is_broadcast_mac_addr(bssid)

CHECK: Logical continuations should be on the previous line
#16: FILE: ./core/rtw_ioctl_set.c:16:
+		|| is_broadcast_mac_addr(bssid)
+		|| is_multicast_mac_addr(bssid)

CHECK: Unnecessary parentheses around padapter->mlmepriv
#41: FILE: ./core/rtw_ioctl_set.c:41:
+	struct	mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue
#42: FILE: ./core/rtw_ioctl_set.c:42:
+	struct __queue	*queue	= &(pmlmepriv->scanned_queue);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#45: FILE: ./core/rtw_ioctl_set.c:45:
+	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#58: FILE: ./core/rtw_ioctl_set.c:58:
+		spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Using comparison to false is error prone
#64: FILE: ./core/rtw_ioctl_set.c:64:
+		if (pmlmepriv->LinkDetectInfo.bBusyTraffic == false

CHECK: Logical continuations should be on the previous line
#65: FILE: ./core/rtw_ioctl_set.c:65:
+		if (pmlmepriv->LinkDetectInfo.bBusyTraffic == false
+			|| rtw_to_roam(padapter) > 0

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#81: FILE: ./core/rtw_ioctl_set.c:81:
+		spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 110 exceeds 100 columns
#91: FILE: ./core/rtw_ioctl_set.c:91:
+				struct wlan_bssid_ex    *pdev_network = &(padapter->registrypriv.dev_network);

CHECK: Unnecessary parentheses around padapter->registrypriv.dev_network
#91: FILE: ./core/rtw_ioctl_set.c:91:
+				struct wlan_bssid_ex    *pdev_network = &(padapter->registrypriv.dev_network);

CHECK: line length of 117 exceeds 100 columns
#97: FILE: ./core/rtw_ioctl_set.c:97:
+				memcpy(&pdev_network->ssid, &pmlmepriv->assoc_ssid, sizeof(struct ndis_802_11_ssid));

CHECK: line length of 127 exceeds 100 columns
#114: FILE: ./core/rtw_ioctl_set.c:114:
+				/* when set_ssid/set_bssid for rtw_do_join(), but there are no desired bss in scanning queue */

CHECK: Using comparison to false is error prone
#116: FILE: ./core/rtw_ioctl_set.c:116:
+				if (pmlmepriv->LinkDetectInfo.bBusyTraffic == false

CHECK: Logical continuations should be on the previous line
#117: FILE: ./core/rtw_ioctl_set.c:117:
+				if (pmlmepriv->LinkDetectInfo.bBusyTraffic == false
+					|| rtw_to_roam(padapter) > 0

CHECK: line length of 111 exceeds 100 columns
#119: FILE: ./core/rtw_ioctl_set.c:119:
+					ret = rtw_sitesurvey_cmd(padapter, &pmlmepriv->assoc_ssid, 1, NULL, 0);

CHECK: Blank lines aren't necessary before a close brace '}'
#129: FILE: ./core/rtw_ioctl_set.c:129:
+
+		}

CHECK: Blank lines aren't necessary before a close brace '}'
#131: FILE: ./core/rtw_ioctl_set.c:131:
+
+	}

CHECK: Using comparison to false is error prone
#147: FILE: ./core/rtw_ioctl_set.c:147:
+	if (padapter->hw_init_completed == false) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#159: FILE: ./core/rtw_ioctl_set.c:159:
+	if (check_fwstate(pmlmepriv, _FW_LINKED|WIFI_ADHOC_MASTER_STATE) == true) {
 	                                       ^

CHECK: Unnecessary parentheses around 'pmlmepriv->assoc_ssid.ssid_length == ssid->ssid_length'
#160: FILE: ./core/rtw_ioctl_set.c:160:
+		if ((pmlmepriv->assoc_ssid.ssid_length == ssid->ssid_length) &&
+		    (!memcmp(&pmlmepriv->assoc_ssid.ssid, ssid->ssid, ssid->ssid_length))) {

CHECK: line length of 122 exceeds 100 columns
#164: FILE: ./core/rtw_ioctl_set.c:164:
+					/* if in WIFI_ADHOC_MASTER_STATE | WIFI_ADHOC_STATE, create bss or rejoin again */

CHECK: line length of 104 exceeds 100 columns
#172: FILE: ./core/rtw_ioctl_set.c:172:
+					if (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true) {

CHECK: line length of 144 exceeds 100 columns
#177: FILE: ./core/rtw_ioctl_set.c:177:
+					goto release_mlme_lock;/* it means driver is in WIFI_ADHOC_MASTER_STATE, we needn't create bss again. */

CHECK: Using comparison to false is error prone
#242: FILE: ./core/rtw_ioctl_set.c:242:
+	if (padapter->hw_init_completed == false) {

CHECK: Alignment should match open parenthesis
#288: FILE: ./core/rtw_ioctl_set.c:288:
+u8 rtw_set_802_11_infrastructure_mode(struct adapter *padapter,
+	enum ndis_802_11_network_infrastructure networktype)

CHECK: line length of 106 exceeds 100 columns
#292: FILE: ./core/rtw_ioctl_set.c:292:
+	enum ndis_802_11_network_infrastructure *pold_state = &(cur_network->network.infrastructure_mode);

CHECK: Unnecessary parentheses around cur_network->network.infrastructure_mode
#292: FILE: ./core/rtw_ioctl_set.c:292:
+	enum ndis_802_11_network_infrastructure *pold_state = &(cur_network->network.infrastructure_mode);

CHECK: line length of 102 exceeds 100 columns
#304: FILE: ./core/rtw_ioctl_set.c:304:
+		if ((check_fwstate(pmlmepriv, _FW_LINKED) == true) || (*pold_state == Ndis802_11IBSS))

CHECK: Avoid CamelCase: <Ndis802_11IBSS>
#304: FILE: ./core/rtw_ioctl_set.c:304:
+		if ((check_fwstate(pmlmepriv, _FW_LINKED) == true) || (*pold_state == Ndis802_11IBSS))

CHECK: Alignment should match open parenthesis
#308: FILE: ./core/rtw_ioctl_set.c:308:
+		if ((check_fwstate(pmlmepriv, _FW_LINKED) == true) ||
+			(check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true))

CHECK: Avoid CamelCase: <Ndis802_11Infrastructure>
#311: FILE: ./core/rtw_ioctl_set.c:311:
+		if ((*pold_state == Ndis802_11Infrastructure) || (*pold_state == Ndis802_11IBSS)) {

CHECK: line length of 173 exceeds 100 columns
#313: FILE: ./core/rtw_ioctl_set.c:313:
+				rtw_indicate_disconnect(padapter); /* will clr Linked_state; before this function, we must have checked whether issue dis-assoc_cmd or not */

CHECK: Please don't use multiple blank lines
#348: FILE: ./core/rtw_ioctl_set.c:348:
+
+

CHECK: line length of 109 exceeds 100 columns
#368: FILE: ./core/rtw_ioctl_set.c:368:
+u8 rtw_set_802_11_bssid_list_scan(struct adapter *padapter, struct ndis_802_11_ssid *pssid, int ssid_max_num)

CHECK: Using comparison to false is error prone
#377: FILE: ./core/rtw_ioctl_set.c:377:
+	if (padapter->hw_init_completed == false) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#382: FILE: ./core/rtw_ioctl_set.c:382:
+	if ((check_fwstate(pmlmepriv, _FW_UNDER_SURVEY|_FW_UNDER_LINKING) == true) ||
 	                                              ^

CHECK: Unnecessary parentheses around 'pmlmepriv->LinkDetectInfo.bBusyTraffic == true'
#382: FILE: ./core/rtw_ioctl_set.c:382:
+	if ((check_fwstate(pmlmepriv, _FW_UNDER_SURVEY|_FW_UNDER_LINKING) == true) ||
+		(pmlmepriv->LinkDetectInfo.bBusyTraffic == true)) {

CHECK: Alignment should match open parenthesis
#383: FILE: ./core/rtw_ioctl_set.c:383:
+	if ((check_fwstate(pmlmepriv, _FW_UNDER_SURVEY|_FW_UNDER_LINKING) == true) ||
+		(pmlmepriv->LinkDetectInfo.bBusyTraffic == true)) {

CHECK: Using comparison to true is error prone
#383: FILE: ./core/rtw_ioctl_set.c:383:
+		(pmlmepriv->LinkDetectInfo.bBusyTraffic == true)) {

CHECK: line length of 110 exceeds 100 columns
#402: FILE: ./core/rtw_ioctl_set.c:402:
+u8 rtw_set_802_11_authentication_mode(struct adapter *padapter, enum ndis_802_11_authentication_mode authmode)

CHECK: Blank lines aren't necessary after an open brace '{'
#425: FILE: ./core/rtw_ioctl_set.c:425:
+{
+

CHECK: Unnecessary parentheses around padapter->securitypriv
#427: FILE: ./core/rtw_ioctl_set.c:427:
+	struct security_priv *psecuritypriv = &(padapter->securitypriv);

CHECK: Unnecessary parentheses around psecuritypriv->dot11DefKey[keyid].skey[0]
#449: FILE: ./core/rtw_ioctl_set.c:449:
+	memcpy(&(psecuritypriv->dot11DefKey[keyid].skey[0]), &(wep->key_material), wep->key_length);

CHECK: Unnecessary parentheses around wep->key_material
#449: FILE: ./core/rtw_ioctl_set.c:449:
+	memcpy(&(psecuritypriv->dot11DefKey[keyid].skey[0]), &(wep->key_material), wep->key_length);

CHECK: Avoid CamelCase: <dot11DefKey>
#449: FILE: ./core/rtw_ioctl_set.c:449:
+	memcpy(&(psecuritypriv->dot11DefKey[keyid].skey[0]), &(wep->key_material), wep->key_length);

CHECK: Avoid CamelCase: <dot11DefKeylen>
#451: FILE: ./core/rtw_ioctl_set.c:451:
+	psecuritypriv->dot11DefKeylen[keyid] = wep->key_length;

CHECK: Avoid CamelCase: <dot11PrivacyKeyIndex>
#453: FILE: ./core/rtw_ioctl_set.c:453:
+	psecuritypriv->dot11PrivacyKeyIndex = keyid;

CHECK: Logical continuations should be on the previous line
#480: FILE: ./core/rtw_ioctl_set.c:480:
+	if ((check_fwstate(pmlmepriv, _FW_LINKED) != true)
+		&& (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) != true))

CHECK: line length of 103 exceeds 100 columns
#494: FILE: ./core/rtw_ioctl_set.c:494:
+		while ((pcur_bss->supported_rates[i] != 0) && (pcur_bss->supported_rates[i] != 0xFF)) {

CHECK: spaces preferred around that '&' (ctx:VxV)
#495: FILE: ./core/rtw_ioctl_set.c:495:
+			rate = pcur_bss->supported_rates[i]&0x7F;
 			                                   ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#501: FILE: ./core/rtw_ioctl_set.c:501:
+		max_rate = max_rate*10/2;
 		                   ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#501: FILE: ./core/rtw_ioctl_set.c:501:
+		max_rate = max_rate*10/2;
 		                      ^

total: 0 errors, 0 warnings, 53 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ioctl_set.c has style problems, please review.
----------------------
./core/rtw_ioctl_set.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_ioctl_set.o has style problems, please review.
---------------
./core/rtw_io.o
---------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_io.o has style problems, please review.
-----------------
./core/rtw_mlme.c
-----------------
CHECK: Avoid CamelCase: <Ndis802_11AutoUnknown>
#24: FILE: ./core/rtw_mlme.c:24:
+	pmlmepriv->cur_network.network.infrastructure_mode = Ndis802_11AutoUnknown;

CHECK: line length of 140 exceeds 100 columns
#25: FILE: ./core/rtw_mlme.c:25:
+	pmlmepriv->scan_mode = SCAN_ACTIVE;/*  1: active, 0: passive. Maybe someday we should rename this varable to "active_mode" (Jeff) */

CHECK: line length of 102 exceeds 100 columns
#98: FILE: ./core/rtw_mlme.c:98:
+	rtw_free_mlme_ie_data(&pmlmepriv->p2p_go_probe_resp_ie, &pmlmepriv->p2p_go_probe_resp_ie_len);

CHECK: Unnecessary parentheses around free_queue->queue
#122: FILE: ./core/rtw_mlme.c:122:
+	plist = get_next(&(free_queue->queue));

CHECK: Unnecessary parentheses around pmlmepriv->free_bss_pool
#144: FILE: ./core/rtw_mlme.c:144:
+	struct __queue *free_queue = &(pmlmepriv->free_bss_pool);

CHECK: Alignment should match open parenthesis
#153: FILE: ./core/rtw_mlme.c:153:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true) ||
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true))

CHECK: Unnecessary parentheses around pnetwork->list
#164: FILE: ./core/rtw_mlme.c:164:
+	list_del_init(&(pnetwork->list));

CHECK: Unnecessary parentheses around pnetwork->list
#166: FILE: ./core/rtw_mlme.c:166:
+	list_add_tail(&(pnetwork->list), &(free_queue->queue));

CHECK: Unnecessary parentheses around free_queue->queue
#166: FILE: ./core/rtw_mlme.c:166:
+	list_add_tail(&(pnetwork->list), &(free_queue->queue));

CHECK: Blank lines aren't necessary after an open brace '{'
#173: FILE: ./core/rtw_mlme.c:173:
+{
+

CHECK: Unnecessary parentheses around pmlmepriv->free_bss_pool
#174: FILE: ./core/rtw_mlme.c:174:
+	struct __queue *free_queue = &(pmlmepriv->free_bss_pool);

CHECK: Unnecessary parentheses around pnetwork->list
#182: FILE: ./core/rtw_mlme.c:182:
+	list_del_init(&(pnetwork->list));

CHECK: Unnecessary parentheses around pnetwork->list
#184: FILE: ./core/rtw_mlme.c:184:
+	list_add_tail(&(pnetwork->list), get_list_head(free_queue));

WARNING: Block comments use * on subsequent lines
#188: FILE: ./core/rtw_mlme.c:188:
+/*
+	return the wlan_network with the matching addr

CHECK: Blank lines aren't necessary after an open brace '{'
#228: FILE: ./core/rtw_mlme.c:228:
+	list_for_each_safe(plist, tmp, phead) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#233: FILE: ./core/rtw_mlme.c:233:
+
+	}

CHECK: Alignment should match open parenthesis
#243: FILE: ./core/rtw_mlme.c:243:
+	if (padapter->bDriverStopped || padapter->bSurpriseRemoved ||
+		(check_fwstate(&padapter->mlmepriv, _FW_LINKED) == false))

CHECK: spaces preferred around that '>>' (ctx:VxV)
#259: FILE: ./core/rtw_mlme.c:259:
+	pibss[4] = (u8)((curtime>>8) & 0xff) ;/* p[1]; */
 	                        ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#260: FILE: ./core/rtw_mlme.c:260:
+	pibss[5] = (u8)((curtime>>16) & 0xff) ;/* p[2]; */
 	                        ^

CHECK: Unnecessary parentheses around padapter->mlmepriv
#290: FILE: ./core/rtw_mlme.c:290:
+	_rtw_free_network_nolock(&(padapter->mlmepriv), pnetwork);

WARNING: Block comments use * on subsequent lines
#295: FILE: ./core/rtw_mlme.c:295:
+/*
+	return the wlan_network with the matching addr

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm != _NO_PRIVACY_'
#311: FILE: ./core/rtw_mlme.c:311:
+	if ((psecuritypriv->dot11PrivacyAlgrthm != _NO_PRIVACY_) &&
+		    (pnetwork->network.privacy == 0))

CHECK: Unnecessary parentheses around 'pnetwork->network.privacy == 0'
#311: FILE: ./core/rtw_mlme.c:311:
+	if ((psecuritypriv->dot11PrivacyAlgrthm != _NO_PRIVACY_) &&
+		    (pnetwork->network.privacy == 0))

CHECK: Alignment should match open parenthesis
#312: FILE: ./core/rtw_mlme.c:312:
+	if ((psecuritypriv->dot11PrivacyAlgrthm != _NO_PRIVACY_) &&
+		    (pnetwork->network.privacy == 0))

CHECK: Blank lines aren't necessary before a close brace '}'
#322: FILE: ./core/rtw_mlme.c:322:
+
+}

CHECK: Logical continuations should be on the previous line
#327: FILE: ./core/rtw_mlme.c:327:
+	return (a->ssid.ssid_length == b->ssid.ssid_length)
+		&&  !memcmp(a->ssid.ssid, b->ssid.ssid, a->ssid.ssid_length);

CHECK: Blank lines aren't necessary before a close brace '}'
#352: FILE: ./core/rtw_mlme.c:352:
+
+}

CHECK: line length of 104 exceeds 100 columns
#354: FILE: ./core/rtw_mlme.c:354:
+struct wlan_network *_rtw_find_same_network(struct __queue *scanned_queue, struct wlan_network *network)

CHECK: Blank lines aren't necessary after an open brace '{'
#383: FILE: ./core/rtw_mlme.c:383:
+	list_for_each(plist, phead) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#393: FILE: ./core/rtw_mlme.c:393:
+
+}

CHECK: Alignment should match open parenthesis
#396: FILE: ./core/rtw_mlme.c:396:
+void update_network(struct wlan_bssid_ex *dst, struct wlan_bssid_ex *src,
+	struct adapter *padapter, bool update_ie)

CHECK: line length of 131 exceeds 100 columns
#407: FILE: ./core/rtw_mlme.c:407:
+	if (check_fwstate(&padapter->mlmepriv, _FW_LINKED) && is_same_network(&(padapter->mlmepriv.cur_network.network), src, 0)) {

CHECK: Unnecessary parentheses around padapter->mlmepriv.cur_network.network
#407: FILE: ./core/rtw_mlme.c:407:
+	if (check_fwstate(&padapter->mlmepriv, _FW_LINKED) && is_same_network(&(padapter->mlmepriv.cur_network.network), src, 0)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#413: FILE: ./core/rtw_mlme.c:413:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                       ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#413: FILE: ./core/rtw_mlme.c:413:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                                 ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#413: FILE: ./core/rtw_mlme.c:413:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                                    ^

CHECK: line length of 115 exceeds 100 columns
#418: FILE: ./core/rtw_mlme.c:418:
+			ss_final = ((u32)(src->phy_info.signal_strength)+(u32)(dst->phy_info.signal_strength)*4)/5;

CHECK: spaces preferred around that '+' (ctx:VxV)
#418: FILE: ./core/rtw_mlme.c:418:
+			ss_final = ((u32)(src->phy_info.signal_strength)+(u32)(dst->phy_info.signal_strength)*4)/5;
 			                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#418: FILE: ./core/rtw_mlme.c:418:
+			ss_final = ((u32)(src->phy_info.signal_strength)+(u32)(dst->phy_info.signal_strength)*4)/5;
 			                                                                                     ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#418: FILE: ./core/rtw_mlme.c:418:
+			ss_final = ((u32)(src->phy_info.signal_strength)+(u32)(dst->phy_info.signal_strength)*4)/5;
 			                                                                                        ^

CHECK: line length of 113 exceeds 100 columns
#419: FILE: ./core/rtw_mlme.c:419:
+			sq_final = ((u32)(src->phy_info.signal_quality)+(u32)(dst->phy_info.signal_quality)*4)/5;

CHECK: spaces preferred around that '+' (ctx:VxV)
#419: FILE: ./core/rtw_mlme.c:419:
+			sq_final = ((u32)(src->phy_info.signal_quality)+(u32)(dst->phy_info.signal_quality)*4)/5;
 			                                               ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#419: FILE: ./core/rtw_mlme.c:419:
+			sq_final = ((u32)(src->phy_info.signal_quality)+(u32)(dst->phy_info.signal_quality)*4)/5;
 			                                                                                   ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#419: FILE: ./core/rtw_mlme.c:419:
+			sq_final = ((u32)(src->phy_info.signal_quality)+(u32)(dst->phy_info.signal_quality)*4)/5;
 			                                                                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#420: FILE: ./core/rtw_mlme.c:420:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                       ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#420: FILE: ./core/rtw_mlme.c:420:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                                 ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#420: FILE: ./core/rtw_mlme.c:420:
+			rssi_final = (src->rssi+dst->rssi*4)/5;
 			                                    ^

CHECK: line length of 109 exceeds 100 columns
#422: FILE: ./core/rtw_mlme.c:422:
+			/* bss info not receiving from the right channel, use the original RX signal infos */

CHECK: Blank lines aren't necessary before a close brace '}'
#428: FILE: ./core/rtw_mlme.c:428:
+
+	}

CHECK: Unnecessary parentheses around adapter->mlmepriv
#443: FILE: ./core/rtw_mlme.c:443:
+	struct	mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#445: FILE: ./core/rtw_mlme.c:445:
+	rtw_bug_check(&(pmlmepriv->cur_network.network),

CHECK: Alignment should match open parenthesis
#446: FILE: ./core/rtw_mlme.c:446:
+	rtw_bug_check(&(pmlmepriv->cur_network.network),
+		&(pmlmepriv->cur_network.network),

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#446: FILE: ./core/rtw_mlme.c:446:
+		&(pmlmepriv->cur_network.network),

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#447: FILE: ./core/rtw_mlme.c:447:
+		&(pmlmepriv->cur_network.network),

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#448: FILE: ./core/rtw_mlme.c:448:
+		&(pmlmepriv->cur_network.network));

CHECK: line length of 130 exceeds 100 columns
#450: FILE: ./core/rtw_mlme.c:450:
+	if ((check_fwstate(pmlmepriv, _FW_LINKED) == true) && (is_same_network(&(pmlmepriv->cur_network.network), pnetwork, 0))) {

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#450: FILE: ./core/rtw_mlme.c:450:
+	if ((check_fwstate(pmlmepriv, _FW_LINKED) == true) && (is_same_network(&(pmlmepriv->cur_network.network), pnetwork, 0))) {

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#451: FILE: ./core/rtw_mlme.c:451:
+		update_network(&(pmlmepriv->cur_network.network), pnetwork, adapter, true);

CHECK: line length of 120 exceeds 100 columns
#452: FILE: ./core/rtw_mlme.c:452:
+		rtw_update_protection(adapter, (pmlmepriv->cur_network.network.ies) + sizeof(struct ndis_802_11_fix_ie),

CHECK: line length of 106 exceeds 100 columns
#453: FILE: ./core/rtw_mlme.c:453:
+								pmlmepriv->cur_network.network.ie_length);

CHECK: Alignment should match open parenthesis
#453: FILE: ./core/rtw_mlme.c:453:
+		rtw_update_protection(adapter, (pmlmepriv->cur_network.network.ies) + sizeof(struct ndis_802_11_fix_ie),
+								pmlmepriv->cur_network.network.ie_length);

WARNING: Block comments use * on subsequent lines
#458: FILE: ./core/rtw_mlme.c:458:
+/*
+Caller must hold pmlmepriv->lock first.

CHECK: Unnecessary parentheses around adapter->mlmepriv
#464: FILE: ./core/rtw_mlme.c:464:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue
#465: FILE: ./core/rtw_mlme.c:465:
+	struct __queue	*queue	= &(pmlmepriv->scanned_queue);

CHECK: Unnecessary parentheses around pnetwork->network
#478: FILE: ./core/rtw_mlme.c:478:
+		if (is_same_network(&(pnetwork->network), target, feature)) {

WARNING: braces {} are not necessary for single statement blocks
#483: FILE: ./core/rtw_mlme.c:483:
+		if (rtw_roam_flags(adapter)) {
+			/* TODO: don't select network in the same ess as oldest if it's new enough*/
+		}

CHECK: Blank lines aren't necessary before a close brace '}'
#490: FILE: ./core/rtw_mlme.c:490:
+
+	}

WARNING: Block comments use a trailing */ on a separate line
#493: FILE: ./core/rtw_mlme.c:493:
+	 * with this beacon's information */

CHECK: Unnecessary parentheses around pnetwork->network
#502: FILE: ./core/rtw_mlme.c:502:
+			memcpy(&(pnetwork->network), target,  get_wlan_bssid_ex_sz(target));

CHECK: Unnecessary parentheses around pnetwork->network
#524: FILE: ./core/rtw_mlme.c:524:
+			memcpy(&(pnetwork->network), target, bssid_ex_sz);

CHECK: Unnecessary parentheses around pnetwork->list
#532: FILE: ./core/rtw_mlme.c:532:
+			list_add_tail(&(pnetwork->list), &(queue->queue));

CHECK: Unnecessary parentheses around queue->queue
#532: FILE: ./core/rtw_mlme.c:532:
+			list_add_tail(&(pnetwork->list), &(queue->queue));

CHECK: Blank lines aren't necessary before a close brace '}'
#534: FILE: ./core/rtw_mlme.c:534:
+
+		}

CHECK: Unnecessary parentheses around pnetwork->network
#556: FILE: ./core/rtw_mlme.c:556:
+		update_network(&(pnetwork->network), target, adapter, update_ie);

WARNING: please, no space before tabs
#572: FILE: ./core/rtw_mlme.c:572:
+/* ^I^I^I   (2) network_type */$

WARNING: please, no space before tabs
#573: FILE: ./core/rtw_mlme.c:573:
+/* ^I^I^I   (3) WMM */$

WARNING: please, no space before tabs
#574: FILE: ./core/rtw_mlme.c:574:
+/* ^I^I^I   (4) HT */$

CHECK: line length of 141 exceeds 100 columns
#590: FILE: ./core/rtw_mlme.c:590:
+		if (rtw_get_wps_ie(pnetwork->network.ies+_FIXED_IE_LENGTH_, pnetwork->network.ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen))

CHECK: spaces preferred around that '+' (ctx:VxV)
#590: FILE: ./core/rtw_mlme.c:590:
+		if (rtw_get_wps_ie(pnetwork->network.ies+_FIXED_IE_LENGTH_, pnetwork->network.ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen))
 		                                        ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#590: FILE: ./core/rtw_mlme.c:590:
+		if (rtw_get_wps_ie(pnetwork->network.ies+_FIXED_IE_LENGTH_, pnetwork->network.ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen))
 		                                                                                       ^

CHECK: Blank lines aren't necessary before a close brace '}'
#595: FILE: ./core/rtw_mlme.c:595:
+
+	}

CHECK: Unnecessary parentheses around 'desired_encmode == Ndis802_11EncryptionDisabled'
#600: FILE: ./core/rtw_mlme.c:600:
+		if ((desired_encmode == Ndis802_11EncryptionDisabled) && (privacy != 0))

CHECK: Unnecessary parentheses around 'privacy != 0'
#600: FILE: ./core/rtw_mlme.c:600:
+		if ((desired_encmode == Ndis802_11EncryptionDisabled) && (privacy != 0))

CHECK: Avoid CamelCase: <Ndis802_11EncryptionDisabled>
#600: FILE: ./core/rtw_mlme.c:600:
+		if ((desired_encmode == Ndis802_11EncryptionDisabled) && (privacy != 0))

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWPA2PSK>
#603: FILE: ./core/rtw_mlme.c:603:
+		if (psecuritypriv->ndisauthtype == Ndis802_11AuthModeWPA2PSK) {

CHECK: line length of 158 exceeds 100 columns
#604: FILE: ./core/rtw_mlme.c:604:
+			p = rtw_get_ie(pnetwork->network.ies + _BEACON_IE_OFFSET_, WLAN_EID_RSN, &ie_len, (pnetwork->network.ie_length - _BEACON_IE_OFFSET_));

CHECK: Unnecessary parentheses around 'desired_encmode != Ndis802_11EncryptionDisabled'
#612: FILE: ./core/rtw_mlme.c:612:
+	if ((desired_encmode != Ndis802_11EncryptionDisabled) && (privacy == 0))

CHECK: Unnecessary parentheses around 'privacy == 0'
#612: FILE: ./core/rtw_mlme.c:612:
+	if ((desired_encmode != Ndis802_11EncryptionDisabled) && (privacy == 0))

CHECK: line length of 112 exceeds 100 columns
#616: FILE: ./core/rtw_mlme.c:616:
+		if (pnetwork->network.infrastructure_mode != pmlmepriv->cur_network.network.infrastructure_mode)

CHECK: Unnecessary parentheses around adapter->mlmepriv
#632: FILE: ./core/rtw_mlme.c:632:
+	struct	mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: line length of 110 exceeds 100 columns
#644: FILE: ./core/rtw_mlme.c:644:
+		if (!memcmp(&(pmlmepriv->cur_network.network.mac_address), pnetwork->mac_address, ETH_ALEN)) {

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network.mac_address
#644: FILE: ./core/rtw_mlme.c:644:
+		if (!memcmp(&(pmlmepriv->cur_network.network.mac_address), pnetwork->mac_address, ETH_ALEN)) {

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#648: FILE: ./core/rtw_mlme.c:648:
+			spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 104 exceeds 100 columns
#649: FILE: ./core/rtw_mlme.c:649:
+			ibss_wlan = rtw_find_network(&pmlmepriv->scanned_queue,  pnetwork->mac_address);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#652: FILE: ./core/rtw_mlme.c:652:
+				spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#655: FILE: ./core/rtw_mlme.c:655:
+			spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around adapter->mlmepriv
#673: FILE: ./core/rtw_mlme.c:673:
+	struct	mlme_priv *pmlmepriv = &(adapter->mlmepriv);

WARNING: Unnecessary parentheses - maybe == should be = ?
#692: FILE: ./core/rtw_mlme.c:692:
+		if ((check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true)) {

CHECK: line length of 117 exceeds 100 columns
#700: FILE: ./core/rtw_mlme.c:700:
+					struct wlan_bssid_ex    *pdev_network = &(adapter->registrypriv.dev_network);

CHECK: Unnecessary parentheses around adapter->registrypriv.dev_network
#700: FILE: ./core/rtw_mlme.c:700:
+					struct wlan_bssid_ex    *pdev_network = &(adapter->registrypriv.dev_network);

CHECK: line length of 115 exceeds 100 columns
#703: FILE: ./core/rtw_mlme.c:703:
+					/* pmlmepriv->fw_state ^= _FW_UNDER_SURVEY;because don't set assoc_timer */

CHECK: line length of 125 exceeds 100 columns
#706: FILE: ./core/rtw_mlme.c:706:
+					memcpy(&pdev_network->ssid, &pmlmepriv->assoc_ssid, sizeof(struct ndis_802_11_ssid));

CHECK: braces {} should be used on all arms of this statement
#732: FILE: ./core/rtw_mlme.c:732:
+				if (rtw_to_roam(adapter) != 0) {
[...]
+				} else
[...]

CHECK: line length of 126 exceeds 100 columns
#734: FILE: ./core/rtw_mlme.c:734:
+						|| _SUCCESS != rtw_sitesurvey_cmd(adapter, &pmlmepriv->assoc_ssid, 1, NULL, 0)

CHECK: Logical continuations should be on the previous line
#734: FILE: ./core/rtw_mlme.c:734:
+					if (rtw_dec_to_roam(adapter) == 0
+						|| _SUCCESS != rtw_sitesurvey_cmd(adapter, &pmlmepriv->assoc_ssid, 1, NULL, 0)

CHECK: Unbalanced braces around else statement
#742: FILE: ./core/rtw_mlme.c:742:
+				} else

CHECK: Logical continuations should be on the previous line
#751: FILE: ./core/rtw_mlme.c:751:
+			if (check_fwstate(pmlmepriv, WIFI_STATION_STATE)
+				&& check_fwstate(pmlmepriv, _FW_LINKED)) {

CHECK: line length of 110 exceeds 100 columns
#753: FILE: ./core/rtw_mlme.c:753:
+					receive_disconnect(adapter, pmlmepriv->cur_network.network.mac_address

CHECK: Unnecessary parentheses around 'adapter->stapriv.asoc_sta_count == 1'
#820: FILE: ./core/rtw_mlme.c:820:
+	if (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) &&
+	    (adapter->stapriv.asoc_sta_count == 1))

WARNING: Block comments should align the * on each line
#826: FILE: ./core/rtw_mlme.c:826:
+/*
+*rtw_free_assoc_resources: the caller has to lock pmlmepriv->lock

CHECK: spaces preferred around that '|' (ctx:VxV)
#835: FILE: ./core/rtw_mlme.c:835:
+	if (check_fwstate(pmlmepriv, WIFI_STATION_STATE|WIFI_AP_STATE)) {
 	                                               ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#842: FILE: ./core/rtw_mlme.c:842:
+	if (check_fwstate(pmlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE)) {
 	                                             ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#842: FILE: ./core/rtw_mlme.c:842:
+	if (check_fwstate(pmlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE)) {
 	                                                                     ^

WARNING: Block comments should align the * on each line
#862: FILE: ./core/rtw_mlme.c:862:
+/*
+*rtw_indicate_connect: the caller has to lock pmlmepriv->lock

CHECK: Blank lines aren't necessary after an open brace '{'
#871: FILE: ./core/rtw_mlme.c:871:
+	if (!check_fwstate(&padapter->mlmepriv, _FW_LINKED)) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#880: FILE: ./core/rtw_mlme.c:880:
+
+}

WARNING: Block comments should align the * on each line
#883: FILE: ./core/rtw_mlme.c:883:
+/*
+*rtw_indicate_disconnect: the caller has to lock pmlmepriv->lock

CHECK: spaces preferred around that '|' (ctx:VxV)
#889: FILE: ./core/rtw_mlme.c:889:
+	_clr_fwstate_(pmlmepriv, _FW_UNDER_LINKING|WIFI_UNDER_WPS);
 	                                          ^

CHECK: Logical continuations should be on the previous line
#895: FILE: ./core/rtw_mlme.c:895:
+	if (check_fwstate(&padapter->mlmepriv, _FW_LINKED)
+		|| (rtw_to_roam(padapter) <= 0)

CHECK: Avoid CamelCase: <bInSuspend>
#914: FILE: ./core/rtw_mlme.c:914:
+	if ((!adapter_to_pwrctl(padapter)->bInSuspend) &&

CHECK: spaces preferred around that '|' (ctx:VxV)
#916: FILE: ./core/rtw_mlme.c:916:
+			    WIFI_ASOC_STATE|WIFI_UNDER_LINKING))) {
 			                   ^

CHECK: Unnecessary parentheses around adapter->mlmepriv
#925: FILE: ./core/rtw_mlme.c:925:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around adapter->mlmeextpriv
#926: FILE: ./core/rtw_mlme.c:926:
+	struct mlme_ext_priv *pmlmeext = &(adapter->mlmeextpriv);

CHECK: Logical continuations should be on the previous line
#931: FILE: ./core/rtw_mlme.c:931:
+	while (check_fwstate(pmlmepriv, _FW_UNDER_SURVEY)
+		&& jiffies_to_msecs(start) <= 200) {

CHECK: Blank lines aren't necessary after an open brace '{'
#932: FILE: ./core/rtw_mlme.c:932:
+		&& jiffies_to_msecs(start) <= 200) {
+

CHECK: line length of 107 exceeds 100 columns
#945: FILE: ./core/rtw_mlme.c:945:
+static struct sta_info *rtw_joinbss_update_stainfo(struct adapter *padapter, struct wlan_network *pnetwork)

CHECK: Avoid CamelCase: <binstallGrpkey>
#976: FILE: ./core/rtw_mlme.c:976:
+			padapter->securitypriv.binstallGrpkey = false;

CHECK: Avoid CamelCase: <Keytype>
#983: FILE: ./core/rtw_mlme.c:983:
+			memset((u8 *)&psta->dot118021x_UncstKey, 0, sizeof(union Keytype));

CHECK: line length of 123 exceeds 100 columns
#1002: FILE: ./core/rtw_mlme.c:1002:
+		/* if A-MPDU Rx is enabled, resetting  rx_ordering_ctrl wstart_b(indicate_seq) to default value = 0xffff */

CHECK: line length of 108 exceeds 100 columns
#1019: FILE: ./core/rtw_mlme.c:1019:
+				preorder_ctrl->wsize_b = 64;/* max_ampdu_sz;ex. 32(kbytes) -> wsize_b =32 */

CHECK: Blank lines aren't necessary before a close brace '}'
#1026: FILE: ./core/rtw_mlme.c:1026:
+
+}

CHECK: line length of 131 exceeds 100 columns
#1030: FILE: ./core/rtw_mlme.c:1030:
+static void rtw_joinbss_update_network(struct adapter *padapter, struct wlan_network *ptarget_wlan, struct wlan_network  *pnetwork)

CHECK: Unnecessary parentheses around padapter->mlmepriv
#1032: FILE: ./core/rtw_mlme.c:1032:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#1033: FILE: ./core/rtw_mlme.c:1033:
+	struct wlan_network  *cur_network = &(pmlmepriv->cur_network);

CHECK: line length of 132 exceeds 100 columns
#1047: FILE: ./core/rtw_mlme.c:1047:
+	/* the ptarget_wlan->network.rssi is raw data, we use ptarget_wlan->network.phy_info.signal_strength instead (has scaled) */

CHECK: line length of 110 exceeds 100 columns
#1048: FILE: ./core/rtw_mlme.c:1048:
+	padapter->recvpriv.rssi = translate_percentage_to_dbm(ptarget_wlan->network.phy_info.signal_strength);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1056: FILE: ./core/rtw_mlme.c:1056:
+			if (pmlmepriv->fw_state&WIFI_UNDER_WPS)
 			                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1057: FILE: ./core/rtw_mlme.c:1057:
+				pmlmepriv->fw_state = WIFI_STATION_STATE|WIFI_UNDER_WPS;
 				                                        ^

CHECK: line length of 103 exceeds 100 columns
#1070: FILE: ./core/rtw_mlme.c:1070:
+	rtw_update_protection(padapter, (cur_network->network.ies) + sizeof(struct ndis_802_11_fix_ie),

CHECK: line length of 106 exceeds 100 columns
#1071: FILE: ./core/rtw_mlme.c:1071:
+									(cur_network->network.ie_length));

CHECK: Alignment should match open parenthesis
#1071: FILE: ./core/rtw_mlme.c:1071:
+	rtw_update_protection(padapter, (cur_network->network.ies) + sizeof(struct ndis_802_11_fix_ie),
+									(cur_network->network.ie_length));

CHECK: line length of 145 exceeds 100 columns
#1073: FILE: ./core/rtw_mlme.c:1073:
+	rtw_update_ht_cap(padapter, cur_network->network.ies, cur_network->network.ie_length, (u8) cur_network->network.configuration.ds_config);

CHECK: No space is necessary after a cast
#1073: FILE: ./core/rtw_mlme.c:1073:
+	rtw_update_ht_cap(padapter, cur_network->network.ies, cur_network->network.ie_length, (u8) cur_network->network.configuration.ds_config);

CHECK: line length of 110 exceeds 100 columns
#1079: FILE: ./core/rtw_mlme.c:1079:
+/* if join_res > 0, for (fw_state ==WIFI_STATION_STATE), we check if  "ptarget_sta" & "ptarget_wlan" exist. */

CHECK: line length of 104 exceeds 100 columns
#1081: FILE: ./core/rtw_mlme.c:1081:
+/* if join_res > 0, update "cur_network->network" from "pnetwork->network" if (ptarget_wlan != NULL). */

CHECK: Unnecessary parentheses around adapter->mlmepriv
#1089: FILE: ./core/rtw_mlme.c:1089:
+	struct	mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#1091: FILE: ./core/rtw_mlme.c:1091:
+	struct wlan_network	*cur_network = &(pmlmepriv->cur_network);

CHECK: line length of 110 exceeds 100 columns
#1097: FILE: ./core/rtw_mlme.c:1097:
+	the_same_macaddr = !memcmp(pnetwork->network.mac_address, cur_network->network.mac_address, ETH_ALEN);

CHECK: Avoid CamelCase: <LowPowerTransitionCount>
#1106: FILE: ./core/rtw_mlme.c:1106:
+	pmlmepriv->LinkDetectInfo.LowPowerTransitionCount = 0;

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1109: FILE: ./core/rtw_mlme.c:1109:
+		spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 133 exceeds 100 columns
#1115: FILE: ./core/rtw_mlme.c:1115:
+					ptarget_wlan = rtw_find_network(&pmlmepriv->scanned_queue, cur_network->network.mac_address);

CHECK: line length of 130 exceeds 100 columns
#1117: FILE: ./core/rtw_mlme.c:1117:
+					pcur_wlan = rtw_find_network(&pmlmepriv->scanned_queue, cur_network->network.mac_address);

CHECK: line length of 111 exceeds 100 columns
#1121: FILE: ./core/rtw_mlme.c:1121:
+					pcur_sta = rtw_get_stainfo(pstapriv, cur_network->network.mac_address);

CHECK: line length of 130 exceeds 100 columns
#1125: FILE: ./core/rtw_mlme.c:1125:
+					ptarget_wlan = rtw_find_network(&pmlmepriv->scanned_queue, pnetwork->network.mac_address);

WARNING: Too many leading tabs - consider code refactoring
#1127: FILE: ./core/rtw_mlme.c:1127:
+						if (ptarget_wlan)

CHECK: line length of 107 exceeds 100 columns
#1133: FILE: ./core/rtw_mlme.c:1133:
+				ptarget_wlan = _rtw_find_same_network(&pmlmepriv->scanned_queue, pnetwork);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1146: FILE: ./core/rtw_mlme.c:1146:
+				spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 118 exceeds 100 columns
#1150: FILE: ./core/rtw_mlme.c:1150:
+			/* s3. find ptarget_sta & update ptarget_sta after update cur_network only for station mode */

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1154: FILE: ./core/rtw_mlme.c:1154:
+					spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1172: FILE: ./core/rtw_mlme.c:1172:
+			spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: spaces preferred around that '<<' (ctx:VxV)
#1229: FILE: ./core/rtw_mlme.c:1229:
+	media_status_rpt = (u16)((psta->mac_id<<8)|mstatus); /*   MACID|OPMODE:1 connect */
 	                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1229: FILE: ./core/rtw_mlme.c:1229:
+	media_status_rpt = (u16)((psta->mac_id<<8)|mstatus); /*   MACID|OPMODE:1 connect */
 	                                          ^

CHECK: Unnecessary parentheses around adapter->mlmepriv
#1236: FILE: ./core/rtw_mlme.c:1236:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#1238: FILE: ./core/rtw_mlme.c:1238:
+	struct wlan_network	*cur_network = &(pmlmepriv->cur_network);

CHECK: line length of 118 exceeds 100 columns
#1283: FILE: ./core/rtw_mlme.c:1283:
+		return; /* between drv has received this event before and  fw have not yet to set key to CAM_ENTRY) */

CHECK: Alignment should match open parenthesis
#1307: FILE: ./core/rtw_mlme.c:1307:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true) ||
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true)) {

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1309: FILE: ./core/rtw_mlme.c:1309:
+			spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 117 exceeds 100 columns
#1310: FILE: ./core/rtw_mlme.c:1310:
+			ptarget_wlan = rtw_find_network(&pmlmepriv->scanned_queue, cur_network->network.mac_address);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1314: FILE: ./core/rtw_mlme.c:1314:
+			spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around adapter->mlmepriv
#1332: FILE: ./core/rtw_mlme.c:1332:
+	struct	mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#1334: FILE: ./core/rtw_mlme.c:1334:
+	struct wlan_network *tgt_network = &(pmlmepriv->cur_network);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1336: FILE: ./core/rtw_mlme.c:1336:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '<<' (ctx:VxV)
#1347: FILE: ./core/rtw_mlme.c:1347:
+		media_status = (mac_id<<8)|0; /*   MACID|OPMODE:0 means disconnect */
 		                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1347: FILE: ./core/rtw_mlme.c:1347:
+		media_status = (mac_id<<8)|0; /*   MACID|OPMODE:0 means disconnect */
 		                          ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1353: FILE: ./core/rtw_mlme.c:1353:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)
 	                     ^

CHECK: line length of 118 exceeds 100 columns
#1367: FILE: ./core/rtw_mlme.c:1367:
+		} else if (reason == WLAN_REASON_EXPIRATION_CHK && rtw_chk_roam_flags(adapter, RTW_ROAM_ON_EXPIRED)) {

CHECK: line length of 111 exceeds 100 columns
#1369: FILE: ./core/rtw_mlme.c:1369:
+		} else if (reason == WLAN_REASON_ACTIVE_ROAM && rtw_chk_roam_flags(adapter, RTW_ROAM_ACTIVE)) {

CHECK: line length of 120 exceeds 100 columns
#1376: FILE: ./core/rtw_mlme.c:1376:
+				rtw_dec_to_roam(adapter); /* this stadel_event is caused by roaming, decrease to_roam */

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1388: FILE: ./core/rtw_mlme.c:1388:
+		spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 102 exceeds 100 columns
#1390: FILE: ./core/rtw_mlme.c:1390:
+		pwlan = rtw_find_network(&pmlmepriv->scanned_queue, tgt_network->network.mac_address);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1395: FILE: ./core/rtw_mlme.c:1395:
+		spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Alignment should match open parenthesis
#1401: FILE: ./core/rtw_mlme.c:1401:
+	if (check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) ||
+	      check_fwstate(pmlmepriv, WIFI_ADHOC_STATE)) {

CHECK: Blank lines aren't necessary after an open brace '{'
#1402: FILE: ./core/rtw_mlme.c:1402:
+	      check_fwstate(pmlmepriv, WIFI_ADHOC_STATE)) {
+

CHECK: line length of 105 exceeds 100 columns
#1405: FILE: ./core/rtw_mlme.c:1405:
+		if (adapter->stapriv.asoc_sta_count == 1) {/* a sta + bc/mc_stainfo (not Ibss_stainfo) */

WARNING: Missing a blank line after declarations
#1407: FILE: ./core/rtw_mlme.c:1407:
+			u8 ret = _SUCCESS;
+			spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1407: FILE: ./core/rtw_mlme.c:1407:
+			spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 110 exceeds 100 columns
#1409: FILE: ./core/rtw_mlme.c:1409:
+			pwlan = rtw_find_network(&pmlmepriv->scanned_queue, tgt_network->network.mac_address);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1414: FILE: ./core/rtw_mlme.c:1414:
+			spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around adapter->registrypriv.dev_network
#1416: FILE: ./core/rtw_mlme.c:1416:
+			pdev_network = &(adapter->registrypriv.dev_network);

CHECK: line length of 113 exceeds 100 columns
#1419: FILE: ./core/rtw_mlme.c:1419:
+			memcpy(pdev_network, &tgt_network->network, get_wlan_bssid_ex_sz(&tgt_network->network));

CHECK: line length of 109 exceeds 100 columns
#1421: FILE: ./core/rtw_mlme.c:1421:
+			memcpy(&pdev_network->ssid, &pmlmepriv->assoc_ssid, sizeof(struct ndis_802_11_ssid));

CHECK: Blank lines aren't necessary before a close brace '}'
#1437: FILE: ./core/rtw_mlme.c:1437:
+
+	}

CHECK: Avoid CamelCase: <WMMOnAssocRsp>
#1454: FILE: ./core/rtw_mlme.c:1454:
+	WMMOnAssocRsp(padapter);

WARNING: Block comments should align the * on each line
#1458: FILE: ./core/rtw_mlme.c:1458:
+/*
+* _rtw_join_timeout_handler - Timeout/failure handler for CMD JoinBss

WARNING: else is not generally useful after a break or return
#1483: FILE: ./core/rtw_mlme.c:1483:
+				break;
+			} else {

CHECK: line length of 103 exceeds 100 columns
#1493: FILE: ./core/rtw_mlme.c:1493:
+		/* indicate disconnect for the case that join_timeout and check_fwstate != FW_LINKED */

CHECK: Blank lines aren't necessary before a close brace '}'
#1496: FILE: ./core/rtw_mlme.c:1496:
+
+	}

WARNING: Block comments should align the * on each line
#1502: FILE: ./core/rtw_mlme.c:1502:
+/*
+* rtw_scan_timeout_handler - Timeout/Failure handler for CMD SiteSurvey

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1524: FILE: ./core/rtw_mlme.c:1524:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: braces {} should be used on all arms of this statement
#1526: FILE: ./core/rtw_mlme.c:1526:
+	if (pmlmeinfo->VHT_enable) /* disable auto scan when connect to 11AC AP */
[...]
+	else if (adapter->registrypriv.wifi_spec && is_client_associated_to_ap(adapter) == true)
[...]
+	else if (rtw_chk_roam_flags(adapter, RTW_ROAM_ACTIVE)) {
[...]
+	} else
[...]

CHECK: spaces preferred around that '*' (ctx:VxV)
#1529: FILE: ./core/rtw_mlme.c:1529:
+		mlme->auto_scan_int_ms = 60*1000;
 		                           ^

CHECK: Unbalanced braces around else statement
#1533: FILE: ./core/rtw_mlme.c:1533:
+	} else

CHECK: line length of 106 exceeds 100 columns
#1544: FILE: ./core/rtw_mlme.c:1544:
+		&& jiffies_to_msecs(jiffies - pmlmepriv->scan_start_time) > pmlmepriv->auto_scan_int_ms) {

CHECK: Logical continuations should be on the previous line
#1544: FILE: ./core/rtw_mlme.c:1544:
+	if (pmlmepriv->auto_scan_int_ms != 0
+		&& jiffies_to_msecs(jiffies - pmlmepriv->scan_start_time) > pmlmepriv->auto_scan_int_ms) {

CHECK: Blank lines aren't necessary after an open brace '{'
#1545: FILE: ./core/rtw_mlme.c:1545:
+		&& jiffies_to_msecs(jiffies - pmlmepriv->scan_start_time) > pmlmepriv->auto_scan_int_ms) {
+

CHECK: Logical continuations should be on the previous line
#1576: FILE: ./core/rtw_mlme.c:1576:
+	if ((adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+		&& !(hal_btcoex_IsBtControlLps(adapter))

CHECK: line length of 112 exceeds 100 columns
#1587: FILE: ./core/rtw_mlme.c:1587:
+			/* call rtw_lps_ctrl_wk_cmd(padapter, LPS_CTRL_LEAVE, 1) in traffic_status_watchdog() */

WARNING: Block comments should align the * on each line
#1621: FILE: ./core/rtw_mlme.c:1621:
+/*
+* Select a new roaming candidate from the original @param candidate and @param competitor

CHECK: line length of 105 exceeds 100 columns
#1647: FILE: ./core/rtw_mlme.c:1647:
+	if (competitor->network.rssi - mlme->cur_network_scanned->network.rssi < mlme->roam_rssi_diff_th)

CHECK: Unnecessary parentheses around mlme->scanned_queue
#1665: FILE: ./core/rtw_mlme.c:1665:
+	struct __queue	*queue	= &(mlme->scanned_queue);

CHECK: Unnecessary parentheses around mlme->scanned_queue.lock
#1674: FILE: ./core/rtw_mlme.c:1674:
+	spin_lock_bh(&(mlme->scanned_queue.lock));

CHECK: Blank lines aren't necessary after an open brace '{'
#1678: FILE: ./core/rtw_mlme.c:1678:
+	list_for_each(mlme->pscanned, phead) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1684: FILE: ./core/rtw_mlme.c:1684:
+
+	}

CHECK: Unnecessary parentheses around mlme->scanned_queue.lock
#1698: FILE: ./core/rtw_mlme.c:1698:
+	spin_unlock_bh(&(mlme->scanned_queue.lock));

WARNING: Block comments should align the * on each line
#1704: FILE: ./core/rtw_mlme.c:1704:
+/*
+* Select a new join candidate from the original @param candidate and @param competitor

CHECK: line length of 117 exceeds 100 columns
#1723: FILE: ./core/rtw_mlme.c:1723:
+			|| memcmp(competitor->network.ssid.ssid, mlme->assoc_ssid.ssid, mlme->assoc_ssid.ssid_length)

CHECK: Logical continuations should be on the previous line
#1723: FILE: ./core/rtw_mlme.c:1723:
+		if (competitor->network.ssid.ssid_length != mlme->assoc_ssid.ssid_length
+			|| memcmp(competitor->network.ssid.ssid, mlme->assoc_ssid.ssid, mlme->assoc_ssid.ssid_length)

CHECK: Logical continuations should be on the previous line
#1733: FILE: ./core/rtw_mlme.c:1733:
+		if (jiffies_to_msecs(jiffies - competitor->last_scanned) >= mlme->roam_scanr_exp_ms
+			|| is_same_ess(&competitor->network, &mlme->cur_network.network) == false

WARNING: Block comments use * on subsequent lines
#1748: FILE: ./core/rtw_mlme.c:1748:
+/*
+Calling context:

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue
#1759: FILE: ./core/rtw_mlme.c:1759:
+	struct __queue	*queue	= &(pmlmepriv->scanned_queue);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1765: FILE: ./core/rtw_mlme.c:1765:
+	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Blank lines aren't necessary after an open brace '{'
#1775: FILE: ./core/rtw_mlme.c:1775:
+	list_for_each(pmlmepriv->pscanned, phead) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1781: FILE: ./core/rtw_mlme.c:1781:
+
+	}

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1803: FILE: ./core/rtw_mlme.c:1803:
+	spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around adapter->cmdpriv
#1811: FILE: ./core/rtw_mlme.c:1811:
+	struct	cmd_priv *pcmdpriv = &(adapter->cmdpriv);

CHECK: Avoid CamelCase: <_SetAuth_CMD_>
#1829: FILE: ./core/rtw_mlme.c:1829:
+	pcmd->cmdcode = _SetAuth_CMD_;

CHECK: line length of 127 exceeds 100 columns
#1843: FILE: ./core/rtw_mlme.c:1843:
+signed int rtw_set_key(struct adapter *adapter, struct security_priv *psecuritypriv, signed int keyid, u8 set_tx, bool enqueue)

WARNING: please, no space before tabs
#1848: FILE: ./core/rtw_mlme.c:1848:
+^Istruct cmd_priv ^I*pcmdpriv = &(adapter->cmdpriv);$

CHECK: Unnecessary parentheses around adapter->cmdpriv
#1848: FILE: ./core/rtw_mlme.c:1848:
+	struct cmd_priv 	*pcmdpriv = &(adapter->cmdpriv);

CHECK: Avoid CamelCase: <dot118021XGrpPrivacy>
#1858: FILE: ./core/rtw_mlme.c:1858:
+		psetkeyparm->algorithm = (unsigned char)psecuritypriv->dot118021XGrpPrivacy;

CHECK: Blank lines aren't necessary after an open brace '{'
#1868: FILE: ./core/rtw_mlme.c:1868:
+	switch (psetkeyparm->algorithm) {
+

CHECK: line length of 101 exceeds 100 columns
#1871: FILE: ./core/rtw_mlme.c:1871:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: Unnecessary parentheses around psetkeyparm->key[0]
#1871: FILE: ./core/rtw_mlme.c:1871:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: Unnecessary parentheses around psecuritypriv->dot11DefKey[keyid].skey[0]
#1871: FILE: ./core/rtw_mlme.c:1871:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: line length of 101 exceeds 100 columns
#1875: FILE: ./core/rtw_mlme.c:1875:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: Unnecessary parentheses around psetkeyparm->key[0]
#1875: FILE: ./core/rtw_mlme.c:1875:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: Unnecessary parentheses around psecuritypriv->dot11DefKey[keyid].skey[0]
#1875: FILE: ./core/rtw_mlme.c:1875:
+		memcpy(&(psetkeyparm->key[0]), &(psecuritypriv->dot11DefKey[keyid].skey[0]), keylen);

CHECK: line length of 106 exceeds 100 columns
#1919: FILE: ./core/rtw_mlme.c:1919:
+int rtw_restruct_wmm_ie(struct adapter *adapter, u8 *in_ie, u8 *out_ie, uint in_len, uint initial_out_len)

CHECK: line length of 173 exceeds 100 columns
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */

CHECK: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */
 		                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */
 		                                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */
 		                                                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */
 		                                                                                                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: ./core/rtw_mlme.c:1928:
+		if (in_ie[i] == 0xDD && in_ie[i+2] == 0x00 && in_ie[i+3] == 0x50  && in_ie[i+4] == 0xF2 && in_ie[i+5] == 0x02 && i+5 < in_len) { /* WMM element ID and OUI */
 		                                                                                                                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1940: FILE: ./core/rtw_mlme.c:1940:
+		i += (in_ie[i+1]+2); /*  to the next IE element */
 		             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1940: FILE: ./core/rtw_mlme.c:1940:
+		i += (in_ie[i+1]+2); /*  to the next IE element */
 		                ^

CHECK: Blank lines aren't necessary before a close brace '}'
#1945: FILE: ./core/rtw_mlme.c:1945:
+
+}

WARNING: please, no space before tabs
#1953: FILE: ./core/rtw_mlme.c:1953:
+/* ^I^I-1^I^I:if there is no pre-auth key in the  table */$

WARNING: please, no space before tabs
#1954: FILE: ./core/rtw_mlme.c:1954:
+/* ^I^I>= 0^I^I:if there is pre-auth key, and   return the entry id */$

CHECK: Avoid CamelCase: <SecIsInPMKIDList>
#1958: FILE: ./core/rtw_mlme.c:1958:
+static int SecIsInPMKIDList(struct adapter *Adapter, u8 *bssid)

CHECK: Unnecessary parentheses around 'p->PMKIDList[i].bUsed'
#1964: FILE: ./core/rtw_mlme.c:1964:
+		if ((p->PMKIDList[i].bUsed) &&
+				(!memcmp(p->PMKIDList[i].Bssid, bssid, ETH_ALEN)))

CHECK: Avoid CamelCase: <PMKIDList>
#1964: FILE: ./core/rtw_mlme.c:1964:
+		if ((p->PMKIDList[i].bUsed) &&

CHECK: Avoid CamelCase: <bUsed>
#1964: FILE: ./core/rtw_mlme.c:1964:
+		if ((p->PMKIDList[i].bUsed) &&

CHECK: Alignment should match open parenthesis
#1965: FILE: ./core/rtw_mlme.c:1965:
+		if ((p->PMKIDList[i].bUsed) &&
+				(!memcmp(p->PMKIDList[i].Bssid, bssid, ETH_ALEN)))

CHECK: Avoid CamelCase: <Bssid>
#1965: FILE: ./core/rtw_mlme.c:1965:
+				(!memcmp(p->PMKIDList[i].Bssid, bssid, ETH_ALEN)))

CHECK: Avoid CamelCase: <iEntry>
#1978: FILE: ./core/rtw_mlme.c:1978:
+static int rtw_append_pmkid(struct adapter *Adapter, int iEntry, u8 *ie, uint ie_len)

CHECK: Unnecessary parentheses around 'ndisauthmode == Ndis802_11AuthModeWPA'
#2008: FILE: ./core/rtw_mlme.c:2008:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA) || (ndisauthmode == Ndis802_11AuthModeWPAPSK))

CHECK: Unnecessary parentheses around 'ndisauthmode == Ndis802_11AuthModeWPAPSK'
#2008: FILE: ./core/rtw_mlme.c:2008:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA) || (ndisauthmode == Ndis802_11AuthModeWPAPSK))

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWPA>
#2008: FILE: ./core/rtw_mlme.c:2008:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA) || (ndisauthmode == Ndis802_11AuthModeWPAPSK))

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWPAPSK>
#2008: FILE: ./core/rtw_mlme.c:2008:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA) || (ndisauthmode == Ndis802_11AuthModeWPAPSK))

CHECK: Unnecessary parentheses around 'ndisauthmode == Ndis802_11AuthModeWPA2'
#2010: FILE: ./core/rtw_mlme.c:2010:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA2) || (ndisauthmode == Ndis802_11AuthModeWPA2PSK))

CHECK: Unnecessary parentheses around 'ndisauthmode == Ndis802_11AuthModeWPA2PSK'
#2010: FILE: ./core/rtw_mlme.c:2010:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA2) || (ndisauthmode == Ndis802_11AuthModeWPA2PSK))

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWPA2>
#2010: FILE: ./core/rtw_mlme.c:2010:
+	if ((ndisauthmode == Ndis802_11AuthModeWPA2) || (ndisauthmode == Ndis802_11AuthModeWPA2PSK))

CHECK: spaces preferred around that '+' (ctx:VxV)
#2014: FILE: ./core/rtw_mlme.c:2014:
+		memcpy(out_ie+ielength, psecuritypriv->wps_ie, psecuritypriv->wps_ie_len);
 		             ^

CHECK: line length of 111 exceeds 100 columns
#2019: FILE: ./core/rtw_mlme.c:2019:
+		memcpy(&out_ie[ielength], &psecuritypriv->supplicant_ie[0], psecuritypriv->supplicant_ie[1]+2);

CHECK: spaces preferred around that '+' (ctx:VxV)
#2019: FILE: ./core/rtw_mlme.c:2019:
+		memcpy(&out_ie[ielength], &psecuritypriv->supplicant_ie[0], psecuritypriv->supplicant_ie[1]+2);
 		                                                                                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2020: FILE: ./core/rtw_mlme.c:2020:
+		ielength += psecuritypriv->supplicant_ie[1]+2;
 		                                           ^

CHECK: line length of 105 exceeds 100 columns
#2057: FILE: ./core/rtw_mlme.c:2057:
+	pdev_network->privacy = (psecuritypriv->dot11PrivacyAlgrthm > 0 ? 1 : 0) ; /*  adhoc no 802.1x */

CHECK: line length of 134 exceeds 100 columns
#2087: FILE: ./core/rtw_mlme.c:2087:
+	/* rtw_set_supported_rate(pdev_network->supported_rates, pregistrypriv->wireless_mode) ;  will be called in rtw_generate_ie */

CHECK: line length of 102 exceeds 100 columns
#2094: FILE: ./core/rtw_mlme.c:2094:
+	/* notes: translate ie_length & length after assign the length to cmdsz in createbss_cmd(); */

WARNING: please, no space before tabs
#2108: FILE: ./core/rtw_mlme.c:2108:
+^Istruct ht_priv ^I*phtpriv = &pmlmepriv->htpriv;$

CHECK: line length of 103 exceeds 100 columns
#2110: FILE: ./core/rtw_mlme.c:2110:
+	/* todo: if you want to do something io/reg/hw setting before join_bss, please add code here */

CHECK: Avoid CamelCase: <num_FortyMHzIntolerant>
#2112: FILE: ./core/rtw_mlme.c:2112:
+	pmlmepriv->num_FortyMHzIntolerant = 0;

WARNING: please, no space before tabs
#2134: FILE: ./core/rtw_mlme.c:2134:
+^Istruct mlme_priv ^I*pmlmepriv = &padapter->mlmepriv;$

WARNING: please, no space before tabs
#2135: FILE: ./core/rtw_mlme.c:2135:
+^Istruct ht_priv ^I*phtpriv = &pmlmepriv->htpriv;$

CHECK: Avoid CamelCase: <bHwLDPCSupport>
#2137: FILE: ./core/rtw_mlme.c:2137:
+	bool		bHwLDPCSupport = false, bHwSTBCSupport = false;

CHECK: Avoid CamelCase: <bHwSTBCSupport>
#2137: FILE: ./core/rtw_mlme.c:2137:
+	bool		bHwLDPCSupport = false, bHwSTBCSupport = false;

CHECK: Avoid CamelCase: <bHwSupportBeamformer>
#2138: FILE: ./core/rtw_mlme.c:2138:
+	bool		bHwSupportBeamformer = false, bHwSupportBeamformee = false;

CHECK: Avoid CamelCase: <bHwSupportBeamformee>
#2138: FILE: ./core/rtw_mlme.c:2138:
+	bool		bHwSupportBeamformer = false, bHwSupportBeamformee = false;

CHECK: spaces preferred around that '+' (ctx:VxV)
#2192: FILE: ./core/rtw_mlme.c:2192:
+		rtw_set_ie(out_ie+out_len, WLAN_EID_VENDOR_SPECIFIC,
 		                 ^

CHECK: Avoid CamelCase: <_WMM_IE_Length_>
#2193: FILE: ./core/rtw_mlme.c:2193:
+			   _WMM_IE_Length_, WMM_IE, pout_len);

CHECK: line length of 124 exceeds 100 columns
#2200: FILE: ./core/rtw_mlme.c:2200:
+unsigned int rtw_restructure_ht_ie(struct adapter *padapter, u8 *in_ie, u8 *out_ie, uint in_len, uint *pout_len, u8 channel)

WARNING: please, no space before tabs
#2209: FILE: ./core/rtw_mlme.c:2209:
+^Istruct ht_priv ^I*phtpriv = &pmlmepriv->htpriv;$

CHECK: Unbalanced braces around else statement
#2230: FILE: ./core/rtw_mlme.c:2230:
+		} else

CHECK: Unnecessary parentheses around 'ielen == sizeof(struct ieee80211_ht_addt_info)'
#2235: FILE: ./core/rtw_mlme.c:2235:
+		if (p && (ielen == sizeof(struct ieee80211_ht_addt_info))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#2236: FILE: ./core/rtw_mlme.c:2236:
+			struct HT_info_element *pht_info = (struct HT_info_element *)(p+2);
 			                                                               ^

CHECK: Unnecessary parentheses around 'cbw40_enable == 1'
#2263: FILE: ./core/rtw_mlme.c:2263:
+	if ((cbw40_enable == 1) && (operation_bw == CHANNEL_WIDTH_40)) {

CHECK: Unnecessary parentheses around 'operation_bw == CHANNEL_WIDTH_40'
#2263: FILE: ./core/rtw_mlme.c:2263:
+	if ((cbw40_enable == 1) && (operation_bw == CHANNEL_WIDTH_40)) {

CHECK: Unnecessary parentheses around 'pregistrypriv->wifi_spec == 1'
#2276: FILE: ./core/rtw_mlme.c:2276:
+		if ((channel <= 14 && pregistrypriv->rx_stbc == 0x1) ||	/* enable for 2.4GHz */
+			(pregistrypriv->wifi_spec == 1))

CHECK: line length of 110 exceeds 100 columns
#2286: FILE: ./core/rtw_mlme.c:2286:
+		ht_capie.cap_info |= cpu_to_le16(IEEE80211_HT_CAP_RX_STBC_1R);/* RX STBC One spatial stream */

CHECK: spaces preferred around that '&' (ctx:VxV)
#2304: FILE: ./core/rtw_mlme.c:2304:
+	ht_capie.ampdu_params_info = (max_rx_ampdu_factor&0x03);
 	                                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2307: FILE: ./core/rtw_mlme.c:2307:
+		ht_capie.ampdu_params_info |= (IEEE80211_HT_CAP_AMPDU_DENSITY&(0x07<<2));
 		                                                             ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#2307: FILE: ./core/rtw_mlme.c:2307:
+		ht_capie.ampdu_params_info |= (IEEE80211_HT_CAP_AMPDU_DENSITY&(0x07<<2));
 		                                                                   ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2309: FILE: ./core/rtw_mlme.c:2309:
+		ht_capie.ampdu_params_info |= (IEEE80211_HT_CAP_AMPDU_DENSITY&0x00);
 		                                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2311: FILE: ./core/rtw_mlme.c:2311:
+	rtw_set_ie(out_ie+out_len, WLAN_EID_HT_CAPABILITY,
 	                 ^

CHECK: Unnecessary parentheses around 'ielen == sizeof(struct ieee80211_ht_addt_info)'
#2318: FILE: ./core/rtw_mlme.c:2318:
+		if (p && (ielen == sizeof(struct ieee80211_ht_addt_info))) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#2320: FILE: ./core/rtw_mlme.c:2320:
+			rtw_set_ie(out_ie+out_len, WLAN_EID_HT_OPERATION, ielen, p+2, pout_len);
 			                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2320: FILE: ./core/rtw_mlme.c:2320:
+			rtw_set_ie(out_ie+out_len, WLAN_EID_HT_OPERATION, ielen, p+2, pout_len);
 			                                                          ^

CHECK: Blank lines aren't necessary before a close brace '}'
#2326: FILE: ./core/rtw_mlme.c:2326:
+
+}

WARNING: please, no space before tabs
#2335: FILE: ./core/rtw_mlme.c:2335:
+^Istruct ht_priv ^I*phtpriv = &pmlmepriv->htpriv;$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2338: FILE: ./core/rtw_mlme.c:2338:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around '!pmlmeinfo->HT_info_enable'
#2344: FILE: ./core/rtw_mlme.c:2344:
+	if ((!pmlmeinfo->HT_info_enable) || (!pmlmeinfo->HT_caps_enable))

CHECK: Unnecessary parentheses around '!pmlmeinfo->HT_caps_enable'
#2344: FILE: ./core/rtw_mlme.c:2344:
+	if ((!pmlmeinfo->HT_info_enable) || (!pmlmeinfo->HT_caps_enable))

CHECK: line length of 134 exceeds 100 columns
#2353: FILE: ./core/rtw_mlme.c:2353:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_CAPABILITY, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));

CHECK: spaces preferred around that '+' (ctx:VxV)
#2353: FILE: ./core/rtw_mlme.c:2353:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_CAPABILITY, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));
 	                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2353: FILE: ./core/rtw_mlme.c:2353:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_CAPABILITY, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));
 	                                                                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2355: FILE: ./core/rtw_mlme.c:2355:
+		pht_capie = (struct ieee80211_ht_cap *)(p+2);
 		                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2357: FILE: ./core/rtw_mlme.c:2357:
+		max_ampdu_sz = 1 << (max_ampdu_sz+3); /*  max_ampdu_sz (kbytes); */
 		                                 ^

CHECK: Blank lines aren't necessary before a close brace '}'
#2361: FILE: ./core/rtw_mlme.c:2361:
+
+	}

CHECK: line length of 133 exceeds 100 columns
#2364: FILE: ./core/rtw_mlme.c:2364:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_OPERATION, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));

CHECK: spaces preferred around that '+' (ctx:VxV)
#2364: FILE: ./core/rtw_mlme.c:2364:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_OPERATION, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));
 	                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2364: FILE: ./core/rtw_mlme.c:2364:
+	p = rtw_get_ie(pie+sizeof(struct ndis_802_11_fix_ie), WLAN_EID_HT_OPERATION, &len, ie_len-sizeof(struct ndis_802_11_fix_ie));
 	                                                                                         ^

WARNING: braces {} are not necessary for single statement blocks
#2365: FILE: ./core/rtw_mlme.c:2365:
+	if (p && len > 0) {
+		/* todo: */
+	}

CHECK: line length of 114 exceeds 100 columns
#2385: FILE: ./core/rtw_mlme.c:2385:
+			pmlmeinfo->HT_caps.u.HT_cap_element.MCS_rate[i] &= pmlmeext->default_supported_mcs_set[i];

CHECK: Unnecessary parentheses around 'padapter->mlmepriv.LinkDetectInfo.NumTxOkInPeriod < 100'
#2430: FILE: ./core/rtw_mlme.c:2430:
+	if (bmcst || (padapter->mlmepriv.LinkDetectInfo.NumTxOkInPeriod < 100))

CHECK: spaces preferred around that '>>' (ctx:VxV)
#2448: FILE: ./core/rtw_mlme.c:2448:
+		issued = (phtpriv->agg_enable_bitmap>>priority)&0x1;
 		                                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2448: FILE: ./core/rtw_mlme.c:2448:
+		issued = (phtpriv->agg_enable_bitmap>>priority)&0x1;
 		                                               ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#2449: FILE: ./core/rtw_mlme.c:2449:
+		issued |= (phtpriv->candidate_tid_bitmap>>priority)&0x1;
 		                                        ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2449: FILE: ./core/rtw_mlme.c:2449:
+		issued |= (phtpriv->candidate_tid_bitmap>>priority)&0x1;
 		                                                   ^

CHECK: No space is necessary after a cast
#2453: FILE: ./core/rtw_mlme.c:2453:
+			rtw_addbareq_cmd(padapter, (u8) priority, pattrib->ra);

CHECK: Blank lines aren't necessary before a close brace '}'
#2457: FILE: ./core/rtw_mlme.c:2457:
+
+}

WARNING: please, no space before tabs
#2462: FILE: ./core/rtw_mlme.c:2462:
+^Istruct ht_priv ^I*phtpriv = &pmlmepriv->htpriv;$

CHECK: Please use a blank line after function/struct/union/enum declarations
#2497: FILE: ./core/rtw_mlme.c:2497:
+}
+void _rtw_roaming(struct adapter *padapter, struct wlan_network *tgt_network)

CHECK: line length of 108 exceeds 100 columns
#2503: FILE: ./core/rtw_mlme.c:2503:
+		memcpy(&pmlmepriv->assoc_ssid, &cur_network->network.ssid, sizeof(struct ndis_802_11_ssid));

CHECK: line length of 113 exceeds 100 columns
#2520: FILE: ./core/rtw_mlme.c:2520:
+			(check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE) == true)) {

CHECK: Alignment should match open parenthesis
#2520: FILE: ./core/rtw_mlme.c:2520:
+	if ((check_fwstate(&padapter->mlmepriv, WIFI_AP_STATE) == true) ||
+			(check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE) == true)) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#2520: FILE: ./core/rtw_mlme.c:2520:
+			(check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE) == true)) {
 			                                                    ^

total: 0 errors, 30 warnings, 297 checks, 2528 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_mlme.c has style problems, please review.
---------------------
./core/rtw_mlme_ext.c
---------------------
CHECK: Avoid CamelCase: <OnAssocReq>
#14: FILE: ./core/rtw_mlme_ext.c:14:
+	{WIFI_ASSOCREQ,		"OnAssocReq",	&OnAssocReq},

CHECK: Avoid CamelCase: <OnAssocRsp>
#15: FILE: ./core/rtw_mlme_ext.c:15:
+	{WIFI_ASSOCRSP,		"OnAssocRsp",	&OnAssocRsp},

CHECK: Avoid CamelCase: <OnProbeReq>
#18: FILE: ./core/rtw_mlme_ext.c:18:
+	{WIFI_PROBEREQ,		"OnProbeReq",	&OnProbeReq},

CHECK: Avoid CamelCase: <OnProbeRsp>
#19: FILE: ./core/rtw_mlme_ext.c:19:
+	{WIFI_PROBERSP,		"OnProbeRsp",		&OnProbeRsp},

WARNING: Block comments use * on subsequent lines
#22: FILE: ./core/rtw_mlme_ext.c:22:
+	/*----------------------------------------------------------
+					below 2 are reserved

WARNING: Block comments use a trailing */ on a separate line
#23: FILE: ./core/rtw_mlme_ext.c:23:
+	-----------------------------------------------------------*/

CHECK: Avoid CamelCase: <DoReserved>
#24: FILE: ./core/rtw_mlme_ext.c:24:
+	{0,					"DoReserved",		&DoReserved},

CHECK: Avoid CamelCase: <OnBeacon>
#26: FILE: ./core/rtw_mlme_ext.c:26:
+	{WIFI_BEACON,		"OnBeacon",		&OnBeacon},

CHECK: Avoid CamelCase: <OnAtim>
#27: FILE: ./core/rtw_mlme_ext.c:27:
+	{WIFI_ATIM,			"OnATIM",		&OnAtim},

CHECK: Avoid CamelCase: <OnDisassoc>
#28: FILE: ./core/rtw_mlme_ext.c:28:
+	{WIFI_DISASSOC,		"OnDisassoc",		&OnDisassoc},

CHECK: Avoid CamelCase: <OnAuthClient>
#29: FILE: ./core/rtw_mlme_ext.c:29:
+	{WIFI_AUTH,			"OnAuth",		&OnAuthClient},

CHECK: Avoid CamelCase: <OnDeAuth>
#30: FILE: ./core/rtw_mlme_ext.c:30:
+	{WIFI_DEAUTH,		"OnDeAuth",		&OnDeAuth},

CHECK: Avoid CamelCase: <OnAction>
#31: FILE: ./core/rtw_mlme_ext.c:31:
+	{WIFI_ACTION,		"OnAction",		&OnAction},

CHECK: Avoid CamelCase: <OnAction_tbl>
#35: FILE: ./core/rtw_mlme_ext.c:35:
+static struct action_handler OnAction_tbl[] = {

CHECK: Avoid CamelCase: <OnAction_back>
#39: FILE: ./core/rtw_mlme_ext.c:39:
+	{RTW_WLAN_CATEGORY_BACK, "ACTION_BACK", &OnAction_back},

CHECK: Avoid CamelCase: <OnAction_ht>
#43: FILE: ./core/rtw_mlme_ext.c:43:
+	{RTW_WLAN_CATEGORY_HT,	"ACTION_HT",	&OnAction_ht},

CHECK: Avoid CamelCase: <OnAction_sa_query>
#44: FILE: ./core/rtw_mlme_ext.c:44:
+	{RTW_WLAN_CATEGORY_SA_QUERY, "ACTION_SA_QUERY", &OnAction_sa_query},

WARNING: Block comments use * on subsequent lines
#54: FILE: ./core/rtw_mlme_ext.c:54:
+/**************************************************
+OUI definitions for the vendor specific IE

WARNING: Block comments use * on subsequent lines
#68: FILE: ./core/rtw_mlme_ext.c:68:
+/********************************************************
+ChannelPlan definitions

CHECK: line length of 136 exceeds 100 columns
#71: FILE: ./core/rtw_mlme_ext.c:71:
+	{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, 13},		/*  0x00, RT_CHANNEL_DOMAIN_2G_WORLD , Passive scan CH 12, 13 */

CHECK: line length of 111 exceeds 100 columns
#72: FILE: ./core/rtw_mlme_ext.c:72:
+	{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, 13},		/*  0x01, RT_CHANNEL_DOMAIN_2G_ETSI1 */

CHECK: line length of 110 exceeds 100 columns
#73: FILE: ./core/rtw_mlme_ext.c:73:
+	{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, 11},			/*  0x02, RT_CHANNEL_DOMAIN_2G_FCC1 */

CHECK: line length of 103 exceeds 100 columns
#74: FILE: ./core/rtw_mlme_ext.c:74:
+	{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 14},	/*  0x03, RT_CHANNEL_DOMAIN_2G_MIKK1 */

CHECK: line length of 111 exceeds 100 columns
#75: FILE: ./core/rtw_mlme_ext.c:75:
+	{{10, 11, 12, 13}, 4},						/*  0x04, RT_CHANNEL_DOMAIN_2G_ETSI2 */

CHECK: line length of 133 exceeds 100 columns
#76: FILE: ./core/rtw_mlme_ext.c:76:
+	{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 14},	/*  0x05, RT_CHANNEL_DOMAIN_2G_GLOBAL , Passive scan CH 12, 13, 14 */

CHECK: line length of 118 exceeds 100 columns
#77: FILE: ./core/rtw_mlme_ext.c:77:
+	{{}, 0},								/*  0x06, RT_CHANNEL_DOMAIN_2G_NULL */

CHECK: Avoid CamelCase: <ChannelNum>
#180: FILE: ./core/rtw_mlme_ext.c:180:
+	for (i = 0; ch_set[i].ChannelNum != 0; i++) {

WARNING: Block comments use * on subsequent lines
#191: FILE: ./core/rtw_mlme_ext.c:191:
+/****************************************************************************
+

CHECK: line length of 107 exceeds 100 columns
#200: FILE: ./core/rtw_mlme_ext.c:200:
+	set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode);

CHECK: line length of 195 exceeds 100 columns
#208: FILE: ./core/rtw_mlme_ext.c:208:
+	unsigned char mixed_datarate[NumRates] = {_1M_RATE_, _2M_RATE_, _5M_RATE_, _11M_RATE_, _6M_RATE_, _9M_RATE_, _12M_RATE_, _18M_RATE_, _24M_RATE_, _36M_RATE_, _48M_RATE_, _54M_RATE_, 0xff};

CHECK: Avoid CamelCase: <NumRates>
#208: FILE: ./core/rtw_mlme_ext.c:208:
+	unsigned char mixed_datarate[NumRates] = {_1M_RATE_, _2M_RATE_, _5M_RATE_, _11M_RATE_, _6M_RATE_, _9M_RATE_, _12M_RATE_, _18M_RATE_, _24M_RATE_, _36M_RATE_, _48M_RATE_, _54M_RATE_, 0xff};

CHECK: line length of 138 exceeds 100 columns
#209: FILE: ./core/rtw_mlme_ext.c:209:
+	unsigned char mixed_basicrate[NumRates] = {_1M_RATE_, _2M_RATE_, _5M_RATE_, _11M_RATE_, _6M_RATE_, _12M_RATE_, _24M_RATE_, 0xff,};

CHECK: line length of 132 exceeds 100 columns
#210: FILE: ./core/rtw_mlme_ext.c:210:
+	unsigned char supported_mcs_set[16] = {0xff, 0xff, 0x00, 0x00, 0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

CHECK: line length of 116 exceeds 100 columns
#215: FILE: ./core/rtw_mlme_ext.c:215:
+	memcpy(pmlmeext->default_supported_mcs_set, supported_mcs_set, sizeof(pmlmeext->default_supported_mcs_set));

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_Open>
#249: FILE: ./core/rtw_mlme_ext.c:249:
+	pmlmeinfo->auth_algo = dot11AuthAlgrthm_Open;

CHECK: Avoid CamelCase: <authModeToggle>
#254: FILE: ./core/rtw_mlme_ext.c:254:
+	pmlmeinfo->authModeToggle = 0;

CHECK: Avoid CamelCase: <slotTime>
#258: FILE: ./core/rtw_mlme_ext.c:258:
+	pmlmeinfo->slotTime = SHORT_SLOT_TIME;

CHECK: Avoid CamelCase: <dialogToken>
#261: FILE: ./core/rtw_mlme_ext.c:261:
+	pmlmeinfo->dialogToken = 0;

CHECK: Alignment should match open parenthesis
#268: FILE: ./core/rtw_mlme_ext.c:268:
+static int has_channel(struct rt_channel_info *channel_set,
+					   u8 chanset_size,

CHECK: Alignment should match open parenthesis
#281: FILE: ./core/rtw_mlme_ext.c:281:
+static void init_channel_list(struct adapter *padapter, struct rt_channel_info *channel_set,
+							  u8 chanset_size,

CHECK: Blank lines aren't necessary after an open brace '{'
#284: FILE: ./core/rtw_mlme_ext.c:284:
+{
+

CHECK: Unnecessary parentheses around 'padapter->registrypriv.ht_enable == 0'
#311: FILE: ./core/rtw_mlme_ext.c:311:
+			if ((padapter->registrypriv.ht_enable == 0) && (o->inc == 8))

CHECK: Unnecessary parentheses around 'o->inc == 8'
#311: FILE: ./core/rtw_mlme_ext.c:311:
+			if ((padapter->registrypriv.ht_enable == 0) && (o->inc == 8))

CHECK: Unnecessary parentheses around 'o->bw == BW40MINUS'
#314: FILE: ./core/rtw_mlme_ext.c:314:
+			if ((0 < (padapter->registrypriv.bw_mode & 0xf0)) &&
+				((o->bw == BW40MINUS) || (o->bw == BW40PLUS)))

CHECK: Unnecessary parentheses around 'o->bw == BW40PLUS'
#314: FILE: ./core/rtw_mlme_ext.c:314:
+			if ((0 < (padapter->registrypriv.bw_mode & 0xf0)) &&
+				((o->bw == BW40MINUS) || (o->bw == BW40PLUS)))

CHECK: Alignment should match open parenthesis
#315: FILE: ./core/rtw_mlme_ext.c:315:
+			if ((0 < (padapter->registrypriv.bw_mode & 0xf0)) &&
+				((o->bw == BW40MINUS) || (o->bw == BW40PLUS)))

CHECK: Blank lines aren't necessary before a close brace '}'
#330: FILE: ./core/rtw_mlme_ext.c:330:
+
+}

CHECK: line length of 105 exceeds 100 columns
#332: FILE: ./core/rtw_mlme_ext.c:332:
+static u8 init_channel_set(struct adapter *padapter, u8 ChannelPlan, struct rt_channel_info *channel_set)

CHECK: Avoid CamelCase: <ChannelPlan>
#332: FILE: ./core/rtw_mlme_ext.c:332:
+static u8 init_channel_set(struct adapter *padapter, u8 ChannelPlan, struct rt_channel_info *channel_set)

CHECK: Avoid CamelCase: <b2_4GBand>
#335: FILE: ./core/rtw_mlme_ext.c:335:
+	u8 b2_4GBand = false;

CHECK: Avoid CamelCase: <Index2G>
#336: FILE: ./core/rtw_mlme_ext.c:336:
+	u8 Index2G = 0;

CHECK: spaces preferred around that '*' (ctx:VxV)
#338: FILE: ./core/rtw_mlme_ext.c:338:
+	memset(channel_set, 0, sizeof(struct rt_channel_info)*MAX_CHANNEL_NUM);
 	                                                     ^

CHECK: line length of 105 exceeds 100 columns
#353: FILE: ./core/rtw_mlme_ext.c:353:
+			channel_set[chanset_size].ChannelNum = RTW_ChannelPlan2G[Index2G].Channel[index];

CHECK: line length of 129 exceeds 100 columns
#355: FILE: ./core/rtw_mlme_ext.c:355:
+			if ((ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_DOAMIN) ||/* Channel 1~11 is active, and 12~14 is passive */

CHECK: Unnecessary parentheses around 'ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_DOAMIN'
#355: FILE: ./core/rtw_mlme_ext.c:355:
+			if ((ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_DOAMIN) ||/* Channel 1~11 is active, and 12~14 is passive */
+				(ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_NULL)) {

CHECK: Unnecessary parentheses around 'ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_NULL'
#355: FILE: ./core/rtw_mlme_ext.c:355:
+			if ((ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_DOAMIN) ||/* Channel 1~11 is active, and 12~14 is passive */
+				(ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_NULL)) {

CHECK: braces {} should be used on all arms of this statement
#355: FILE: ./core/rtw_mlme_ext.c:355:
+			if ((ChannelPlan == RT_CHANNEL_DOMAIN_GLOBAL_DOAMIN) ||/* Channel 1~11 is active, and 12~14 is passive */
[...]
+			} else if (ChannelPlan == RT_CHANNEL_DOMAIN_WORLD_WIDE_13 ||
[...]
+			} else
[...]

CHECK: line length of 124 exceeds 100 columns
#357: FILE: ./core/rtw_mlme_ext.c:357:
+				if (channel_set[chanset_size].ChannelNum >= 1 && channel_set[chanset_size].ChannelNum <= 11)

CHECK: Avoid CamelCase: <ScanType>
#358: FILE: ./core/rtw_mlme_ext.c:358:
+					channel_set[chanset_size].ScanType = SCAN_ACTIVE;

CHECK: line length of 134 exceeds 100 columns
#359: FILE: ./core/rtw_mlme_ext.c:359:
+				else if ((channel_set[chanset_size].ChannelNum  >= 12 && channel_set[chanset_size].ChannelNum  <= 14))

CHECK: line length of 108 exceeds 100 columns
#362: FILE: ./core/rtw_mlme_ext.c:362:
+				 Index2G == RT_CHANNEL_DOMAIN_2G_WORLD) { /*  channel 12~13, passive scan */

CHECK: Unbalanced braces around else statement
#367: FILE: ./core/rtw_mlme_ext.c:367:
+			} else

CHECK: line length of 108 exceeds 100 columns
#395: FILE: ./core/rtw_mlme_ext.c:395:
+	pmlmeext->max_chan_nums = init_channel_set(padapter, pmlmepriv->ChannelPlan, pmlmeext->channel_set);

CHECK: line length of 109 exceeds 100 columns
#396: FILE: ./core/rtw_mlme_ext.c:396:
+	init_channel_list(padapter, pmlmeext->channel_set, pmlmeext->max_chan_nums, &pmlmeext->channel_list);

CHECK: line length of 113 exceeds 100 columns
#421: FILE: ./core/rtw_mlme_ext.c:421:
+static void _mgt_dispatcher(struct adapter *padapter, struct mlme_handler *ptable, union recv_frame *precv_frame)

CHECK: Avoid CamelCase: <GetAddr1Ptr>
#427: FILE: ./core/rtw_mlme_ext.c:427:
+		if (memcmp(GetAddr1Ptr(pframe), myid(&padapter->eeprompriv), ETH_ALEN) &&

CHECK: Avoid CamelCase: <GetAddr2Ptr>
#441: FILE: ./core/rtw_mlme_ext.c:441:
+	struct sta_info *psta = rtw_get_stainfo(&padapter->stapriv, GetAddr2Ptr(pframe));

CHECK: Avoid CamelCase: <GetFrameType>
#445: FILE: ./core/rtw_mlme_ext.c:445:
+	if (GetFrameType(pframe) != WIFI_MGT_TYPE)

CHECK: Avoid CamelCase: <GetFrameSubType>
#456: FILE: ./core/rtw_mlme_ext.c:456:
+	index = GetFrameSubType(pframe) >> 4;

CHECK: Avoid CamelCase: <GetRetry>
#464: FILE: ./core/rtw_mlme_ext.c:464:
+		if (GetRetry(pframe)) {

CHECK: Avoid CamelCase: <RxMgmtFrameSeqNum>
#465: FILE: ./core/rtw_mlme_ext.c:465:
+			if (precv_frame->u.hdr.attrib.seq_num == psta->RxMgmtFrameSeqNum) {

CHECK: Avoid CamelCase: <OnAuth>
#477: FILE: ./core/rtw_mlme_ext.c:477:
+			ptable->func = &OnAuth;

WARNING: Block comments use * on subsequent lines
#502: FILE: ./core/rtw_mlme_ext.c:502:
+/****************************************************************************
+

CHECK: Alignment should match open parenthesis
#523: FILE: ./core/rtw_mlme_ext.c:523:
+	if (check_fwstate(pmlmepriv, _FW_LINKED) == false &&
+		check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE) == false) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#523: FILE: ./core/rtw_mlme_ext.c:523:
+		check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE) == false) {
 		                                                ^

CHECK: line length of 101 exceeds 100 columns
#527: FILE: ./core/rtw_mlme_ext.c:527:
+	p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + _PROBEREQ_IE_OFFSET_, WLAN_EID_SSID, (int *)&ielen,

CHECK: Alignment should match open parenthesis
#528: FILE: ./core/rtw_mlme_ext.c:528:
+	p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + _PROBEREQ_IE_OFFSET_, WLAN_EID_SSID, (int *)&ielen,
+			len - WLAN_HDR_A3_LEN - _PROBEREQ_IE_OFFSET_);

CHECK: Please don't use multiple blank lines
#530: FILE: ./core/rtw_mlme_ext.c:530:
+
+

CHECK: line length of 114 exceeds 100 columns
#536: FILE: ./core/rtw_mlme_ext.c:536:
+		if ((ielen != 0 && false == !memcmp((void *)(p+2), (void *)cur->ssid.ssid, cur->ssid.ssid_length))

CHECK: spaces preferred around that '+' (ctx:VxV)
#536: FILE: ./core/rtw_mlme_ext.c:536:
+		if ((ielen != 0 && false == !memcmp((void *)(p+2), (void *)cur->ssid.ssid, cur->ssid.ssid_length))
 		                                              ^

CHECK: Logical continuations should be on the previous line
#537: FILE: ./core/rtw_mlme_ext.c:537:
+		if ((ielen != 0 && false == !memcmp((void *)(p+2), (void *)cur->ssid.ssid, cur->ssid.ssid_length))
+			|| (ielen == 0 && pmlmeinfo->hidden_ssid_mode)

CHECK: Blank lines aren't necessary before a close brace '}'
#550: FILE: ./core/rtw_mlme_ext.c:550:
+
+}

CHECK: Blank lines aren't necessary before a close brace '}'
#563: FILE: ./core/rtw_mlme_ext.c:563:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#570: FILE: ./core/rtw_mlme_ext.c:570:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 204 exceeds 100 columns
#580: FILE: ./core/rtw_mlme_ext.c:580:
+	p = rtw_get_ie(pframe + sizeof(struct ieee80211_hdr_3addr) + _BEACON_IE_OFFSET_, WLAN_EID_EXT_SUPP_RATES, &ielen, precv_frame->u.hdr.len - sizeof(struct ieee80211_hdr_3addr) - _BEACON_IE_OFFSET_);

CHECK: line length of 155 exceeds 100 columns
#583: FILE: ./core/rtw_mlme_ext.c:583:
+			/* Invalid value 0x2D is detected in Extended Supported Rates (ESR) IE. Try to fix the IE length to avoid failed Beacon parsing. */

CHECK: Avoid CamelCase: <GetAddr3Ptr>
#592: FILE: ./core/rtw_mlme_ext.c:592:
+	if (!memcmp(GetAddr3Ptr(pframe), get_my_bssid(&pmlmeinfo->network), ETH_ALEN)) {

CHECK: line length of 112 exceeds 100 columns
#598: FILE: ./core/rtw_mlme_ext.c:598:
+					update_network(&(pmlmepriv->cur_network.network), pbss, padapter, true);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network.network
#598: FILE: ./core/rtw_mlme_ext.c:598:
+					update_network(&(pmlmepriv->cur_network.network), pbss, padapter, true);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#599: FILE: ./core/rtw_mlme_ext.c:599:
+					rtw_get_bcn_info(&(pmlmepriv->cur_network));

CHECK: line length of 151 exceeds 100 columns
#605: FILE: ./core/rtw_mlme_ext.c:605:
+			pmlmeinfo->assoc_AP_vendor = check_assoc_AP(pframe+sizeof(struct ieee80211_hdr_3addr), len-sizeof(struct ieee80211_hdr_3addr));

CHECK: spaces preferred around that '+' (ctx:VxV)
#605: FILE: ./core/rtw_mlme_ext.c:605:
+			pmlmeinfo->assoc_AP_vendor = check_assoc_AP(pframe+sizeof(struct ieee80211_hdr_3addr), len-sizeof(struct ieee80211_hdr_3addr));
 			                                                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#605: FILE: ./core/rtw_mlme_ext.c:605:
+			pmlmeinfo->assoc_AP_vendor = check_assoc_AP(pframe+sizeof(struct ieee80211_hdr_3addr), len-sizeof(struct ieee80211_hdr_3addr));
 			                                                                                          ^

CHECK: Avoid CamelCase: <DrvBcnEarly>
#612: FILE: ./core/rtw_mlme_ext.c:612:
+			pmlmeext->DrvBcnEarly = 0xff;

CHECK: Avoid CamelCase: <DrvBcnTimeOut>
#613: FILE: ./core/rtw_mlme_ext.c:613:
+			pmlmeext->DrvBcnTimeOut = 0xff;

CHECK: line length of 119 exceeds 100 columns
#624: FILE: ./core/rtw_mlme_ext.c:624:
+		if (((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE) && (pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS)) {

CHECK: spaces preferred around that '&' (ctx:VxV)
#624: FILE: ./core/rtw_mlme_ext.c:624:
+		if (((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE) && (pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS)) {
 		                      ^

CHECK: line length of 106 exceeds 100 columns
#636: FILE: ./core/rtw_mlme_ext.c:636:
+				/* todo: the timer is used instead of the number of the beacon received */

CHECK: spaces preferred around that '&' (ctx:VxV)
#642: FILE: ./core/rtw_mlme_ext.c:642:
+		} else if ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) {
 		                            ^

CHECK: line length of 106 exceeds 100 columns
#646: FILE: ./core/rtw_mlme_ext.c:646:
+				/* todo: the timer is used instead of the number of the beacon received */

CHECK: line length of 185 exceeds 100 columns
#656: FILE: ./core/rtw_mlme_ext.c:656:
+				if (update_sta_support_rate(padapter, (pframe + WLAN_HDR_A3_LEN + _BEACON_IE_OFFSET_), (len - WLAN_HDR_A3_LEN - _BEACON_IE_OFFSET_), cam_idx) == _FAIL) {

CHECK: Blank lines aren't necessary before a close brace '}'
#674: FILE: ./core/rtw_mlme_ext.c:674:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#687: FILE: ./core/rtw_mlme_ext.c:687:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '&' (ctx:VxV)
#692: FILE: ./core/rtw_mlme_ext.c:692:
+	if ((pmlmeinfo->state&0x03) != WIFI_FW_AP_STATE)
 	                     ^

CHECK: Avoid CamelCase: <GetPrivacy>
#699: FILE: ./core/rtw_mlme_ext.c:699:
+	if (GetPrivacy(pframe)) {

CHECK: Unnecessary parentheses around precv_frame->u.hdr.attrib
#701: FILE: ./core/rtw_mlme_ext.c:701:
+		struct rx_pkt_attrib	 *prxattrib = &(precv_frame->u.hdr.attrib);

CHECK: spaces preferred around that '+' (ctx:VxV)
#706: FILE: ./core/rtw_mlme_ext.c:706:
+		iv = pframe+prxattrib->hdrlen;
 		           ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#707: FILE: ./core/rtw_mlme_ext.c:707:
+		prxattrib->key_index = ((iv[3]>>6)&0x3);
 		                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#707: FILE: ./core/rtw_mlme_ext.c:707:
+		prxattrib->key_index = ((iv[3]>>6)&0x3);
 		                                  ^

CHECK: Alignment should match open parenthesis
#721: FILE: ./core/rtw_mlme_ext.c:721:
+	if (auth_mode == 2 &&
+			psecuritypriv->dot11PrivacyAlgrthm != _WEP40_ &&

CHECK: line length of 106 exceeds 100 columns
#725: FILE: ./core/rtw_mlme_ext.c:725:
+	if ((algorithm > 0 && auth_mode == 0) ||	/*  rx a shared-key auth but shared not enabled */

CHECK: line length of 110 exceeds 100 columns
#726: FILE: ./core/rtw_mlme_ext.c:726:
+		(algorithm == 0 && auth_mode == 1)) {	/*  rx a open-system auth but shared-key is enabled */

CHECK: Blank lines aren't necessary after an open brace '{'
#740: FILE: ./core/rtw_mlme_ext.c:740:
+	if (!pstat) {
+

CHECK: Blank lines aren't necessary after an open brace '{'
#754: FILE: ./core/rtw_mlme_ext.c:754:
+	} else {
+

WARNING: braces {} are not necessary for single statement blocks
#759: FILE: ./core/rtw_mlme_ext.c:759:
+			if (pstat->expire_to > 0) {
+				/* TODO: STA re_auth within expire_to */
+			}

WARNING: braces {} are not necessary for single statement blocks
#765: FILE: ./core/rtw_mlme_ext.c:765:
+		if (seq == 1) {
+			/* TODO: STA re_auth and auth timeout */
+		}

CHECK: Blank lines aren't necessary after an open brace '{'
#772: FILE: ./core/rtw_mlme_ext.c:772:
+	if (list_empty(&pstat->auth_list)) {
+

CHECK: Please don't use multiple blank lines
#781: FILE: ./core/rtw_mlme_ext.c:781:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#806: FILE: ./core/rtw_mlme_ext.c:806:
+		} else if (seq == 3) {
+

CHECK: line length of 123 exceeds 100 columns
#807: FILE: ./core/rtw_mlme_ext.c:807:
+			p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + 4 + _AUTH_IE_OFFSET_, WLAN_EID_CHALLENGE, (int *)&ie_len,

CHECK: Alignment should match open parenthesis
#808: FILE: ./core/rtw_mlme_ext.c:808:
+			p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + 4 + _AUTH_IE_OFFSET_, WLAN_EID_CHALLENGE, (int *)&ie_len,
+					len - WLAN_HDR_A3_LEN - _AUTH_IE_OFFSET_ - 4);

CHECK: Please don't use multiple blank lines
#830: FILE: ./core/rtw_mlme_ext.c:830:
+
+

CHECK: Please don't use multiple blank lines
#839: FILE: ./core/rtw_mlme_ext.c:839:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#856: FILE: ./core/rtw_mlme_ext.c:856:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#864: FILE: ./core/rtw_mlme_ext.c:864:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#869: FILE: ./core/rtw_mlme_ext.c:869:
+	if (memcmp(myid(&(padapter->eeprompriv)), get_da(pframe), ETH_ALEN))

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_Shared>
#882: FILE: ./core/rtw_mlme_ext.c:882:
+			if (pmlmeinfo->auth_algo == dot11AuthAlgrthm_Shared)

CHECK: line length of 116 exceeds 100 columns
#896: FILE: ./core/rtw_mlme_ext.c:896:
+			p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + _AUTH_IE_OFFSET_, WLAN_EID_CHALLENGE, (int *)&len,

CHECK: Alignment should match open parenthesis
#897: FILE: ./core/rtw_mlme_ext.c:897:
+			p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + _AUTH_IE_OFFSET_, WLAN_EID_CHALLENGE, (int *)&len,
+				pkt_len - WLAN_HDR_A3_LEN - _AUTH_IE_OFFSET_);

CHECK: Blank lines aren't necessary before a close brace '}'
#933: FILE: ./core/rtw_mlme_ext.c:933:
+
+}

WARNING: please, no space before tabs
#940: FILE: ./core/rtw_mlme_ext.c:940:
+^Iunsigned char ^I*p, *pos, *wpa_ie;$

WARNING: please, no space before tabs
#943: FILE: ./core/rtw_mlme_ext.c:943:
+^Iunsigned char ^IsupportRate[16];$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#950: FILE: ./core/rtw_mlme_ext.c:950:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#951: FILE: ./core/rtw_mlme_ext.c:951:
+	struct wlan_bssid_ex	*cur = &(pmlmeinfo->network);

CHECK: spaces preferred around that '&' (ctx:VxV)
#956: FILE: ./core/rtw_mlme_ext.c:956:
+	if ((pmlmeinfo->state&0x03) != WIFI_FW_AP_STATE)
 	                     ^

CHECK: Please don't use multiple blank lines
#965: FILE: ./core/rtw_mlme_ext.c:965:
+
+

CHECK: Unnecessary parentheses around 'pstat->state'
#982: FILE: ./core/rtw_mlme_ext.c:982:
+	if (!((pstat->state) & WIFI_FW_AUTH_SUCCESS)) {

CHECK: Unnecessary parentheses around 'pstat->state'
#983: FILE: ./core/rtw_mlme_ext.c:983:
+		if (!((pstat->state) & WIFI_FW_ASSOC_SUCCESS)) {

CHECK: Please don't use multiple blank lines
#995: FILE: ./core/rtw_mlme_ext.c:995:
+
+

CHECK: Avoid CamelCase: <OnAssocReqFail>
#1002: FILE: ./core/rtw_mlme_ext.c:1002:
+		goto OnAssocReqFail;

CHECK: Alignment should match open parenthesis
#1008: FILE: ./core/rtw_mlme_ext.c:1008:
+	p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + ie_offset, WLAN_EID_SSID, &ie_len,
+		pkt_len - WLAN_HDR_A3_LEN - ie_offset);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1016: FILE: ./core/rtw_mlme_ext.c:1016:
+		if (memcmp((void *)(p+2), cur->ssid.ssid, cur->ssid.ssid_length))
 		                     ^

CHECK: line length of 130 exceeds 100 columns
#1027: FILE: ./core/rtw_mlme_ext.c:1027:
+	p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + ie_offset, WLAN_EID_SUPP_RATES, &ie_len, pkt_len - WLAN_HDR_A3_LEN - ie_offset);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1036: FILE: ./core/rtw_mlme_ext.c:1036:
+		memcpy(supportRate, p+2, ie_len);
 		                     ^

CHECK: line length of 102 exceeds 100 columns
#1039: FILE: ./core/rtw_mlme_ext.c:1039:
+		p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + ie_offset, WLAN_EID_EXT_SUPP_RATES, &ie_len,

CHECK: Alignment should match open parenthesis
#1040: FILE: ./core/rtw_mlme_ext.c:1040:
+		p = rtw_get_ie(pframe + WLAN_HDR_A3_LEN + ie_offset, WLAN_EID_EXT_SUPP_RATES, &ie_len,
+				pkt_len - WLAN_HDR_A3_LEN - ie_offset);

CHECK: Blank lines aren't necessary after an open brace '{'
#1042: FILE: ./core/rtw_mlme_ext.c:1042:
+		if (p) {
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#1044: FILE: ./core/rtw_mlme_ext.c:1044:
+				memcpy(supportRate+supportRateNum, p+2, ie_len);
 				                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1044: FILE: ./core/rtw_mlme_ext.c:1044:
+				memcpy(supportRate+supportRateNum, p+2, ie_len);
 				                                    ^

CHECK: Avoid CamelCase: <UpdateBrateTblForSoftAP>
#1056: FILE: ./core/rtw_mlme_ext.c:1056:
+	UpdateBrateTblForSoftAP(pstat->bssrateset, pstat->bssratelen);

CHECK: Blank lines aren't necessary after an open brace '{'
#1067: FILE: ./core/rtw_mlme_ext.c:1067:
+	if ((psecuritypriv->wpa_psk & BIT(1)) && elems.rsn_ie) {
+

CHECK: line length of 115 exceeds 100 columns
#1073: FILE: ./core/rtw_mlme_ext.c:1073:
+		if (rtw_parse_wpa2_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {

CHECK: spaces preferred around that '-' (ctx:VxV)
#1073: FILE: ./core/rtw_mlme_ext.c:1073:
+		if (rtw_parse_wpa2_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {
 		                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1073: FILE: ./core/rtw_mlme_ext.c:1073:
+		if (rtw_parse_wpa2_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {
 		                                          ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1077: FILE: ./core/rtw_mlme_ext.c:1077:
+			pstat->wpa2_group_cipher = group_cipher&psecuritypriv->wpa2_group_cipher;
 			                                       ^

CHECK: line length of 106 exceeds 100 columns
#1078: FILE: ./core/rtw_mlme_ext.c:1078:
+			pstat->wpa2_pairwise_cipher = pairwise_cipher&psecuritypriv->wpa2_pairwise_cipher;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1078: FILE: ./core/rtw_mlme_ext.c:1078:
+			pstat->wpa2_pairwise_cipher = pairwise_cipher&psecuritypriv->wpa2_pairwise_cipher;
 			                                             ^

CHECK: Blank lines aren't necessary after an open brace '{'
#1090: FILE: ./core/rtw_mlme_ext.c:1090:
+	} else if ((psecuritypriv->wpa_psk & BIT(0)) && elems.wpa_ie) {
+

CHECK: line length of 114 exceeds 100 columns
#1096: FILE: ./core/rtw_mlme_ext.c:1096:
+		if (rtw_parse_wpa_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {

CHECK: spaces preferred around that '-' (ctx:VxV)
#1096: FILE: ./core/rtw_mlme_ext.c:1096:
+		if (rtw_parse_wpa_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {
 		                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1096: FILE: ./core/rtw_mlme_ext.c:1096:
+		if (rtw_parse_wpa_ie(wpa_ie-2, wpa_ie_len+2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {
 		                                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1100: FILE: ./core/rtw_mlme_ext.c:1100:
+			pstat->wpa_group_cipher = group_cipher&psecuritypriv->wpa_group_cipher;
 			                                      ^

CHECK: line length of 104 exceeds 100 columns
#1101: FILE: ./core/rtw_mlme_ext.c:1101:
+			pstat->wpa_pairwise_cipher = pairwise_cipher&psecuritypriv->wpa_pairwise_cipher;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1101: FILE: ./core/rtw_mlme_ext.c:1101:
+			pstat->wpa_pairwise_cipher = pairwise_cipher&psecuritypriv->wpa_pairwise_cipher;
 			                                            ^

WARNING: please, no space before tabs
#1127: FILE: ./core/rtw_mlme_ext.c:1127:
+^I^I^I/* ^I^I^I^Ielems.wps_ie_len - 4); */$

CHECK: Please don't use multiple blank lines
#1132: FILE: ./core/rtw_mlme_ext.c:1132:
+
+

CHECK: Unnecessary parentheses around 'psecuritypriv->wpa_psk > 0'
#1135: FILE: ./core/rtw_mlme_ext.c:1135:
+		if ((psecuritypriv->wpa_psk > 0)
+			&& (pstat->flags & (WLAN_STA_WPS|WLAN_STA_MAYBE_WPS))) {

CHECK: Logical continuations should be on the previous line
#1136: FILE: ./core/rtw_mlme_ext.c:1136:
+		if ((psecuritypriv->wpa_psk > 0)
+			&& (pstat->flags & (WLAN_STA_WPS|WLAN_STA_MAYBE_WPS))) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#1136: FILE: ./core/rtw_mlme_ext.c:1136:
+			&& (pstat->flags & (WLAN_STA_WPS|WLAN_STA_MAYBE_WPS))) {
 			                                ^

CHECK: line length of 169 exceeds 100 columns
#1140: FILE: ./core/rtw_mlme_ext.c:1140:
+				rtw_get_wps_attr_content(pmlmepriv->wps_beacon_ie, pmlmepriv->wps_beacon_ie_len, WPS_ATTR_SELECTED_REGISTRAR, &selected_registrar, NULL);

CHECK: Blank lines aren't necessary before a close brace '}'
#1158: FILE: ./core/rtw_mlme_ext.c:1158:
+
+		}

CHECK: line length of 117 exceeds 100 columns
#1164: FILE: ./core/rtw_mlme_ext.c:1164:
+			copy_len = ((wpa_ie_len+2) > sizeof(pstat->wpa_ie)) ? (sizeof(pstat->wpa_ie)):(wpa_ie_len+2);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1164: FILE: ./core/rtw_mlme_ext.c:1164:
+			copy_len = ((wpa_ie_len+2) > sizeof(pstat->wpa_ie)) ? (sizeof(pstat->wpa_ie)):(wpa_ie_len+2);
 			                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1164: FILE: ./core/rtw_mlme_ext.c:1164:
+			copy_len = ((wpa_ie_len+2) > sizeof(pstat->wpa_ie)) ? (sizeof(pstat->wpa_ie)):(wpa_ie_len+2);
 			                                                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1164: FILE: ./core/rtw_mlme_ext.c:1164:
+			copy_len = ((wpa_ie_len+2) > sizeof(pstat->wpa_ie)) ? (sizeof(pstat->wpa_ie)):(wpa_ie_len+2);
 			                                                                                         ^

CHECK: Please don't use multiple blank lines
#1167: FILE: ./core/rtw_mlme_ext.c:1167:
+
+

CHECK: spaces preferred around that '-' (ctx:VxV)
#1169: FILE: ./core/rtw_mlme_ext.c:1169:
+			memcpy(pstat->wpa_ie, wpa_ie-2, copy_len);
 			                            ^

CHECK: Blank lines aren't necessary before a close brace '}'
#1171: FILE: ./core/rtw_mlme_ext.c:1171:
+
+	}

CHECK: Please don't use multiple blank lines
#1173: FILE: ./core/rtw_mlme_ext.c:1173:
+
+

CHECK: line length of 116 exceeds 100 columns
#1186: FILE: ./core/rtw_mlme_ext.c:1186:
+			p = rtw_get_ie(p, WLAN_EID_VENDOR_SPECIFIC, &ie_len, pkt_len - WLAN_HDR_A3_LEN - ie_offset);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1188: FILE: ./core/rtw_mlme_ext.c:1188:
+				if (!memcmp(p+2, WMM_IE, 6)) {
 				             ^

CHECK: Blank lines aren't necessary after an open brace '{'
#1189: FILE: ./core/rtw_mlme_ext.c:1189:
+				if (!memcmp(p+2, WMM_IE, 6)) {
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#1193: FILE: ./core/rtw_mlme_ext.c:1193:
+					pstat->qos_info = *(p+8);
 					                     ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1195: FILE: ./core/rtw_mlme_ext.c:1195:
+					pstat->max_sp_len = (pstat->qos_info>>5)&0x3;
 					                                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1195: FILE: ./core/rtw_mlme_ext.c:1195:
+					pstat->max_sp_len = (pstat->qos_info>>5)&0x3;
 					                                        ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1197: FILE: ./core/rtw_mlme_ext.c:1197:
+					if ((pstat->qos_info&0xf) != 0xf)
 					                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1202: FILE: ./core/rtw_mlme_ext.c:1202:
+					if (pstat->qos_info&0xf) {
 					                   ^

WARNING: Too many leading tabs - consider code refactoring
#1203: FILE: ./core/rtw_mlme_ext.c:1203:
+						if (pstat->qos_info&BIT(0))

CHECK: spaces preferred around that '&' (ctx:VxV)
#1203: FILE: ./core/rtw_mlme_ext.c:1203:
+						if (pstat->qos_info&BIT(0))
 						                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1204: FILE: ./core/rtw_mlme_ext.c:1204:
+							pstat->uapsd_vo = BIT(0)|BIT(1);
 							                        ^

WARNING: Too many leading tabs - consider code refactoring
#1205: FILE: ./core/rtw_mlme_ext.c:1205:
+						else

WARNING: Too many leading tabs - consider code refactoring
#1208: FILE: ./core/rtw_mlme_ext.c:1208:
+						if (pstat->qos_info&BIT(1))

CHECK: spaces preferred around that '&' (ctx:VxV)
#1208: FILE: ./core/rtw_mlme_ext.c:1208:
+						if (pstat->qos_info&BIT(1))
 						                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1209: FILE: ./core/rtw_mlme_ext.c:1209:
+							pstat->uapsd_vi = BIT(0)|BIT(1);
 							                        ^

WARNING: Too many leading tabs - consider code refactoring
#1210: FILE: ./core/rtw_mlme_ext.c:1210:
+						else

WARNING: Too many leading tabs - consider code refactoring
#1213: FILE: ./core/rtw_mlme_ext.c:1213:
+						if (pstat->qos_info&BIT(2))

CHECK: spaces preferred around that '&' (ctx:VxV)
#1213: FILE: ./core/rtw_mlme_ext.c:1213:
+						if (pstat->qos_info&BIT(2))
 						                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1214: FILE: ./core/rtw_mlme_ext.c:1214:
+							pstat->uapsd_bk = BIT(0)|BIT(1);
 							                        ^

WARNING: Too many leading tabs - consider code refactoring
#1215: FILE: ./core/rtw_mlme_ext.c:1215:
+						else

WARNING: Too many leading tabs - consider code refactoring
#1218: FILE: ./core/rtw_mlme_ext.c:1218:
+						if (pstat->qos_info&BIT(3))

CHECK: spaces preferred around that '&' (ctx:VxV)
#1218: FILE: ./core/rtw_mlme_ext.c:1218:
+						if (pstat->qos_info&BIT(3))
 						                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1219: FILE: ./core/rtw_mlme_ext.c:1219:
+							pstat->uapsd_be = BIT(0)|BIT(1);
 							                        ^

WARNING: Too many leading tabs - consider code refactoring
#1220: FILE: ./core/rtw_mlme_ext.c:1220:
+						else

CHECK: Blank lines aren't necessary before a close brace '}'
#1223: FILE: ./core/rtw_mlme_ext.c:1223:
+
+					}

CHECK: braces {} should be used on all arms of this statement
#1236: FILE: ./core/rtw_mlme_ext.c:1236:
+	if (elems.ht_capabilities && elems.ht_capabilities_len >= sizeof(struct ieee80211_ht_cap)) {
[...]
+	} else
[...]

CHECK: line length of 102 exceeds 100 columns
#1241: FILE: ./core/rtw_mlme_ext.c:1241:
+		memcpy(&pstat->htpriv.ht_cap, elems.ht_capabilities, sizeof(struct ieee80211_ht_cap));

CHECK: Unbalanced braces around else statement
#1243: FILE: ./core/rtw_mlme_ext.c:1243:
+	} else

CHECK: Please don't use multiple blank lines
#1246: FILE: ./core/rtw_mlme_ext.c:1246:
+
+

CHECK: spaces preferred around that '&' (ctx:VxV)
#1247: FILE: ./core/rtw_mlme_ext.c:1247:
+	if ((pmlmepriv->htpriv.ht_option == false) && (pstat->flags&WLAN_STA_HT)) {
 	                                                           ^

CHECK: Unnecessary parentheses around 'pmlmepriv->htpriv.ht_option == false'
#1247: FILE: ./core/rtw_mlme_ext.c:1247:
+	if ((pmlmepriv->htpriv.ht_option == false) && (pstat->flags&WLAN_STA_HT)) {

CHECK: Using comparison to false is error prone
#1247: FILE: ./core/rtw_mlme_ext.c:1247:
+	if ((pmlmepriv->htpriv.ht_option == false) && (pstat->flags&WLAN_STA_HT)) {

CHECK: Please don't use multiple blank lines
#1252: FILE: ./core/rtw_mlme_ext.c:1252:
+
+

CHECK: Alignment should match open parenthesis
#1254: FILE: ./core/rtw_mlme_ext.c:1254:
+	if ((pstat->flags & WLAN_STA_HT) &&
+		    ((pstat->wpa2_pairwise_cipher&WPA_CIPHER_TKIP) ||

CHECK: spaces preferred around that '&' (ctx:VxV)
#1254: FILE: ./core/rtw_mlme_ext.c:1254:
+		    ((pstat->wpa2_pairwise_cipher&WPA_CIPHER_TKIP) ||
 		                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1255: FILE: ./core/rtw_mlme_ext.c:1255:
+		      (pstat->wpa_pairwise_cipher&WPA_CIPHER_TKIP))) {
 		                                 ^

CHECK: Please don't use multiple blank lines
#1272: FILE: ./core/rtw_mlme_ext.c:1272:
+
+

CHECK: Please don't use multiple blank lines
#1283: FILE: ./core/rtw_mlme_ext.c:1283:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#1293: FILE: ./core/rtw_mlme_ext.c:1293:
+		if (pstat->aid > pstapriv->max_num_sta) {
+

CHECK: Please don't use multiple blank lines
#1300: FILE: ./core/rtw_mlme_ext.c:1300:
+
+

CHECK: Please don't use multiple blank lines
#1306: FILE: ./core/rtw_mlme_ext.c:1306:
+
+

CHECK: Unnecessary parentheses around 'status == WLAN_STATUS_SUCCESS'
#1326: FILE: ./core/rtw_mlme_ext.c:1326:
+	if (pstat && (pstat->state & WIFI_FW_ASSOC_SUCCESS) && (status == WLAN_STATUS_SUCCESS)) {

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1378: FILE: ./core/rtw_mlme_ext.c:1378:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#1384: FILE: ./core/rtw_mlme_ext.c:1384:
+	if (memcmp(myid(&(padapter->eeprompriv)), get_da(pframe), ETH_ALEN))

CHECK: spaces preferred around that '&' (ctx:VxV)
#1410: FILE: ./core/rtw_mlme_ext.c:1410:
+	res = pmlmeinfo->aid = (int)(le16_to_cpu(*(__le16 *)(pframe + WLAN_HDR_A3_LEN + 4))&0x3fff);
 	                                                                                   ^

CHECK: multiple assignments should be avoided
#1410: FILE: ./core/rtw_mlme_ext.c:1410:
+	res = pmlmeinfo->aid = (int)(le16_to_cpu(*(__le16 *)(pframe + WLAN_HDR_A3_LEN + 4))&0x3fff);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1465: FILE: ./core/rtw_mlme_ext.c:1465:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Blank lines aren't necessary before a close brace '}'
#1495: FILE: ./core/rtw_mlme_ext.c:1495:
+
+			}

CHECK: Please don't use multiple blank lines
#1501: FILE: ./core/rtw_mlme_ext.c:1501:
+
+

WARNING: please, no space before tabs
#1505: FILE: ./core/rtw_mlme_ext.c:1505:
+^I/* ^ICommented by Albert 20130604 */$

WARNING: please, no space before tabs
#1506: FILE: ./core/rtw_mlme_ext.c:1506:
+^I/* ^IBefore sending the auth frame to start the STA/GC mode connection with AP/GO, */$

WARNING: please, no space before tabs
#1507: FILE: ./core/rtw_mlme_ext.c:1507:
+^I/* ^Iwe will send the deauth first. */$

CHECK: line length of 129 exceeds 100 columns
#1508: FILE: ./core/rtw_mlme_ext.c:1508:
+	/* 	However, the Win8.1 with BRCM Wi-Fi will send the deauth with reason code 6 to us after receieving our deauth. */

WARNING: please, no space before tabs
#1508: FILE: ./core/rtw_mlme_ext.c:1508:
+^I/* ^IHowever, the Win8.1 with BRCM Wi-Fi will send the deauth with reason code 6 to us after receieving our deauth. */$

WARNING: please, no space before tabs
#1509: FILE: ./core/rtw_mlme_ext.c:1509:
+^I/* ^IAdded the following code to avoid this case. */$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1537: FILE: ./core/rtw_mlme_ext.c:1537:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Blank lines aren't necessary before a close brace '}'
#1566: FILE: ./core/rtw_mlme_ext.c:1566:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#1583: FILE: ./core/rtw_mlme_ext.c:1583:
+
+}

WARNING: please, no space before tabs
#1629: FILE: ./core/rtw_mlme_ext.c:1629:
+^Iunsigned char ^I*frame_body;$

WARNING: please, no space before tabs
#1630: FILE: ./core/rtw_mlme_ext.c:1630:
+^Iunsigned char ^Icategory, action;$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1633: FILE: ./core/rtw_mlme_ext.c:1633:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 107 exceeds 100 columns
#1638: FILE: ./core/rtw_mlme_ext.c:1638:
+	if (memcmp(myid(&(padapter->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))/* for if1, sta/ap mode */

CHECK: Unnecessary parentheses around padapter->eeprompriv
#1638: FILE: ./core/rtw_mlme_ext.c:1638:
+	if (memcmp(myid(&(padapter->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))/* for if1, sta/ap mode */

CHECK: spaces preferred around that '&' (ctx:VxV)
#1641: FILE: ./core/rtw_mlme_ext.c:1641:
+	if ((pmlmeinfo->state&0x03) != WIFI_FW_AP_STATE)
 	                     ^

CHECK: line length of 104 exceeds 100 columns
#1662: FILE: ./core/rtw_mlme_ext.c:1662:
+			memcpy(&(pmlmeinfo->ADDBA_req), &(frame_body[2]), sizeof(struct ADDBA_request));

CHECK: Unnecessary parentheses around pmlmeinfo->ADDBA_req
#1662: FILE: ./core/rtw_mlme_ext.c:1662:
+			memcpy(&(pmlmeinfo->ADDBA_req), &(frame_body[2]), sizeof(struct ADDBA_request));

CHECK: Unnecessary parentheses around frame_body[2]
#1662: FILE: ./core/rtw_mlme_ext.c:1662:
+			memcpy(&(pmlmeinfo->ADDBA_req), &(frame_body[2]), sizeof(struct ADDBA_request));

CHECK: line length of 110 exceeds 100 columns
#1663: FILE: ./core/rtw_mlme_ext.c:1663:
+			/* process_addba_req(padapter, (u8 *)&(pmlmeinfo->ADDBA_req), GetAddr3Ptr(pframe)); */

CHECK: Unnecessary parentheses around pmlmeinfo->ADDBA_req
#1664: FILE: ./core/rtw_mlme_ext.c:1664:
+			process_addba_req(padapter, (u8 *)&(pmlmeinfo->ADDBA_req), addr);

CHECK: line length of 114 exceeds 100 columns
#1669: FILE: ./core/rtw_mlme_ext.c:1669:
+				issue_action_BA(padapter, addr, WLAN_ACTION_ADDBA_RESP, 37);/* reject ADDBA Req */

CHECK: Unnecessary parentheses around adapter->mlmeextpriv
#1719: FILE: ./core/rtw_mlme_ext.c:1719:
+	struct mlme_ext_priv *mlmeext = &(adapter->mlmeextpriv);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1721: FILE: ./core/rtw_mlme_ext.c:1721:
+	u16 seq_ctrl = ((recv_frame->u.hdr.attrib.seq_num&0xffff) << 4) |
 	                                                 ^

CHECK: Unnecessary parentheses around 'seq_ctrl == mlmeext->action_public_rxseq'
#1726: FILE: ./core/rtw_mlme_ext.c:1726:
+			if ((seq_ctrl == mlmeext->action_public_rxseq)
+				&& (token == mlmeext->action_public_dialog_token))

CHECK: Unnecessary parentheses around 'token == mlmeext->action_public_dialog_token'
#1726: FILE: ./core/rtw_mlme_ext.c:1726:
+			if ((seq_ctrl == mlmeext->action_public_rxseq)
+				&& (token == mlmeext->action_public_dialog_token))

CHECK: Logical continuations should be on the previous line
#1727: FILE: ./core/rtw_mlme_ext.c:1727:
+			if ((seq_ctrl == mlmeext->action_public_rxseq)
+				&& (token == mlmeext->action_public_dialog_token))

CHECK: Unnecessary parentheses around padapter->eeprompriv
#1803: FILE: ./core/rtw_mlme_ext.c:1803:
+	if (memcmp(myid(&(padapter->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))

CHECK: Unnecessary parentheses around padapter->eeprompriv
#1831: FILE: ./core/rtw_mlme_ext.c:1831:
+	if (memcmp(myid(&(padapter->eeprompriv)), GetAddr1Ptr(pframe), ETH_ALEN))

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#1855: FILE: ./core/rtw_mlme_ext.c:1855:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1858: FILE: ./core/rtw_mlme_ext.c:1858:
+	switch (pframe[WLAN_HDR_A3_LEN+1]) {
 	                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1860: FILE: ./core/rtw_mlme_ext.c:1860:
+		memcpy(&tid, &pframe[WLAN_HDR_A3_LEN+2], sizeof(unsigned short));
 		                                    ^

CHECK: Avoid CamelCase: <issue_action_SA_Query>
#1861: FILE: ./core/rtw_mlme_ext.c:1861:
+		issue_action_SA_Query(padapter, GetAddr2Ptr(pframe), 1, tid);

WARNING: Avoid logging continuation uses where feasible
#1875: FILE: ./core/rtw_mlme_ext.c:1875:
+			pr_cont(" %02x ", pframe[pp]);

WARNING: Avoid logging continuation uses where feasible
#1876: FILE: ./core/rtw_mlme_ext.c:1876:
+		pr_cont("\n");

CHECK: Blank lines aren't necessary before a close brace '}'
#1900: FILE: ./core/rtw_mlme_ext.c:1900:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1904: FILE: ./core/rtw_mlme_ext.c:1904:
+
+}

CHECK: Blank lines aren't necessary before a close brace '}'
#1939: FILE: ./core/rtw_mlme_ext.c:1939:
+
+}

WARNING: Block comments use * on subsequent lines
#1947: FILE: ./core/rtw_mlme_ext.c:1947:
+/****************************************************************************
+

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#1954: FILE: ./core/rtw_mlme_ext.c:1954:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#1962: FILE: ./core/rtw_mlme_ext.c:1962:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Blank lines aren't necessary before a close brace '}'
#1996: FILE: ./core/rtw_mlme_ext.c:1996:
+
+}

CHECK: Alignment should match open parenthesis
#2012: FILE: ./core/rtw_mlme_ext.c:2012:
+	if (padapter->bSurpriseRemoved ||
+		padapter->bDriverStopped) {

CHECK: Alignment should match open parenthesis
#2030: FILE: ./core/rtw_mlme_ext.c:2030:
+	if (padapter->bSurpriseRemoved ||
+		padapter->bDriverStopped) {

CHECK: Alignment should match open parenthesis
#2059: FILE: ./core/rtw_mlme_ext.c:2059:
+	if (padapter->bSurpriseRemoved ||
+		padapter->bDriverStopped) {

CHECK: spaces preferred around that '-' (ctx:VxV)
#2094: FILE: ./core/rtw_mlme_ext.c:2094:
+			remain_len = ies_len - (next_ie-ies);
 			                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2097: FILE: ./core/rtw_mlme_ext.c:2097:
+			memcpy(ssid_ie+2, next_ie, remain_len);
 			              ^

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2121: FILE: ./core/rtw_mlme_ext.c:2121:
+	struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmepriv
#2122: FILE: ./core/rtw_mlme_ext.c:2122:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2123: FILE: ./core/rtw_mlme_ext.c:2123:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2124: FILE: ./core/rtw_mlme_ext.c:2124:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2125: FILE: ./core/rtw_mlme_ext.c:2125:
+	struct wlan_bssid_ex		*cur_network = &(pmlmeinfo->network);

CHECK: Please don't use multiple blank lines
#2143: FILE: ./core/rtw_mlme_ext.c:2143:
+
+

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2144: FILE: ./core/rtw_mlme_ext.c:2144:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2148: FILE: ./core/rtw_mlme_ext.c:2148:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Avoid CamelCase: <SetSeqNum>
#2151: FILE: ./core/rtw_mlme_ext.c:2151:
+	SetSeqNum(pwlanhdr, 0/*pmlmeext->mgnt_seq*/);

CHECK: Avoid CamelCase: <SetFrameSubType>
#2153: FILE: ./core/rtw_mlme_ext.c:2153:
+	SetFrameSubType(pframe, WIFI_BEACON);

CHECK: spaces preferred around that '&' (ctx:VxV)
#2158: FILE: ./core/rtw_mlme_ext.c:2158:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE) {
 	                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2163: FILE: ./core/rtw_mlme_ext.c:2163:
+			len_diff = update_hidden_ssid(pframe+_BEACON_IE_OFFSET_,
 			                                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2164: FILE: ./core/rtw_mlme_ext.c:2164:
+						      cur_network->ie_length-_BEACON_IE_OFFSET_,
 						                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2166: FILE: ./core/rtw_mlme_ext.c:2166:
+			pframe += (cur_network->ie_length+len_diff);
 			                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2167: FILE: ./core/rtw_mlme_ext.c:2167:
+			pattrib->pktlen += (cur_network->ie_length+len_diff);
 			                                          ^

CHECK: line length of 137 exceeds 100 columns
#2175: FILE: ./core/rtw_mlme_ext.c:2175:
+			wps_ie = rtw_get_wps_ie(pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr)+_BEACON_IE_OFFSET_,

CHECK: spaces preferred around that '+' (ctx:VxV)
#2175: FILE: ./core/rtw_mlme_ext.c:2175:
+			wps_ie = rtw_get_wps_ie(pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr)+_BEACON_IE_OFFSET_,
 			                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2175: FILE: ./core/rtw_mlme_ext.c:2175:
+			wps_ie = rtw_get_wps_ie(pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr)+_BEACON_IE_OFFSET_,
 			                                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2175: FILE: ./core/rtw_mlme_ext.c:2175:
+			wps_ie = rtw_get_wps_ie(pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr)+_BEACON_IE_OFFSET_,
 			                                                                                             ^

CHECK: line length of 121 exceeds 100 columns
#2176: FILE: ./core/rtw_mlme_ext.c:2176:
+				pattrib->pktlen-sizeof(struct ieee80211_hdr_3addr)-_BEACON_IE_OFFSET_, NULL, &wps_ielen);

CHECK: Alignment should match open parenthesis
#2176: FILE: ./core/rtw_mlme_ext.c:2176:
+			wps_ie = rtw_get_wps_ie(pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr)+_BEACON_IE_OFFSET_,
+				pattrib->pktlen-sizeof(struct ieee80211_hdr_3addr)-_BEACON_IE_OFFSET_, NULL, &wps_ielen);

CHECK: spaces preferred around that '-' (ctx:VxV)
#2176: FILE: ./core/rtw_mlme_ext.c:2176:
+				pattrib->pktlen-sizeof(struct ieee80211_hdr_3addr)-_BEACON_IE_OFFSET_, NULL, &wps_ielen);
 				               ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2176: FILE: ./core/rtw_mlme_ext.c:2176:
+				pattrib->pktlen-sizeof(struct ieee80211_hdr_3addr)-_BEACON_IE_OFFSET_, NULL, &wps_ielen);
 				                                                  ^

CHECK: line length of 125 exceeds 100 columns
#2178: FILE: ./core/rtw_mlme_ext.c:2178:
+				rtw_get_wps_attr_content(wps_ie,  wps_ielen, WPS_ATTR_SELECTED_REGISTRAR, (u8 *)(&sr), NULL);

CHECK: Blank lines aren't necessary before a close brace '}'
#2187: FILE: ./core/rtw_mlme_ext.c:2187:
+
+	}

CHECK: line length of 124 exceeds 100 columns
#2210: FILE: ./core/rtw_mlme_ext.c:2210:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SSID, cur_network->ssid.ssid_length, cur_network->ssid.ssid, &pattrib->pktlen);

CHECK: line length of 138 exceeds 100 columns
#2214: FILE: ./core/rtw_mlme_ext.c:2214:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, ((rate_len > 8) ? 8 : rate_len), cur_network->supported_rates, &pattrib->pktlen);

CHECK: line length of 135 exceeds 100 columns
#2217: FILE: ./core/rtw_mlme_ext.c:2217:
+	pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pattrib->pktlen);

CHECK: Unnecessary parentheses around cur_network->configuration.ds_config
#2217: FILE: ./core/rtw_mlme_ext.c:2217:
+	pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pattrib->pktlen);

CHECK: Avoid CamelCase: <ATIMWindow>
#2222: FILE: ./core/rtw_mlme_ext.c:2222:
+		u32 ATIMWindow;

CHECK: line length of 119 exceeds 100 columns
#2226: FILE: ./core/rtw_mlme_ext.c:2226:
+		pframe = rtw_set_ie(pframe, WLAN_EID_IBSS_PARAMS, 2, (unsigned char *)(&ATIMWindow), &pattrib->pktlen);

CHECK: Please don't use multiple blank lines
#2232: FILE: ./core/rtw_mlme_ext.c:2232:
+
+

CHECK: line length of 139 exceeds 100 columns
#2235: FILE: ./core/rtw_mlme_ext.c:2235:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (rate_len - 8), (cur_network->supported_rates + 8), &pattrib->pktlen);

CHECK: Please don't use multiple blank lines
#2237: FILE: ./core/rtw_mlme_ext.c:2237:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#2256: FILE: ./core/rtw_mlme_ext.c:2256:
+
+}

WARNING: please, no space before tabs
#2262: FILE: ./core/rtw_mlme_ext.c:2262:
+^Iunsigned char ^I^I^I^I*pframe;$

WARNING: please, no space before tabs
#2265: FILE: ./core/rtw_mlme_ext.c:2265:
+^Iunsigned char ^I^I^I^I*mac, *bssid;$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2266: FILE: ./core/rtw_mlme_ext.c:2266:
+	struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2271: FILE: ./core/rtw_mlme_ext.c:2271:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2272: FILE: ./core/rtw_mlme_ext.c:2272:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2273: FILE: ./core/rtw_mlme_ext.c:2273:
+	struct wlan_bssid_ex		*cur_network = &(pmlmeinfo->network);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2292: FILE: ./core/rtw_mlme_ext.c:2292:
+	mac = myid(&(padapter->eeprompriv));

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2295: FILE: ./core/rtw_mlme_ext.c:2295:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Please don't use multiple blank lines
#2309: FILE: ./core/rtw_mlme_ext.c:2309:
+
+

CHECK: spaces preferred around that '&' (ctx:VxV)
#2313: FILE: ./core/rtw_mlme_ext.c:2313:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE) {
 	                     ^

CHECK: line length of 137 exceeds 100 columns
#2314: FILE: ./core/rtw_mlme_ext.c:2314:
+		pwps_ie = rtw_get_wps_ie(cur_network->ies+_FIXED_IE_LENGTH_, cur_network->ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen);

CHECK: spaces preferred around that '+' (ctx:VxV)
#2314: FILE: ./core/rtw_mlme_ext.c:2314:
+		pwps_ie = rtw_get_wps_ie(cur_network->ies+_FIXED_IE_LENGTH_, cur_network->ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen);
 		                                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2314: FILE: ./core/rtw_mlme_ext.c:2314:
+		pwps_ie = rtw_get_wps_ie(cur_network->ies+_FIXED_IE_LENGTH_, cur_network->ie_length-_FIXED_IE_LENGTH_, NULL, &wps_ielen);
 		                                                                                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2332: FILE: ./core/rtw_mlme_ext.c:2332:
+			if ((wps_offset+wps_ielen+2) <= MAX_IE_SZ) {
 			               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2332: FILE: ./core/rtw_mlme_ext.c:2332:
+			if ((wps_offset+wps_ielen+2) <= MAX_IE_SZ) {
 			                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2333: FILE: ./core/rtw_mlme_ext.c:2333:
+				memcpy(pframe, pmlmepriv->wps_probe_resp_ie, wps_ielen+2);
 				                                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2334: FILE: ./core/rtw_mlme_ext.c:2334:
+				pframe += wps_ielen+2;
 				                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2335: FILE: ./core/rtw_mlme_ext.c:2335:
+				pattrib->pktlen += wps_ielen+2;
 				                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2338: FILE: ./core/rtw_mlme_ext.c:2338:
+			if ((wps_offset+wps_ielen+2+remainder_ielen) <= MAX_IE_SZ) {
 			               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2338: FILE: ./core/rtw_mlme_ext.c:2338:
+			if ((wps_offset+wps_ielen+2+remainder_ielen) <= MAX_IE_SZ) {
 			                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2338: FILE: ./core/rtw_mlme_ext.c:2338:
+			if ((wps_offset+wps_ielen+2+remainder_ielen) <= MAX_IE_SZ) {
 			                           ^

CHECK: line length of 104 exceeds 100 columns
#2355: FILE: ./core/rtw_mlme_ext.c:2355:
+			u8 *ies = pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr);

CHECK: spaces preferred around that '+' (ctx:VxV)
#2355: FILE: ./core/rtw_mlme_ext.c:2355:
+			u8 *ies = pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr);
 			                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2355: FILE: ./core/rtw_mlme_ext.c:2355:
+			u8 *ies = pmgntframe->buf_addr+TXDESC_OFFSET+sizeof(struct ieee80211_hdr_3addr);
 			                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2361: FILE: ./core/rtw_mlme_ext.c:2361:
+			ssid_ie = rtw_get_ie(ies+_FIXED_IE_LENGTH_, WLAN_EID_SSID, &ssid_ielen,
 			                        ^

CHECK: Alignment should match open parenthesis
#2362: FILE: ./core/rtw_mlme_ext.c:2362:
+			ssid_ie = rtw_get_ie(ies+_FIXED_IE_LENGTH_, WLAN_EID_SSID, &ssid_ielen,
+				(pframe-ies)-_FIXED_IE_LENGTH_);

CHECK: spaces preferred around that '-' (ctx:VxV)
#2362: FILE: ./core/rtw_mlme_ext.c:2362:
+				(pframe-ies)-_FIXED_IE_LENGTH_);
 				       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2362: FILE: ./core/rtw_mlme_ext.c:2362:
+				(pframe-ies)-_FIXED_IE_LENGTH_);
 				            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2370: FILE: ./core/rtw_mlme_ext.c:2370:
+				remainder_ie = ssid_ie+2;
 				                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2371: FILE: ./core/rtw_mlme_ext.c:2371:
+				remainder_ielen = (pframe-remainder_ie);
 				                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2381: FILE: ./core/rtw_mlme_ext.c:2381:
+				memcpy(remainder_ie+ssid_ielen_diff, buf, remainder_ielen);
 				                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2382: FILE: ./core/rtw_mlme_ext.c:2382:
+				*(ssid_ie+1) = cur_network->ssid.ssid_length;
 				         ^

CHECK: line length of 105 exceeds 100 columns
#2383: FILE: ./core/rtw_mlme_ext.c:2383:
+				memcpy(ssid_ie+2, cur_network->ssid.ssid, cur_network->ssid.ssid_length);

CHECK: spaces preferred around that '+' (ctx:VxV)
#2383: FILE: ./core/rtw_mlme_ext.c:2383:
+				memcpy(ssid_ie+2, cur_network->ssid.ssid, cur_network->ssid.ssid_length);
 				              ^

CHECK: line length of 104 exceeds 100 columns
#2397: FILE: ./core/rtw_mlme_ext.c:2397:
+		memcpy(pframe, (unsigned char *)(rtw_get_beacon_interval_from_ie(cur_network->ies)), 2);

CHECK: line length of 132 exceeds 100 columns
#2412: FILE: ./core/rtw_mlme_ext.c:2412:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SSID, cur_network->ssid.ssid_length, cur_network->ssid.ssid, &pattrib->pktlen);

CHECK: line length of 146 exceeds 100 columns
#2416: FILE: ./core/rtw_mlme_ext.c:2416:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, ((rate_len > 8) ? 8 : rate_len), cur_network->supported_rates, &pattrib->pktlen);

CHECK: line length of 143 exceeds 100 columns
#2419: FILE: ./core/rtw_mlme_ext.c:2419:
+		pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pattrib->pktlen);

CHECK: Unnecessary parentheses around cur_network->configuration.ds_config
#2419: FILE: ./core/rtw_mlme_ext.c:2419:
+		pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pattrib->pktlen);

CHECK: spaces preferred around that '&' (ctx:VxV)
#2421: FILE: ./core/rtw_mlme_ext.c:2421:
+		if ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) {
 		                     ^

CHECK: line length of 127 exceeds 100 columns
#2427: FILE: ./core/rtw_mlme_ext.c:2427:
+			pframe = rtw_set_ie(pframe, WLAN_EID_IBSS_PARAMS, 2, (unsigned char *)(&ATIMWindow), &pattrib->pktlen);

CHECK: line length of 102 exceeds 100 columns
#2430: FILE: ./core/rtw_mlme_ext.c:2430:
+			pframe = rtw_set_ie(pframe, WLAN_EID_ERP_INFO, 1, &erpinfo, &pattrib->pktlen);

CHECK: Please don't use multiple blank lines
#2433: FILE: ./core/rtw_mlme_ext.c:2433:
+
+

CHECK: line length of 147 exceeds 100 columns
#2436: FILE: ./core/rtw_mlme_ext.c:2436:
+			pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (rate_len - 8), (cur_network->supported_rates + 8), &pattrib->pktlen);

CHECK: Please don't use multiple blank lines
#2438: FILE: ./core/rtw_mlme_ext.c:2438:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#2441: FILE: ./core/rtw_mlme_ext.c:2441:
+
+	}

CHECK: Please don't use multiple blank lines
#2445: FILE: ./core/rtw_mlme_ext.c:2445:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#2450: FILE: ./core/rtw_mlme_ext.c:2450:
+
+}

WARNING: please, no space before tabs
#2459: FILE: ./core/rtw_mlme_ext.c:2459:
+^Iunsigned char ^I^I*pframe;$

WARNING: please, no space before tabs
#2462: FILE: ./core/rtw_mlme_ext.c:2462:
+^Iunsigned char ^I^I*mac;$

WARNING: please, no space before tabs
#2463: FILE: ./core/rtw_mlme_ext.c:2463:
+^Iunsigned char ^I^Ibssrate[NumRates];$

WARNING: please, no space before tabs
#2464: FILE: ./core/rtw_mlme_ext.c:2464:
+^Istruct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2464: FILE: ./core/rtw_mlme_ext.c:2464:
+	struct xmit_priv 	*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmepriv
#2465: FILE: ./core/rtw_mlme_ext.c:2465:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2466: FILE: ./core/rtw_mlme_ext.c:2466:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Please don't use multiple blank lines
#2477: FILE: ./core/rtw_mlme_ext.c:2477:
+
+

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2483: FILE: ./core/rtw_mlme_ext.c:2483:
+	mac = myid(&(padapter->eeprompriv));

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2485: FILE: ./core/rtw_mlme_ext.c:2485:
+	fctrl = &(pwlanhdr->frame_control);

WARNING: please, no space before tabs
#2489: FILE: ./core/rtw_mlme_ext.c:2489:
+^I^I/* ^Iunicast probe request frame */$

WARNING: please, no space before tabs
#2493: FILE: ./core/rtw_mlme_ext.c:2493:
+^I^I/* ^Ibroadcast probe request frame */$

CHECK: line length of 112 exceeds 100 columns
#2508: FILE: ./core/rtw_mlme_ext.c:2508:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SSID, pssid->ssid_length, pssid->ssid, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2508: FILE: ./core/rtw_mlme_ext.c:2508:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SSID, pssid->ssid_length, pssid->ssid, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2510: FILE: ./core/rtw_mlme_ext.c:2510:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SSID, 0, NULL, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2515: FILE: ./core/rtw_mlme_ext.c:2515:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, 8, bssrate, &(pattrib->pktlen));

CHECK: line length of 123 exceeds 100 columns
#2516: FILE: ./core/rtw_mlme_ext.c:2516:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (bssrate_len - 8), (bssrate + 8), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2516: FILE: ./core/rtw_mlme_ext.c:2516:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (bssrate_len - 8), (bssrate + 8), &(pattrib->pktlen));

CHECK: line length of 107 exceeds 100 columns
#2518: FILE: ./core/rtw_mlme_ext.c:2518:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, bssrate_len, bssrate, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2518: FILE: ./core/rtw_mlme_ext.c:2518:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, bssrate_len, bssrate, &(pattrib->pktlen));

CHECK: line length of 101 exceeds 100 columns
#2527: FILE: ./core/rtw_mlme_ext.c:2527:
+			memcpy(pframe, pmlmepriv->wps_probe_req_ie, pmlmepriv->wps_probe_req_ie_len);

CHECK: line length of 111 exceeds 100 columns
#2551: FILE: ./core/rtw_mlme_ext.c:2551:
+int issue_probereq_ex(struct adapter *padapter, struct ndis_802_11_ssid *pssid, u8 *da, u8 ch, bool append_wps,

CHECK: Alignment should match open parenthesis
#2552: FILE: ./core/rtw_mlme_ext.c:2552:
+int issue_probereq_ex(struct adapter *padapter, struct ndis_802_11_ssid *pssid, u8 *da, u8 ch, bool append_wps,
+	int try_cnt, int wait_ms)

WARNING: please, no space before tabs
#2587: FILE: ./core/rtw_mlme_ext.c:2587:
+^Iunsigned char ^I^I^I^I*pframe;$

WARNING: please, no space before tabs
#2593: FILE: ./core/rtw_mlme_ext.c:2593:
+^Istruct xmit_priv ^I^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2593: FILE: ./core/rtw_mlme_ext.c:2593:
+	struct xmit_priv 		*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2594: FILE: ./core/rtw_mlme_ext.c:2594:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2595: FILE: ./core/rtw_mlme_ext.c:2595:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2611: FILE: ./core/rtw_mlme_ext.c:2611:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Please don't use multiple blank lines
#2621: FILE: ./core/rtw_mlme_ext.c:2621:
+
+

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2624: FILE: ./core/rtw_mlme_ext.c:2624:
+		memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2625: FILE: ./core/rtw_mlme_ext.c:2625:
+		memcpy(pwlanhdr->addr3, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: line length of 113 exceeds 100 columns
#2638: FILE: ./core/rtw_mlme_ext.c:2638:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_ALGM_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2638: FILE: ./core/rtw_mlme_ext.c:2638:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_ALGM_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 112 exceeds 100 columns
#2643: FILE: ./core/rtw_mlme_ext.c:2643:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_SEQ_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2643: FILE: ./core/rtw_mlme_ext.c:2643:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_SEQ_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 111 exceeds 100 columns
#2648: FILE: ./core/rtw_mlme_ext.c:2648:
+		pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2648: FILE: ./core/rtw_mlme_ext.c:2648:
+		pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 105 exceeds 100 columns
#2651: FILE: ./core/rtw_mlme_ext.c:2651:
+		if ((psta->auth_seq == 2) && (psta->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1))

CHECK: Unnecessary parentheses around 'psta->auth_seq == 2'
#2651: FILE: ./core/rtw_mlme_ext.c:2651:
+		if ((psta->auth_seq == 2) && (psta->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1))

CHECK: Unnecessary parentheses around 'use_shared_key == 1'
#2651: FILE: ./core/rtw_mlme_ext.c:2651:
+		if ((psta->auth_seq == 2) && (psta->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1))

CHECK: line length of 112 exceeds 100 columns
#2652: FILE: ./core/rtw_mlme_ext.c:2652:
+			pframe = rtw_set_ie(pframe, WLAN_EID_CHALLENGE, 128, psta->chg_txt, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2652: FILE: ./core/rtw_mlme_ext.c:2652:
+			pframe = rtw_set_ie(pframe, WLAN_EID_CHALLENGE, 128, psta->chg_txt, &(pattrib->pktlen));

CHECK: line length of 116 exceeds 100 columns
#2660: FILE: ./core/rtw_mlme_ext.c:2660:
+		val16 = (pmlmeinfo->auth_algo == dot11AuthAlgrthm_Shared) ? 1 : 0;/*  0:OPEN System, 1:Shared key */

CHECK: line length of 117 exceeds 100 columns
#2666: FILE: ./core/rtw_mlme_ext.c:2666:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: Unnecessary parentheses around 'pmlmeinfo->auth_seq == 3'
#2666: FILE: ./core/rtw_mlme_ext.c:2666:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: Unnecessary parentheses around 'use_shared_key == 1'
#2666: FILE: ./core/rtw_mlme_ext.c:2666:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: line length of 109 exceeds 100 columns
#2671: FILE: ./core/rtw_mlme_ext.c:2671:
+			pframe = rtw_set_fixed_ie(pframe, 4, (unsigned char *)&le_tmp32, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2671: FILE: ./core/rtw_mlme_ext.c:2671:
+			pframe = rtw_set_fixed_ie(pframe, 4, (unsigned char *)&le_tmp32, &(pattrib->pktlen));

CHECK: line length of 113 exceeds 100 columns
#2676: FILE: ./core/rtw_mlme_ext.c:2676:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_ALGM_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2676: FILE: ./core/rtw_mlme_ext.c:2676:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_ALGM_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 112 exceeds 100 columns
#2680: FILE: ./core/rtw_mlme_ext.c:2680:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_SEQ_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2680: FILE: ./core/rtw_mlme_ext.c:2680:
+		pframe = rtw_set_fixed_ie(pframe, _AUTH_SEQ_NUM_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Please don't use multiple blank lines
#2682: FILE: ./core/rtw_mlme_ext.c:2682:
+
+

CHECK: line length of 111 exceeds 100 columns
#2685: FILE: ./core/rtw_mlme_ext.c:2685:
+		pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2685: FILE: ./core/rtw_mlme_ext.c:2685:
+		pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 117 exceeds 100 columns
#2688: FILE: ./core/rtw_mlme_ext.c:2688:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: Unnecessary parentheses around 'pmlmeinfo->auth_seq == 3'
#2688: FILE: ./core/rtw_mlme_ext.c:2688:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: Unnecessary parentheses around 'use_shared_key == 1'
#2688: FILE: ./core/rtw_mlme_ext.c:2688:
+		if ((pmlmeinfo->auth_seq == 3) && (pmlmeinfo->state & WIFI_FW_AUTH_STATE) && (use_shared_key == 1)) {

CHECK: line length of 117 exceeds 100 columns
#2689: FILE: ./core/rtw_mlme_ext.c:2689:
+			pframe = rtw_set_ie(pframe, WLAN_EID_CHALLENGE, 128, pmlmeinfo->chg_txt, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2689: FILE: ./core/rtw_mlme_ext.c:2689:
+			pframe = rtw_set_ie(pframe, WLAN_EID_CHALLENGE, 128, pmlmeinfo->chg_txt, &(pattrib->pktlen));

CHECK: Avoid CamelCase: <SetPrivacy>
#2691: FILE: ./core/rtw_mlme_ext.c:2691:
+			SetPrivacy(fctrl);

CHECK: Blank lines aren't necessary before a close brace '}'
#2701: FILE: ./core/rtw_mlme_ext.c:2701:
+
+		}

CHECK: Blank lines aren't necessary before a close brace '}'
#2703: FILE: ./core/rtw_mlme_ext.c:2703:
+
+	}

CHECK: Please don't use multiple blank lines
#2711: FILE: ./core/rtw_mlme_ext.c:2711:
+
+

CHECK: line length of 105 exceeds 100 columns
#2712: FILE: ./core/rtw_mlme_ext.c:2712:
+void issue_asocrsp(struct adapter *padapter, unsigned short status, struct sta_info *pstat, int pkt_type)

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2720: FILE: ./core/rtw_mlme_ext.c:2720:
+	struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmepriv
#2721: FILE: ./core/rtw_mlme_ext.c:2721:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2723: FILE: ./core/rtw_mlme_ext.c:2723:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2724: FILE: ./core/rtw_mlme_ext.c:2724:
+	struct wlan_bssid_ex *pnetwork = &(pmlmeinfo->network);

CHECK: Please don't use multiple blank lines
#2736: FILE: ./core/rtw_mlme_ext.c:2736:
+
+

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2742: FILE: ./core/rtw_mlme_ext.c:2742:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2746: FILE: ./core/rtw_mlme_ext.c:2746:
+	memcpy((void *)GetAddr2Ptr(pwlanhdr), myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2747: FILE: ./core/rtw_mlme_ext.c:2747:
+	memcpy((void *)GetAddr3Ptr(pwlanhdr), get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Please don't use multiple blank lines
#2749: FILE: ./core/rtw_mlme_ext.c:2749:
+
+

CHECK: Unnecessary parentheses around 'pkt_type == WIFI_ASSOCRSP'
#2752: FILE: ./core/rtw_mlme_ext.c:2752:
+	if ((pkt_type == WIFI_ASSOCRSP) || (pkt_type == WIFI_REASSOCRSP))

CHECK: Unnecessary parentheses around 'pkt_type == WIFI_REASSOCRSP'
#2752: FILE: ./core/rtw_mlme_ext.c:2752:
+	if ((pkt_type == WIFI_ASSOCRSP) || (pkt_type == WIFI_REASSOCRSP))

CHECK: Unnecessary parentheses around pattrib->pktlen
#2764: FILE: ./core/rtw_mlme_ext.c:2764:
+	pframe = rtw_set_fixed_ie(pframe, _CAPABILITY_, (unsigned char *)&val, &(pattrib->pktlen));

CHECK: line length of 105 exceeds 100 columns
#2767: FILE: ./core/rtw_mlme_ext.c:2767:
+	pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&lestatus, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2767: FILE: ./core/rtw_mlme_ext.c:2767:
+	pframe = rtw_set_fixed_ie(pframe, _STATUS_CODE_, (unsigned char *)&lestatus, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2770: FILE: ./core/rtw_mlme_ext.c:2770:
+	pframe = rtw_set_fixed_ie(pframe, _ASOC_ID_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: line length of 123 exceeds 100 columns
#2773: FILE: ./core/rtw_mlme_ext.c:2773:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, pstat->bssratelen, pstat->bssrateset, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2773: FILE: ./core/rtw_mlme_ext.c:2773:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, pstat->bssratelen, pstat->bssrateset, &(pattrib->pktlen));

CHECK: line length of 107 exceeds 100 columns
#2775: FILE: ./core/rtw_mlme_ext.c:2775:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, 8, pstat->bssrateset, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2775: FILE: ./core/rtw_mlme_ext.c:2775:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, 8, pstat->bssrateset, &(pattrib->pktlen));

CHECK: line length of 133 exceeds 100 columns
#2776: FILE: ./core/rtw_mlme_ext.c:2776:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (pstat->bssratelen-8), pstat->bssrateset+8, &(pattrib->pktlen));

CHECK: spaces preferred around that '-' (ctx:VxV)
#2776: FILE: ./core/rtw_mlme_ext.c:2776:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (pstat->bssratelen-8), pstat->bssrateset+8, &(pattrib->pktlen));
 		                                                                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2776: FILE: ./core/rtw_mlme_ext.c:2776:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (pstat->bssratelen-8), pstat->bssrateset+8, &(pattrib->pktlen));
 		                                                                                             ^

CHECK: Unnecessary parentheses around pattrib->pktlen
#2776: FILE: ./core/rtw_mlme_ext.c:2776:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (pstat->bssratelen-8), pstat->bssrateset+8, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around 'pmlmepriv->htpriv.ht_option'
#2779: FILE: ./core/rtw_mlme_ext.c:2779:
+	if ((pstat->flags & WLAN_STA_HT) && (pmlmepriv->htpriv.ht_option)) {

CHECK: line length of 136 exceeds 100 columns
#2784: FILE: ./core/rtw_mlme_ext.c:2784:
+		pbuf = rtw_get_ie(ie + _BEACON_IE_OFFSET_, WLAN_EID_HT_CAPABILITY, &ie_len, (pnetwork->ie_length - _BEACON_IE_OFFSET_));

CHECK: spaces preferred around that '+' (ctx:VxV)
#2786: FILE: ./core/rtw_mlme_ext.c:2786:
+			memcpy(pframe, pbuf, ie_len+2);
 			                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2787: FILE: ./core/rtw_mlme_ext.c:2787:
+			pframe += (ie_len+2);
 			                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2788: FILE: ./core/rtw_mlme_ext.c:2788:
+			pattrib->pktlen += (ie_len+2);
 			                          ^

CHECK: line length of 135 exceeds 100 columns
#2793: FILE: ./core/rtw_mlme_ext.c:2793:
+		pbuf = rtw_get_ie(ie + _BEACON_IE_OFFSET_, WLAN_EID_HT_OPERATION, &ie_len, (pnetwork->ie_length - _BEACON_IE_OFFSET_));

CHECK: spaces preferred around that '+' (ctx:VxV)
#2795: FILE: ./core/rtw_mlme_ext.c:2795:
+			memcpy(pframe, pbuf, ie_len+2);
 			                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2796: FILE: ./core/rtw_mlme_ext.c:2796:
+			pframe += (ie_len+2);
 			                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2797: FILE: ./core/rtw_mlme_ext.c:2797:
+			pattrib->pktlen += (ie_len+2);
 			                          ^

CHECK: Blank lines aren't necessary before a close brace '}'
#2800: FILE: ./core/rtw_mlme_ext.c:2800:
+
+	}

CHECK: Unnecessary parentheses around 'pmlmepriv->qospriv.qos_option'
#2803: FILE: ./core/rtw_mlme_ext.c:2803:
+	if ((pstat->flags & WLAN_STA_WME) && (pmlmepriv->qospriv.qos_option)) {

CHECK: line length of 142 exceeds 100 columns
#2808: FILE: ./core/rtw_mlme_ext.c:2808:
+			pbuf = rtw_get_ie(pbuf, WLAN_EID_VENDOR_SPECIFIC, &ie_len, (pnetwork->ie_length - _BEACON_IE_OFFSET_ - (ie_len + 2)));

CHECK: spaces preferred around that '+' (ctx:VxV)
#2809: FILE: ./core/rtw_mlme_ext.c:2809:
+			if (pbuf && !memcmp(pbuf+2, WMM_PARA_IE, 6)) {
 			                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2810: FILE: ./core/rtw_mlme_ext.c:2810:
+				memcpy(pframe, pbuf, ie_len+2);
 				                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2811: FILE: ./core/rtw_mlme_ext.c:2811:
+				pframe += (ie_len+2);
 				                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2812: FILE: ./core/rtw_mlme_ext.c:2812:
+				pattrib->pktlen += (ie_len+2);
 				                          ^

CHECK: Blank lines aren't necessary before a close brace '}'
#2821: FILE: ./core/rtw_mlme_ext.c:2821:
+
+	}

CHECK: line length of 109 exceeds 100 columns
#2824: FILE: ./core/rtw_mlme_ext.c:2824:
+		pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, 6, REALTEK_96B_IE, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2824: FILE: ./core/rtw_mlme_ext.c:2824:
+		pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, 6, REALTEK_96B_IE, &(pattrib->pktlen));

WARNING: please, no space before tabs
#2844: FILE: ./core/rtw_mlme_ext.c:2844:
+^Iunsigned char ^I^I^I^I*pframe;$

WARNING: please, no space before tabs
#2851: FILE: ./core/rtw_mlme_ext.c:2851:
+^Istruct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2851: FILE: ./core/rtw_mlme_ext.c:2851:
+	struct xmit_priv 	*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmepriv
#2852: FILE: ./core/rtw_mlme_ext.c:2852:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2853: FILE: ./core/rtw_mlme_ext.c:2853:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2854: FILE: ./core/rtw_mlme_ext.c:2854:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#2871: FILE: ./core/rtw_mlme_ext.c:2871:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2873: FILE: ./core/rtw_mlme_ext.c:2873:
+	memcpy(pwlanhdr->addr1, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#2874: FILE: ./core/rtw_mlme_ext.c:2874:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#2875: FILE: ./core/rtw_mlme_ext.c:2875:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: line length of 139 exceeds 100 columns
#2898: FILE: ./core/rtw_mlme_ext.c:2898:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SSID,  pmlmeinfo->network.ssid.ssid_length, pmlmeinfo->network.ssid.ssid, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2898: FILE: ./core/rtw_mlme_ext.c:2898:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SSID,  pmlmeinfo->network.ssid.ssid_length, pmlmeinfo->network.ssid.ssid, &(pattrib->pktlen));

CHECK: Please don't use multiple blank lines
#2908: FILE: ./core/rtw_mlme_ext.c:2908:
+
+

CHECK: Please don't use multiple blank lines
#2917: FILE: ./core/rtw_mlme_ext.c:2917:
+
+

CHECK: Please don't use multiple blank lines
#2922: FILE: ./core/rtw_mlme_ext.c:2922:
+
+

CHECK: Please don't use multiple blank lines
#2944: FILE: ./core/rtw_mlme_ext.c:2944:
+
+

CHECK: braces {} should be used on all arms of this statement
#2945: FILE: ./core/rtw_mlme_ext.c:2945:
+	if (bssrate_len > 8) {
[...]
+	} else
[...]

CHECK: Unnecessary parentheses around pattrib->pktlen
#2946: FILE: ./core/rtw_mlme_ext.c:2946:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, 8, bssrate, &(pattrib->pktlen));

CHECK: line length of 123 exceeds 100 columns
#2947: FILE: ./core/rtw_mlme_ext.c:2947:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (bssrate_len - 8), (bssrate + 8), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2947: FILE: ./core/rtw_mlme_ext.c:2947:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (bssrate_len - 8), (bssrate + 8), &(pattrib->pktlen));

CHECK: Unbalanced braces around else statement
#2948: FILE: ./core/rtw_mlme_ext.c:2948:
+	} else

CHECK: line length of 107 exceeds 100 columns
#2949: FILE: ./core/rtw_mlme_ext.c:2949:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, bssrate_len, bssrate, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2949: FILE: ./core/rtw_mlme_ext.c:2949:
+		pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, bssrate_len, bssrate, &(pattrib->pktlen));

CHECK: Alignment should match open parenthesis
#2958: FILE: ./core/rtw_mlme_ext.c:2958:
+			if ((!memcmp(pIE->data, RTW_WPA_OUI, 4)) ||
+					(!memcmp(pIE->data, WMM_OUI, 4)) ||

CHECK: line length of 110 exceeds 100 columns
#2961: FILE: ./core/rtw_mlme_ext.c:2961:
+				if ((!padapter->registrypriv.wifi_spec) && (!memcmp(pIE->data, WPS_OUI, 4))) {

CHECK: Unnecessary parentheses around '!padapter->registrypriv.wifi_spec'
#2961: FILE: ./core/rtw_mlme_ext.c:2961:
+				if ((!padapter->registrypriv.wifi_spec) && (!memcmp(pIE->data, WPS_OUI, 4))) {

CHECK: line length of 131 exceeds 100 columns
#2971: FILE: ./core/rtw_mlme_ext.c:2971:
+				pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, vs_ie_length, pIE->data, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2971: FILE: ./core/rtw_mlme_ext.c:2971:
+				pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, vs_ie_length, pIE->data, &(pattrib->pktlen));

CHECK: line length of 110 exceeds 100 columns
#2976: FILE: ./core/rtw_mlme_ext.c:2976:
+			pframe = rtw_set_ie(pframe, WLAN_EID_RSN, pIE->length, pIE->data, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2976: FILE: ./core/rtw_mlme_ext.c:2976:
+			pframe = rtw_set_ie(pframe, WLAN_EID_RSN, pIE->length, pIE->data, &(pattrib->pktlen));

CHECK: line length of 113 exceeds 100 columns
#2981: FILE: ./core/rtw_mlme_ext.c:2981:
+					memcpy(&(pmlmeinfo->HT_caps), pIE->data, sizeof(struct HT_caps_element));

CHECK: Unnecessary parentheses around pmlmeinfo->HT_caps
#2981: FILE: ./core/rtw_mlme_ext.c:2981:
+					memcpy(&(pmlmeinfo->HT_caps), pIE->data, sizeof(struct HT_caps_element));

CHECK: line length of 156 exceeds 100 columns
#2982: FILE: ./core/rtw_mlme_ext.c:2982:
+					pframe = rtw_set_ie(pframe, WLAN_EID_HT_CAPABILITY, pIE->length, (u8 *)(&(pmlmeinfo->HT_caps)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pmlmeinfo->HT_caps
#2982: FILE: ./core/rtw_mlme_ext.c:2982:
+					pframe = rtw_set_ie(pframe, WLAN_EID_HT_CAPABILITY, pIE->length, (u8 *)(&(pmlmeinfo->HT_caps)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2982: FILE: ./core/rtw_mlme_ext.c:2982:
+					pframe = rtw_set_ie(pframe, WLAN_EID_HT_CAPABILITY, pIE->length, (u8 *)(&(pmlmeinfo->HT_caps)), &(pattrib->pktlen));

CHECK: line length of 129 exceeds 100 columns
#2989: FILE: ./core/rtw_mlme_ext.c:2989:
+				pframe = rtw_set_ie(pframe, WLAN_EID_EXT_CAPABILITY, pIE->length, pIE->data, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2989: FILE: ./core/rtw_mlme_ext.c:2989:
+				pframe = rtw_set_ie(pframe, WLAN_EID_EXT_CAPABILITY, pIE->length, pIE->data, &(pattrib->pktlen));

CHECK: line length of 109 exceeds 100 columns
#2999: FILE: ./core/rtw_mlme_ext.c:2999:
+		pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, 6, REALTEK_96B_IE, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#2999: FILE: ./core/rtw_mlme_ext.c:2999:
+		pframe = rtw_set_ie(pframe, WLAN_EID_VENDOR_SPECIFIC, 6, REALTEK_96B_IE, &(pattrib->pktlen));

CHECK: Please don't use multiple blank lines
#3001: FILE: ./core/rtw_mlme_ext.c:3001:
+
+

CHECK: line length of 114 exceeds 100 columns
#3009: FILE: ./core/rtw_mlme_ext.c:3009:
+		rtw_buf_update(&pmlmepriv->assoc_req, &pmlmepriv->assoc_req_len, (u8 *)pwlanhdr, pattrib->pktlen);

WARNING: please, no space before tabs
#3021: FILE: ./core/rtw_mlme_ext.c:3021:
+^Iunsigned char ^I^I^I^I*pframe;$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3031: FILE: ./core/rtw_mlme_ext.c:3031:
+	pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3032: FILE: ./core/rtw_mlme_ext.c:3032:
+	pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3033: FILE: ./core/rtw_mlme_ext.c:3033:
+	pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3049: FILE: ./core/rtw_mlme_ext.c:3049:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: spaces preferred around that '&' (ctx:VxV)
#3052: FILE: ./core/rtw_mlme_ext.c:3052:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)
 	                     ^

CHECK: Avoid CamelCase: <SetFrDs>
#3053: FILE: ./core/rtw_mlme_ext.c:3053:
+		SetFrDs(fctrl);

CHECK: spaces preferred around that '&' (ctx:VxV)
#3054: FILE: ./core/rtw_mlme_ext.c:3054:
+	else if ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE)
 	                          ^

CHECK: Avoid CamelCase: <SetToDs>
#3055: FILE: ./core/rtw_mlme_ext.c:3055:
+		SetToDs(fctrl);

CHECK: Avoid CamelCase: <SetPwrMgt>
#3058: FILE: ./core/rtw_mlme_ext.c:3058:
+		SetPwrMgt(fctrl);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3061: FILE: ./core/rtw_mlme_ext.c:3061:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3062: FILE: ./core/rtw_mlme_ext.c:3062:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: line length of 114 exceeds 100 columns
#3090: FILE: ./core/rtw_mlme_ext.c:3090:
+int issue_nulldata(struct adapter *padapter, unsigned char *da, unsigned int power_mode, int try_cnt, int wait_ms)

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3094: FILE: ./core/rtw_mlme_ext.c:3094:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3095: FILE: ./core/rtw_mlme_ext.c:3095:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Please don't use multiple blank lines
#3098: FILE: ./core/rtw_mlme_ext.c:3098:
+
+

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3101: FILE: ./core/rtw_mlme_ext.c:3101:
+		da = get_my_bssid(&(pmlmeinfo->network));

CHECK: Please don't use multiple blank lines
#3148: FILE: ./core/rtw_mlme_ext.c:3148:
+
+

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3154: FILE: ./core/rtw_mlme_ext.c:3154:
+		da = get_my_bssid(&(pmlmeinfo->network));

WARNING: please, no space before tabs
#3166: FILE: ./core/rtw_mlme_ext.c:3166:
+^Iunsigned char ^I^I^I^I*pframe;$

WARNING: please, no space before tabs
#3170: FILE: ./core/rtw_mlme_ext.c:3170:
+^Istruct xmit_priv ^I^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3170: FILE: ./core/rtw_mlme_ext.c:3170:
+	struct xmit_priv 		*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3171: FILE: ./core/rtw_mlme_ext.c:3171:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3172: FILE: ./core/rtw_mlme_ext.c:3172:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3193: FILE: ./core/rtw_mlme_ext.c:3193:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: spaces preferred around that '&' (ctx:VxV)
#3196: FILE: ./core/rtw_mlme_ext.c:3196:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)
 	                     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#3198: FILE: ./core/rtw_mlme_ext.c:3198:
+	else if ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE)
 	                          ^

CHECK: Avoid CamelCase: <SetPriority>
#3203: FILE: ./core/rtw_mlme_ext.c:3203:
+	SetPriority(qc, tid);

CHECK: Avoid CamelCase: <SetEOSP>
#3205: FILE: ./core/rtw_mlme_ext.c:3205:
+	SetEOSP(qc, pattrib->eosp);

CHECK: Avoid CamelCase: <SetAckpolicy>
#3207: FILE: ./core/rtw_mlme_ext.c:3207:
+	SetAckpolicy(qc, pattrib->ack_policy);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3210: FILE: ./core/rtw_mlme_ext.c:3210:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3211: FILE: ./core/rtw_mlme_ext.c:3211:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: line length of 102 exceeds 100 columns
#3235: FILE: ./core/rtw_mlme_ext.c:3235:
+int issue_qos_nulldata(struct adapter *padapter, unsigned char *da, u16 tid, int try_cnt, int wait_ms)

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3239: FILE: ./core/rtw_mlme_ext.c:3239:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3240: FILE: ./core/rtw_mlme_ext.c:3240:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3244: FILE: ./core/rtw_mlme_ext.c:3244:
+		da = get_my_bssid(&(pmlmeinfo->network));

WARNING: please, no space before tabs
#3275: FILE: ./core/rtw_mlme_ext.c:3275:
+^Iunsigned char ^I^I^I^I*pframe;$

WARNING: please, no space before tabs
#3278: FILE: ./core/rtw_mlme_ext.c:3278:
+^Istruct xmit_priv ^I^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3278: FILE: ./core/rtw_mlme_ext.c:3278:
+	struct xmit_priv 		*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3279: FILE: ./core/rtw_mlme_ext.c:3279:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3280: FILE: ./core/rtw_mlme_ext.c:3280:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3298: FILE: ./core/rtw_mlme_ext.c:3298:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3302: FILE: ./core/rtw_mlme_ext.c:3302:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3303: FILE: ./core/rtw_mlme_ext.c:3303:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: line length of 101 exceeds 100 columns
#3313: FILE: ./core/rtw_mlme_ext.c:3313:
+	pframe = rtw_set_fixed_ie(pframe, _RSON_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3313: FILE: ./core/rtw_mlme_ext.c:3313:
+	pframe = rtw_set_fixed_ie(pframe, _RSON_CODE_, (unsigned char *)&le_tmp, &(pattrib->pktlen));

CHECK: Please don't use multiple blank lines
#3317: FILE: ./core/rtw_mlme_ext.c:3317:
+
+

CHECK: Alignment should match open parenthesis
#3335: FILE: ./core/rtw_mlme_ext.c:3335:
+int issue_deauth_ex(struct adapter *padapter, u8 *da, unsigned short reason, int try_cnt,
+	int wait_ms)

CHECK: line length of 116 exceeds 100 columns
#3364: FILE: ./core/rtw_mlme_ext.c:3364:
+void issue_action_SA_Query(struct adapter *padapter, unsigned char *raddr, unsigned char action, unsigned short tid)

WARNING: please, no space before tabs
#3369: FILE: ./core/rtw_mlme_ext.c:3369:
+^Iu8 ^I^I^I*pframe;$

WARNING: please, no space before tabs
#3372: FILE: ./core/rtw_mlme_ext.c:3372:
+^Istruct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3372: FILE: ./core/rtw_mlme_ext.c:3372:
+	struct xmit_priv 	*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3373: FILE: ./core/rtw_mlme_ext.c:3373:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3374: FILE: ./core/rtw_mlme_ext.c:3374:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3390: FILE: ./core/rtw_mlme_ext.c:3390:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3396: FILE: ./core/rtw_mlme_ext.c:3396:
+		memcpy(pwlanhdr->addr1, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3397: FILE: ./core/rtw_mlme_ext.c:3397:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3398: FILE: ./core/rtw_mlme_ext.c:3398:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: line length of 113 exceeds 100 columns
#3412: FILE: ./core/rtw_mlme_ext.c:3412:
+		pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)&pmlmeext->sa_query_seq, &pattrib->pktlen);

CHECK: line length of 113 exceeds 100 columns
#3431: FILE: ./core/rtw_mlme_ext.c:3431:
+void issue_action_BA(struct adapter *padapter, unsigned char *raddr, unsigned char action, unsigned short status)

WARNING: please, no space before tabs
#3442: FILE: ./core/rtw_mlme_ext.c:3442:
+^Iu8 ^I^I^I*pframe;$

WARNING: please, no space before tabs
#3445: FILE: ./core/rtw_mlme_ext.c:3445:
+^Istruct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3445: FILE: ./core/rtw_mlme_ext.c:3445:
+	struct xmit_priv 	*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3446: FILE: ./core/rtw_mlme_ext.c:3446:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3447: FILE: ./core/rtw_mlme_ext.c:3447:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

WARNING: please, no space before tabs
#3448: FILE: ./core/rtw_mlme_ext.c:3448:
+^Istruct sta_info ^I*psta;$

WARNING: please, no space before tabs
#3449: FILE: ./core/rtw_mlme_ext.c:3449:
+^Istruct sta_priv ^I*pstapriv = &padapter->stapriv;$

WARNING: please, no space before tabs
#3450: FILE: ./core/rtw_mlme_ext.c:3450:
+^Istruct registry_priv ^I*pregpriv = &padapter->registrypriv;$

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3466: FILE: ./core/rtw_mlme_ext.c:3466:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3471: FILE: ./core/rtw_mlme_ext.c:3471:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3472: FILE: ./core/rtw_mlme_ext.c:3472:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around pattrib->pktlen
#3481: FILE: ./core/rtw_mlme_ext.c:3481:
+	pframe = rtw_set_fixed_ie(pframe, 1, &(category), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3482: FILE: ./core/rtw_mlme_ext.c:3482:
+	pframe = rtw_set_fixed_ie(pframe, 1, &(action), &(pattrib->pktlen));

CHECK: line length of 108 exceeds 100 columns
#3490: FILE: ./core/rtw_mlme_ext.c:3490:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->dialogToken), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pmlmeinfo->dialogToken
#3490: FILE: ./core/rtw_mlme_ext.c:3490:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->dialogToken), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3490: FILE: ./core/rtw_mlme_ext.c:3490:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->dialogToken), &(pattrib->pktlen));

CHECK: Avoid CamelCase: <hal_btcoex_IsBTCoexCtrlAMPDUSize>
#3492: FILE: ./core/rtw_mlme_ext.c:3492:
+			if (hal_btcoex_IsBTCoexCtrlAMPDUSize(padapter)) {

CHECK: line length of 116 exceeds 100 columns
#3502: FILE: ./core/rtw_mlme_ext.c:3502:
+				BA_para_set = (0x1002 | ((status & 0xf) << 2)); /* immediate ack & 64 buffer size */

CHECK: line length of 111 exceeds 100 columns
#3505: FILE: ./core/rtw_mlme_ext.c:3505:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3505: FILE: ./core/rtw_mlme_ext.c:3505:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: line length of 111 exceeds 100 columns
#3509: FILE: ./core/rtw_mlme_ext.c:3509:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3509: FILE: ./core/rtw_mlme_ext.c:3509:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: line length of 109 exceeds 100 columns
#3511: FILE: ./core/rtw_mlme_ext.c:3511:
+			/* if ((psta = rtw_get_stainfo(pstapriv, pmlmeinfo->network.mac_address)) != NULL) */

CHECK: line length of 102 exceeds 100 columns
#3514: FILE: ./core/rtw_mlme_ext.c:3514:
+				start_seq = (psta->sta_xmitpriv.txseq_tid[status & 0x07] % 4096u) + 1;

CHECK: line length of 111 exceeds 100 columns
#3522: FILE: ./core/rtw_mlme_ext.c:3522:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3522: FILE: ./core/rtw_mlme_ext.c:3522:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: line length of 119 exceeds 100 columns
#3526: FILE: ./core/rtw_mlme_ext.c:3526:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->ADDBA_req.dialog_token), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pmlmeinfo->ADDBA_req.dialog_token
#3526: FILE: ./core/rtw_mlme_ext.c:3526:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->ADDBA_req.dialog_token), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3526: FILE: ./core/rtw_mlme_ext.c:3526:
+			pframe = rtw_set_fixed_ie(pframe, 1, &(pmlmeinfo->ADDBA_req.dialog_token), &(pattrib->pktlen));

CHECK: line length of 109 exceeds 100 columns
#3527: FILE: ./core/rtw_mlme_ext.c:3527:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&status), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3527: FILE: ./core/rtw_mlme_ext.c:3527:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&status), &(pattrib->pktlen));

CHECK: line length of 104 exceeds 100 columns
#3530: FILE: ./core/rtw_mlme_ext.c:3530:
+				  (enum ieee80211_max_ampdu_length_exp)padapter->driver_rx_ampdu_factor;

CHECK: line length of 102 exceeds 100 columns
#3533: FILE: ./core/rtw_mlme_ext.c:3533:
+						    HW_VAR_MAX_RX_AMPDU_FACTOR, &max_rx_ampdu_factor);

CHECK: line length of 133 exceeds 100 columns
#3536: FILE: ./core/rtw_mlme_ext.c:3536:
+				BA_para_set = ((le16_to_cpu(pmlmeinfo->ADDBA_req.BA_para_set) & 0x3f) | 0x1000); /* 64 buffer size */

CHECK: line length of 133 exceeds 100 columns
#3538: FILE: ./core/rtw_mlme_ext.c:3538:
+				BA_para_set = ((le16_to_cpu(pmlmeinfo->ADDBA_req.BA_para_set) & 0x3f) | 0x0800); /* 32 buffer size */

CHECK: line length of 133 exceeds 100 columns
#3540: FILE: ./core/rtw_mlme_ext.c:3540:
+				BA_para_set = ((le16_to_cpu(pmlmeinfo->ADDBA_req.BA_para_set) & 0x3f) | 0x0400); /* 16 buffer size */

CHECK: line length of 132 exceeds 100 columns
#3542: FILE: ./core/rtw_mlme_ext.c:3542:
+				BA_para_set = ((le16_to_cpu(pmlmeinfo->ADDBA_req.BA_para_set) & 0x3f) | 0x0200); /* 8 buffer size */

CHECK: line length of 133 exceeds 100 columns
#3544: FILE: ./core/rtw_mlme_ext.c:3544:
+				BA_para_set = ((le16_to_cpu(pmlmeinfo->ADDBA_req.BA_para_set) & 0x3f) | 0x1000); /* 64 buffer size */

CHECK: line length of 111 exceeds 100 columns
#3560: FILE: ./core/rtw_mlme_ext.c:3560:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3560: FILE: ./core/rtw_mlme_ext.c:3560:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: line length of 142 exceeds 100 columns
#3561: FILE: ./core/rtw_mlme_ext.c:3561:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(pmlmeinfo->ADDBA_req.BA_timeout_value)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pmlmeinfo->ADDBA_req.BA_timeout_value
#3561: FILE: ./core/rtw_mlme_ext.c:3561:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(pmlmeinfo->ADDBA_req.BA_timeout_value)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3561: FILE: ./core/rtw_mlme_ext.c:3561:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(pmlmeinfo->ADDBA_req.BA_timeout_value)), &(pattrib->pktlen));

CHECK: line length of 111 exceeds 100 columns
#3566: FILE: ./core/rtw_mlme_ext.c:3566:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3566: FILE: ./core/rtw_mlme_ext.c:3566:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: line length of 111 exceeds 100 columns
#3570: FILE: ./core/rtw_mlme_ext.c:3570:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3570: FILE: ./core/rtw_mlme_ext.c:3570:
+			pframe = rtw_set_fixed_ie(pframe, 2, (unsigned char *)(&(le_tmp)), &(pattrib->pktlen));

CHECK: Avoid CamelCase: <issue_action_BSSCoexistPacket>
#3582: FILE: ./core/rtw_mlme_ext.c:3582:
+static void issue_action_BSSCoexistPacket(struct adapter *padapter)

WARNING: please, no space before tabs
#3588: FILE: ./core/rtw_mlme_ext.c:3588:
+^Iunsigned char ^I^I^I*pframe;$

WARNING: please, no space before tabs
#3592: FILE: ./core/rtw_mlme_ext.c:3592:
+^Istruct xmit_priv ^I^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#3592: FILE: ./core/rtw_mlme_ext.c:3592:
+	struct xmit_priv 		*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#3594: FILE: ./core/rtw_mlme_ext.c:3594:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3595: FILE: ./core/rtw_mlme_ext.c:3595:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue
#3596: FILE: ./core/rtw_mlme_ext.c:3596:
+	struct __queue		*queue	= &(pmlmepriv->scanned_queue);

CHECK: Avoid CamelCase: <InfoContent>
#3597: FILE: ./core/rtw_mlme_ext.c:3597:
+	u8 InfoContent[16] = {0};

CHECK: Unnecessary parentheses around 'pmlmepriv->num_FortyMHzIntolerant == 0'
#3600: FILE: ./core/rtw_mlme_ext.c:3600:
+	if ((pmlmepriv->num_FortyMHzIntolerant == 0) || (pmlmepriv->num_sta_no_ht == 0))

CHECK: Unnecessary parentheses around 'pmlmepriv->num_sta_no_ht == 0'
#3600: FILE: ./core/rtw_mlme_ext.c:3600:
+	if ((pmlmepriv->num_FortyMHzIntolerant == 0) || (pmlmepriv->num_sta_no_ht == 0))

CHECK: Using comparison to true is error prone
#3603: FILE: ./core/rtw_mlme_ext.c:3603:
+	if (true == pmlmeinfo->bwmode_updated)

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#3622: FILE: ./core/rtw_mlme_ext.c:3622:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3625: FILE: ./core/rtw_mlme_ext.c:3625:
+	memcpy(pwlanhdr->addr1, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#3626: FILE: ./core/rtw_mlme_ext.c:3626:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#3627: FILE: ./core/rtw_mlme_ext.c:3627:
+	memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around pattrib->pktlen
#3636: FILE: ./core/rtw_mlme_ext.c:3636:
+	pframe = rtw_set_fixed_ie(pframe, 1, &(category), &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3637: FILE: ./core/rtw_mlme_ext.c:3637:
+	pframe = rtw_set_fixed_ie(pframe, 1, &(action), &(pattrib->pktlen));

CHECK: Please don't use multiple blank lines
#3639: FILE: ./core/rtw_mlme_ext.c:3639:
+
+

CHECK: line length of 101 exceeds 100 columns
#3646: FILE: ./core/rtw_mlme_ext.c:3646:
+		pframe = rtw_set_ie(pframe, WLAN_EID_BSS_COEX_2040,  1, &iedata, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3646: FILE: ./core/rtw_mlme_ext.c:3646:
+		pframe = rtw_set_ie(pframe, WLAN_EID_BSS_COEX_2040,  1, &iedata, &(pattrib->pktlen));

CHECK: Blank lines aren't necessary before a close brace '}'
#3648: FILE: ./core/rtw_mlme_ext.c:3648:
+
+	}

CHECK: Please don't use multiple blank lines
#3650: FILE: ./core/rtw_mlme_ext.c:3650:
+
+

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#3656: FILE: ./core/rtw_mlme_ext.c:3656:
+		spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 153 exceeds 100 columns
#3675: FILE: ./core/rtw_mlme_ext.c:3675:
+			p = rtw_get_ie(pbss_network->ies + _FIXED_IE_LENGTH_, WLAN_EID_HT_CAPABILITY, &len, pbss_network->ie_length - _FIXED_IE_LENGTH_);

CHECK: Blank lines aren't necessary before a close brace '}'
#3687: FILE: ./core/rtw_mlme_ext.c:3687:
+
+		}

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#3689: FILE: ./core/rtw_mlme_ext.c:3689:
+		spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Please don't use multiple blank lines
#3691: FILE: ./core/rtw_mlme_ext.c:3691:
+
+

WARNING: Too many leading tabs - consider code refactoring
#3702: FILE: ./core/rtw_mlme_ext.c:3702:
+						if (k < 16) {

CHECK: line length of 111 exceeds 100 columns
#3704: FILE: ./core/rtw_mlme_ext.c:3704:
+							/* SET_BSS_INTOLERANT_ELE_CHANNEL(InfoContent+k, j); */

CHECK: line length of 132 exceeds 100 columns
#3710: FILE: ./core/rtw_mlme_ext.c:3710:
+				pframe = rtw_set_ie(pframe, WLAN_EID_BSS_INTOLERANT_CHL_REPORT, k, InfoContent, &(pattrib->pktlen));

CHECK: Unnecessary parentheses around pattrib->pktlen
#3710: FILE: ./core/rtw_mlme_ext.c:3710:
+				pframe = rtw_set_ie(pframe, WLAN_EID_BSS_INTOLERANT_CHL_REPORT, k, InfoContent, &(pattrib->pktlen));

CHECK: Blank lines aren't necessary before a close brace '}'
#3712: FILE: ./core/rtw_mlme_ext.c:3712:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#3714: FILE: ./core/rtw_mlme_ext.c:3714:
+
+		}

CHECK: Please don't use multiple blank lines
#3716: FILE: ./core/rtw_mlme_ext.c:3716:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#3717: FILE: ./core/rtw_mlme_ext.c:3717:
+
+	}

CHECK: Please don't use multiple blank lines
#3719: FILE: ./core/rtw_mlme_ext.c:3719:
+
+

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3731: FILE: ./core/rtw_mlme_ext.c:3731:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '&' (ctx:VxV)
#3734: FILE: ./core/rtw_mlme_ext.c:3734:
+	if ((pmlmeinfo->state&0x03) != WIFI_FW_AP_STATE)
 	                     ^

CHECK: line length of 116 exceeds 100 columns
#3745: FILE: ./core/rtw_mlme_ext.c:3745:
+				issue_action_BA(padapter, addr, WLAN_ACTION_DELBA, (((tid << 1) | initiator)&0x1F));

CHECK: spaces preferred around that '&' (ctx:VxV)
#3745: FILE: ./core/rtw_mlme_ext.c:3745:
+				issue_action_BA(padapter, addr, WLAN_ACTION_DELBA, (((tid << 1) | initiator)&0x1F));
 				                                                                            ^

CHECK: line length of 116 exceeds 100 columns
#3753: FILE: ./core/rtw_mlme_ext.c:3753:
+				issue_action_BA(padapter, addr, WLAN_ACTION_DELBA, (((tid << 1) | initiator)&0x1F));

CHECK: spaces preferred around that '&' (ctx:VxV)
#3753: FILE: ./core/rtw_mlme_ext.c:3753:
+				issue_action_BA(padapter, addr, WLAN_ACTION_DELBA, (((tid << 1) | initiator)&0x1F));
 				                                                                            ^

CHECK: Blank lines aren't necessary before a close brace '}'
#3757: FILE: ./core/rtw_mlme_ext.c:3757:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#3763: FILE: ./core/rtw_mlme_ext.c:3763:
+
+}

CHECK: line length of 121 exceeds 100 columns
#3780: FILE: ./core/rtw_mlme_ext.c:3780:
+		} while ((poll%10) != 0 && false == bxmitok && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

CHECK: spaces preferred around that '%' (ctx:VxV)
#3780: FILE: ./core/rtw_mlme_ext.c:3780:
+		} while ((poll%10) != 0 && false == bxmitok && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);
 		              ^

CHECK: Using comparison to false is error prone
#3780: FILE: ./core/rtw_mlme_ext.c:3780:
+		} while ((poll%10) != 0 && false == bxmitok && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

CHECK: line length of 110 exceeds 100 columns
#3782: FILE: ./core/rtw_mlme_ext.c:3782:
+	} while (false == bxmitok && issue < 100 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

CHECK: Using comparison to false is error prone
#3782: FILE: ./core/rtw_mlme_ext.c:3782:
+	} while (false == bxmitok && issue < 100 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

WARNING: Block comments use * on subsequent lines
#3794: FILE: ./core/rtw_mlme_ext.c:3794:
+/****************************************************************************
+

WARNING: please, no space before tabs
#3801: FILE: ./core/rtw_mlme_ext.c:3801:
+^Iunsigned char ^Isurvey_channel = 0, val8;$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3804: FILE: ./core/rtw_mlme_ext.c:3804:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 110 exceeds 100 columns
#3814: FILE: ./core/rtw_mlme_ext.c:3814:
+			ScanType = (ch->flags & RTW_IEEE80211_CHAN_PASSIVE_SCAN) ? SCAN_PASSIVE : SCAN_ACTIVE;

CHECK: line length of 134 exceeds 100 columns
#3826: FILE: ./core/rtw_mlme_ext.c:3826:
+				set_channel_bwmode(padapter, pmlmeext->fixed_chan, HAL_PRIME_CHNL_OFFSET_DONT_CARE, CHANNEL_WIDTH_20);

CHECK: line length of 128 exceeds 100 columns
#3829: FILE: ./core/rtw_mlme_ext.c:3829:
+				set_channel_bwmode(padapter, survey_channel, HAL_PRIME_CHNL_OFFSET_DONT_CARE, CHANNEL_WIDTH_20);

CHECK: line length of 126 exceeds 100 columns
#3845: FILE: ./core/rtw_mlme_ext.c:3845:
+						/* IOT issue, When wifi_spec is not set, send one probe req without WPS IE. */

WARNING: Too many leading tabs - consider code refactoring
#3846: FILE: ./core/rtw_mlme_ext.c:3846:
+						if (padapter->registrypriv.wifi_spec)

CHECK: line length of 124 exceeds 100 columns
#3847: FILE: ./core/rtw_mlme_ext.c:3847:
+							issue_probereq(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL);

CHECK: Unnecessary parentheses around pmlmeext->sitesurvey_res.ssid[i]
#3847: FILE: ./core/rtw_mlme_ext.c:3847:
+							issue_probereq(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL);

WARNING: Too many leading tabs - consider code refactoring
#3848: FILE: ./core/rtw_mlme_ext.c:3848:
+						else

CHECK: line length of 139 exceeds 100 columns
#3849: FILE: ./core/rtw_mlme_ext.c:3849:
+							issue_probereq_ex(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL, 0, 0, 0, 0);

CHECK: Unnecessary parentheses around pmlmeext->sitesurvey_res.ssid[i]
#3849: FILE: ./core/rtw_mlme_ext.c:3849:
+							issue_probereq_ex(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL, 0, 0, 0, 0);

CHECK: line length of 116 exceeds 100 columns
#3850: FILE: ./core/rtw_mlme_ext.c:3850:
+						issue_probereq(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL);

CHECK: Unnecessary parentheses around pmlmeext->sitesurvey_res.ssid[i]
#3850: FILE: ./core/rtw_mlme_ext.c:3850:
+						issue_probereq(padapter, &(pmlmeext->sitesurvey_res.ssid[i]), NULL);

CHECK: line length of 118 exceeds 100 columns
#3855: FILE: ./core/rtw_mlme_ext.c:3855:
+					/* IOT issue, When wifi_spec is not set, send one probe req without WPS IE. */

CHECK: Blank lines aren't necessary after an open brace '{'
#3869: FILE: ./core/rtw_mlme_ext.c:3869:
+	} else {
+

WARNING: please, no space before tabs
#3870: FILE: ./core/rtw_mlme_ext.c:3870:
+^I^I/* ^Ichannel number is 0 or this channel is not valid. */$

CHECK: line length of 102 exceeds 100 columns
#3876: FILE: ./core/rtw_mlme_ext.c:3876:
+			/* SelectChannel(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset); */

CHECK: line length of 123 exceeds 100 columns
#3878: FILE: ./core/rtw_mlme_ext.c:3878:
+			set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode);

CHECK: Avoid CamelCase: <Restore_DM_Func_Flag>
#3890: FILE: ./core/rtw_mlme_ext.c:3890:
+			Restore_DM_Func_Flag(padapter);

CHECK: Blank lines aren't necessary before a close brace '}'
#3912: FILE: ./core/rtw_mlme_ext.c:3912:
+
+}

CHECK: line length of 105 exceeds 100 columns
#3915: FILE: ./core/rtw_mlme_ext.c:3915:
+u8 collect_bss_info(struct adapter *padapter, union recv_frame *precv_frame, struct wlan_bssid_ex *bssid)

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#3926: FILE: ./core/rtw_mlme_ext.c:3926:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <RecvSignalPower>
#3962: FILE: ./core/rtw_mlme_ext.c:3962:
+	bssid->rssi = precv_frame->u.hdr.attrib.phy_info.RecvSignalPower; /*  in dBM.raw data */

CHECK: line length of 109 exceeds 100 columns
#3963: FILE: ./core/rtw_mlme_ext.c:3963:
+	bssid->phy_info.signal_quality = precv_frame->u.hdr.attrib.phy_info.SignalQuality;/* in percentage */

CHECK: Avoid CamelCase: <SignalQuality>
#3963: FILE: ./core/rtw_mlme_ext.c:3963:
+	bssid->phy_info.signal_quality = precv_frame->u.hdr.attrib.phy_info.SignalQuality;/* in percentage */

CHECK: line length of 111 exceeds 100 columns
#3964: FILE: ./core/rtw_mlme_ext.c:3964:
+	bssid->phy_info.signal_strength = precv_frame->u.hdr.attrib.phy_info.SignalStrength;/* in percentage */

CHECK: Avoid CamelCase: <SignalStrength>
#3964: FILE: ./core/rtw_mlme_ext.c:3964:
+	bssid->phy_info.signal_strength = precv_frame->u.hdr.attrib.phy_info.SignalStrength;/* in percentage */

CHECK: braces {} should be used on all arms of this statement
#3971: FILE: ./core/rtw_mlme_ext.c:3971:
+	if (*(p + 1)) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#3977: FILE: ./core/rtw_mlme_ext.c:3977:
+	} else

CHECK: line length of 104 exceeds 100 columns
#3984: FILE: ./core/rtw_mlme_ext.c:3984:
+	p = rtw_get_ie(bssid->ies + ie_offset, WLAN_EID_SUPP_RATES, &len, bssid->ie_length - ie_offset);

CHECK: line length of 108 exceeds 100 columns
#3993: FILE: ./core/rtw_mlme_ext.c:3993:
+	p = rtw_get_ie(bssid->ies + ie_offset, WLAN_EID_EXT_SUPP_RATES, &len, bssid->ie_length - ie_offset);

CHECK: spaces preferred around that '-' (ctx:VxV)
#3995: FILE: ./core/rtw_mlme_ext.c:3995:
+		if (len > (NDIS_802_11_LENGTH_RATES_EX-i))
 		                                      ^

CHECK: line length of 103 exceeds 100 columns
#4007: FILE: ./core/rtw_mlme_ext.c:4007:
+	p = rtw_get_ie(bssid->ies + ie_offset, WLAN_EID_DS_PARAMS, &len, bssid->ie_length - ie_offset);

CHECK: line length of 114 exceeds 100 columns
#4017: FILE: ./core/rtw_mlme_ext.c:4017:
+		p = rtw_get_ie(bssid->ies + ie_offset, WLAN_EID_HT_OPERATION, &len, bssid->ie_length - ie_offset);

CHECK: Unnecessary parentheses around 'pregistrypriv->wifi_spec == 1'
#4048: FILE: ./core/rtw_mlme_ext.c:4048:
+	if ((pregistrypriv->wifi_spec == 1) && (false == pmlmeinfo->bwmode_updated)) {

CHECK: Unnecessary parentheses around 'false == pmlmeinfo->bwmode_updated'
#4048: FILE: ./core/rtw_mlme_ext.c:4048:
+	if ((pregistrypriv->wifi_spec == 1) && (false == pmlmeinfo->bwmode_updated)) {

CHECK: Using comparison to false is error prone
#4048: FILE: ./core/rtw_mlme_ext.c:4048:
+	if ((pregistrypriv->wifi_spec == 1) && (false == pmlmeinfo->bwmode_updated)) {

CHECK: line length of 115 exceeds 100 columns
#4051: FILE: ./core/rtw_mlme_ext.c:4051:
+		p = rtw_get_ie(bssid->ies + ie_offset, WLAN_EID_HT_CAPABILITY, &len, bssid->ie_length - ie_offset);

CHECK: braces {} should be used on all arms of this statement
#4052: FILE: ./core/rtw_mlme_ext.c:4052:
+		if (p && len > 0) {
[...]
+		} else
[...]

CHECK: Avoid CamelCase: <pHT_caps>
#4053: FILE: ./core/rtw_mlme_ext.c:4053:
+			struct HT_caps_element	*pHT_caps;

CHECK: Unbalanced braces around else statement
#4059: FILE: ./core/rtw_mlme_ext.c:4059:
+		} else

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4076: FILE: ./core/rtw_mlme_ext.c:4076:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#4077: FILE: ./core/rtw_mlme_ext.c:4077:
+	struct wlan_bssid_ex		*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: spaces preferred around that '&' (ctx:VxV)
#4088: FILE: ./core/rtw_mlme_ext.c:4088:
+	if (caps&WLAN_CAPABILITY_IBSS) {/* adhoc master */
 	        ^

CHECK: line length of 102 exceeds 100 columns
#4095: FILE: ./core/rtw_mlme_ext.c:4095:
+		/* SelectChannel(padapter, pmlmeext->cur_channel, HAL_PRIME_CHNL_OFFSET_DONT_CARE); */

CHECK: line length of 119 exceeds 100 columns
#4096: FILE: ./core/rtw_mlme_ext.c:4096:
+		set_channel_bwmode(padapter, pmlmeext->cur_channel, HAL_PRIME_CHNL_OFFSET_DONT_CARE, CHANNEL_WIDTH_20);

CHECK: line length of 114 exceeds 100 columns
#4109: FILE: ./core/rtw_mlme_ext.c:4109:
+			rtw_hal_set_hwreg(padapter, HW_VAR_BSSID, padapter->registrypriv.dev_network.mac_address);

CHECK: Blank lines aren't necessary before a close brace '}'
#4123: FILE: ./core/rtw_mlme_ext.c:4123:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4130: FILE: ./core/rtw_mlme_ext.c:4130:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#4131: FILE: ./core/rtw_mlme_ext.c:4131:
+	struct wlan_bssid_ex		*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: spaces preferred around that '&' (ctx:VxV)
#4140: FILE: ./core/rtw_mlme_ext.c:4140:
+	if (caps&WLAN_CAPABILITY_ESS) {
 	        ^

WARNING: please, no space before tabs
#4151: FILE: ./core/rtw_mlme_ext.c:4151:
+^I^I/* ^ICommented by Albert 2012/07/21 */$

CHECK: line length of 140 exceeds 100 columns
#4152: FILE: ./core/rtw_mlme_ext.c:4152:
+		/* 	For the Win8 P2P connection, it will be hard to have a successful connection if this Wi-Fi doesn't connect to it. */

WARNING: please, no space before tabs
#4152: FILE: ./core/rtw_mlme_ext.c:4152:
+^I^I/* ^IFor the Win8 P2P connection, it will be hard to have a successful connection if this Wi-Fi doesn't connect to it. */$

CHECK: line length of 122 exceeds 100 columns
#4154: FILE: ./core/rtw_mlme_ext.c:4154:
+				/* To avoid connecting to AP fail during resume process, change retry count from 5 to 1 */

CHECK: line length of 117 exceeds 100 columns
#4155: FILE: ./core/rtw_mlme_ext.c:4155:
+				issue_deauth_ex(padapter, pnetwork->mac_address, WLAN_REASON_DEAUTH_LEAVING, 1, 100);

CHECK: Alignment should match open parenthesis
#4163: FILE: ./core/rtw_mlme_ext.c:4163:
+		_set_timer(&padapter->mlmepriv.assoc_timer,
+			(REAUTH_TO * REAUTH_LIMIT) + (REASSOC_TO*REASSOC_LIMIT) + beacon_timeout);

CHECK: spaces preferred around that '*' (ctx:VxV)
#4163: FILE: ./core/rtw_mlme_ext.c:4163:
+			(REAUTH_TO * REAUTH_LIMIT) + (REASSOC_TO*REASSOC_LIMIT) + beacon_timeout);
 			                                        ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#4166: FILE: ./core/rtw_mlme_ext.c:4166:
+	} else if (caps&WLAN_CAPABILITY_IBSS) { /* adhoc client */
 	               ^

CHECK: Blank lines aren't necessary before a close brace '}'
#4181: FILE: ./core/rtw_mlme_ext.c:4181:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4186: FILE: ./core/rtw_mlme_ext.c:4186:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Please don't use multiple blank lines
#4199: FILE: ./core/rtw_mlme_ext.c:4199:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#4205: FILE: ./core/rtw_mlme_ext.c:4205:
+
+}

CHECK: Please don't use multiple blank lines
#4207: FILE: ./core/rtw_mlme_ext.c:4207:
+
+

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4211: FILE: ./core/rtw_mlme_ext.c:4211:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 104 exceeds 100 columns
#4223: FILE: ./core/rtw_mlme_ext.c:4223:
+unsigned int receive_disconnect(struct adapter *padapter, unsigned char *MacAddr, unsigned short reason)

CHECK: Avoid CamelCase: <MacAddr>
#4223: FILE: ./core/rtw_mlme_ext.c:4223:
+unsigned int receive_disconnect(struct adapter *padapter, unsigned char *MacAddr, unsigned short reason)

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4226: FILE: ./core/rtw_mlme_ext.c:4226:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '&' (ctx:VxV)
#4232: FILE: ./core/rtw_mlme_ext.c:4232:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE) {
 	                     ^

CHECK: Please don't use multiple blank lines
#4254: FILE: ./core/rtw_mlme_ext.c:4254:
+
+

CHECK: Unnecessary parentheses around '!pmlmeext->update_channel_plan_by_ap_done'
#4259: FILE: ./core/rtw_mlme_ext.c:4259:
+	if (pregistrypriv->enable80211d &&
+		(!pmlmeext->update_channel_plan_by_ap_done)) {

CHECK: Alignment should match open parenthesis
#4260: FILE: ./core/rtw_mlme_ext.c:4260:
+	if (pregistrypriv->enable80211d &&
+		(!pmlmeext->update_channel_plan_by_ap_done)) {

CHECK: line length of 126 exceeds 100 columns
#4270: FILE: ./core/rtw_mlme_ext.c:4270:
+		ie = rtw_get_ie(bssid->ies + _FIXED_IE_LENGTH_, WLAN_EID_COUNTRY, &len, bssid->ie_length - _FIXED_IE_LENGTH_);

CHECK: spaces preferred around that '*' (ctx:VxV)
#4294: FILE: ./core/rtw_mlme_ext.c:4294:
+					channel = fcn + j*4; /*  5 GHz */
 					                 ^

CHECK: Avoid CamelCase: <Channel>
#4296: FILE: ./core/rtw_mlme_ext.c:4296:
+				chplan_ap.Channel[i++] = channel;

CHECK: Avoid CamelCase: <Len>
#4299: FILE: ./core/rtw_mlme_ext.c:4299:
+		chplan_ap.Len = i;

CHECK: multiple assignments should be avoided
#4306: FILE: ./core/rtw_mlme_ext.c:4306:
+		i = j = k = 0;

CHECK: Unnecessary parentheses around 'i == MAX_CHANNEL_NUM'
#4309: FILE: ./core/rtw_mlme_ext.c:4309:
+				if ((i == MAX_CHANNEL_NUM) ||
+					(chplan_sta[i].ChannelNum == 0) ||
+					(chplan_sta[i].ChannelNum > 14))

CHECK: Unnecessary parentheses around 'chplan_sta[i].ChannelNum == 0'
#4309: FILE: ./core/rtw_mlme_ext.c:4309:
+				if ((i == MAX_CHANNEL_NUM) ||
+					(chplan_sta[i].ChannelNum == 0) ||
+					(chplan_sta[i].ChannelNum > 14))

CHECK: Unnecessary parentheses around 'chplan_sta[i].ChannelNum > 14'
#4309: FILE: ./core/rtw_mlme_ext.c:4309:
+				if ((i == MAX_CHANNEL_NUM) ||
+					(chplan_sta[i].ChannelNum == 0) ||
+					(chplan_sta[i].ChannelNum > 14))

CHECK: Alignment should match open parenthesis
#4310: FILE: ./core/rtw_mlme_ext.c:4310:
+				if ((i == MAX_CHANNEL_NUM) ||
+					(chplan_sta[i].ChannelNum == 0) ||

CHECK: Unnecessary parentheses around 'j == chplan_ap.Len'
#4314: FILE: ./core/rtw_mlme_ext.c:4314:
+				if ((j == chplan_ap.Len) || (chplan_ap.Channel[j] > 14))

CHECK: Unnecessary parentheses around 'chplan_ap.Channel[j] > 14'
#4314: FILE: ./core/rtw_mlme_ext.c:4314:
+				if ((j == chplan_ap.Len) || (chplan_ap.Channel[j] > 14))

WARNING: please, no space before tabs
#4325: FILE: ./core/rtw_mlme_ext.c:4325:
+/* ^I^I^I^I^Ichplan_new[k].ScanType = chplan_sta[i].ScanType; */$

CHECK: Alignment should match open parenthesis
#4339: FILE: ./core/rtw_mlme_ext.c:4339:
+			while ((i < MAX_CHANNEL_NUM) &&
+				(chplan_sta[i].ChannelNum != 0) &&

CHECK: Blank lines aren't necessary after an open brace '{'
#4341: FILE: ./core/rtw_mlme_ext.c:4341:
+				(chplan_sta[i].ChannelNum <= 14)) {
+

WARNING: please, no space before tabs
#4343: FILE: ./core/rtw_mlme_ext.c:4343:
+/* ^I^I^I^Ichplan_new[k].ScanType = chplan_sta[i].ScanType; */$

CHECK: Alignment should match open parenthesis
#4359: FILE: ./core/rtw_mlme_ext.c:4359:
+			while ((i < MAX_CHANNEL_NUM) &&
+				(chplan_sta[i].ChannelNum != 0) &&

WARNING: Block comments use * on subsequent lines
#4390: FILE: ./core/rtw_mlme_ext.c:4390:
+/****************************************************************************
+

CHECK: Avoid CamelCase: <C2HEvent_Header>
#4401: FILE: ./core/rtw_mlme_ext.c:4401:
+	struct C2HEvent_Header *pc2h_evt_hdr;

CHECK: Avoid CamelCase: <_Survey>
#4435: FILE: ./core/rtw_mlme_ext.c:4435:
+	pc2h_evt_hdr->ID = GEN_EVT_CODE(_Survey);

CHECK: line length of 106 exceeds 100 columns
#4440: FILE: ./core/rtw_mlme_ext.c:4440:
+	if (collect_bss_info(padapter, precv_frame, (struct wlan_bssid_ex *)&psurvey_evt->bss) == _FAIL) {

CHECK: Blank lines aren't necessary before a close brace '}'
#4454: FILE: ./core/rtw_mlme_ext.c:4454:
+
+}

WARNING: please, no space before tabs
#4463: FILE: ./core/rtw_mlme_ext.c:4463:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

CHECK: Avoid CamelCase: <_SurveyDone>
#4488: FILE: ./core/rtw_mlme_ext.c:4488:
+	pc2h_evt_hdr->ID = GEN_EVT_CODE(_SurveyDone);

CHECK: Blank lines aren't necessary before a close brace '}'
#4498: FILE: ./core/rtw_mlme_ext.c:4498:
+
+}

WARNING: please, no space before tabs
#4507: FILE: ./core/rtw_mlme_ext.c:4507:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4508: FILE: ./core/rtw_mlme_ext.c:4508:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 121 exceeds 100 columns
#4537: FILE: ./core/rtw_mlme_ext.c:4537:
+	memcpy((unsigned char *)(&(pjoinbss_evt->network.network)), &(pmlmeinfo->network), sizeof(struct wlan_bssid_ex));

CHECK: Unnecessary parentheses around pjoinbss_evt->network.network
#4537: FILE: ./core/rtw_mlme_ext.c:4537:
+	memcpy((unsigned char *)(&(pjoinbss_evt->network.network)), &(pmlmeinfo->network), sizeof(struct wlan_bssid_ex));

CHECK: Unnecessary parentheses around pmlmeinfo->network
#4537: FILE: ./core/rtw_mlme_ext.c:4537:
+	memcpy((unsigned char *)(&(pjoinbss_evt->network.network)), &(pmlmeinfo->network), sizeof(struct wlan_bssid_ex));

CHECK: multiple assignments should be avoided
#4538: FILE: ./core/rtw_mlme_ext.c:4538:
+	pjoinbss_evt->network.join_res	= pjoinbss_evt->network.aid = res;

CHECK: Please don't use multiple blank lines
#4540: FILE: ./core/rtw_mlme_ext.c:4540:
+
+

CHECK: Please don't use multiple blank lines
#4543: FILE: ./core/rtw_mlme_ext.c:4543:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#4548: FILE: ./core/rtw_mlme_ext.c:4548:
+
+}

WARNING: please, no space before tabs
#4557: FILE: ./core/rtw_mlme_ext.c:4557:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

CHECK: Blank lines aren't necessary before a close brace '}'
#4592: FILE: ./core/rtw_mlme_ext.c:4592:
+
+}

WARNING: please, no space before tabs
#4603: FILE: ./core/rtw_mlme_ext.c:4603:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

CHECK: Avoid CamelCase: <_DelSTA>
#4628: FILE: ./core/rtw_mlme_ext.c:4628:
+	pc2h_evt_hdr->ID = GEN_EVT_CODE(_DelSTA);

CHECK: Unnecessary parentheses around pdel_sta_evt->macaddr
#4632: FILE: ./core/rtw_mlme_ext.c:4632:
+	memcpy((unsigned char *)(&(pdel_sta_evt->macaddr)), MacAddr, ETH_ALEN);

CHECK: Please don't use multiple blank lines
#4635: FILE: ./core/rtw_mlme_ext.c:4635:
+
+

WARNING: please, no space before tabs
#4654: FILE: ./core/rtw_mlme_ext.c:4654:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

CHECK: Avoid CamelCase: <_AddSTA>
#4679: FILE: ./core/rtw_mlme_ext.c:4679:
+	pc2h_evt_hdr->ID = GEN_EVT_CODE(_AddSTA);

CHECK: Unnecessary parentheses around padd_sta_evt->macaddr
#4683: FILE: ./core/rtw_mlme_ext.c:4683:
+	memcpy((unsigned char *)(&(padd_sta_evt->macaddr)), MacAddr, ETH_ALEN);

WARNING: Block comments use * on subsequent lines
#4690: FILE: ./core/rtw_mlme_ext.c:4690:
+/****************************************************************************
+

CHECK: Unnecessary parentheses around padapter->mlmepriv
#4698: FILE: ./core/rtw_mlme_ext.c:4698:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4700: FILE: ./core/rtw_mlme_ext.c:4700:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 135 exceeds 100 columns
#4711: FILE: ./core/rtw_mlme_ext.c:4711:
+		psta->htpriv.rx_ampdu_min_spacing = (pmlmeinfo->HT_caps.u.HT_cap_element.AMPDU_para&IEEE80211_HT_CAP_AMPDU_DENSITY)>>2;

CHECK: spaces preferred around that '&' (ctx:VxV)
#4711: FILE: ./core/rtw_mlme_ext.c:4711:
+		psta->htpriv.rx_ampdu_min_spacing = (pmlmeinfo->HT_caps.u.HT_cap_element.AMPDU_para&IEEE80211_HT_CAP_AMPDU_DENSITY)>>2;
 		                                                                                   ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#4711: FILE: ./core/rtw_mlme_ext.c:4711:
+		psta->htpriv.rx_ampdu_min_spacing = (pmlmeinfo->HT_caps.u.HT_cap_element.AMPDU_para&IEEE80211_HT_CAP_AMPDU_DENSITY)>>2;
 		                                                                                                                   ^

CHECK: Unnecessary parentheses around pmlmeinfo->HT_caps
#4713: FILE: ./core/rtw_mlme_ext.c:4713:
+		if (support_short_GI(padapter, &(pmlmeinfo->HT_caps), CHANNEL_WIDTH_20))

CHECK: Unnecessary parentheses around pmlmeinfo->HT_caps
#4716: FILE: ./core/rtw_mlme_ext.c:4716:
+		if (support_short_GI(padapter, &(pmlmeinfo->HT_caps), CHANNEL_WIDTH_40))

CHECK: Blank lines aren't necessary before a close brace '}'
#4735: FILE: ./core/rtw_mlme_ext.c:4735:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#4754: FILE: ./core/rtw_mlme_ext.c:4754:
+
+}

WARNING: please, no space before tabs
#4758: FILE: ./core/rtw_mlme_ext.c:4758:
+^Istruct mlme_priv ^I*pmlmepriv = &padapter->mlmepriv;$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4760: FILE: ./core/rtw_mlme_ext.c:4760:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#4761: FILE: ./core/rtw_mlme_ext.c:4761:
+	struct wlan_bssid_ex		*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: line length of 107 exceeds 100 columns
#4791: FILE: ./core/rtw_mlme_ext.c:4791:
+	set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode);

CHECK: Blank lines aren't necessary before a close brace '}'
#4801: FILE: ./core/rtw_mlme_ext.c:4801:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4806: FILE: ./core/rtw_mlme_ext.c:4806:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#4807: FILE: ./core/rtw_mlme_ext.c:4807:
+	struct wlan_bssid_ex		*cur_network = &(pmlmeinfo->network);

WARNING: please, no space before tabs
#4808: FILE: ./core/rtw_mlme_ext.c:4808:
+^Istruct sta_priv ^I*pstapriv = &padapter->stapriv;$

CHECK: spaces preferred around that '&' (ctx:VxV)
#4820: FILE: ./core/rtw_mlme_ext.c:4820:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE)
 	                     ^

CHECK: Please don't use multiple blank lines
#4824: FILE: ./core/rtw_mlme_ext.c:4824:
+
+

CHECK: Avoid CamelCase: <HTOnAssocRsp>
#4843: FILE: ./core/rtw_mlme_ext.c:4843:
+	HTOnAssocRsp(padapter);

CHECK: line length of 107 exceeds 100 columns
#4846: FILE: ./core/rtw_mlme_ext.c:4846:
+	set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode);

WARNING: Block comments use * on subsequent lines
#4861: FILE: ./core/rtw_mlme_ext.c:4861:
+		/* wakeup macid after join bss successfully to ensure
+			the subsequent data frames can be sent out normally */

WARNING: Block comments use a trailing */ on a separate line
#4861: FILE: ./core/rtw_mlme_ext.c:4861:
+			the subsequent data frames can be sent out normally */

CHECK: spaces preferred around that '&' (ctx:VxV)
#4868: FILE: ./core/rtw_mlme_ext.c:4868:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE) {
 	                     ^

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#4881: FILE: ./core/rtw_mlme_ext.c:4881:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4882: FILE: ./core/rtw_mlme_ext.c:4882:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '&' (ctx:VxV)
#4885: FILE: ./core/rtw_mlme_ext.c:4885:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) {
 	                     ^

CHECK: Blank lines aren't necessary before a close brace '}'
#4907: FILE: ./core/rtw_mlme_ext.c:4907:
+
+		}

CHECK: Avoid CamelCase: <SupportedRates>
#4915: FILE: ./core/rtw_mlme_ext.c:4915:
+	psta->bssratelen = rtw_get_rateset_len(pmlmeinfo->FW_sta_info[psta->mac_id].SupportedRates);

CHECK: line length of 104 exceeds 100 columns
#4916: FILE: ./core/rtw_mlme_ext.c:4916:
+	memcpy(psta->bssrateset, pmlmeinfo->FW_sta_info[psta->mac_id].SupportedRates, psta->bssratelen);

CHECK: line length of 112 exceeds 100 columns
#4924: FILE: ./core/rtw_mlme_ext.c:4924:
+	psta->wireless_mode = rtw_check_network_type(psta->bssrateset, psta->bssratelen, pmlmeext->cur_channel);

WARNING: Block comments use * on subsequent lines
#4938: FILE: ./core/rtw_mlme_ext.c:4938:
+/****************************************************************************
+

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4946: FILE: ./core/rtw_mlme_ext.c:4946:
+	struct mlme_ext_info    *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <UndecoratedSmoothedPWDB>
#4947: FILE: ./core/rtw_mlme_ext.c:4947:
+	int UndecoratedSmoothedPWDB;

CHECK: Avoid CamelCase: <bLinkInfoDump>
#4950: FILE: ./core/rtw_mlme_ext.c:4950:
+	if (padapter->bLinkInfoDump) {

CHECK: Blank lines aren't necessary after an open brace '{'
#4951: FILE: ./core/rtw_mlme_ext.c:4951:
+	if (padapter->bLinkInfoDump) {
+

CHECK: spaces preferred around that '&' (ctx:VxV)
#4952: FILE: ./core/rtw_mlme_ext.c:4952:
+		if ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE)
 		                     ^

CHECK: line length of 114 exceeds 100 columns
#4953: FILE: ./core/rtw_mlme_ext.c:4953:
+			rtw_hal_get_def_var(padapter, HAL_DEF_UNDERCORATEDSMOOTHEDPWDB, &UndecoratedSmoothedPWDB);

CHECK: Logical continuations should be on the previous line
#4970: FILE: ./core/rtw_mlme_ext.c:4970:
+	if ((sta_rx_data_pkts(psta) == sta_last_rx_data_pkts(psta))
+		&& sta_rx_beacon_pkts(psta) == sta_last_rx_beacon_pkts(psta)

CHECK: Logical continuations should be on the previous line
#4971: FILE: ./core/rtw_mlme_ext.c:4971:
+		&& sta_rx_beacon_pkts(psta) == sta_last_rx_beacon_pkts(psta)
+		&& sta_rx_probersp_pkts(psta) == sta_last_rx_probersp_pkts(psta)

WARNING: please, no space before tabs
#4986: FILE: ./core/rtw_mlme_ext.c:4986:
+^Istruct sta_info ^I*psta;$

WARNING: please, no space before tabs
#4987: FILE: ./core/rtw_mlme_ext.c:4987:
+^Istruct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv);$

CHECK: Unnecessary parentheses around padapter->xmitpriv
#4987: FILE: ./core/rtw_mlme_ext.c:4987:
+	struct xmit_priv 	*pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#4989: FILE: ./core/rtw_mlme_ext.c:4989:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

WARNING: please, no space before tabs
#4990: FILE: ./core/rtw_mlme_ext.c:4990:
+^Istruct sta_priv ^I*pstapriv = &padapter->stapriv;$

CHECK: Please don't use multiple blank lines
#4992: FILE: ./core/rtw_mlme_ext.c:4992:
+
+

CHECK: line length of 137 exceeds 100 columns
#5008: FILE: ./core/rtw_mlme_ext.c:5008:
+		/*  For WiDi 3.5 and latered on, they don't ask WiDi sink to do roaming, so we could not check rx limit that strictly. */

CHECK: line length of 146 exceeds 100 columns
#5021: FILE: ./core/rtw_mlme_ext.c:5021:
+						issue_probereq_ex(padapter, &pmlmeinfo->network.ssid, pmlmeinfo->network.mac_address, 0, 0, 0, 0);

CHECK: line length of 146 exceeds 100 columns
#5022: FILE: ./core/rtw_mlme_ext.c:5022:
+						issue_probereq_ex(padapter, &pmlmeinfo->network.ssid, pmlmeinfo->network.mac_address, 0, 0, 0, 0);

CHECK: line length of 146 exceeds 100 columns
#5023: FILE: ./core/rtw_mlme_ext.c:5023:
+						issue_probereq_ex(padapter, &pmlmeinfo->network.ssid, pmlmeinfo->network.mac_address, 0, 0, 0, 0);

CHECK: spaces preferred around that '+' (ctx:VxV)
#5047: FILE: ./core/rtw_mlme_ext.c:5047:
+				pmlmeinfo->link_count %= (link_count_limit+1);
 				                                          ^

CHECK: line length of 111 exceeds 100 columns
#5053: FILE: ./core/rtw_mlme_ext.c:5053:
+		} /* end of if ((psta = rtw_get_stainfo(pstapriv, passoc_res->network.mac_address)) != NULL) */

CHECK: Comparison to NULL could be written "!psta"
#5061: FILE: ./core/rtw_mlme_ext.c:5061:
+				if (psta == NULL)

CHECK: Blank lines aren't necessary after an open brace '{'
#5065: FILE: ./core/rtw_mlme_ext.c:5065:
+				if (pmlmeinfo->FW_sta_info[i].rx_pkt == sta_rx_pkts(psta)) {
+

CHECK: line length of 105 exceeds 100 columns
#5072: FILE: ./core/rtw_mlme_ext.c:5072:
+							, 65535/*  indicate disconnect caused by no rx */

CHECK: Blank lines aren't necessary before a close brace '}'
#5084: FILE: ./core/rtw_mlme_ext.c:5084:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#5086: FILE: ./core/rtw_mlme_ext.c:5086:
+
+}

WARNING: please, no space before tabs
#5094: FILE: ./core/rtw_mlme_ext.c:5094:
+^Istruct cmd_priv ^I^I^I^I*pcmdpriv = &padapter->cmdpriv;$

WARNING: please, no space before tabs
#5095: FILE: ./core/rtw_mlme_ext.c:5095:
+^Istruct mlme_ext_priv ^I*pmlmeext = &padapter->mlmeextpriv;$

WARNING: please, no space before tabs
#5129: FILE: ./core/rtw_mlme_ext.c:5129:
+^I/* struct xmit_priv ^I*pxmitpriv = &(padapter->xmitpriv); */$

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5131: FILE: ./core/rtw_mlme_ext.c:5131:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

WARNING: please, no space before tabs
#5132: FILE: ./core/rtw_mlme_ext.c:5132:
+^I/* struct sta_priv ^I*pstapriv = &padapter->stapriv; */$

CHECK: Please don't use multiple blank lines
#5134: FILE: ./core/rtw_mlme_ext.c:5134:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#5176: FILE: ./core/rtw_mlme_ext.c:5176:
+
+	}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5205: FILE: ./core/rtw_mlme_ext.c:5205:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '|' (ctx:VxV)
#5213: FILE: ./core/rtw_mlme_ext.c:5213:
+		pmlmeinfo->state &= ~(BIT(0)|BIT(1));/*  clear state */
 		                            ^

CHECK: Blank lines aren't necessary before a close brace '}'
#5233: FILE: ./core/rtw_mlme_ext.c:5233:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5238: FILE: ./core/rtw_mlme_ext.c:5238:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#5239: FILE: ./core/rtw_mlme_ext.c:5239:
+	struct wlan_bssid_ex	*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: Avoid CamelCase: <Save_DM_Func_Flag>
#5263: FILE: ./core/rtw_mlme_ext.c:5263:
+		Save_DM_Func_Flag(padapter);

CHECK: Blank lines aren't necessary before a close brace '}'
#5286: FILE: ./core/rtw_mlme_ext.c:5286:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#5290: FILE: ./core/rtw_mlme_ext.c:5290:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5298: FILE: ./core/rtw_mlme_ext.c:5298:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#5299: FILE: ./core/rtw_mlme_ext.c:5299:
+	struct wlan_bssid_ex		*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: line length of 109 exceeds 100 columns
#5309: FILE: ./core/rtw_mlme_ext.c:5309:
+			issue_deauth_ex(padapter, pnetwork->mac_address, WLAN_REASON_DEAUTH_LEAVING, 1, 100);

CHECK: Please don't use multiple blank lines
#5321: FILE: ./core/rtw_mlme_ext.c:5321:
+
+

CHECK: line length of 126 exceeds 100 columns
#5371: FILE: ./core/rtw_mlme_ext.c:5371:
+			/* spec case only for cisco's ap because cisco's ap issue assoc rsp using mcs rate @40MHz or @20MHz */

CHECK: line length of 105 exceeds 100 columns
#5373: FILE: ./core/rtw_mlme_ext.c:5373:
+				struct HT_info_element *pht_info = (struct HT_info_element *)(pIE->data);

CHECK: line length of 102 exceeds 100 columns
#5385: FILE: ./core/rtw_mlme_ext.c:5385:
+						pmlmeext->cur_ch_offset = HAL_PRIME_CHNL_OFFSET_LOWER;

CHECK: line length of 102 exceeds 100 columns
#5389: FILE: ./core/rtw_mlme_ext.c:5389:
+						pmlmeext->cur_ch_offset = HAL_PRIME_CHNL_OFFSET_UPPER;

CHECK: line length of 106 exceeds 100 columns
#5393: FILE: ./core/rtw_mlme_ext.c:5393:
+						pmlmeext->cur_ch_offset = HAL_PRIME_CHNL_OFFSET_DONT_CARE;

CHECK: Blank lines aren't necessary before a close brace '}'
#5434: FILE: ./core/rtw_mlme_ext.c:5434:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5440: FILE: ./core/rtw_mlme_ext.c:5440:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#5441: FILE: ./core/rtw_mlme_ext.c:5441:
+	struct wlan_bssid_ex		*pnetwork = (struct wlan_bssid_ex *)(&(pmlmeinfo->network));

CHECK: line length of 128 exceeds 100 columns
#5445: FILE: ./core/rtw_mlme_ext.c:5445:
+		issue_deauth_ex(padapter, pnetwork->mac_address, WLAN_REASON_DEAUTH_LEAVING, param->deauth_timeout_ms/100, 100);

CHECK: spaces preferred around that '/' (ctx:VxV)
#5445: FILE: ./core/rtw_mlme_ext.c:5445:
+		issue_deauth_ex(padapter, pnetwork->mac_address, WLAN_REASON_DEAUTH_LEAVING, param->deauth_timeout_ms/100, 100);
 		                                                                                                     ^

CHECK: line length of 112 exceeds 100 columns
#5447: FILE: ./core/rtw_mlme_ext.c:5447:
+	if (((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) || ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {

CHECK: spaces preferred around that '&' (ctx:VxV)
#5447: FILE: ./core/rtw_mlme_ext.c:5447:
+	if (((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) || ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {
 	                      ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#5447: FILE: ./core/rtw_mlme_ext.c:5447:
+	if (((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) || ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {
 	                                                                          ^

CHECK: Alignment should match open parenthesis
#5461: FILE: ./core/rtw_mlme_ext.c:5461:
+static int rtw_scan_ch_decision(struct adapter *padapter, struct rtw_ieee80211_channel *out,
+	u32 out_num, struct rtw_ieee80211_channel *in, u32 in_num)

CHECK: spaces preferred around that '*' (ctx:VxV)
#5468: FILE: ./core/rtw_mlme_ext.c:5468:
+	memset(out, 0, sizeof(struct rtw_ieee80211_channel)*out_num);
 	                                                   ^

CHECK: Blank lines aren't necessary after an open brace '{'
#5473: FILE: ./core/rtw_mlme_ext.c:5473:
+	for (i = 0; i < in_num; i++) {
+

CHECK: Logical continuations should be on the previous line
#5476: FILE: ./core/rtw_mlme_ext.c:5476:
+		if (in[i].hw_value && !(in[i].flags & RTW_IEEE80211_CHAN_DISABLED)
+			&& set_idx >= 0

CHECK: Blank lines aren't necessary after an open brace '{'
#5499: FILE: ./core/rtw_mlme_ext.c:5499:
+		for (i = 0; i < pmlmeext->max_chan_nums; i++) {
+

CHECK: line length of 118 exceeds 100 columns
#5536: FILE: ./core/rtw_mlme_ext.c:5536:
+				memcpy(pmlmeext->sitesurvey_res.ssid[i].ssid, pparm->ssid[i].ssid, IW_ESSID_MAX_SIZE);

CHECK: line length of 106 exceeds 100 columns
#5537: FILE: ./core/rtw_mlme_ext.c:5537:
+				pmlmeext->sitesurvey_res.ssid[i].ssid_length = pparm->ssid[i].ssid_length;

CHECK: line length of 112 exceeds 100 columns
#5565: FILE: ./core/rtw_mlme_ext.c:5565:
+	if ((pmlmeext->sitesurvey_res.state == SCAN_START) || (pmlmeext->sitesurvey_res.state == SCAN_TXNULL)) {

CHECK: Unnecessary parentheses around 'pmlmeext->sitesurvey_res.state == SCAN_START'
#5565: FILE: ./core/rtw_mlme_ext.c:5565:
+	if ((pmlmeext->sitesurvey_res.state == SCAN_START) || (pmlmeext->sitesurvey_res.state == SCAN_TXNULL)) {

CHECK: Unnecessary parentheses around 'pmlmeext->sitesurvey_res.state == SCAN_TXNULL'
#5565: FILE: ./core/rtw_mlme_ext.c:5565:
+	if ((pmlmeext->sitesurvey_res.state == SCAN_START) || (pmlmeext->sitesurvey_res.state == SCAN_TXNULL)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#5590: FILE: ./core/rtw_mlme_ext.c:5590:
+
+}

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5596: FILE: ./core/rtw_mlme_ext.c:5596:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5610: FILE: ./core/rtw_mlme_ext.c:5610:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <SetHwReg8723BS>
#5639: FILE: ./core/rtw_mlme_ext.c:5639:
+	SetHwReg8723BS(padapter, HW_VAR_ON_RCR_AM, null_addr);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5650: FILE: ./core/rtw_mlme_ext.c:5650:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5698: FILE: ./core/rtw_mlme_ext.c:5698:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around 'pmlmeinfo->HT_enable'
#5705: FILE: ./core/rtw_mlme_ext.c:5705:
+	if (((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && (pmlmeinfo->HT_enable)) ||
+		((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {

CHECK: Alignment should match open parenthesis
#5706: FILE: ./core/rtw_mlme_ext.c:5706:
+	if (((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && (pmlmeinfo->HT_enable)) ||
+		((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {

CHECK: spaces preferred around that '&' (ctx:VxV)
#5706: FILE: ./core/rtw_mlme_ext.c:5706:
+		((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)) {
 		                  ^

CHECK: Please don't use multiple blank lines
#5719: FILE: ./core/rtw_mlme_ext.c:5719:
+
+

CHECK: Unnecessary parentheses around padapter->cmdpriv
#5723: FILE: ./core/rtw_mlme_ext.c:5723:
+	struct cmd_priv *pcmdpriv = &(padapter->cmdpriv);

CHECK: Avoid CamelCase: <ptxBeacon_parm>
#5743: FILE: ./core/rtw_mlme_ext.c:5743:
+	struct Tx_Beacon_param	*ptxBeacon_parm;

CHECK: Unnecessary parentheses around padapter->cmdpriv
#5744: FILE: ./core/rtw_mlme_ext.c:5744:
+	struct cmd_priv *pcmdpriv = &(padapter->cmdpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#5746: FILE: ./core/rtw_mlme_ext.c:5746:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around ptxBeacon_parm->network
#5763: FILE: ./core/rtw_mlme_ext.c:5763:
+	memcpy(&(ptxBeacon_parm->network), &(pmlmeinfo->network), sizeof(struct wlan_bssid_ex));

CHECK: Unnecessary parentheses around pmlmeinfo->network
#5763: FILE: ./core/rtw_mlme_ext.c:5763:
+	memcpy(&(ptxBeacon_parm->network), &(pmlmeinfo->network), sizeof(struct wlan_bssid_ex));

CHECK: spaces preferred around that '+' (ctx:VxV)
#5765: FILE: ./core/rtw_mlme_ext.c:5765:
+	len_diff = update_hidden_ssid(ptxBeacon_parm->network.ies+_BEACON_IE_OFFSET_,
 	                                                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#5766: FILE: ./core/rtw_mlme_ext.c:5766:
+				      ptxBeacon_parm->network.ie_length-_BEACON_IE_OFFSET_,
 				                                       ^

CHECK: Unnecessary parentheses around padapter->evtpriv
#5815: FILE: ./core/rtw_mlme_ext.c:5815:
+	struct evt_priv *pevt_priv = &(padapter->evtpriv);

CHECK: spaces preferred around that '&' (ctx:VxV)
#5821: FILE: ./core/rtw_mlme_ext.c:5821:
+	evt_sz = (u16)(*peventbuf&0xffff);
 	                         ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#5822: FILE: ./core/rtw_mlme_ext.c:5822:
+	evt_code = (u8)((*peventbuf>>16)&0xff);
 	                           ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#5822: FILE: ./core/rtw_mlme_ext.c:5822:
+	evt_code = (u8)((*peventbuf>>16)&0xff);
 	                                ^

CHECK: Unnecessary parentheses around 'wlanevents[evt_code].parmsize != 0'
#5829: FILE: ./core/rtw_mlme_ext.c:5829:
+	if ((wlanevents[evt_code].parmsize != 0) &&
+			(wlanevents[evt_code].parmsize != evt_sz))

CHECK: Unnecessary parentheses around 'wlanevents[evt_code].parmsize != evt_sz'
#5829: FILE: ./core/rtw_mlme_ext.c:5829:
+	if ((wlanevents[evt_code].parmsize != 0) &&
+			(wlanevents[evt_code].parmsize != evt_sz))

CHECK: Alignment should match open parenthesis
#5830: FILE: ./core/rtw_mlme_ext.c:5830:
+	if ((wlanevents[evt_code].parmsize != 0) &&
+			(wlanevents[evt_code].parmsize != evt_sz))

CHECK: Please don't use multiple blank lines
#5844: FILE: ./core/rtw_mlme_ext.c:5844:
+
+

CHECK: Please don't use multiple blank lines
#5847: FILE: ./core/rtw_mlme_ext.c:5847:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#5850: FILE: ./core/rtw_mlme_ext.c:5850:
+
+}

CHECK: spaces preferred around that '&' (ctx:VxV)
#5873: FILE: ./core/rtw_mlme_ext.c:5873:
+	if ((pstapriv->tim_bitmap&BIT(0)) && (psta_bmc->sleepq_len > 0)) {
 	                         ^

CHECK: Unnecessary parentheses around 'psta_bmc->sleepq_len > 0'
#5873: FILE: ./core/rtw_mlme_ext.c:5873:
+	if ((pstapriv->tim_bitmap&BIT(0)) && (psta_bmc->sleepq_len > 0)) {

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#5874: FILE: ./core/rtw_mlme_ext.c:5874:
+		msleep(10);/*  10ms, ATIM(HIQ) Windows */

CHECK: Avoid CamelCase: <setChannelPlan_param>
#5964: FILE: ./core/rtw_mlme_ext.c:5964:
+	struct SetChannelPlan_param *setChannelPlan_param;

CHECK: line length of 120 exceeds 100 columns
#5972: FILE: ./core/rtw_mlme_ext.c:5972:
+	pmlmeext->max_chan_nums = init_channel_set(padapter, setChannelPlan_param->channel_plan, pmlmeext->channel_set);

CHECK: line length of 109 exceeds 100 columns
#5973: FILE: ./core/rtw_mlme_ext.c:5973:
+	init_channel_list(padapter, pmlmeext->channel_set, pmlmeext->max_chan_nums, &pmlmeext->channel_list);

CHECK: line length of 104 exceeds 100 columns
#5991: FILE: ./core/rtw_mlme_ext.c:5991:
+/*  TDLS_CS_OFF		: go back to the channel linked with AP, terminating channel switch procedure */

CHECK: line length of 114 exceeds 100 columns
#5995: FILE: ./core/rtw_mlme_ext.c:5995:
+/*  TDLS_BASE_CH		: go back tp the channel linked with AP when set base channel as target channel */

CHECK: Please don't use multiple blank lines
#6009: FILE: ./core/rtw_mlme_ext.c:6009:
+
+

CHECK: Comparison to NULL could be written "!pbuf"
#6010: FILE: ./core/rtw_mlme_ext.c:6010:
+	if (pbuf == NULL)

total: 0 errors, 85 warnings, 831 checks, 6018 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_mlme_ext.c has style problems, please review.
---------------------
./core/rtw_mlme_ext.o
---------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_mlme_ext.o has style problems, please review.
-----------------
./core/rtw_mlme.o
-----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_mlme.o has style problems, please review.
--------------------
./core/rtw_pwrctrl.c
--------------------
CHECK: Please don't use multiple blank lines
#11: FILE: ./core/rtw_pwrctrl.c:11:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#34: FILE: ./core/rtw_pwrctrl.c:34:
+
+}

CHECK: Please don't use multiple blank lines
#40: FILE: ./core/rtw_pwrctrl.c:40:
+
+

CHECK: Avoid CamelCase: <hal_btcoex_IpsNotify>
#41: FILE: ./core/rtw_pwrctrl.c:41:
+	hal_btcoex_IpsNotify(padapter, pwrpriv->ips_mode_req);

CHECK: Unnecessary parentheses around 'pwrpriv->rf_pwrstate == rf_off'
#53: FILE: ./core/rtw_pwrctrl.c:53:
+	if ((pwrpriv->rf_pwrstate == rf_off) && (!pwrpriv->bips_processing)) {

CHECK: Unnecessary parentheses around '!pwrpriv->bips_processing'
#53: FILE: ./core/rtw_pwrctrl.c:53:
+	if ((pwrpriv->rf_pwrstate == rf_off) && (!pwrpriv->bips_processing)) {

CHECK: Unnecessary parentheses around adapter->mlmepriv
#88: FILE: ./core/rtw_pwrctrl.c:88:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: spaces preferred around that '|' (ctx:VxV)
#99: FILE: ./core/rtw_pwrctrl.c:99:
+	if (check_fwstate(pmlmepriv, WIFI_ASOC_STATE|WIFI_SITE_MONITOR)
 	                                            ^

CHECK: Logical continuations should be on the previous line
#100: FILE: ./core/rtw_pwrctrl.c:100:
+	if (check_fwstate(pmlmepriv, WIFI_ASOC_STATE|WIFI_SITE_MONITOR)
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)

CHECK: spaces preferred around that '|' (ctx:VxV)
#100: FILE: ./core/rtw_pwrctrl.c:100:
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
 		                                              ^

CHECK: Logical continuations should be on the previous line
#101: FILE: ./core/rtw_pwrctrl.c:101:
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
+		|| check_fwstate(pmlmepriv, WIFI_AP_STATE)

CHECK: Logical continuations should be on the previous line
#102: FILE: ./core/rtw_pwrctrl.c:102:
+		|| check_fwstate(pmlmepriv, WIFI_AP_STATE)
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)

CHECK: spaces preferred around that '|' (ctx:VxV)
#102: FILE: ./core/rtw_pwrctrl.c:102:
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)
 		                                                   ^

CHECK: Unnecessary parentheses around buddy->mlmepriv
#108: FILE: ./core/rtw_pwrctrl.c:108:
+		struct mlme_priv *b_pmlmepriv = &(buddy->mlmepriv);

CHECK: spaces preferred around that '|' (ctx:VxV)
#110: FILE: ./core/rtw_pwrctrl.c:110:
+		if (check_fwstate(b_pmlmepriv, WIFI_ASOC_STATE|WIFI_SITE_MONITOR)
 		                                              ^

CHECK: Logical continuations should be on the previous line
#111: FILE: ./core/rtw_pwrctrl.c:111:
+		if (check_fwstate(b_pmlmepriv, WIFI_ASOC_STATE|WIFI_SITE_MONITOR)
+			|| check_fwstate(b_pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)

CHECK: spaces preferred around that '|' (ctx:VxV)
#111: FILE: ./core/rtw_pwrctrl.c:111:
+			|| check_fwstate(b_pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
 			                                                ^

CHECK: Logical continuations should be on the previous line
#112: FILE: ./core/rtw_pwrctrl.c:112:
+			|| check_fwstate(b_pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
+			|| check_fwstate(b_pmlmepriv, WIFI_AP_STATE)

CHECK: Logical continuations should be on the previous line
#113: FILE: ./core/rtw_pwrctrl.c:113:
+			|| check_fwstate(b_pmlmepriv, WIFI_AP_STATE)
+			|| check_fwstate(b_pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)

CHECK: spaces preferred around that '|' (ctx:VxV)
#113: FILE: ./core/rtw_pwrctrl.c:113:
+			|| check_fwstate(b_pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)
 			                                                     ^

CHECK: Alignment should match open parenthesis
#119: FILE: ./core/rtw_pwrctrl.c:119:
+	if (pxmit_priv->free_xmitbuf_cnt != NR_XMITBUFF ||
+		pxmit_priv->free_xmit_extbuf_cnt != NR_XMIT_EXTBUFF) {

CHECK: Please don't use multiple blank lines
#135: FILE: ./core/rtw_pwrctrl.c:135:
+
+

CHECK: spaces preferred around that '%' (ctx:VxV)
#166: FILE: ./core/rtw_pwrctrl.c:166:
+	if ((pwrpriv->rf_pwrstate == rf_on) && ((pwrpriv->pwr_state_check_cnts%4) == 0)) {
 	                                                                      ^

CHECK: Unnecessary parentheses around 'pwrpriv->rf_pwrstate == rf_on'
#166: FILE: ./core/rtw_pwrctrl.c:166:
+	if ((pwrpriv->rf_pwrstate == rf_on) && ((pwrpriv->pwr_state_check_cnts%4) == 0)) {

CHECK: Avoid CamelCase: <bLeaveLPS>
#189: FILE: ./core/rtw_pwrctrl.c:189:
+	u8 bLeaveLPS = false;

CHECK: Please don't use multiple blank lines
#192: FILE: ./core/rtw_pwrctrl.c:192:
+
+

CHECK: Avoid CamelCase: <bLeisurePs>
#202: FILE: ./core/rtw_pwrctrl.c:202:
+				if (adapter_to_pwrctl(padapter)->bLeisurePs

CHECK: Logical continuations should be on the previous line
#203: FILE: ./core/rtw_pwrctrl.c:203:
+				if (adapter_to_pwrctl(padapter)->bLeisurePs
+				    && (adapter_to_pwrctl(padapter)->pwr_mode != PS_MODE_ACTIVE)

CHECK: Logical continuations should be on the previous line
#204: FILE: ./core/rtw_pwrctrl.c:204:
+				    && (adapter_to_pwrctl(padapter)->pwr_mode != PS_MODE_ACTIVE)
+				    && !(hal_btcoex_IsBtControlLps(padapter))) {

CHECK: Logical continuations should be on the previous line
#216: FILE: ./core/rtw_pwrctrl.c:216:
+			if (adapter_to_pwrctl(padapter)->bLeisurePs
+			    && (adapter_to_pwrctl(padapter)->pwr_mode != PS_MODE_ACTIVE)

CHECK: Logical continuations should be on the previous line
#217: FILE: ./core/rtw_pwrctrl.c:217:
+			    && (adapter_to_pwrctl(padapter)->pwr_mode != PS_MODE_ACTIVE)
+			    && !(hal_btcoex_IsBtControlLps(padapter)))

CHECK: spaces required around that '?' (ctx:VxV)
#224: FILE: ./core/rtw_pwrctrl.c:224:
+		rtw_lps_ctrl_wk_cmd(padapter, LPS_CTRL_LEAVE, tx?0:1);
 		                                                ^

CHECK: spaces required around that ':' (ctx:VxV)
#224: FILE: ./core/rtw_pwrctrl.c:224:
+		rtw_lps_ctrl_wk_cmd(padapter, LPS_CTRL_LEAVE, tx?0:1);
 		                                                  ^

CHECK: Blank lines aren't necessary before a close brace '}'
#249: FILE: ./core/rtw_pwrctrl.c:249:
+
+	}

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved'
#251: FILE: ./core/rtw_pwrctrl.c:251:
+	if ((padapter->bSurpriseRemoved) || !(padapter->hw_init_completed)) {

CHECK: Unnecessary parentheses around 'pwrpriv->cpwm < PS_STATE_S2'
#264: FILE: ./core/rtw_pwrctrl.c:264:
+	if ((pwrpriv->cpwm < PS_STATE_S2) && (pslv >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pslv >= PS_STATE_S2'
#264: FILE: ./core/rtw_pwrctrl.c:264:
+	if ((pwrpriv->cpwm < PS_STATE_S2) && (pslv >= PS_STATE_S2))

CHECK: braces {} should be used on all arms of this statement
#280: FILE: ./core/rtw_pwrctrl.c:280:
+	if (rpwm & PS_ACK) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#301: FILE: ./core/rtw_pwrctrl.c:301:
+	} else

CHECK: Unnecessary parentheses around padapter->mlmepriv
#309: FILE: ./core/rtw_pwrctrl.c:309:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Logical continuations should be on the previous line
#322: FILE: ./core/rtw_pwrctrl.c:322:
+	if (check_fwstate(pmlmepriv, WIFI_SITE_MONITOR)
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)

CHECK: spaces preferred around that '|' (ctx:VxV)
#322: FILE: ./core/rtw_pwrctrl.c:322:
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
 		                                              ^

CHECK: Logical continuations should be on the previous line
#323: FILE: ./core/rtw_pwrctrl.c:323:
+		|| check_fwstate(pmlmepriv, WIFI_UNDER_LINKING|WIFI_UNDER_WPS)
+		|| check_fwstate(pmlmepriv, WIFI_AP_STATE)

CHECK: Logical continuations should be on the previous line
#324: FILE: ./core/rtw_pwrctrl.c:324:
+		|| check_fwstate(pmlmepriv, WIFI_AP_STATE)
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)

CHECK: spaces preferred around that '|' (ctx:VxV)
#324: FILE: ./core/rtw_pwrctrl.c:324:
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)
 		                                                   ^

CHECK: Logical continuations should be on the previous line
#325: FILE: ./core/rtw_pwrctrl.c:325:
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE|WIFI_ADHOC_STATE)
+		|| rtw_is_scan_deny(padapter)

CHECK: line length of 105 exceeds 100 columns
#339: FILE: ./core/rtw_pwrctrl.c:339:
+void rtw_set_ps_mode(struct adapter *padapter, u8 ps_mode, u8 smart_ps, u8 bcn_ant_mode, const char *msg)

CHECK: Please don't use multiple blank lines
#350: FILE: ./core/rtw_pwrctrl.c:350:
+
+

CHECK: Logical continuations should be on the previous line
#356: FILE: ./core/rtw_pwrctrl.c:356:
+		if (!(hal_btcoex_IsBtControlLps(padapter))
+				|| (hal_btcoex_IsBtControlLps(padapter)

CHECK: Logical continuations should be on the previous line
#357: FILE: ./core/rtw_pwrctrl.c:357:
+				|| (hal_btcoex_IsBtControlLps(padapter)
+					&& !(hal_btcoex_IsLpsOn(padapter)))) {

CHECK: Avoid CamelCase: <hal_btcoex_IsLpsOn>
#357: FILE: ./core/rtw_pwrctrl.c:357:
+					&& !(hal_btcoex_IsLpsOn(padapter)))) {

CHECK: Avoid CamelCase: <hal_btcoex_LpsNotify>
#364: FILE: ./core/rtw_pwrctrl.c:364:
+			hal_btcoex_LpsNotify(padapter, ps_mode);

CHECK: line length of 102 exceeds 100 columns
#367: FILE: ./core/rtw_pwrctrl.c:367:
+		if ((PS_RDY_CHECK(padapter) && check_fwstate(&padapter->mlmepriv, WIFI_ASOC_STATE)) ||

CHECK: Avoid CamelCase: <hal_btcoex_IsBtDisabled>
#384: FILE: ./core/rtw_pwrctrl.c:384:
+			if (!(hal_btcoex_IsBtDisabled(padapter)) &&

CHECK: Avoid CamelCase: <bAwake>
#409: FILE: ./core/rtw_pwrctrl.c:409:
+	u8 bAwake = false;

CHECK: Please don't use multiple blank lines
#412: FILE: ./core/rtw_pwrctrl.c:412:
+
+

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#428: FILE: ./core/rtw_pwrctrl.c:428:
+		msleep(1);

WARNING: please, no space before tabs
#435: FILE: ./core/rtw_pwrctrl.c:435:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#436: FILE: ./core/rtw_pwrctrl.c:436:
+/* ^I^IEnter the leisure power save mode. */$

CHECK: Unnecessary parentheses around dvobj->padapters->mlmepriv
#449: FILE: ./core/rtw_pwrctrl.c:449:
+	if (check_fwstate(&(dvobj->padapters->mlmepriv), WIFI_ASOC_STATE))

CHECK: braces {} should be used on all arms of this statement
#459: FILE: ./core/rtw_pwrctrl.c:459:
+		if (pwrpriv->LpsIdleCount >= 2) { /*   4 Sec */
[...]
+		} else
[...]

CHECK: line length of 120 exceeds 100 columns
#463: FILE: ./core/rtw_pwrctrl.c:463:
+				rtw_set_ps_mode(padapter, pwrpriv->power_mgnt, padapter->registrypriv.smart_ps, 0, buf);

CHECK: Unbalanced braces around else statement
#465: FILE: ./core/rtw_pwrctrl.c:465:
+		} else

WARNING: please, no space before tabs
#471: FILE: ./core/rtw_pwrctrl.c:471:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#472: FILE: ./core/rtw_pwrctrl.c:472:
+/* ^I^ILeave the leisure power save mode. */$

CHECK: Avoid CamelCase: <LeaveAllPowerSaveModeDirect>
#498: FILE: ./core/rtw_pwrctrl.c:498:
+void LeaveAllPowerSaveModeDirect(struct adapter *Adapter)

CHECK: Unnecessary parentheses around Adapter->mlmepriv
#501: FILE: ./core/rtw_pwrctrl.c:501:
+	struct mlme_priv *pmlmepriv = &(Adapter->mlmepriv);

CHECK: Avoid CamelCase: <LeaveAllPowerSaveMode>
#529: FILE: ./core/rtw_pwrctrl.c:529:
+void LeaveAllPowerSaveMode(struct adapter *Adapter)

CHECK: Unnecessary parentheses around dvobj->padapters->mlmepriv
#541: FILE: ./core/rtw_pwrctrl.c:541:
+	if (check_fwstate(&(dvobj->padapters->mlmepriv), WIFI_ASOC_STATE))

CHECK: Avoid CamelCase: <bReady>
#560: FILE: ./core/rtw_pwrctrl.c:560:
+	u8 bReady;

CHECK: Unnecessary parentheses around 'pwrpriv->pwr_mode == PS_MODE_ACTIVE'
#572: FILE: ./core/rtw_pwrctrl.c:572:
+		if (padapter->bSurpriseRemoved ||
+		    !(padapter->hw_init_completed) ||
+		    (pwrpriv->pwr_mode == PS_MODE_ACTIVE))

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#585: FILE: ./core/rtw_pwrctrl.c:585:
+		msleep(1);

CHECK: Blank lines aren't necessary before a close brace '}'
#621: FILE: ./core/rtw_pwrctrl.c:621:
+
+}

CHECK: Please don't use multiple blank lines
#640: FILE: ./core/rtw_pwrctrl.c:640:
+
+

CHECK: Unnecessary parentheses around 'pwrpriv->rpwm == pwrpriv->cpwm'
#646: FILE: ./core/rtw_pwrctrl.c:646:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pwrpriv->cpwm >= PS_STATE_S2'
#646: FILE: ./core/rtw_pwrctrl.c:646:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pwrpriv->rpwm == pwrpriv->cpwm'
#662: FILE: ./core/rtw_pwrctrl.c:662:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pwrpriv->cpwm >= PS_STATE_S2'
#662: FILE: ./core/rtw_pwrctrl.c:662:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pwrpriv->rpwm == pwrpriv->cpwm'
#680: FILE: ./core/rtw_pwrctrl.c:680:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Unnecessary parentheses around 'pwrpriv->cpwm >= PS_STATE_S2'
#680: FILE: ./core/rtw_pwrctrl.c:680:
+	if ((pwrpriv->rpwm == pwrpriv->cpwm) || (pwrpriv->cpwm >= PS_STATE_S2))

CHECK: Please don't use multiple blank lines
#696: FILE: ./core/rtw_pwrctrl.c:696:
+
+

CHECK: Unnecessary parentheses around 'pwrctrl->pwr_mode != PS_MODE_ACTIVE'
#774: FILE: ./core/rtw_pwrctrl.c:774:
+	if ((pwrctrl->pwr_mode != PS_MODE_ACTIVE) && pwrctrl->fw_current_in_ps_mode) {

CHECK: Unnecessary parentheses around 'pslv >= PS_STATE_S2'
#776: FILE: ./core/rtw_pwrctrl.c:776:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Unnecessary parentheses around 'pwrctrl->alives == 0'
#776: FILE: ./core/rtw_pwrctrl.c:776:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Blank lines aren't necessary before a close brace '}'
#779: FILE: ./core/rtw_pwrctrl.c:779:
+
+	}

CHECK: Unnecessary parentheses around 'pwrctrl->pwr_mode != PS_MODE_ACTIVE'
#901: FILE: ./core/rtw_pwrctrl.c:901:
+	if ((pwrctrl->pwr_mode != PS_MODE_ACTIVE) && pwrctrl->fw_current_in_ps_mode) {

CHECK: Unnecessary parentheses around 'pslv >= PS_STATE_S2'
#903: FILE: ./core/rtw_pwrctrl.c:903:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Unnecessary parentheses around 'pwrctrl->alives == 0'
#903: FILE: ./core/rtw_pwrctrl.c:903:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Unnecessary parentheses around 'pwrctrl->pwr_mode != PS_MODE_ACTIVE'
#937: FILE: ./core/rtw_pwrctrl.c:937:
+	if ((pwrctrl->pwr_mode != PS_MODE_ACTIVE) && pwrctrl->fw_current_in_ps_mode) {

CHECK: Unnecessary parentheses around 'pslv >= PS_STATE_S2'
#939: FILE: ./core/rtw_pwrctrl.c:939:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Unnecessary parentheses around 'pwrctrl->alives == 0'
#939: FILE: ./core/rtw_pwrctrl.c:939:
+			if ((pslv >= PS_STATE_S2) || (pwrctrl->alives == 0))

CHECK: Avoid CamelCase: <bInternalAutoSuspend>
#962: FILE: ./core/rtw_pwrctrl.c:962:
+	pwrctrlpriv->bInternalAutoSuspend = false;

CHECK: Please don't use multiple blank lines
#997: FILE: ./core/rtw_pwrctrl.c:997:
+
+

WARNING: Missing a blank line after declarations
#1005: FILE: ./core/rtw_pwrctrl.c:1005:
+	struct pwrctrl_priv *pwrpriv = adapter_to_pwrctl(padapter);
+	pwrpriv->ips_deny_time = jiffies + msecs_to_jiffies(ms);

WARNING: Block comments should align the * on each line
#1009: FILE: ./core/rtw_pwrctrl.c:1009:
+/*
+* rtw_pwr_wakeup - Wake the NIC up from: 1)IPS. 2)USB autosuspend

CHECK: Please don't use multiple blank lines
#1034: FILE: ./core/rtw_pwrctrl.c:1034:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1083: FILE: ./core/rtw_pwrctrl.c:1083:
+
+}

CHECK: braces {} should be used on all arms of this statement
#1090: FILE: ./core/rtw_pwrctrl.c:1090:
+	if (mode < PS_MODE_NUM) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#1101: FILE: ./core/rtw_pwrctrl.c:1101:
+	} else

CHECK: braces {} should be used on all arms of this statement
#1111: FILE: ./core/rtw_pwrctrl.c:1111:
+	if (mode == IPS_NORMAL || mode == IPS_LEVEL_2) {
[...]
+	} else if (mode == IPS_NONE) {
[...]
+	} else
[...]

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved == 0'
#1116: FILE: ./core/rtw_pwrctrl.c:1116:
+		if ((padapter->bSurpriseRemoved == 0) && (rtw_pwr_wakeup(padapter) == _FAIL))

CHECK: Unbalanced braces around else statement
#1118: FILE: ./core/rtw_pwrctrl.c:1118:
+	} else

total: 0 errors, 8 warnings, 94 checks, 1162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_pwrctrl.c has style problems, please review.
--------------------
./core/rtw_pwrctrl.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_pwrctrl.o has style problems, please review.
-----------------
./core/rtw_recv.c
-----------------
CHECK: line length of 110 exceeds 100 columns
#50: FILE: ./core/rtw_recv.c:50:
+	precvpriv->pallocated_frame_buf = vzalloc(NR_RECVFRAME * sizeof(union recv_frame) + RXFRAME_ALIGN_SZ);

CHECK: line length of 122 exceeds 100 columns
#57: FILE: ./core/rtw_recv.c:57:
+	precvpriv->precv_frame_buf = (u8 *)N_BYTE_ALIGMENT((SIZE_PTR)(precvpriv->pallocated_frame_buf), RXFRAME_ALIGN_SZ);

CHECK: No space is necessary after a cast
#61: FILE: ./core/rtw_recv.c:61:
+	precvframe = (union recv_frame *) precvpriv->precv_frame_buf;

CHECK: Please don't use multiple blank lines
#63: FILE: ./core/rtw_recv.c:63:
+
+

CHECK: Unnecessary parentheses around precvframe->u.list
#65: FILE: ./core/rtw_recv.c:65:
+		INIT_LIST_HEAD(&(precvframe->u.list));

CHECK: Unnecessary parentheses around precvframe->u.list
#67: FILE: ./core/rtw_recv.c:67:
+		list_add_tail(&(precvframe->u.list), &(precvpriv->free_recv_queue.queue));

CHECK: Unnecessary parentheses around precvpriv->free_recv_queue.queue
#67: FILE: ./core/rtw_recv.c:67:
+		list_add_tail(&(precvframe->u.list), &(precvpriv->free_recv_queue.queue));

CHECK: Blank lines aren't necessary before a close brace '}'
#76: FILE: ./core/rtw_recv.c:76:
+
+	}

CHECK: Blank lines aren't necessary after an open brace '{'
#106: FILE: ./core/rtw_recv.c:106:
+{
+

CHECK: braces {} should be used on all arms of this statement
#112: FILE: ./core/rtw_recv.c:112:
+	if (list_empty(&pfree_recv_queue->queue))
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#114: FILE: ./core/rtw_recv.c:114:
+	else {

CHECK: Please don't use multiple blank lines
#152: FILE: ./core/rtw_recv.c:152:
+
+

CHECK: Unnecessary parentheses around precvframe->u.hdr.list
#155: FILE: ./core/rtw_recv.c:155:
+	list_del_init(&(precvframe->u.hdr.list));

CHECK: Unnecessary parentheses around precvframe->u.hdr.list
#159: FILE: ./core/rtw_recv.c:159:
+	list_add_tail(&(precvframe->u.hdr.list), get_list_head(pfree_recv_queue));

CHECK: Please don't use multiple blank lines
#169: FILE: ./core/rtw_recv.c:169:
+
+

CHECK: Please don't use multiple blank lines
#171: FILE: ./core/rtw_recv.c:171:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#174: FILE: ./core/rtw_recv.c:174:
+{
+

CHECK: Unnecessary parentheses around precvframe->u.hdr.list
#179: FILE: ./core/rtw_recv.c:179:
+	list_del_init(&(precvframe->u.hdr.list));

CHECK: Please don't use multiple blank lines
#181: FILE: ./core/rtw_recv.c:181:
+
+

CHECK: Unnecessary parentheses around precvframe->u.hdr.list
#182: FILE: ./core/rtw_recv.c:182:
+	list_add_tail(&(precvframe->u.hdr.list), get_list_head(queue));

CHECK: Please don't use multiple blank lines
#246: FILE: ./core/rtw_recv.c:246:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#269: FILE: ./core/rtw_recv.c:269:
+
+}

CHECK: braces {} should be used on all arms of this statement
#278: FILE: ./core/rtw_recv.c:278:
+	if (list_empty(&queue->queue))
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#280: FILE: ./core/rtw_recv.c:280:
+	else {

CHECK: Blank lines aren't necessary before a close brace '}'
#289: FILE: ./core/rtw_recv.c:289:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#295: FILE: ./core/rtw_recv.c:295:
+
+}

CHECK: Blank lines aren't necessary after an open brace '{'
#299: FILE: ./core/rtw_recv.c:299:
+{
+

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#312: FILE: ./core/rtw_recv.c:312:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 109 exceeds 100 columns
#323: FILE: ./core/rtw_recv.c:323:
+				mickey = &psecuritypriv->dot118021XGrprxmickey[prxattrib->key_index].skey[0];

CHECK: Avoid CamelCase: <dot118021XGrprxmickey>
#323: FILE: ./core/rtw_recv.c:323:
+				mickey = &psecuritypriv->dot118021XGrprxmickey[prxattrib->key_index].skey[0];

CHECK: line length of 111 exceeds 100 columns
#325: FILE: ./core/rtw_recv.c:325:
+				/* psecuritypriv->dot118021XGrpKeyid, pmlmeinfo->key_index, rxdata_key_idx); */

CHECK: Using comparison to false is error prone
#327: FILE: ./core/rtw_recv.c:327:
+				if (psecuritypriv->binstallGrpkey == false) {

CHECK: line length of 148 exceeds 100 columns
#335: FILE: ./core/rtw_recv.c:335:
+			datalen = precvframe->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len-prxattrib->icv_len-8;/* icv_len included the mic code */

CHECK: spaces preferred around that '-' (ctx:VxV)
#335: FILE: ./core/rtw_recv.c:335:
+			datalen = precvframe->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len-prxattrib->icv_len-8;/* icv_len included the mic code */
 			                               ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#335: FILE: ./core/rtw_recv.c:335:
+			datalen = precvframe->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len-prxattrib->icv_len-8;/* icv_len included the mic code */
 			                                                 ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#335: FILE: ./core/rtw_recv.c:335:
+			datalen = precvframe->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len-prxattrib->icv_len-8;/* icv_len included the mic code */
 			                                                                   ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#335: FILE: ./core/rtw_recv.c:335:
+			datalen = precvframe->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len-prxattrib->icv_len-8;/* icv_len included the mic code */
 			                                                                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#337: FILE: ./core/rtw_recv.c:337:
+			payload = pframe+prxattrib->hdrlen+prxattrib->iv_len;
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#337: FILE: ./core/rtw_recv.c:337:
+			payload = pframe+prxattrib->hdrlen+prxattrib->iv_len;
 			                                  ^

CHECK: line length of 160 exceeds 100 columns
#339: FILE: ./core/rtw_recv.c:339:
+			rtw_seccalctkipmic(mickey, pframe, payload, datalen, &miccode[0], (unsigned char)prxattrib->priority); /* care the length of the data */

CHECK: spaces preferred around that '+' (ctx:VxV)
#341: FILE: ./core/rtw_recv.c:341:
+			pframemic = payload+datalen;
 			                   ^

CHECK: Please don't use multiple blank lines
#350: FILE: ./core/rtw_recv.c:350:
+
+

CHECK: Using comparison to true is error prone
#351: FILE: ./core/rtw_recv.c:351:
+			if (bmic_err == true) {

CHECK: line length of 116 exceeds 100 columns
#353: FILE: ./core/rtw_recv.c:353:
+				/*  cannot compare with psecuritypriv->dot118021XGrpKeyid also cause timing issue */

CHECK: line length of 136 exceeds 100 columns
#354: FILE: ./core/rtw_recv.c:354:
+				if ((is_multicast_ether_addr(prxattrib->ra) == true)  && (prxattrib->key_index != pmlmeinfo->key_index))

CHECK: Unnecessary parentheses around 'prxattrib->key_index != pmlmeinfo->key_index'
#354: FILE: ./core/rtw_recv.c:354:
+				if ((is_multicast_ether_addr(prxattrib->ra) == true)  && (prxattrib->key_index != pmlmeinfo->key_index))

CHECK: line length of 117 exceeds 100 columns
#358: FILE: ./core/rtw_recv.c:358:
+					rtw_handle_tkip_mic_err(adapter, (u8)is_multicast_ether_addr(prxattrib->ra));

CHECK: Blank lines aren't necessary before a close brace '}'
#372: FILE: ./core/rtw_recv.c:372:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#377: FILE: ./core/rtw_recv.c:377:
+
+}

CHECK: Blank lines aren't necessary after an open brace '{'
#382: FILE: ./core/rtw_recv.c:382:
+{
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#389: FILE: ./core/rtw_recv.c:389:
+		u8 *iv = precv_frame->u.hdr.rx_data+prxattrib->hdrlen;
 		                                   ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#391: FILE: ./core/rtw_recv.c:391:
+		prxattrib->key_index = (((iv[3])>>6)&0x3);
 		                                ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#391: FILE: ./core/rtw_recv.c:391:
+		prxattrib->key_index = (((iv[3])>>6)&0x3);
 		                                    ^

CHECK: line length of 112 exceeds 100 columns
#408: FILE: ./core/rtw_recv.c:408:
+	if ((prxattrib->encrypt > 0) && ((prxattrib->bdecrypted == 0) || (psecuritypriv->sw_decrypt == true))) {

CHECK: Unnecessary parentheses around 'prxattrib->encrypt > 0'
#408: FILE: ./core/rtw_recv.c:408:
+	if ((prxattrib->encrypt > 0) && ((prxattrib->bdecrypted == 0) || (psecuritypriv->sw_decrypt == true))) {

CHECK: Unnecessary parentheses around 'prxattrib->bdecrypted == 0'
#408: FILE: ./core/rtw_recv.c:408:
+	if ((prxattrib->encrypt > 0) && ((prxattrib->bdecrypted == 0) || (psecuritypriv->sw_decrypt == true))) {

CHECK: Unnecessary parentheses around 'psecuritypriv->sw_decrypt == true'
#408: FILE: ./core/rtw_recv.c:408:
+	if ((prxattrib->encrypt > 0) && ((prxattrib->bdecrypted == 0) || (psecuritypriv->sw_decrypt == true))) {

CHECK: Using comparison to true is error prone
#408: FILE: ./core/rtw_recv.c:408:
+	if ((prxattrib->encrypt > 0) && ((prxattrib->bdecrypted == 0) || (psecuritypriv->sw_decrypt == true))) {

CHECK: braces {} should be used on all arms of this statement
#432: FILE: ./core/rtw_recv.c:432:
+	if (res == _FAIL) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#435: FILE: ./core/rtw_recv.c:435:
+	} else

CHECK: braces {} should be used on all arms of this statement
#468: FILE: ./core/rtw_recv.c:468:
+	if (auth_alg == 2) {
[...]
+	} else
[...]

CHECK: Unnecessary parentheses around 'psta->ieee8021x_blocked'
#469: FILE: ./core/rtw_recv.c:469:
+		if ((psta) && (psta->ieee8021x_blocked)) {

CHECK: braces {} should be used on all arms of this statement
#482: FILE: ./core/rtw_recv.c:482:
+			if (ether_type == eapol_type)
[...]
+			else {
[...]

CHECK: Unbalanced braces around else statement
#484: FILE: ./core/rtw_recv.c:484:
+			else {

CHECK: Unbalanced braces around else statement
#503: FILE: ./core/rtw_recv.c:503:
+	} else

CHECK: line length of 106 exceeds 100 columns
#509: FILE: ./core/rtw_recv.c:509:
+static signed int recv_decache(union recv_frame *precv_frame, u8 bretry, struct stainfo_rxcache *prxcache)

CHECK: spaces preferred around that '&' (ctx:VxV)
#513: FILE: ./core/rtw_recv.c:513:
+	u16 seq_ctrl = ((precv_frame->u.hdr.attrib.seq_num&0xffff) << 4) |
 	                                                  ^

CHECK: Blank lines aren't necessary before a close brace '}'
#528: FILE: ./core/rtw_recv.c:528:
+
+}

CHECK: Avoid CamelCase: <GetPwrMgt>
#540: FILE: ./core/rtw_recv.c:540:
+	pwrbit = GetPwrMgt(ptr);

CHECK: Blank lines aren't necessary before a close brace '}'
#550: FILE: ./core/rtw_recv.c:550:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#560: FILE: ./core/rtw_recv.c:560:
+
+	}

CHECK: spaces preferred around that '&' (ctx:VxV)
#577: FILE: ./core/rtw_recv.c:577:
+	if (!(psta->qos_info&0xf))
 	                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#580: FILE: ./core/rtw_recv.c:580:
+	if (psta->state&WIFI_SLEEP_STATE) {
 	               ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#586: FILE: ./core/rtw_recv.c:586:
+			wmmps_ac = psta->uapsd_bk&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#590: FILE: ./core/rtw_recv.c:590:
+			wmmps_ac = psta->uapsd_vi&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#594: FILE: ./core/rtw_recv.c:594:
+			wmmps_ac = psta->uapsd_vo&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#599: FILE: ./core/rtw_recv.c:599:
+			wmmps_ac = psta->uapsd_be&BIT(1);
 			                         ^

CHECK: line length of 112 exceeds 100 columns
#608: FILE: ./core/rtw_recv.c:608:
+				/* issue one qos null frame with More data bit = 0 and the EOSP bit set (= 1) */

CHECK: line length of 105 exceeds 100 columns
#609: FILE: ./core/rtw_recv.c:609:
+				issue_qos_nulldata(padapter, psta->hwaddr, (u16)pattrib->priority, 0, 0);

CHECK: line length of 101 exceeds 100 columns
#614: FILE: ./core/rtw_recv.c:614:
+static void count_rx_stats(struct adapter *padapter, union recv_frame *prframe, struct sta_info *sta)

CHECK: Alignment should match open parenthesis
#646: FILE: ./core/rtw_recv.c:646:
+static signed int sta2sta_data_frame(struct adapter *adapter, union recv_frame *precv_frame,
+			struct sta_info **psta)

CHECK: braces {} should be used on all arms of this statement
#658: FILE: ./core/rtw_recv.c:658:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true) ||
[...]
+	} else if (check_fwstate(pmlmepriv, WIFI_STATION_STATE) == true) {
[...]
+	} else if (check_fwstate(pmlmepriv, WIFI_AP_STATE) == true) {
[...]
+	} else if (check_fwstate(pmlmepriv, WIFI_MP_STATE) == true) {
[...]
+	} else
[...]

CHECK: Alignment should match open parenthesis
#659: FILE: ./core/rtw_recv.c:659:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true) ||
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true)) {

CHECK: Blank lines aren't necessary after an open brace '{'
#660: FILE: ./core/rtw_recv.c:660:
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true)) {
+

CHECK: Unnecessary parentheses around '!bmcast'
#667: FILE: ./core/rtw_recv.c:667:
+		if ((memcmp(myhwaddr, pattrib->dst, ETH_ALEN))	&& (!bmcast)) {

CHECK: line length of 102 exceeds 100 columns
#682: FILE: ./core/rtw_recv.c:682:
+		/*  For Station mode, sa and bssid should always be BSSID, and DA is my mac-address */

CHECK: line length of 105 exceeds 100 columns
#697: FILE: ./core/rtw_recv.c:697:
+			/*  For AP mode, if DA is non-MCAST, then it must be BSSID, and bssid == BSSID */

CHECK: Unbalanced braces around else statement
#714: FILE: ./core/rtw_recv.c:714:
+	} else

CHECK: Please don't use multiple blank lines
#717: FILE: ./core/rtw_recv.c:717:
+
+

CHECK: Alignment should match open parenthesis
#734: FILE: ./core/rtw_recv.c:734:
+static signed int ap2sta_data_frame(struct adapter *adapter, union recv_frame *precv_frame,
+		       struct sta_info **psta)

CHECK: Blank lines aren't necessary after an open brace '{'
#749: FILE: ./core/rtw_recv.c:749:
+		) {
+

CHECK: Unnecessary parentheses around '!bmcast'
#757: FILE: ./core/rtw_recv.c:757:
+		if ((memcmp(myhwaddr, pattrib->dst, ETH_ALEN)) && (!bmcast)) {

CHECK: Please don't use multiple blank lines
#762: FILE: ./core/rtw_recv.c:762:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#767: FILE: ./core/rtw_recv.c:767:
+		    (memcmp(pattrib->bssid, mybssid, ETH_ALEN))) {
+

CHECK: line length of 114 exceeds 100 columns
#769: FILE: ./core/rtw_recv.c:769:
+				issue_deauth(adapter, pattrib->bssid, WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA);

CHECK: Please don't use multiple blank lines
#803: FILE: ./core/rtw_recv.c:803:
+
+

CHECK: Please don't use multiple blank lines
#810: FILE: ./core/rtw_recv.c:810:
+
+

CHECK: Unnecessary parentheses around '!bmcast'
#816: FILE: ./core/rtw_recv.c:816:
+		if (!memcmp(myhwaddr, pattrib->dst, ETH_ALEN) && (!bmcast)) {

CHECK: Blank lines aren't necessary after an open brace '{'
#819: FILE: ./core/rtw_recv.c:819:
+			if (!*psta) {
+

CHECK: line length of 128 exceeds 100 columns
#823: FILE: ./core/rtw_recv.c:823:
+				if (jiffies_to_msecs(jiffies - send_issue_deauth_time) > 10000 || send_issue_deauth_time == 0) {

CHECK: line length of 122 exceeds 100 columns
#826: FILE: ./core/rtw_recv.c:826:
+					issue_deauth(adapter, pattrib->bssid, WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA);

CHECK: Alignment should match open parenthesis
#839: FILE: ./core/rtw_recv.c:839:
+static signed int sta2ap_data_frame(struct adapter *adapter, union recv_frame *precv_frame,
+		       struct sta_info **psta)

CHECK: line length of 104 exceeds 100 columns
#857: FILE: ./core/rtw_recv.c:857:
+			issue_deauth(adapter, pattrib->src, WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA);

CHECK: Avoid CamelCase: <GetAid>
#917: FILE: ./core/rtw_recv.c:917:
+		aid = GetAid(pframe);

CHECK: spaces preferred around that '&' (ctx:VxV)
#924: FILE: ./core/rtw_recv.c:924:
+			wmmps_ac = psta->uapsd_bk&BIT(0);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#928: FILE: ./core/rtw_recv.c:928:
+			wmmps_ac = psta->uapsd_vi&BIT(0);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#932: FILE: ./core/rtw_recv.c:932:
+			wmmps_ac = psta->uapsd_vo&BIT(0);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#937: FILE: ./core/rtw_recv.c:937:
+			wmmps_ac = psta->uapsd_be&BIT(0);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#949: FILE: ./core/rtw_recv.c:949:
+		if ((psta->state&WIFI_SLEEP_STATE) && (pstapriv->sta_dz_bitmap&BIT(psta->aid))) {
 		                ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#949: FILE: ./core/rtw_recv.c:949:
+		if ((psta->state&WIFI_SLEEP_STATE) && (pstapriv->sta_dz_bitmap&BIT(psta->aid))) {
 		                                                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#993: FILE: ./core/rtw_recv.c:993:
+				if (pstapriv->tim_bitmap&BIT(psta->aid)) {
 				                        ^

CHECK: line length of 131 exceeds 100 columns
#995: FILE: ./core/rtw_recv.c:995:
+						/* issue nulldata with More data bit = 0 to indicate we have no buffered packets */

CHECK: Blank lines aren't necessary before a close brace '}'
#1013: FILE: ./core/rtw_recv.c:1013:
+
+}

CHECK: Unnecessary parentheses around prframe->u.list
#1033: FILE: ./core/rtw_recv.c:1033:
+	list_del_init(&(prframe->u.list));

CHECK: Please don't use multiple blank lines
#1054: FILE: ./core/rtw_recv.c:1054:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1085: FILE: ./core/rtw_recv.c:1085:
+
+	}

CHECK: line length of 102 exceeds 100 columns
#1094: FILE: ./core/rtw_recv.c:1094:
+static union recv_frame *recvframe_chk_defrag(struct adapter *padapter, union recv_frame *precv_frame)

CHECK: braces {} should be used on all arms of this statement
#1118: FILE: ./core/rtw_recv.c:1118:
+	if (!psta) {
[...]
+	} else
[...]

CHECK: braces {} should be used on all arms of this statement
#1121: FILE: ./core/rtw_recv.c:1121:
+		if (type != WIFI_DATA_TYPE) {
[...]
+		} else
[...]

CHECK: Unbalanced braces around else statement
#1124: FILE: ./core/rtw_recv.c:1124:
+		} else

CHECK: Unbalanced braces around else statement
#1126: FILE: ./core/rtw_recv.c:1126:
+	} else

CHECK: Unnecessary parentheses around 'ismfrag == 0'
#1129: FILE: ./core/rtw_recv.c:1129:
+	if ((ismfrag == 0) && (fragnum == 0))

CHECK: Unnecessary parentheses around 'fragnum == 0'
#1129: FILE: ./core/rtw_recv.c:1129:
+	if ((ismfrag == 0) && (fragnum == 0))

CHECK: Please don't use multiple blank lines
#1142: FILE: ./core/rtw_recv.c:1142:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1158: FILE: ./core/rtw_recv.c:1158:
+
+	}

CHECK: Unnecessary parentheses around 'ismfrag == 0'
#1160: FILE: ./core/rtw_recv.c:1160:
+	if ((ismfrag == 0) && (fragnum != 0)) {

CHECK: Unnecessary parentheses around 'fragnum != 0'
#1160: FILE: ./core/rtw_recv.c:1160:
+	if ((ismfrag == 0) && (fragnum != 0)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#1179: FILE: ./core/rtw_recv.c:1179:
+
+	}

CHECK: Please don't use multiple blank lines
#1181: FILE: ./core/rtw_recv.c:1181:
+
+

CHECK: Unnecessary parentheses around 'prtnframe->u.hdr.attrib.privacy'
#1182: FILE: ./core/rtw_recv.c:1182:
+	if ((prtnframe) && (prtnframe->u.hdr.attrib.privacy)) {

CHECK: line length of 117 exceeds 100 columns
#1202: FILE: ./core/rtw_recv.c:1202:
+		struct sta_info *psta = rtw_get_stainfo(&padapter->stapriv, GetAddr2Ptr(precv_frame->u.hdr.rx_data));

CHECK: braces {} should be used on all arms of this statement
#1206: FILE: ./core/rtw_recv.c:1206:
+			if (GetFrameSubType(precv_frame->u.hdr.rx_data) == WIFI_BEACON)
[...]
+			else if (GetFrameSubType(precv_frame->u.hdr.rx_data) == WIFI_PROBEREQ)
[...]
+			else if (GetFrameSubType(precv_frame->u.hdr.rx_data) == WIFI_PROBERSP) {
[...]

CHECK: line length of 126 exceeds 100 columns
#1211: FILE: ./core/rtw_recv.c:1211:
+				if (!memcmp(padapter->eeprompriv.mac_addr, GetAddr1Ptr(precv_frame->u.hdr.rx_data), ETH_ALEN))

CHECK: line length of 106 exceeds 100 columns
#1213: FILE: ./core/rtw_recv.c:1213:
+				else if (is_broadcast_mac_addr(GetAddr1Ptr(precv_frame->u.hdr.rx_data)) ||

CHECK: line length of 104 exceeds 100 columns
#1214: FILE: ./core/rtw_recv.c:1214:
+					 is_multicast_mac_addr(GetAddr1Ptr(precv_frame->u.hdr.rx_data)))

CHECK: Blank lines aren't necessary before a close brace '}'
#1226: FILE: ./core/rtw_recv.c:1226:
+
+}

CHECK: Blank lines aren't necessary before a close brace '}'
#1282: FILE: ./core/rtw_recv.c:1282:
+
+	}

WARNING: braces {} are not necessary for any arm of this statement
#1284: FILE: ./core/rtw_recv.c:1284:
+	if (ret == _FAIL) {
[...]
+	} else if (ret == RTW_RX_HANDLED) {
[...]

CHECK: Please don't use multiple blank lines
#1290: FILE: ./core/rtw_recv.c:1290:
+
+

CHECK: Please don't use multiple blank lines
#1300: FILE: ./core/rtw_recv.c:1300:
+
+

CHECK: Avoid CamelCase: <GetPriority>
#1305: FILE: ./core/rtw_recv.c:1305:
+		pattrib->priority = GetPriority((ptr + 24));

CHECK: Avoid CamelCase: <GetAckpolicy>
#1306: FILE: ./core/rtw_recv.c:1306:
+		pattrib->ack_policy = GetAckpolicy((ptr + 24));

CHECK: Avoid CamelCase: <GetAMsdu>
#1307: FILE: ./core/rtw_recv.c:1307:
+		pattrib->amsdu = GetAMsdu((ptr + 24));

CHECK: Avoid CamelCase: <bIsAnyNonBEPkts>
#1311: FILE: ./core/rtw_recv.c:1311:
+			adapter->recvpriv.bIsAnyNonBEPkts = true;

CHECK: Please don't use multiple blank lines
#1318: FILE: ./core/rtw_recv.c:1318:
+
+

CHECK: line length of 108 exceeds 100 columns
#1331: FILE: ./core/rtw_recv.c:1331:
+		GET_ENCRY_ALGO(psecuritypriv, psta, pattrib->encrypt, is_multicast_ether_addr(pattrib->ra));

CHECK: multiple assignments should be avoided
#1336: FILE: ./core/rtw_recv.c:1336:
+		pattrib->iv_len = pattrib->icv_len = 0;

CHECK: Avoid CamelCase: <binstallBIPkey>
#1354: FILE: ./core/rtw_recv.c:1354:
+	    adapter->securitypriv.binstallBIPkey == true) {

CHECK: Using comparison to true is error prone
#1354: FILE: ./core/rtw_recv.c:1354:
+	    adapter->securitypriv.binstallBIPkey == true) {

CHECK: line length of 105 exceeds 100 columns
#1357: FILE: ./core/rtw_recv.c:1357:
+			(subtype == WIFI_DEAUTH || subtype == WIFI_DISASSOC || subtype == WIFI_ACTION)) {

CHECK: Alignment should match open parenthesis
#1357: FILE: ./core/rtw_recv.c:1357:
+		if (pattrib->privacy && !(is_multicast_ether_addr(GetAddr1Ptr(ptr))) &&
+			(subtype == WIFI_DEAUTH || subtype == WIFI_DISASSOC || subtype == WIFI_ACTION)) {

CHECK: line length of 107 exceeds 100 columns
#1369: FILE: ./core/rtw_recv.c:1369:
+			data_len = pattrib->pkt_len - pattrib->hdrlen - pattrib->iv_len - pattrib->icv_len;

CHECK: spaces preferred around that '+' (ctx:VxV)
#1375: FILE: ./core/rtw_recv.c:1375:
+			memcpy(mgmt_DATA, ptr+pattrib->hdrlen+pattrib->iv_len, data_len);
 			                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1375: FILE: ./core/rtw_recv.c:1375:
+			memcpy(mgmt_DATA, ptr+pattrib->hdrlen+pattrib->iv_len, data_len);
 			                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1377: FILE: ./core/rtw_recv.c:1377:
+			memcpy(ptr+pattrib->hdrlen, mgmt_DATA, data_len);
 			          ^

CHECK: line length of 107 exceeds 100 columns
#1397: FILE: ./core/rtw_recv.c:1397:
+				/* according 802.11-2012 standard, these five types are not robust types */

CHECK: Alignment should match open parenthesis
#1399: FILE: ./core/rtw_recv.c:1399:
+				if (ptr[WLAN_HDR_A3_LEN] != RTW_WLAN_CATEGORY_PUBLIC          &&
+					ptr[WLAN_HDR_A3_LEN] != RTW_WLAN_CATEGORY_HT              &&

CHECK: Blank lines aren't necessary before a close brace '}'
#1417: FILE: ./core/rtw_recv.c:1417:
+
+}

CHECK: Avoid CamelCase: <bDumpRxPkt>
#1428: FILE: ./core/rtw_recv.c:1428:
+	u8 bDumpRxPkt;

CHECK: No space is necessary after a cast
#1433: FILE: ./core/rtw_recv.c:1433:
+	u8  ver = (unsigned char) (*ptr)&0x3;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1433: FILE: ./core/rtw_recv.c:1433:
+	u8  ver = (unsigned char) (*ptr)&0x3;
 	                                ^

CHECK: Avoid CamelCase: <GetFragNum>
#1446: FILE: ./core/rtw_recv.c:1446:
+	pattrib->frag_num = GetFragNum(ptr);

CHECK: Avoid CamelCase: <GetSequence>
#1447: FILE: ./core/rtw_recv.c:1447:
+	pattrib->seq_num = GetSequence(ptr);

CHECK: Avoid CamelCase: <GetMFrag>
#1450: FILE: ./core/rtw_recv.c:1450:
+	pattrib->mfrag = GetMFrag(ptr);

CHECK: Avoid CamelCase: <GetMData>
#1451: FILE: ./core/rtw_recv.c:1451:
+	pattrib->mdata = GetMData(ptr);

CHECK: Avoid CamelCase: <GetOrder>
#1453: FILE: ./core/rtw_recv.c:1453:
+	pattrib->order = GetOrder(ptr);

CHECK: spaces required around that ':' (ctx:VxV)
#1471: FILE: ./core/rtw_recv.c:1471:
+		pattrib->qos = (subtype & BIT(7)) ? 1:0;
 		                                     ^

CHECK: line length of 106 exceeds 100 columns
#1485: FILE: ./core/rtw_recv.c:1485:
+			memcpy(&eth_type, ptr + pattrib->hdrlen + pattrib->iv_len + LLC_HEADER_LENGTH, 2);

CHECK: No space is necessary after a cast
#1486: FILE: ./core/rtw_recv.c:1486:
+			eth_type = ntohs((unsigned short) eth_type);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1516: FILE: ./core/rtw_recv.c:1516:
+	psnap = (struct ieee80211_snap_hdr	*)(ptr+pattrib->hdrlen + pattrib->iv_len);
 	                                  	      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1517: FILE: ./core/rtw_recv.c:1517:
+	psnap_type = ptr+pattrib->hdrlen + pattrib->iv_len+SNAP_SIZE;
 	                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1517: FILE: ./core/rtw_recv.c:1517:
+	psnap_type = ptr+pattrib->hdrlen + pattrib->iv_len+SNAP_SIZE;
 	                                                  ^

CHECK: Alignment should match open parenthesis
#1521: FILE: ./core/rtw_recv.c:1521:
+	if ((!memcmp(psnap, rfc1042_header, SNAP_SIZE) &&
+		(memcmp(psnap_type, SNAP_ETH_TYPE_IPX, 2)) &&

CHECK: Unbalanced braces around else statement
#1527: FILE: ./core/rtw_recv.c:1527:
+	} else

CHECK: spaces required around that '?' (ctx:VxV)
#1531: FILE: ./core/rtw_recv.c:1531:
+	rmv_len = pattrib->hdrlen + pattrib->iv_len + (bsnaphdr?SNAP_SIZE:0);
 	                                                       ^

CHECK: spaces required around that ':' (ctx:VxV)
#1531: FILE: ./core/rtw_recv.c:1531:
+	rmv_len = pattrib->hdrlen + pattrib->iv_len + (bsnaphdr?SNAP_SIZE:0);
 	                                                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1534: FILE: ./core/rtw_recv.c:1534:
+	memcpy(&be_tmp, ptr+rmv_len, 2);
 	                   ^

WARNING: Unnecessary parentheses - maybe == should be = ?
#1538: FILE: ./core/rtw_recv.c:1538:
+	if ((check_fwstate(pmlmepriv, WIFI_MP_STATE) == true)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#1541: FILE: ./core/rtw_recv.c:1541:
+		*(ptr+1) = 0x12;
 		     ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1545: FILE: ./core/rtw_recv.c:1545:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr)+2)-24);
 		                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1545: FILE: ./core/rtw_recv.c:1545:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr)+2)-24);
 		                                                               ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1545: FILE: ./core/rtw_recv.c:1545:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr)+2)-24);
 		                                                                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1551: FILE: ./core/rtw_recv.c:1551:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr) + (bsnaphdr?2:0)));
 		                                         ^

CHECK: spaces required around that '?' (ctx:VxV)
#1551: FILE: ./core/rtw_recv.c:1551:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr) + (bsnaphdr?2:0)));
 		                                                                           ^

CHECK: spaces required around that ':' (ctx:VxV)
#1551: FILE: ./core/rtw_recv.c:1551:
+		ptr = recvframe_pull(precvframe, (rmv_len-sizeof(struct ethhdr) + (bsnaphdr?2:0)));
 		                                                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1557: FILE: ./core/rtw_recv.c:1557:
+	memcpy(ptr+ETH_ALEN, pattrib->src, ETH_ALEN);
 	          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1561: FILE: ./core/rtw_recv.c:1561:
+		memcpy(ptr+12, &be_tmp, 2);
 		          ^

CHECK: Avoid CamelCase: <nSubframe_Length>
#1570: FILE: ./core/rtw_recv.c:1570:
+	u16 nSubframe_Length;

CHECK: Unnecessary parentheses around precvpriv->free_recv_queue
#1575: FILE: ./core/rtw_recv.c:1575:
+	struct __queue *pfree_recv_queue = &(precvpriv->free_recv_queue);

CHECK: Blank lines aren't necessary after an open brace '{'
#1589: FILE: ./core/rtw_recv.c:1589:
+	while (a_len > ETH_HLEN) {
+

CHECK: spaces preferred around that '-' (ctx:VxV)
#1612: FILE: ./core/rtw_recv.c:1612:
+			padding_len = 4 - ((nSubframe_Length + ETH_HLEN) & (4-1));
 			                                                     ^

CHECK: line length of 104 exceeds 100 columns
#1674: FILE: ./core/rtw_recv.c:1674:
+static int enqueue_reorder_recvframe(struct recv_reorder_ctrl *preorder_ctrl, union recv_frame *prframe)

CHECK: Please don't use multiple blank lines
#1685: FILE: ./core/rtw_recv.c:1685:
+
+

WARNING: else is not generally useful after a break or return
#1699: FILE: ./core/rtw_recv.c:1699:
+			return false;
+		else

CHECK: Blank lines aren't necessary before a close brace '}'
#1702: FILE: ./core/rtw_recv.c:1702:
+
+	}

CHECK: Please don't use multiple blank lines
#1704: FILE: ./core/rtw_recv.c:1704:
+
+

CHECK: Unnecessary parentheses around prframe->u.hdr.list
#1708: FILE: ./core/rtw_recv.c:1708:
+	list_del_init(&(prframe->u.hdr.list));

CHECK: Unnecessary parentheses around prframe->u.hdr.list
#1710: FILE: ./core/rtw_recv.c:1710:
+	list_add_tail(&(prframe->u.hdr.list), plist);

CHECK: Blank lines aren't necessary before a close brace '}'
#1717: FILE: ./core/rtw_recv.c:1717:
+
+}

CHECK: line length of 102 exceeds 100 columns
#1719: FILE: ./core/rtw_recv.c:1719:
+static void recv_indicatepkts_pkt_loss_cnt(struct debug_priv *pdbgpriv, u64 prev_seq, u64 current_seq)

CHECK: Blank lines aren't necessary before a close brace '}'
#1726: FILE: ./core/rtw_recv.c:1726:
+
+}

CHECK: line length of 117 exceeds 100 columns
#1728: FILE: ./core/rtw_recv.c:1728:
+static int recv_indicatepkts_in_order(struct adapter *padapter, struct recv_reorder_ctrl *preorder_ctrl, int bforced)

CHECK: Avoid CamelCase: <bPktInBuf>
#1734: FILE: ./core/rtw_recv.c:1734:
+	int bPktInBuf = false;

CHECK: Using comparison to true is error prone
#1747: FILE: ./core/rtw_recv.c:1747:
+	if (bforced == true) {

CHECK: line length of 104 exceeds 100 columns
#1758: FILE: ./core/rtw_recv.c:1758:
+		recv_indicatepkts_pkt_loss_cnt(pdbgpriv, preorder_ctrl->indicate_seq, pattrib->seq_num);

CHECK: Blank lines aren't necessary before a close brace '}'
#1761: FILE: ./core/rtw_recv.c:1761:
+
+	}

CHECK: Blank lines aren't necessary after an open brace '{'
#1766: FILE: ./core/rtw_recv.c:1766:
+	while (!list_empty(phead)) {
+

CHECK: Unnecessary parentheses around prframe->u.hdr.list
#1772: FILE: ./core/rtw_recv.c:1772:
+			list_del_init(&(prframe->u.hdr.list));

CHECK: line length of 104 exceeds 100 columns
#1775: FILE: ./core/rtw_recv.c:1775:
+				preorder_ctrl->indicate_seq = (preorder_ctrl->indicate_seq + 1) % 4096u;

CHECK: line length of 104 exceeds 100 columns
#1777: FILE: ./core/rtw_recv.c:1777:
+			/* Set this as a lock to make sure that only one thread is indicating packet. */

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped == false'
#1784: FILE: ./core/rtw_recv.c:1784:
+				if ((padapter->bDriverStopped == false) &&
+				    (padapter->bSurpriseRemoved == false))

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved == false'
#1784: FILE: ./core/rtw_recv.c:1784:
+				if ((padapter->bDriverStopped == false) &&
+				    (padapter->bSurpriseRemoved == false))

CHECK: Using comparison to false is error prone
#1784: FILE: ./core/rtw_recv.c:1784:
+				if ((padapter->bDriverStopped == false) &&

CHECK: Using comparison to false is error prone
#1785: FILE: ./core/rtw_recv.c:1785:
+				    (padapter->bSurpriseRemoved == false))

CHECK: line length of 110 exceeds 100 columns
#1786: FILE: ./core/rtw_recv.c:1786:
+					rtw_recv_indicatepkt(padapter, prframe);/* indicate this recv_frame */

CHECK: Please don't use multiple blank lines
#1796: FILE: ./core/rtw_recv.c:1796:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1805: FILE: ./core/rtw_recv.c:1805:
+
+	}

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped == false'
#1827: FILE: ./core/rtw_recv.c:1827:
+			if ((padapter->bDriverStopped == false) &&
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved == false'
#1827: FILE: ./core/rtw_recv.c:1827:
+			if ((padapter->bDriverStopped == false) &&
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Using comparison to false is error prone
#1827: FILE: ./core/rtw_recv.c:1827:
+			if ((padapter->bDriverStopped == false) &&

CHECK: Using comparison to false is error prone
#1828: FILE: ./core/rtw_recv.c:1828:
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#1832: FILE: ./core/rtw_recv.c:1832:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#1836: FILE: ./core/rtw_recv.c:1836:
+
+		}

CHECK: Using comparison to false is error prone
#1838: FILE: ./core/rtw_recv.c:1838:
+		if (preorder_ctrl->enable == false) {

CHECK: spaces preferred around that '%' (ctx:VxV)
#1844: FILE: ./core/rtw_recv.c:1844:
+			preorder_ctrl->indicate_seq = (preorder_ctrl->indicate_seq + 1)%4096;
 			                                                               ^

CHECK: line length of 103 exceeds 100 columns
#1848: FILE: ./core/rtw_recv.c:1848:
+	} else if (pattrib->amsdu == 1) { /* temp filter -> means didn't support A-MSDUs in a A-MPDU */

CHECK: Using comparison to false is error prone
#1849: FILE: ./core/rtw_recv.c:1849:
+		if (preorder_ctrl->enable == false) {

CHECK: spaces preferred around that '%' (ctx:VxV)
#1854: FILE: ./core/rtw_recv.c:1854:
+			preorder_ctrl->indicate_seq = (preorder_ctrl->indicate_seq + 1)%4096;
 			                                                               ^

WARNING: braces {} are not necessary for single statement blocks
#1856: FILE: ./core/rtw_recv.c:1856:
+			if (retval != _SUCCESS) {
+			}

CHECK: Please don't use multiple blank lines
#1871: FILE: ./core/rtw_recv.c:1871:
+
+

CHECK: Please don't use multiple blank lines
#1879: FILE: ./core/rtw_recv.c:1879:
+
+

CHECK: line length of 111 exceeds 100 columns
#1882: FILE: ./core/rtw_recv.c:1882:
+	/*  After Packet dropping and Sliding Window shifting as above, we can now just indicate the packets */

CHECK: Please don't use multiple blank lines
#1907: FILE: ./core/rtw_recv.c:1907:
+
+

CHECK: Please don't use multiple blank lines
#1915: FILE: ./core/rtw_recv.c:1915:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1926: FILE: ./core/rtw_recv.c:1926:
+
+}

CHECK: Using comparison to true is error prone
#1936: FILE: ./core/rtw_recv.c:1936:
+	if (phtpriv->ht_option == true) { /* B/G/N Mode */

CHECK: line length of 101 exceeds 100 columns
#1937: FILE: ./core/rtw_recv.c:1937:
+		/* prframe->u.hdr.preorder_ctrl = &precvpriv->recvreorder_ctrl[pattrib->priority]; */

CHECK: line length of 137 exceeds 100 columns
#1939: FILE: ./core/rtw_recv.c:1939:
+		if (recv_indicatepkt_reorder(padapter, prframe) != _SUCCESS) { /*  including perform A-MPDU Rx Ordering Buffer Control */

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped == false'
#1941: FILE: ./core/rtw_recv.c:1941:
+			if ((padapter->bDriverStopped == false) &&
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved == false'
#1941: FILE: ./core/rtw_recv.c:1941:
+			if ((padapter->bDriverStopped == false) &&
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Using comparison to false is error prone
#1941: FILE: ./core/rtw_recv.c:1941:
+			if ((padapter->bDriverStopped == false) &&

CHECK: Using comparison to false is error prone
#1942: FILE: ./core/rtw_recv.c:1942:
+			    (padapter->bSurpriseRemoved == false)) {

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped == false'
#1952: FILE: ./core/rtw_recv.c:1952:
+		if ((padapter->bDriverStopped == false) && (padapter->bSurpriseRemoved == false)) {

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved == false'
#1952: FILE: ./core/rtw_recv.c:1952:
+		if ((padapter->bDriverStopped == false) && (padapter->bSurpriseRemoved == false)) {

CHECK: Using comparison to false is error prone
#1952: FILE: ./core/rtw_recv.c:1952:
+		if ((padapter->bDriverStopped == false) && (padapter->bSurpriseRemoved == false)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#1960: FILE: ./core/rtw_recv.c:1960:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1964: FILE: ./core/rtw_recv.c:1964:
+
+}

CHECK: line length of 105 exceeds 100 columns
#2030: FILE: ./core/rtw_recv.c:2030:
+		while ((pending_frame = rtw_alloc_recvframe(&padapter->recvpriv.uc_swdec_pending_queue)))

CHECK: Blank lines aren't necessary after an open brace '{'
#2037: FILE: ./core/rtw_recv.c:2037:
+	if (ret == _SUCCESS) {
+

CHECK: Alignment should match open parenthesis
#2040: FILE: ./core/rtw_recv.c:2040:
+		if (check_fwstate(mlmepriv, WIFI_STATION_STATE) &&
+			!is_multicast_ether_addr(prxattrib->ra) && prxattrib->encrypt > 0 &&

CHECK: Using comparison to true is error prone
#2041: FILE: ./core/rtw_recv.c:2041:
+			(prxattrib->bdecrypted == 0 || psecuritypriv->sw_decrypt == true) &&

CHECK: spaces preferred around that '/' (ctx:VxV)
#2046: FILE: ./core/rtw_recv.c:2046:
+			if (recvpriv->free_recvframe_cnt < NR_RECVFRAME/4) {
 			                                               ^

CHECK: line length of 140 exceeds 100 columns
#2047: FILE: ./core/rtw_recv.c:2047:
+				/* to prevent from recvframe starvation, get recvframe from uc_swdec_pending_queue to free_recvframe_cnt  */

CHECK: line length of 105 exceeds 100 columns
#2048: FILE: ./core/rtw_recv.c:2048:
+				rframe = rtw_alloc_recvframe(&padapter->recvpriv.uc_swdec_pending_queue);

CHECK: Please don't use multiple blank lines
#2063: FILE: ./core/rtw_recv.c:2063:
+
+

CHECK: line length of 108 exceeds 100 columns
#2098: FILE: ./core/rtw_recv.c:2098:
+	u8 _alpha = 5; /*  this value is based on converging_constant = 5000 and sampling_interval = 1000 */

CHECK: line length of 116 exceeds 100 columns
#2103: FILE: ./core/rtw_recv.c:2103:
+		adapter->recvpriv.rssi = (s8)translate_percentage_to_dbm((u8)adapter->recvpriv.signal_strength_dbg);

CHECK: Blank lines aren't necessary after an open brace '{'
#2105: FILE: ./core/rtw_recv.c:2105:
+	} else {
+

CHECK: line length of 112 exceeds 100 columns
#2106: FILE: ./core/rtw_recv.c:2106:
+		if (recvpriv->signal_strength_data.update_req == 0) {/*  update_req is clear, means we got rx */

CHECK: line length of 108 exceeds 100 columns
#2113: FILE: ./core/rtw_recv.c:2113:
+		if (recvpriv->signal_qual_data.update_req == 0) {/*  update_req is clear, means we got rx */

CHECK: line length of 139 exceeds 100 columns
#2122: FILE: ./core/rtw_recv.c:2122:
+			    jiffies_to_msecs(jiffies - rtw_get_on_cur_ch_time(adapter)) < 2 * adapter->mlmeextpriv.mlmext_info.bcn_interval

CHECK: spaces preferred around that '+' (ctx:VxV)
#2135: FILE: ./core/rtw_recv.c:2135:
+		tmp_s = (avg_signal_strength+(_alpha-1)*recvpriv->signal_strength);
 		                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2135: FILE: ./core/rtw_recv.c:2135:
+		tmp_s = (avg_signal_strength+(_alpha-1)*recvpriv->signal_strength);
 		                                    ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#2135: FILE: ./core/rtw_recv.c:2135:
+		tmp_s = (avg_signal_strength+(_alpha-1)*recvpriv->signal_strength);
 		                                       ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#2137: FILE: ./core/rtw_recv.c:2137:
+			tmp_s = tmp_s/_alpha + 1;
 			             ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#2139: FILE: ./core/rtw_recv.c:2139:
+			tmp_s = tmp_s/_alpha;
 			             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2143: FILE: ./core/rtw_recv.c:2143:
+		tmp_q = (avg_signal_qual+(_alpha-1)*recvpriv->signal_qual);
 		                        ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2143: FILE: ./core/rtw_recv.c:2143:
+		tmp_q = (avg_signal_qual+(_alpha-1)*recvpriv->signal_qual);
 		                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#2143: FILE: ./core/rtw_recv.c:2143:
+		tmp_q = (avg_signal_qual+(_alpha-1)*recvpriv->signal_qual);
 		                                   ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#2145: FILE: ./core/rtw_recv.c:2145:
+			tmp_q = tmp_q/_alpha + 1;
 			             ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#2147: FILE: ./core/rtw_recv.c:2147:
+			tmp_q = tmp_q/_alpha;
 			             ^

CHECK: Blank lines aren't necessary before a close brace '}'
#2159: FILE: ./core/rtw_recv.c:2159:
+
+}

total: 0 errors, 4 warnings, 268 checks, 2159 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_recv.c has style problems, please review.
-----------------
./core/rtw_recv.o
-----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_recv.o has style problems, please review.
---------------------
./core/rtw_security.c
---------------------
WARNING: Block comments use * on subsequent lines
#33: FILE: ./core/rtw_security.c:33:
+/*
+	Need to consider the fragment  situation

CHECK: line length of 154 exceeds 100 columns
#36: FILE: ./core/rtw_security.c:36:
+{																	/*  exclude ICV */

CHECK: Unnecessary parentheses around 'pattrib->encrypt == _WEP40_'
#60: FILE: ./core/rtw_security.c:60:
+	if ((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) {

CHECK: Unnecessary parentheses around 'pattrib->encrypt == _WEP104_'
#60: FILE: ./core/rtw_security.c:60:
+	if ((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#64: FILE: ./core/rtw_security.c:64:
+			iv = pframe+pattrib->hdrlen;
 			           ^

CHECK: line length of 128 exceeds 100 columns
#66: FILE: ./core/rtw_security.c:66:
+			memcpy(&wepkey[3], &psecuritypriv->dot11DefKey[psecuritypriv->dot11PrivacyKeyIndex].skey[0], keylength);

CHECK: spaces preferred around that '+' (ctx:VxV)
#67: FILE: ./core/rtw_security.c:67:
+			payload = pframe+pattrib->iv_len+pattrib->hdrlen;
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#67: FILE: ./core/rtw_security.c:67:
+			payload = pframe+pattrib->iv_len+pattrib->hdrlen;
 			                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#69: FILE: ./core/rtw_security.c:69:
+			if ((curfragnum+1) == pattrib->nr_frags) {	/* the last fragment */
 			               ^

CHECK: line length of 112 exceeds 100 columns
#71: FILE: ./core/rtw_security.c:71:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#71: FILE: ./core/rtw_security.c:71:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#71: FILE: ./core/rtw_security.c:71:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#71: FILE: ./core/rtw_security.c:71:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                                              ^

CHECK: line length of 110 exceeds 100 columns
#80: FILE: ./core/rtw_security.c:80:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#80: FILE: ./core/rtw_security.c:80:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#80: FILE: ./core/rtw_security.c:80:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#80: FILE: ./core/rtw_security.c:80:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                                            ^

CHECK: Unnecessary parentheses around 'prxattrib->encrypt == _WEP40_'
#108: FILE: ./core/rtw_security.c:108:
+	if ((prxattrib->encrypt == _WEP40_) || (prxattrib->encrypt == _WEP104_)) {

CHECK: Unnecessary parentheses around 'prxattrib->encrypt == _WEP104_'
#108: FILE: ./core/rtw_security.c:108:
+	if ((prxattrib->encrypt == _WEP40_) || (prxattrib->encrypt == _WEP104_)) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#109: FILE: ./core/rtw_security.c:109:
+		iv = pframe+prxattrib->hdrlen;
 		           ^

CHECK: line length of 126 exceeds 100 columns
#114: FILE: ./core/rtw_security.c:114:
+		/* memcpy(&wepkey[3], &psecuritypriv->dot11DefKey[psecuritypriv->dot11PrivacyKeyIndex].skey[0], keylength); */

CHECK: line length of 105 exceeds 100 columns
#116: FILE: ./core/rtw_security.c:116:
+		length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#116: FILE: ./core/rtw_security.c:116:
+		length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 		                                                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#116: FILE: ./core/rtw_security.c:116:
+		length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 		                                                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#118: FILE: ./core/rtw_security.c:118:
+		payload = pframe+prxattrib->iv_len+prxattrib->hdrlen;
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#118: FILE: ./core/rtw_security.c:118:
+		payload = pframe+prxattrib->iv_len+prxattrib->hdrlen;
 		                                  ^

CHECK: Blank lines aren't necessary before a close brace '}'
#127: FILE: ./core/rtw_security.c:127:
+
+	}

CHECK: No space is necessary after a cast
#150: FILE: ./core/rtw_security.c:150:
+		*p++ = (u8) (val & 0xff);

CHECK: Avoid CamelCase: <nBytesInM>
#160: FILE: ./core/rtw_security.c:160:
+	pmicdata->nBytesInM = 0;

CHECK: spaces preferred around that '*' (ctx:VxV)
#176: FILE: ./core/rtw_security.c:176:
+	pmicdata->M |= ((unsigned long)b) << (8*pmicdata->nBytesInM);
 	                                       ^

CHECK: line length of 101 exceeds 100 columns
#183: FILE: ./core/rtw_security.c:183:
+		pmicdata->R ^= ((pmicdata->L & 0xff00ff00) >> 8) | ((pmicdata->L & 0x00ff00ff) << 8);

CHECK: Please don't use multiple blank lines
#222: FILE: ./core/rtw_security.c:222:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#225: FILE: ./core/rtw_security.c:225:
+{
+

CHECK: Please don't use multiple blank lines
#248: FILE: ./core/rtw_security.c:248:
+
+

CHECK: Avoid CamelCase: <RotR1>
#255: FILE: ./core/rtw_security.c:255:
+#define RotR1(v16)   ((((v16) >> 1) & 0x7FFF) ^ (((v16) & 1) << 15))

CHECK: Macro argument reuse 'v16' - possible side-effects?
#255: FILE: ./core/rtw_security.c:255:
+#define RotR1(v16)   ((((v16) >> 1) & 0x7FFF) ^ (((v16) & 1) << 15))

CHECK: Avoid CamelCase: <Lo8>
#256: FILE: ./core/rtw_security.c:256:
+#define   Lo8(v16)   ((u8)((v16)       & 0x00FF))

CHECK: Avoid CamelCase: <Hi8>
#257: FILE: ./core/rtw_security.c:257:
+#define   Hi8(v16)   ((u8)(((v16) >> 8) & 0x00FF))

CHECK: Avoid CamelCase: <Lo16>
#258: FILE: ./core/rtw_security.c:258:
+#define  Lo16(v32)   ((u16)((v32)       & 0xFFFF))

CHECK: Avoid CamelCase: <Hi16>
#259: FILE: ./core/rtw_security.c:259:
+#define  Hi16(v32)   ((u16)(((v32) >> 16) & 0xFFFF))

CHECK: Avoid CamelCase: <Mk16>
#260: FILE: ./core/rtw_security.c:260:
+#define  Mk16(hi, lo) ((lo) ^ (((u16)(hi)) << 8))

CHECK: spaces preferred around that '*' (ctx:VxV)
#263: FILE: ./core/rtw_security.c:263:
+#define  TK16(N)     Mk16(tk[2*(N)+1], tk[2*(N)])
                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#263: FILE: ./core/rtw_security.c:263:
+#define  TK16(N)     Mk16(tk[2*(N)+1], tk[2*(N)])
                                   ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#263: FILE: ./core/rtw_security.c:263:
+#define  TK16(N)     Mk16(tk[2*(N)+1], tk[2*(N)])
                                            ^

CHECK: Macro argument reuse 'N' - possible side-effects?
#263: FILE: ./core/rtw_security.c:263:
+#define  TK16(N)     Mk16(tk[2*(N)+1], tk[2*(N)])

CHECK: Avoid CamelCase: <Sbox1>
#266: FILE: ./core/rtw_security.c:266:
+#define _S_(v16)     (Sbox1[0][Lo8(v16)] ^ Sbox1[1][Hi8(v16)])

CHECK: Macro argument reuse 'v16' - possible side-effects?
#266: FILE: ./core/rtw_security.c:266:
+#define _S_(v16)     (Sbox1[0][Lo8(v16)] ^ Sbox1[1][Hi8(v16)])

CHECK: Please don't use multiple blank lines
#308: FILE: ./core/rtw_security.c:308:
+
+

WARNING: Block comments should align the * on each line
#346: FILE: ./core/rtw_security.c:346:
+ /*
+**********************************************************************

CHECK: spaces preferred around that '&' (ctx:VxV)
#377: FILE: ./core/rtw_security.c:377:
+		p1k[0] += _S_(p1k[4] ^ TK16((i&1)+0));
 		                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#377: FILE: ./core/rtw_security.c:377:
+		p1k[0] += _S_(p1k[4] ^ TK16((i&1)+0));
 		                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#378: FILE: ./core/rtw_security.c:378:
+		p1k[1] += _S_(p1k[0] ^ TK16((i&1)+2));
 		                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#378: FILE: ./core/rtw_security.c:378:
+		p1k[1] += _S_(p1k[0] ^ TK16((i&1)+2));
 		                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#379: FILE: ./core/rtw_security.c:379:
+		p1k[2] += _S_(p1k[1] ^ TK16((i&1)+4));
 		                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#379: FILE: ./core/rtw_security.c:379:
+		p1k[2] += _S_(p1k[1] ^ TK16((i&1)+4));
 		                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#380: FILE: ./core/rtw_security.c:380:
+		p1k[3] += _S_(p1k[2] ^ TK16((i&1)+6));
 		                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#380: FILE: ./core/rtw_security.c:380:
+		p1k[3] += _S_(p1k[2] ^ TK16((i&1)+6));
 		                                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#381: FILE: ./core/rtw_security.c:381:
+		p1k[4] += _S_(p1k[3] ^ TK16((i&1)+0));
 		                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#381: FILE: ./core/rtw_security.c:381:
+		p1k[4] += _S_(p1k[3] ^ TK16((i&1)+0));
 		                                 ^

CHECK: Please don't use multiple blank lines
#386: FILE: ./core/rtw_security.c:386:
+
+

WARNING: Block comments should align the * on each line
#388: FILE: ./core/rtw_security.c:388:
+/*
+**********************************************************************

CHECK: spaces preferred around that '+' (ctx:VxV)
#419: FILE: ./core/rtw_security.c:419:
+	PPK[5]  =  p1k[4]+iv16;             /* next,  add in IV16          */
 	                 ^

CHECK: Please don't use multiple blank lines
#447: FILE: ./core/rtw_security.c:447:
+
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#450: FILE: ./core/rtw_security.c:450:
+		rc4key[4+2*i] = Lo8(PPK[i]);
 		        ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#450: FILE: ./core/rtw_security.c:450:
+		rc4key[4+2*i] = Lo8(PPK[i]);
 		          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#451: FILE: ./core/rtw_security.c:451:
+		rc4key[5+2*i] = Hi8(PPK[i]);
 		        ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#451: FILE: ./core/rtw_security.c:451:
+		rc4key[5+2*i] = Hi8(PPK[i]);
 		          ^

CHECK: Please don't use multiple blank lines
#455: FILE: ./core/rtw_security.c:455:
+
+

CHECK: line length of 154 exceeds 100 columns
#458: FILE: ./core/rtw_security.c:458:
+{																	/*  exclude ICV */

CHECK: Blank lines aren't necessary after an open brace '{'
#486: FILE: ./core/rtw_security.c:486:
+	if (pattrib->encrypt == _TKIP_) {
+

CHECK: line length of 114 exceeds 100 columns
#489: FILE: ./core/rtw_security.c:489:
+				prwskey = psecuritypriv->dot118021XGrpKey[psecuritypriv->dot118021XGrpKeyid].skey;

CHECK: spaces preferred around that '+' (ctx:VxV)
#494: FILE: ./core/rtw_security.c:494:
+				iv = pframe+pattrib->hdrlen;
 				           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#495: FILE: ./core/rtw_security.c:495:
+				payload = pframe+pattrib->iv_len+pattrib->hdrlen;
 				                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#495: FILE: ./core/rtw_security.c:495:
+				payload = pframe+pattrib->iv_len+pattrib->hdrlen;
 				                                ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#500: FILE: ./core/rtw_security.c:500:
+				pnh = (u32)(dot11txpn.val>>16);
 				                         ^

CHECK: line length of 105 exceeds 100 columns
#506: FILE: ./core/rtw_security.c:506:
+				if ((curfragnum+1) == pattrib->nr_frags) {	/* 4 the last fragment */

CHECK: spaces preferred around that '+' (ctx:VxV)
#506: FILE: ./core/rtw_security.c:506:
+				if ((curfragnum+1) == pattrib->nr_frags) {	/* 4 the last fragment */
 				               ^

CHECK: line length of 120 exceeds 100 columns
#507: FILE: ./core/rtw_security.c:507:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#507: FILE: ./core/rtw_security.c:507:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#507: FILE: ./core/rtw_security.c:507:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#507: FILE: ./core/rtw_security.c:507:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                                                              ^

CHECK: line length of 118 exceeds 100 columns
#515: FILE: ./core/rtw_security.c:515:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#515: FILE: ./core/rtw_security.c:515:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#515: FILE: ./core/rtw_security.c:515:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#515: FILE: ./core/rtw_security.c:515:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 					                                                            ^

CHECK: Please don't use multiple blank lines
#531: FILE: ./core/rtw_security.c:531:
+
+

CHECK: line length of 154 exceeds 100 columns
#534: FILE: ./core/rtw_security.c:534:
+{																	/*  exclude ICV */

WARNING: Too many leading tabs - consider code refactoring
#573: FILE: ./core/rtw_security.c:573:
+						if (no_gkey_bc_cnt || no_gkey_mc_cnt) {

CHECK: line length of 123 exceeds 100 columns
#575: FILE: ./core/rtw_security.c:575:
+								   FUNC_ADPT_FMT " no_gkey_bc_cnt:%u, no_gkey_mc_cnt:%u\n",

CHECK: line length of 123 exceeds 100 columns
#589: FILE: ./core/rtw_security.c:589:
+						   FUNC_ADPT_FMT " gkey installed. no_gkey_bc_cnt:%u, no_gkey_mc_cnt:%u\n",

CHECK: line length of 101 exceeds 100 columns
#598: FILE: ./core/rtw_security.c:598:
+				prwskey = psecuritypriv->dot118021XGrpKey[prxattrib->key_index].skey;

CHECK: spaces preferred around that '+' (ctx:VxV)
#603: FILE: ./core/rtw_security.c:603:
+			iv = pframe+prxattrib->hdrlen;
 			           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#604: FILE: ./core/rtw_security.c:604:
+			payload = pframe+prxattrib->iv_len+prxattrib->hdrlen;
 			                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#604: FILE: ./core/rtw_security.c:604:
+			payload = pframe+prxattrib->iv_len+prxattrib->hdrlen;
 			                                  ^

CHECK: line length of 113 exceeds 100 columns
#605: FILE: ./core/rtw_security.c:605:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#605: FILE: ./core/rtw_security.c:605:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 			                                                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#605: FILE: ./core/rtw_security.c:605:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 			                                                                      ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#610: FILE: ./core/rtw_security.c:610:
+			pnh = (u32)(dot11txpn.val>>16);
 			                         ^

CHECK: Please don't use multiple blank lines
#633: FILE: ./core/rtw_security.c:633:
+
+

CHECK: Please don't use multiple blank lines
#636: FILE: ./core/rtw_security.c:636:
+
+

CHECK: Please don't use multiple blank lines
#670: FILE: ./core/rtw_security.c:670:
+
+

CHECK: No space is necessary after a cast
#725: FILE: ./core/rtw_security.c:725:
+		mic_iv[14] = (unsigned char) (payload_length / 256);

CHECK: No space is necessary after a cast
#726: FILE: ./core/rtw_security.c:726:
+		mic_iv[15] = (unsigned char) (payload_length % 256);

CHECK: spaces preferred around that '+' (ctx:VxV)
#791: FILE: ./core/rtw_security.c:791:
+				mic_header2[8+i] = mpdu[24+i];   /* A4 */
 				             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#791: FILE: ./core/rtw_security.c:791:
+				mic_header2[8+i] = mpdu[24+i];   /* A4 */
 				                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#801: FILE: ./core/rtw_security.c:801:
+				mic_header2[8+i] = mpdu[24+i];   /* A4 */
 				             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#801: FILE: ./core/rtw_security.c:801:
+				mic_header2[8+i] = mpdu[24+i];   /* A4 */
 				                          ^

CHECK: line length of 114 exceeds 100 columns
#840: FILE: ./core/rtw_security.c:840:
+		ctr_preload[i] = mpdu[i + 8];                       /* ctr_preload[2:7] = A2[0:5] = mpdu[10:15] */

CHECK: No space is necessary after a cast
#848: FILE: ./core/rtw_security.c:848:
+	ctr_preload[14] =  (unsigned char) (c / 256); /* Ctr */

CHECK: No space is necessary after a cast
#849: FILE: ./core/rtw_security.c:849:
+	ctr_preload[15] =  (unsigned char) (c % 256);

CHECK: Alignment should match open parenthesis
#865: FILE: ./core/rtw_security.c:865:
+static signed int aes_cipher(u8 *key, uint	hdrlen,
+			u8 *pframe, uint plen)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#884: FILE: ./core/rtw_security.c:884:
+	frsubtype = frsubtype>>4;
 	                     ^

CHECK: Unnecessary parentheses around 'hdrlen == WLAN_HDR_A3_LEN'
#894: FILE: ./core/rtw_security.c:894:
+	if ((hdrlen == WLAN_HDR_A3_LEN) || (hdrlen ==  WLAN_HDR_A3_QOS_LEN))

CHECK: Unnecessary parentheses around 'hdrlen ==  WLAN_HDR_A3_QOS_LEN'
#894: FILE: ./core/rtw_security.c:894:
+	if ((hdrlen == WLAN_HDR_A3_LEN) || (hdrlen ==  WLAN_HDR_A3_QOS_LEN))

CHECK: spaces preferred around that '|' (ctx:VxV)
#899: FILE: ./core/rtw_security.c:899:
+	if (((frtype|frsubtype) == WIFI_DATA_CFACK) ||
 	            ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#900: FILE: ./core/rtw_security.c:900:
+	    ((frtype|frsubtype) == WIFI_DATA_CFPOLL) ||
 	            ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#901: FILE: ./core/rtw_security.c:901:
+	    ((frtype|frsubtype) == WIFI_DATA_CFACKPOLL)) {
 	            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#920: FILE: ./core/rtw_security.c:920:
+	pn_vector[1] = pframe[hdrlen+1];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#921: FILE: ./core/rtw_security.c:921:
+	pn_vector[2] = pframe[hdrlen+4];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#922: FILE: ./core/rtw_security.c:922:
+	pn_vector[3] = pframe[hdrlen+5];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#923: FILE: ./core/rtw_security.c:923:
+	pn_vector[4] = pframe[hdrlen+6];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#924: FILE: ./core/rtw_security.c:924:
+	pn_vector[5] = pframe[hdrlen+7];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#980: FILE: ./core/rtw_security.c:980:
+		pframe[payload_index+j] = mic[j];
 		                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#985: FILE: ./core/rtw_security.c:985:
+				      pn_vector, i+1, frtype);
 				                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#997: FILE: ./core/rtw_security.c:997:
+				      pn_vector, num_blocks+1, frtype);
 				                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1003: FILE: ./core/rtw_security.c:1003:
+			padded_buffer[j] = pframe[payload_index+j];
 			                                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1019: FILE: ./core/rtw_security.c:1019:
+		padded_buffer[j] = pframe[j+hdrlen+8+plen];
 		                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1019: FILE: ./core/rtw_security.c:1019:
+		padded_buffer[j] = pframe[j+hdrlen+8+plen];
 		                                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1019: FILE: ./core/rtw_security.c:1019:
+		padded_buffer[j] = pframe[j+hdrlen+8+plen];
 		                                    ^

CHECK: line length of 106 exceeds 100 columns
#1054: FILE: ./core/rtw_security.c:1054:
+			prwskey = psecuritypriv->dot118021XGrpKey[psecuritypriv->dot118021XGrpKeyid].skey;

CHECK: spaces preferred around that '+' (ctx:VxV)
#1059: FILE: ./core/rtw_security.c:1059:
+			if ((curfragnum+1) == pattrib->nr_frags) {	/* 4 the last fragment */
 			               ^

CHECK: line length of 112 exceeds 100 columns
#1060: FILE: ./core/rtw_security.c:1060:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#1060: FILE: ./core/rtw_security.c:1060:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1060: FILE: ./core/rtw_security.c:1060:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1060: FILE: ./core/rtw_security.c:1060:
+				length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                                              ^

CHECK: line length of 110 exceeds 100 columns
#1064: FILE: ./core/rtw_security.c:1064:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#1064: FILE: ./core/rtw_security.c:1064:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1064: FILE: ./core/rtw_security.c:1064:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1064: FILE: ./core/rtw_security.c:1064:
+				length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-pattrib->icv_len;
 				                                                            ^

CHECK: Alignment should match open parenthesis
#1076: FILE: ./core/rtw_security.c:1076:
+static signed int aes_decipher(u8 *key, uint	hdrlen,
+			 u8 *pframe, uint plen)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1097: FILE: ./core/rtw_security.c:1097:
+	frsubtype = frsubtype>>4;
 	                     ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1109: FILE: ./core/rtw_security.c:1109:
+	num_blocks = (plen-8) / 16; /* plen including LLC, payload_length and mic) */
 	                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1111: FILE: ./core/rtw_security.c:1111:
+	payload_remainder = (plen-8) % 16;
 	                         ^

CHECK: Unnecessary parentheses around 'hdrlen == WLAN_HDR_A3_LEN'
#1120: FILE: ./core/rtw_security.c:1120:
+	if ((hdrlen == WLAN_HDR_A3_LEN) || (hdrlen ==  WLAN_HDR_A3_QOS_LEN))

CHECK: Unnecessary parentheses around 'hdrlen ==  WLAN_HDR_A3_QOS_LEN'
#1120: FILE: ./core/rtw_security.c:1120:
+	if ((hdrlen == WLAN_HDR_A3_LEN) || (hdrlen ==  WLAN_HDR_A3_QOS_LEN))

CHECK: spaces preferred around that '|' (ctx:VxV)
#1125: FILE: ./core/rtw_security.c:1125:
+	if (((frtype|frsubtype) == WIFI_DATA_CFACK) ||
 	            ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1126: FILE: ./core/rtw_security.c:1126:
+	    ((frtype|frsubtype) == WIFI_DATA_CFPOLL) ||
 	            ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1127: FILE: ./core/rtw_security.c:1127:
+	    ((frtype|frsubtype) == WIFI_DATA_CFACKPOLL)) {
 	            ^

CHECK: line length of 121 exceeds 100 columns
#1132: FILE: ./core/rtw_security.c:1132:
+	} else if ((frtype == WIFI_DATA) && /* only for data packet . add for CONFIG_IEEE80211W, none 11w also can use */

CHECK: line length of 102 exceeds 100 columns
#1153: FILE: ./core/rtw_security.c:1153:
+				      frtype); /*  add for CONFIG_IEEE80211W, none 11w also can use */

CHECK: spaces preferred around that '+' (ctx:VxV)
#1166: FILE: ./core/rtw_security.c:1166:
+				      num_blocks+1, frtype);
 				                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1172: FILE: ./core/rtw_security.c:1172:
+			padded_buffer[j] = pframe[payload_index+j];
 			                                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1181: FILE: ./core/rtw_security.c:1181:
+	if ((hdrlen + plen+8) <= MAX_MSG_SIZE)
 	                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1182: FILE: ./core/rtw_security.c:1182:
+		memcpy((void *)message, pframe, (hdrlen + plen+8)); /* 8 is for ext iv len */
 		                                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1185: FILE: ./core/rtw_security.c:1185:
+	pn_vector[1] = pframe[hdrlen+1];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1186: FILE: ./core/rtw_security.c:1186:
+	pn_vector[2] = pframe[hdrlen+4];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1187: FILE: ./core/rtw_security.c:1187:
+	pn_vector[3] = pframe[hdrlen+5];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1188: FILE: ./core/rtw_security.c:1188:
+	pn_vector[4] = pframe[hdrlen+6];
 	                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1189: FILE: ./core/rtw_security.c:1189:
+	pn_vector[5] = pframe[hdrlen+7];
 	                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1191: FILE: ./core/rtw_security.c:1191:
+	construct_mic_iv(mic_iv, qc_exists, a4_exists, message, plen-8, pn_vector, frtype);
 	                                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1198: FILE: ./core/rtw_security.c:1198:
+	payload_remainder = (plen-8) % 16;
 	                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1199: FILE: ./core/rtw_security.c:1199:
+	num_blocks = (plen-8) / 16;
 	                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1234: FILE: ./core/rtw_security.c:1234:
+		message[payload_index+j] = mic[j];
 		                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1238: FILE: ./core/rtw_security.c:1238:
+		construct_ctr_preload(ctr_preload, a4_exists, qc_exists, message, pn_vector, i+1,
 		                                                                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1251: FILE: ./core/rtw_security.c:1251:
+				      num_blocks+1, frtype);
 				                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1257: FILE: ./core/rtw_security.c:1257:
+			padded_buffer[j] = message[payload_index+j];
 			                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1272: FILE: ./core/rtw_security.c:1272:
+		padded_buffer[j] = message[j+hdrlen+8+plen-8];
 		                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1272: FILE: ./core/rtw_security.c:1272:
+		padded_buffer[j] = message[j+hdrlen+8+plen-8];
 		                                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1272: FILE: ./core/rtw_security.c:1272:
+		padded_buffer[j] = message[j+hdrlen+8+plen-8];
 		                                     ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1272: FILE: ./core/rtw_security.c:1272:
+		padded_buffer[j] = message[j+hdrlen+8+plen-8];
 		                                          ^

WARNING: Too many leading tabs - consider code refactoring
#1324: FILE: ./core/rtw_security.c:1324:
+						if (no_gkey_bc_cnt || no_gkey_mc_cnt) {

CHECK: line length of 123 exceeds 100 columns
#1326: FILE: ./core/rtw_security.c:1326:
+								   FUNC_ADPT_FMT " no_gkey_bc_cnt:%u, no_gkey_mc_cnt:%u\n",

CHECK: line length of 123 exceeds 100 columns
#1341: FILE: ./core/rtw_security.c:1341:
+						   FUNC_ADPT_FMT " gkey installed. no_gkey_bc_cnt:%u, no_gkey_mc_cnt:%u\n",

CHECK: line length of 101 exceeds 100 columns
#1350: FILE: ./core/rtw_security.c:1350:
+				prwskey = psecuritypriv->dot118021XGrpKey[prxattrib->key_index].skey;

CHECK: line length of 113 exceeds 100 columns
#1359: FILE: ./core/rtw_security.c:1359:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;

CHECK: spaces preferred around that '-' (ctx:VxV)
#1359: FILE: ./core/rtw_security.c:1359:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 			                                                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1359: FILE: ./core/rtw_security.c:1359:
+			length = ((union recv_frame *)precvframe)->u.hdr.len-prxattrib->hdrlen-prxattrib->iv_len;
 			                                                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1384: FILE: ./core/rtw_security.c:1384:
+	ori_len = pattrib->pkt_len-WLAN_HDR_A3_LEN+BIP_AAD_SIZE;
 	                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1384: FILE: ./core/rtw_security.c:1384:
+	ori_len = pattrib->pkt_len-WLAN_HDR_A3_LEN+BIP_AAD_SIZE;
 	                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1395: FILE: ./core/rtw_security.c:1395:
+	memcpy(BIP_AAD+BIP_AAD_SIZE, pframe+WLAN_HDR_A3_LEN, pattrib->pkt_len-WLAN_HDR_A3_LEN);
 	              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1395: FILE: ./core/rtw_security.c:1395:
+	memcpy(BIP_AAD+BIP_AAD_SIZE, pframe+WLAN_HDR_A3_LEN, pattrib->pkt_len-WLAN_HDR_A3_LEN);
 	                                   ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1395: FILE: ./core/rtw_security.c:1395:
+	memcpy(BIP_AAD+BIP_AAD_SIZE, pframe+WLAN_HDR_A3_LEN, pattrib->pkt_len-WLAN_HDR_A3_LEN);
 	                                                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1397: FILE: ./core/rtw_security.c:1397:
+	p = rtw_get_ie(BIP_AAD+BIP_AAD_SIZE, WLAN_EID_MMIE, &len, pattrib->pkt_len-WLAN_HDR_A3_LEN);
 	                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1397: FILE: ./core/rtw_security.c:1397:
+	p = rtw_get_ie(BIP_AAD+BIP_AAD_SIZE, WLAN_EID_MMIE, &len, pattrib->pkt_len-WLAN_HDR_A3_LEN);
 	                                                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1403: FILE: ./core/rtw_security.c:1403:
+		memcpy(&le_tmp64, p+4, 6);
 		                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1410: FILE: ./core/rtw_security.c:1410:
+		memcpy(&le_tmp, p+2, 2);
 		                 ^

CHECK: Avoid CamelCase: <dot11wBIPKeyid>
#1412: FILE: ./core/rtw_security.c:1412:
+		if (keyid != padapter->securitypriv.dot11wBIPKeyid)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1416: FILE: ./core/rtw_security.c:1416:
+		memset(p+2+len-8, 0, 8);
 		        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1416: FILE: ./core/rtw_security.c:1416:
+		memset(p+2+len-8, 0, 8);
 		          ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1416: FILE: ./core/rtw_security.c:1416:
+		memset(p+2+len-8, 0, 8);
 		              ^

CHECK: Avoid CamelCase: <ClearRetry>
#1420: FILE: ./core/rtw_security.c:1420:
+		ClearRetry(BIP_AAD);

CHECK: Avoid CamelCase: <ClearPwrMgt>
#1421: FILE: ./core/rtw_security.c:1421:
+		ClearPwrMgt(BIP_AAD);

CHECK: Avoid CamelCase: <ClearMData>
#1422: FILE: ./core/rtw_security.c:1422:
+		ClearMData(BIP_AAD);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1424: FILE: ./core/rtw_security.c:1424:
+		memcpy(BIP_AAD+2, pwlanhdr->addr1, 18);
 		              ^

CHECK: line length of 113 exceeds 100 columns
#1426: FILE: ./core/rtw_security.c:1426:
+		if (omac1_aes_128(padapter->securitypriv.dot11wBIPKey[padapter->securitypriv.dot11wBIPKeyid].skey

CHECK: Avoid CamelCase: <dot11wBIPKey>
#1426: FILE: ./core/rtw_security.c:1426:
+		if (omac1_aes_128(padapter->securitypriv.dot11wBIPKey[padapter->securitypriv.dot11wBIPKeyid].skey

CHECK: spaces preferred around that '+' (ctx:VxV)
#1431: FILE: ./core/rtw_security.c:1431:
+		if (!memcmp(mic, pframe+pattrib->pkt_len-8, 8)) {
 		                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1431: FILE: ./core/rtw_security.c:1431:
+		if (!memcmp(mic, pframe+pattrib->pkt_len-8, 8)) {
 		                                        ^

WARNING: Block comments use a trailing */ on a separate line
#1544: FILE: ./core/rtw_security.c:1544:
+ * modify for CONFIG_IEEE80211W */

CHECK: Unnecessary parentheses around adapter->securitypriv
#1553: FILE: ./core/rtw_security.c:1553:
+	struct security_priv *securitypriv = &(adapter->securitypriv);

CHECK: line length of 112 exceeds 100 columns
#1556: FILE: ./core/rtw_security.c:1556:
+	if ((_WEP40_ == securitypriv->dot11PrivacyAlgrthm) || (_WEP104_ == securitypriv->dot11PrivacyAlgrthm)) {

CHECK: Unnecessary parentheses around '_WEP40_ == securitypriv->dot11PrivacyAlgrthm'
#1556: FILE: ./core/rtw_security.c:1556:
+	if ((_WEP40_ == securitypriv->dot11PrivacyAlgrthm) || (_WEP104_ == securitypriv->dot11PrivacyAlgrthm)) {

CHECK: Unnecessary parentheses around '_WEP104_ == securitypriv->dot11PrivacyAlgrthm'
#1556: FILE: ./core/rtw_security.c:1556:
+	if ((_WEP40_ == securitypriv->dot11PrivacyAlgrthm) || (_WEP104_ == securitypriv->dot11PrivacyAlgrthm)) {

WARNING: Comparisons should place the constant on the right side of the test
#1556: FILE: ./core/rtw_security.c:1556:
+	if ((_WEP40_ == securitypriv->dot11PrivacyAlgrthm) || (_WEP104_ == securitypriv->dot11PrivacyAlgrthm)) {

CHECK: Unnecessary parentheses around adapter->securitypriv
#1570: FILE: ./core/rtw_security.c:1570:
+	struct security_priv *securitypriv = &(adapter->securitypriv);

CHECK: line length of 111 exceeds 100 columns
#1574: FILE: ./core/rtw_security.c:1574:
+		unsigned long passing_ms = jiffies_to_msecs(jiffies - securitypriv->btkip_countermeasure_time);

CHECK: spaces preferred around that '*' (ctx:VxV)
#1576: FILE: ./core/rtw_security.c:1576:
+		if (passing_ms > 60*1000) {
 		                   ^

total: 0 errors, 7 warnings, 200 checks, 1593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_security.c has style problems, please review.
---------------------
./core/rtw_security.o
---------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_security.o has style problems, please review.
--------------------
./core/rtw_sta_mgt.c
--------------------
CHECK: spaces preferred around that '+' (ctx:VxV)
#57: FILE: ./core/rtw_sta_mgt.c:57:
+	pstapriv->pallocated_stainfo_buf = vzalloc(sizeof(struct sta_info) * NUM_STA+4);
 	                                                                            ^

CHECK: Prefer vzalloc(sizeof(*pstapriv->pallocated_stainfo_buf)...) over vzalloc(sizeof(struct sta_info)...)
#57: FILE: ./core/rtw_sta_mgt.c:57:
+	pstapriv->pallocated_stainfo_buf = vzalloc(sizeof(struct sta_info) * NUM_STA+4);

CHECK: Unnecessary parentheses around pstapriv->sta_hash[i]
#82: FILE: ./core/rtw_sta_mgt.c:82:
+		INIT_LIST_HEAD(&(pstapriv->sta_hash[i]));

CHECK: spaces preferred around that '/' (ctx:VxV)
#108: FILE: ./core/rtw_sta_mgt.c:108:
+	int offset = (((u8 *)sta) - stapriv->pstainfo_buf)/sizeof(struct sta_info);
 	                                                  ^

CHECK: Unnecessary parentheses around pstapriv->sta_hash[index]
#152: FILE: ./core/rtw_sta_mgt.c:152:
+			phead = &(pstapriv->sta_hash[index]);

CHECK: Avoid CamelCase: <wRxSeqInitialValue>
#184: FILE: ./core/rtw_sta_mgt.c:184:
+	u16  wRxSeqInitialValue = 0xffff;

CHECK: Unnecessary parentheses around pstapriv->sta_hash_lock
#189: FILE: ./core/rtw_sta_mgt.c:189:
+	spin_lock_bh(&(pstapriv->sta_hash_lock));

CHECK: Unnecessary parentheses around pstapriv->sta_hash_lock
#192: FILE: ./core/rtw_sta_mgt.c:192:
+		spin_unlock_bh(&(pstapriv->sta_hash_lock));

WARNING: else is not generally useful after a break or return
#194: FILE: ./core/rtw_sta_mgt.c:194:
+		return NULL;
+	} else {

CHECK: Unnecessary parentheses around psta->list
#197: FILE: ./core/rtw_sta_mgt.c:197:
+		list_del_init(&(psta->list));

CHECK: Unnecessary parentheses around pstapriv->sta_hash_lock
#210: FILE: ./core/rtw_sta_mgt.c:210:
+			spin_unlock_bh(&(pstapriv->sta_hash_lock));

CHECK: Unnecessary parentheses around pstapriv->sta_hash[index]
#214: FILE: ./core/rtw_sta_mgt.c:214:
+		phash_list = &(pstapriv->sta_hash[index]);

CHECK: line length of 137 exceeds 100 columns
#226: FILE: ./core/rtw_sta_mgt.c:226:
+/*  In this case, this packet will be dropped by recv_decache function if we use the 0x00 as the default value for tid_rxseq variable. */

CHECK: Avoid CamelCase: <UndecoratedSmoothedCCK>
#255: FILE: ./core/rtw_sta_mgt.c:255:
+		psta->rssi_stat.UndecoratedSmoothedCCK = (-1);

CHECK: Unnecessary parentheses around pstapriv->sta_hash_lock
#259: FILE: ./core/rtw_sta_mgt.c:259:
+		spin_unlock_bh(&(pstapriv->sta_hash_lock));

CHECK: Unnecessary parentheses around pstaxmitpriv->vo_q.tx_pending
#302: FILE: ./core/rtw_sta_mgt.c:302:
+	list_del_init(&(pstaxmitpriv->vo_q.tx_pending));

CHECK: Unnecessary parentheses around pstaxmitpriv->vi_q.tx_pending
#311: FILE: ./core/rtw_sta_mgt.c:311:
+	list_del_init(&(pstaxmitpriv->vi_q.tx_pending));

CHECK: spaces preferred around that '+' (ctx:VxV)
#312: FILE: ./core/rtw_sta_mgt.c:312:
+	phwxmit = pxmitpriv->hwxmits+1;
 	                            ^

CHECK: Unnecessary parentheses around pstaxmitpriv->be_q.tx_pending
#320: FILE: ./core/rtw_sta_mgt.c:320:
+	list_del_init(&(pstaxmitpriv->be_q.tx_pending));

CHECK: spaces preferred around that '+' (ctx:VxV)
#321: FILE: ./core/rtw_sta_mgt.c:321:
+	phwxmit = pxmitpriv->hwxmits+2;
 	                            ^

CHECK: Unnecessary parentheses around pstaxmitpriv->bk_q.tx_pending
#329: FILE: ./core/rtw_sta_mgt.c:329:
+	list_del_init(&(pstaxmitpriv->bk_q.tx_pending));

CHECK: spaces preferred around that '+' (ctx:VxV)
#330: FILE: ./core/rtw_sta_mgt.c:330:
+	phwxmit = pxmitpriv->hwxmits+3;
 	                            ^

CHECK: Unnecessary parentheses around prframe->u.hdr.list
#371: FILE: ./core/rtw_sta_mgt.c:371:
+			list_del_init(&(prframe->u.hdr.list));

WARNING: Block comments use * on subsequent lines
#386: FILE: ./core/rtw_sta_mgt.c:386:
+/*
+	spin_lock_bh(&pstapriv->asoc_list_lock);

CHECK: Unnecessary parentheses around 'psta->aid > 0'
#412: FILE: ./core/rtw_sta_mgt.c:412:
+	if ((psta->aid > 0) && (pstapriv->sta_aid[psta->aid - 1] == psta)) {

CHECK: Unnecessary parentheses around 'pstapriv->sta_aid[psta->aid - 1] == psta'
#412: FILE: ./core/rtw_sta_mgt.c:412:
+	if ((psta->aid > 0) && (pstapriv->sta_aid[psta->aid - 1] == psta)) {

CHECK: Unnecessary parentheses around pstapriv->sta_hash[index]
#443: FILE: ./core/rtw_sta_mgt.c:443:
+		phead = &(pstapriv->sta_hash[index]);

CHECK: Unnecessary parentheses around pstapriv->sta_hash[index]
#481: FILE: ./core/rtw_sta_mgt.c:481:
+	phead = &(pstapriv->sta_hash[index]);

CHECK: Unnecessary parentheses around pacl_node_q->lock
#533: FILE: ./core/rtw_sta_mgt.c:533:
+	spin_lock_bh(&(pacl_node_q->lock));

CHECK: Using comparison to true is error prone
#539: FILE: ./core/rtw_sta_mgt.c:539:
+			if (paclnode->valid == true) {

CHECK: Unnecessary parentheses around pacl_node_q->lock
#544: FILE: ./core/rtw_sta_mgt.c:544:
+	spin_unlock_bh(&(pacl_node_q->lock));

total: 0 errors, 2 warnings, 29 checks, 555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_sta_mgt.c has style problems, please review.
--------------------
./core/rtw_sta_mgt.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_sta_mgt.o has style problems, please review.
----------------------
./core/rtw_wlan_util.c
----------------------
WARNING: braces {} are not necessary for any arm of this statement
#66: FILE: ./core/rtw_wlan_util.c:66:
+		if (psta->bw_mode == CHANNEL_WIDTH_20) {
[...]
+		} else {
[...]

CHECK: Unnecessary parentheses around 'val != 0xff'
#122: FILE: ./core/rtw_wlan_util.c:122:
+		if ((val != 0xff) && (val != 0xfe))

CHECK: Unnecessary parentheses around 'val != 0xfe'
#122: FILE: ./core/rtw_wlan_util.c:122:
+		if ((val != 0xff) && (val != 0xfe))

CHECK: spaces preferred around that '&' (ctx:VxV)
#173: FILE: ./core/rtw_wlan_util.c:173:
+	u8 mcs_rate_1r = (u8)(mask&0xff);
 	                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#174: FILE: ./core/rtw_wlan_util.c:174:
+	u8 mcs_rate_2r = (u8)((mask>>8)&0xff);
 	                           ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#174: FILE: ./core/rtw_wlan_util.c:174:
+	u8 mcs_rate_2r = (u8)((mask>>8)&0xff);
 	                               ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#175: FILE: ./core/rtw_wlan_util.c:175:
+	u8 mcs_rate_3r = (u8)((mask>>16)&0xff);
 	                           ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#175: FILE: ./core/rtw_wlan_util.c:175:
+	u8 mcs_rate_3r = (u8)((mask>>16)&0xff);
 	                                ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#176: FILE: ./core/rtw_wlan_util.c:176:
+	u8 mcs_rate_4r = (u8)((mask>>24)&0xff);
 	                           ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#176: FILE: ./core/rtw_wlan_util.c:176:
+	u8 mcs_rate_4r = (u8)((mask>>24)&0xff);
 	                                ^

CHECK: Avoid CamelCase: <mBratesOS>
#184: FILE: ./core/rtw_wlan_util.c:184:
+void UpdateBrateTbl(struct adapter *Adapter, u8 *mBratesOS)

CHECK: Avoid CamelCase: <bSaveFlag>
#226: FILE: ./core/rtw_wlan_util.c:226:
+	u8 bSaveFlag = true;

CHECK: Using comparison to true is error prone
#240: FILE: ./core/rtw_wlan_util.c:240:
+	if (enable == true)

CHECK: spaces preferred around that '+' (ctx:VxV)
#270: FILE: ./core/rtw_wlan_util.c:270:
+		cnt += scnprintf(msg+cnt, len-cnt, "switch to ch %3u", ch);
 		                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#270: FILE: ./core/rtw_wlan_util.c:270:
+		cnt += scnprintf(msg+cnt, len-cnt, "switch to ch %3u", ch);
 		                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#275: FILE: ./core/rtw_wlan_util.c:275:
+			cnt += scnprintf(msg+cnt, len-cnt, " [%s:", ADPT_ARG(iface));
 			                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#275: FILE: ./core/rtw_wlan_util.c:275:
+			cnt += scnprintf(msg+cnt, len-cnt, " [%s:", ADPT_ARG(iface));
 			                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#277: FILE: ./core/rtw_wlan_util.c:277:
+				cnt += scnprintf(msg+cnt, len-cnt, "C");
 				                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#277: FILE: ./core/rtw_wlan_util.c:277:
+				cnt += scnprintf(msg+cnt, len-cnt, "C");
 				                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#279: FILE: ./core/rtw_wlan_util.c:279:
+				cnt += scnprintf(msg+cnt, len-cnt, "_");
 				                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#279: FILE: ./core/rtw_wlan_util.c:279:
+				cnt += scnprintf(msg+cnt, len-cnt, "_");
 				                             ^

CHECK: line length of 117 exceeds 100 columns
#280: FILE: ./core/rtw_wlan_util.c:280:
+			if (iface->wdinfo.listen_channel == ch && !rtw_p2p_chk_state(&iface->wdinfo, P2P_STATE_NONE))

CHECK: spaces preferred around that '+' (ctx:VxV)
#281: FILE: ./core/rtw_wlan_util.c:281:
+				cnt += scnprintf(msg+cnt, len-cnt, "L");
 				                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#281: FILE: ./core/rtw_wlan_util.c:281:
+				cnt += scnprintf(msg+cnt, len-cnt, "L");
 				                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#283: FILE: ./core/rtw_wlan_util.c:283:
+				cnt += scnprintf(msg+cnt, len-cnt, "_");
 				                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#283: FILE: ./core/rtw_wlan_util.c:283:
+				cnt += scnprintf(msg+cnt, len-cnt, "_");
 				                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#284: FILE: ./core/rtw_wlan_util.c:284:
+			cnt += scnprintf(msg+cnt, len-cnt, "]");
 			                    ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#284: FILE: ./core/rtw_wlan_util.c:284:
+			cnt += scnprintf(msg+cnt, len-cnt, "]");
 			                             ^

CHECK: line length of 125 exceeds 100 columns
#338: FILE: ./core/rtw_wlan_util.c:338:
+void set_channel_bwmode(struct adapter *padapter, unsigned char channel, unsigned char channel_offset, unsigned short bwmode)

CHECK: Please don't use multiple blank lines
#344: FILE: ./core/rtw_wlan_util.c:344:
+
+

CHECK: line length of 114 exceeds 100 columns
#354: FILE: ./core/rtw_wlan_util.c:354:
+	rtw_hal_set_chnl_bw(padapter, center_ch, bwmode, channel_offset, chnl_offset80); /*  set center channel */

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#382: FILE: ./core/rtw_wlan_util.c:382:
+	pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 109 exceeds 100 columns
#384: FILE: ./core/rtw_wlan_util.c:384:
+	if ((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE))

CHECK: spaces preferred around that '&' (ctx:VxV)
#384: FILE: ./core/rtw_wlan_util.c:384:
+	if ((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && ((pmlmeinfo->state&0x03) == WIFI_FW_STATION_STATE))
 	                                                                    ^

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#393: FILE: ./core/rtw_wlan_util.c:393:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 107 exceeds 100 columns
#395: FILE: ./core/rtw_wlan_util.c:395:
+	if ((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))

CHECK: spaces preferred around that '&' (ctx:VxV)
#395: FILE: ./core/rtw_wlan_util.c:395:
+	if ((pmlmeinfo->state & WIFI_FW_ASSOC_SUCCESS) && ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))
 	                                                                    ^

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#405: FILE: ./core/rtw_wlan_util.c:405:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '*' (ctx:VxV)
#434: FILE: ./core/rtw_wlan_util.c:434:
+	memset(dvobj->cam_cache, 0, sizeof(struct cam_entry_cache)*TOTAL_CAM_ENTRY);
 	                                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#456: FILE: ./core/rtw_wlan_util.c:456:
+			val = (key[i] | (key[i+1] << 8) | (key[i+2] << 16) | (key[i+3] << 24));
 			                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#456: FILE: ./core/rtw_wlan_util.c:456:
+			val = (key[i] | (key[i+1] << 8) | (key[i+2] << 16) | (key[i+3] << 24));
 			                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#456: FILE: ./core/rtw_wlan_util.c:456:
+			val = (key[i] | (key[i+1] << 8) | (key[i+2] << 16) | (key[i+3] << 24));
 			                                                           ^

CHECK: line length of 132 exceeds 100 columns
#470: FILE: ./core/rtw_wlan_util.c:470:
+	unsigned char null_key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

CHECK: Unnecessary parentheses around dvobj->cam_cache[id]
#508: FILE: ./core/rtw_wlan_util.c:508:
+	memset(&(dvobj->cam_cache[id]), 0, sizeof(struct cam_entry_cache));

CHECK: spaces preferred around that '&' (ctx:VxV)
#525: FILE: ./core/rtw_wlan_util.c:525:
+	ret = (dvobj->cam_cache[cam_id].ctrl&BIT6)?true:false;
 	                                    ^

CHECK: spaces required around that '?' (ctx:VxV)
#525: FILE: ./core/rtw_wlan_util.c:525:
+	ret = (dvobj->cam_cache[cam_id].ctrl&BIT6)?true:false;
 	                                          ^

CHECK: spaces required around that ':' (ctx:VxV)
#525: FILE: ./core/rtw_wlan_util.c:525:
+	ret = (dvobj->cam_cache[cam_id].ctrl&BIT6)?true:false;
 	                                               ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#540: FILE: ./core/rtw_wlan_util.c:540:
+		if (kid >= 0 && kid != (dvobj->cam_cache[i].ctrl&0x03))
 		                                                ^

CHECK: line length of 109 exceeds 100 columns
#574: FILE: ./core/rtw_wlan_util.c:574:
+	if ((((mlmeinfo->state&0x03) == WIFI_FW_AP_STATE) || ((mlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))

CHECK: spaces preferred around that '&' (ctx:VxV)
#574: FILE: ./core/rtw_wlan_util.c:574:
+	if ((((mlmeinfo->state&0x03) == WIFI_FW_AP_STATE) || ((mlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))
 	                      ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#574: FILE: ./core/rtw_wlan_util.c:574:
+	if ((((mlmeinfo->state&0x03) == WIFI_FW_AP_STATE) || ((mlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))
 	                                                                      ^

CHECK: Logical continuations should be on the previous line
#575: FILE: ./core/rtw_wlan_util.c:575:
+	if ((((mlmeinfo->state&0x03) == WIFI_FW_AP_STATE) || ((mlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE))
+		&& !sta) {

CHECK: spaces required around that '?' (ctx:VxV)
#588: FILE: ./core/rtw_wlan_util.c:588:
+		u8 *addr = sta?sta->hwaddr:NULL;
 		              ^

CHECK: spaces required around that ':' (ctx:VxV)
#588: FILE: ./core/rtw_wlan_util.c:588:
+		u8 *addr = sta?sta->hwaddr:NULL;
 		                          ^

CHECK: line length of 123 exceeds 100 columns
#592: FILE: ./core/rtw_wlan_util.c:592:
+				/* bypass STA mode group key setting before connected(ex:WEP) because bssid is not ready */

CHECK: line length of 151 exceeds 100 columns
#601: FILE: ./core/rtw_wlan_util.c:601:
+			/* Fix issue that pairwise and group key have same key id. Pairwise key first, group key can overwirte group only(ex: rekey) */

CHECK: line length of 110 exceeds 100 columns
#606: FILE: ./core/rtw_wlan_util.c:606:
+					   FUNC_ADPT_FMT " group key id:%u the same key id as pairwise key\n",

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#658: FILE: ./core/rtw_wlan_util.c:658:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#674: FILE: ./core/rtw_wlan_util.c:674:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around padapter->mlmepriv
#686: FILE: ./core/rtw_wlan_util.c:686:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#688: FILE: ./core/rtw_wlan_util.c:688:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->WMM_param
#695: FILE: ./core/rtw_wlan_util.c:695:
+	if (!memcmp(&(pmlmeinfo->WMM_param), (pIE->data + 6), sizeof(struct WMM_para_element)))

WARNING: else is not generally useful after a break or return
#697: FILE: ./core/rtw_wlan_util.c:697:
+		return false;
+	else

CHECK: Unnecessary parentheses around pmlmeinfo->WMM_param
#698: FILE: ./core/rtw_wlan_util.c:698:
+		memcpy(&(pmlmeinfo->WMM_param), (pIE->data + 6), sizeof(struct WMM_para_element));

CHECK: Avoid CamelCase: <ECWMin>
#732: FILE: ./core/rtw_wlan_util.c:732:
+	u8 ACI, ACM, AIFS, ECWMin, ECWMax, aSifsTime;

CHECK: Avoid CamelCase: <ECWMax>
#732: FILE: ./core/rtw_wlan_util.c:732:
+	u8 ACI, ACM, AIFS, ECWMin, ECWMax, aSifsTime;

CHECK: Avoid CamelCase: <aSifsTime>
#732: FILE: ./core/rtw_wlan_util.c:732:
+	u8 ACI, ACM, AIFS, ECWMin, ECWMax, aSifsTime;

CHECK: Avoid CamelCase: <acParm>
#735: FILE: ./core/rtw_wlan_util.c:735:
+	u32 acParm, i;

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#738: FILE: ./core/rtw_wlan_util.c:738:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: multiple assignments should be avoided
#777: FILE: ./core/rtw_wlan_util.c:777:
+		edca[0] = edca[1] = edca[2] = edca[3] = 0;

CHECK: line length of 117 exceeds 100 columns
#784: FILE: ./core/rtw_wlan_util.c:784:
+			AIFS = (pmlmeinfo->WMM_param.ac_param[i].ACI_AIFSN & 0x0f) * pmlmeinfo->slotTime + aSifsTime;

CHECK: spaces required around that ':' (ctx:VxV)
#795: FILE: ./core/rtw_wlan_util.c:795:
+				acm_mask |= (ACM ? BIT(1):0);
 				                         ^

CHECK: spaces required around that ':' (ctx:VxV)
#807: FILE: ./core/rtw_wlan_util.c:807:
+				acm_mask |= (ACM ? BIT(2):0);
 				                         ^

CHECK: spaces required around that ':' (ctx:VxV)
#813: FILE: ./core/rtw_wlan_util.c:813:
+				acm_mask |= (ACM ? BIT(3):0);
 				                         ^

CHECK: Avoid CamelCase: <pHT_info>
#838: FILE: ./core/rtw_wlan_util.c:838:
+	struct HT_info_element	 *pHT_info;

CHECK: Unnecessary parentheses around padapter->mlmepriv
#839: FILE: ./core/rtw_wlan_util.c:839:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#841: FILE: ./core/rtw_wlan_util.c:841:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Using comparison to false is error prone
#849: FILE: ./core/rtw_wlan_util.c:849:
+	if (phtpriv->ht_option == false)

CHECK: Unnecessary parentheses around 'new_bwmode != pmlmeext->cur_bwmode'
#887: FILE: ./core/rtw_wlan_util.c:887:
+	if ((new_bwmode != pmlmeext->cur_bwmode) || (new_ch_offset != pmlmeext->cur_ch_offset)) {

CHECK: Unnecessary parentheses around 'new_ch_offset != pmlmeext->cur_ch_offset'
#887: FILE: ./core/rtw_wlan_util.c:887:
+	if ((new_bwmode != pmlmeext->cur_bwmode) || (new_ch_offset != pmlmeext->cur_ch_offset)) {

CHECK: Using comparison to true is error prone
#899: FILE: ./core/rtw_wlan_util.c:899:
+	if (true == pmlmeinfo->bwmode_updated) {

CHECK: Unnecessary parentheses around pmlmeinfo->network
#901: FILE: ./core/rtw_wlan_util.c:901:
+		struct wlan_bssid_ex	*cur_network = &(pmlmeinfo->network);

CHECK: line length of 121 exceeds 100 columns
#904: FILE: ./core/rtw_wlan_util.c:904:
+		/* set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode); */

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#931: FILE: ./core/rtw_wlan_util.c:931:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Using comparison to false is error prone
#938: FILE: ./core/rtw_wlan_util.c:938:
+	if (phtpriv->ht_option == false)

CHECK: line length of 101 exceeds 100 columns
#953: FILE: ./core/rtw_wlan_util.c:953:
+			min_MPDU_spacing = max(pmlmeinfo->HT_caps.u.HT_cap_element.AMPDU_para & 0x1c,

CHECK: line length of 106 exceeds 100 columns
#956: FILE: ./core/rtw_wlan_util.c:956:
+			pmlmeinfo->HT_caps.u.HT_cap_element.AMPDU_para = max_AMPDU_len | min_MPDU_spacing;

CHECK: line length of 106 exceeds 100 columns
#962: FILE: ./core/rtw_wlan_util.c:962:
+		pmlmeinfo->HT_caps.u.HT_cap_element.MCS_rate[i] &= pmlmeext->default_supported_mcs_set[i];

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#994: FILE: ./core/rtw_wlan_util.c:994:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Using comparison to false is error prone
#1001: FILE: ./core/rtw_wlan_util.c:1001:
+	if (phtpriv->ht_option == false)

CHECK: Unnecessary parentheses around pmlmeinfo->HT_info
#1008: FILE: ./core/rtw_wlan_util.c:1008:
+	memcpy(&(pmlmeinfo->HT_info), pIE->data, pIE->length);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1017: FILE: ./core/rtw_wlan_util.c:1017:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around 'pmlmeinfo->HT_info_enable'
#1019: FILE: ./core/rtw_wlan_util.c:1019:
+	if ((pmlmeinfo->HT_info_enable) && (pmlmeinfo->HT_caps_enable)) {

CHECK: Unnecessary parentheses around 'pmlmeinfo->HT_caps_enable'
#1019: FILE: ./core/rtw_wlan_util.c:1019:
+	if ((pmlmeinfo->HT_info_enable) && (pmlmeinfo->HT_caps_enable)) {

CHECK: line length of 121 exceeds 100 columns
#1023: FILE: ./core/rtw_wlan_util.c:1023:
+		/* set_channel_bwmode(padapter, pmlmeext->cur_channel, pmlmeext->cur_ch_offset, pmlmeext->cur_bwmode); */

WARNING: Block comments use * on subsequent lines
#1029: FILE: ./core/rtw_wlan_util.c:1029:
+	/*
+		AMPDU_para [1:0]:Max AMPDU Len => 0:8k , 1:16k, 2:32k, 3:64k

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1044: FILE: ./core/rtw_wlan_util.c:1044:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->ERP_IE
#1050: FILE: ./core/rtw_wlan_util.c:1050:
+	memcpy(&(pmlmeinfo->ERP_IE), pIE->data, pIE->length);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1057: FILE: ./core/rtw_wlan_util.c:1057:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around 'pmlmeinfo->ERP_enable'
#1077: FILE: ./core/rtw_wlan_util.c:1077:
+		if ((pmlmeinfo->ERP_enable) && (pmlmeinfo->ERP_IE & BIT(1))) {

CHECK: Unnecessary parentheses around Adapter->mlmepriv.cur_network
#1112: FILE: ./core/rtw_wlan_util.c:1112:
+	struct wlan_network *cur_network = &(Adapter->mlmepriv.cur_network);

CHECK: line length of 165 exceeds 100 columns
#1144: FILE: ./core/rtw_wlan_util.c:1144:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) > DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->timeBcnInfoChkStart != 0'
#1144: FILE: ./core/rtw_wlan_util.c:1144:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) > DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)) {

CHECK: Avoid CamelCase: <timeBcnInfoChkStart>
#1144: FILE: ./core/rtw_wlan_util.c:1144:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) > DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)) {

CHECK: Avoid CamelCase: <NumOfBcnInfoChkFail>
#1146: FILE: ./core/rtw_wlan_util.c:1146:
+		pmlmepriv->NumOfBcnInfoChkFail = 0;

CHECK: line length of 123 exceeds 100 columns
#1162: FILE: ./core/rtw_wlan_util.c:1162:
+	p = rtw_get_ie(bssid->ies + _FIXED_IE_LENGTH_, WLAN_EID_HT_CAPABILITY, &len, bssid->ie_length - _FIXED_IE_LENGTH_);

CHECK: line length of 122 exceeds 100 columns
#1170: FILE: ./core/rtw_wlan_util.c:1170:
+	p = rtw_get_ie(bssid->ies + _FIXED_IE_LENGTH_, WLAN_EID_HT_OPERATION, &len, bssid->ie_length - _FIXED_IE_LENGTH_);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1178: FILE: ./core/rtw_wlan_util.c:1178:
+	    ((ht_info_infos_0&0x03) != (cur_network->bcn_info.ht_info_infos_0&0x03))) {
 	                     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1178: FILE: ./core/rtw_wlan_util.c:1178:
+	    ((ht_info_infos_0&0x03) != (cur_network->bcn_info.ht_info_infos_0&0x03))) {
 	                                                                     ^

CHECK: line length of 101 exceeds 100 columns
#1183: FILE: ./core/rtw_wlan_util.c:1183:
+			/* to do : need to check that whether modify related register of BB or not */

CHECK: line length of 119 exceeds 100 columns
#1189: FILE: ./core/rtw_wlan_util.c:1189:
+	p = rtw_get_ie(bssid->ies + _FIXED_IE_LENGTH_, WLAN_EID_DS_PARAMS, &len, bssid->ie_length - _FIXED_IE_LENGTH_);

CHECK: line length of 114 exceeds 100 columns
#1206: FILE: ./core/rtw_wlan_util.c:1206:
+	p = rtw_get_ie(bssid->ies + _FIXED_IE_LENGTH_, WLAN_EID_SSID, &len, bssid->ie_length - _FIXED_IE_LENGTH_);

CHECK: Alignment should match open parenthesis
#1216: FILE: ./core/rtw_wlan_util.c:1216:
+	if (memcmp(bssid->ssid.ssid, cur_network->network.ssid.ssid, 32) ||
+			bssid->ssid.ssid_length != cur_network->network.ssid.ssid_length)

CHECK: spaces preferred around that '-' (ctx:VxV)
#1246: FILE: ./core/rtw_wlan_util.c:1246:
+		pbuf = rtw_get_wpa_ie(&bssid->ies[12], &wpa_ielen, bssid->ie_length-12);
 		                                                                   ^

CHECK: Unnecessary parentheses around 'wpa_ielen > 0'
#1247: FILE: ./core/rtw_wlan_util.c:1247:
+		if (pbuf && (wpa_ielen > 0)) {

CHECK: spaces preferred around that '-' (ctx:VxV)
#1251: FILE: ./core/rtw_wlan_util.c:1251:
+			pbuf = rtw_get_wpa2_ie(&bssid->ies[12], &wpa_ielen, bssid->ie_length-12);
 			                                                                    ^

CHECK: Unnecessary parentheses around 'wpa_ielen > 0'
#1253: FILE: ./core/rtw_wlan_util.c:1253:
+			if (pbuf && (wpa_ielen > 0))

CHECK: line length of 163 exceeds 100 columns
#1277: FILE: ./core/rtw_wlan_util.c:1277:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) <= DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)

CHECK: Unnecessary parentheses around 'pmlmepriv->timeBcnInfoChkStart != 0'
#1277: FILE: ./core/rtw_wlan_util.c:1277:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) <= DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)
+		&& (pmlmepriv->NumOfBcnInfoChkFail >= DISCONNECT_BY_CHK_BCN_FAIL_THRESHOLD)) {

CHECK: Unnecessary parentheses around 'pmlmepriv->NumOfBcnInfoChkFail >= DISCONNECT_BY_CHK_BCN_FAIL_THRESHOLD'
#1277: FILE: ./core/rtw_wlan_util.c:1277:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) <= DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)
+		&& (pmlmepriv->NumOfBcnInfoChkFail >= DISCONNECT_BY_CHK_BCN_FAIL_THRESHOLD)) {

CHECK: Logical continuations should be on the previous line
#1278: FILE: ./core/rtw_wlan_util.c:1278:
+	if ((pmlmepriv->timeBcnInfoChkStart != 0) && (jiffies_to_msecs(jiffies - pmlmepriv->timeBcnInfoChkStart) <= DISCONNECT_BY_CHK_BCN_FAIL_OBSERV_PERIOD_IN_MS)
+		&& (pmlmepriv->NumOfBcnInfoChkFail >= DISCONNECT_BY_CHK_BCN_FAIL_THRESHOLD)) {

CHECK: line length of 104 exceeds 100 columns
#1296: FILE: ./core/rtw_wlan_util.c:1296:
+		pIE = (struct ndis_80211_var_ie *)(pframe + (_BEACON_IE_OFFSET_ + WLAN_HDR_A3_LEN) + i);

CHECK: line length of 105 exceeds 100 columns
#1301: FILE: ./core/rtw_wlan_util.c:1301:
+			if (!memcmp(pIE->data, WMM_PARA_OUI, 6) && pIE->length == WLAN_WMM_LEN)	/* WMM */

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1330: FILE: ./core/rtw_wlan_util.c:1330:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#1331: FILE: ./core/rtw_wlan_util.c:1331:
+	struct wlan_bssid_ex		*cur_network = &(pmlmeinfo->network);

CHECK: line length of 124 exceeds 100 columns
#1339: FILE: ./core/rtw_wlan_util.c:1339:
+				if ((!memcmp(pIE->data, RTW_WPA_OUI, 4)) && (!memcmp((pIE->data + 12), WPA_TKIP_CIPHER, 4)))

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1366: FILE: ./core/rtw_wlan_util.c:1366:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <Vender>
#1407: FILE: ./core/rtw_wlan_util.c:1407:
+	u32 Vender = HT_IOT_PEER_REALTEK;

CHECK: line length of 109 exceeds 100 columns
#1442: FILE: ./core/rtw_wlan_util.c:1442:
+			if ((!memcmp(pIE->data, ARTHEROS_OUI1, 3)) || (!memcmp(pIE->data, ARTHEROS_OUI2, 3)))

WARNING: else is not generally useful after a break or return
#1458: FILE: ./core/rtw_wlan_util.c:1458:
+				return HT_IOT_PEER_AIRGO;
+			else

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1474: FILE: ./core/rtw_wlan_util.c:1474:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <turboMode_cts2self>
#1478: FILE: ./core/rtw_wlan_util.c:1478:
+		pmlmeinfo->turboMode_cts2self = 1;

CHECK: Avoid CamelCase: <turboMode_rtsen>
#1479: FILE: ./core/rtw_wlan_util.c:1479:
+		pmlmeinfo->turboMode_rtsen = 0;

CHECK: Avoid CamelCase: <updateCap>
#1501: FILE: ./core/rtw_wlan_util.c:1501:
+void update_capinfo(struct adapter *Adapter, u16 updateCap)

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1504: FILE: ./core/rtw_wlan_util.c:1504:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <ShortPreamble>
#1505: FILE: ./core/rtw_wlan_util.c:1505:
+	bool		ShortPreamble;

CHECK: Avoid CamelCase: <cShortPreamble>
#1511: FILE: ./core/rtw_wlan_util.c:1511:
+		if (updateCap & cShortPreamble) {

CHECK: line length of 111 exceeds 100 columns
#1513: FILE: ./core/rtw_wlan_util.c:1513:
+			if (pmlmeinfo->preamble_mode != PREAMBLE_SHORT) { /*  PREAMBLE_LONG or PREAMBLE_AUTO */

CHECK: line length of 102 exceeds 100 columns
#1516: FILE: ./core/rtw_wlan_util.c:1516:
+				rtw_hal_set_hwreg(Adapter, HW_VAR_ACK_PREAMBLE, (u8 *)&ShortPreamble);

CHECK: line length of 111 exceeds 100 columns
#1520: FILE: ./core/rtw_wlan_util.c:1520:
+			if (pmlmeinfo->preamble_mode != PREAMBLE_LONG) { /*  PREAMBLE_SHORT or PREAMBLE_AUTO */

CHECK: line length of 102 exceeds 100 columns
#1523: FILE: ./core/rtw_wlan_util.c:1523:
+				rtw_hal_set_hwreg(Adapter, HW_VAR_ACK_PREAMBLE, (u8 *)&ShortPreamble);

CHECK: Avoid CamelCase: <cIBSS>
#1528: FILE: ./core/rtw_wlan_util.c:1528:
+	if (updateCap & cIBSS) {

CHECK: line length of 135 exceeds 100 columns
#1536: FILE: ./core/rtw_wlan_util.c:1536:
+			if ((updateCap & cShortSlotTime) /* && (!(pMgntInfo->pHTInfo->RT2RT_HT_Mode & RT_HT_CAP_USE_LONG_PREAMBLE)) */)

CHECK: Avoid CamelCase: <cShortSlotTime>
#1536: FILE: ./core/rtw_wlan_util.c:1536:
+			if ((updateCap & cShortSlotTime) /* && (!(pMgntInfo->pHTInfo->RT2RT_HT_Mode & RT_HT_CAP_USE_LONG_PREAMBLE)) */)

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1556: FILE: ./core/rtw_wlan_util.c:1556:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#1557: FILE: ./core/rtw_wlan_util.c:1557:
+	struct wlan_bssid_ex *cur_network = &(pmlmeinfo->network);

CHECK: Unnecessary parentheses around 'pmlmeinfo->HT_info_enable'
#1560: FILE: ./core/rtw_wlan_util.c:1560:
+	if ((pmlmeinfo->HT_info_enable) && (pmlmeinfo->HT_caps_enable))

CHECK: Unnecessary parentheses around 'pmlmeinfo->HT_caps_enable'
#1560: FILE: ./core/rtw_wlan_util.c:1560:
+	if ((pmlmeinfo->HT_info_enable) && (pmlmeinfo->HT_caps_enable))

CHECK: line length of 149 exceeds 100 columns
#1576: FILE: ./core/rtw_wlan_util.c:1576:
+													/* change this value if having IOT issues. */

CHECK: Unnecessary parentheses around pmlmeext->cur_wireless_mode
#1580: FILE: ./core/rtw_wlan_util.c:1580:
+	SetHwReg8723BS(padapter, HW_VAR_WIRELESS_MODE,  (u8 *)&(pmlmeext->cur_wireless_mode));

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#1605: FILE: ./core/rtw_wlan_util.c:1605:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1606: FILE: ./core/rtw_wlan_util.c:1606:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: line length of 104 exceeds 100 columns
#1608: FILE: ./core/rtw_wlan_util.c:1608:
+	pIE = (struct ndis_80211_var_ie *)rtw_get_ie(pvar_ie, WLAN_EID_SUPP_RATES, &ie_len, var_ie_len);

CHECK: line length of 108 exceeds 100 columns
#1617: FILE: ./core/rtw_wlan_util.c:1617:
+	pIE = (struct ndis_80211_var_ie *)rtw_get_ie(pvar_ie, WLAN_EID_EXT_SUPP_RATES, &ie_len, var_ie_len);

CHECK: line length of 103 exceeds 100 columns
#1618: FILE: ./core/rtw_wlan_util.c:1618:
+	if (pIE && (ie_len <= sizeof(pmlmeinfo->FW_sta_info[cam_idx].SupportedRates) - supportRateNum))

CHECK: line length of 109 exceeds 100 columns
#1619: FILE: ./core/rtw_wlan_util.c:1619:
+		memcpy((pmlmeinfo->FW_sta_info[cam_idx].SupportedRates + supportRateNum), pIE->data, ie_len);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1632: FILE: ./core/rtw_wlan_util.c:1632:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1638: FILE: ./core/rtw_wlan_util.c:1638:
+		tid = (param>>2)&0x0f;
 		            ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1638: FILE: ./core/rtw_wlan_util.c:1638:
+		tid = (param>>2)&0x0f;
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1656: FILE: ./core/rtw_wlan_util.c:1656:
+	pmlmeext->TSFValue = le32_to_cpu(*(pbuf+1));
 	                                       ^

CHECK: Avoid CamelCase: <TSFValue>
#1656: FILE: ./core/rtw_wlan_util.c:1656:
+	pmlmeext->TSFValue = le32_to_cpu(*(pbuf+1));

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1675: FILE: ./core/rtw_wlan_util.c:1675:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1682: FILE: ./core/rtw_wlan_util.c:1682:
+	tsf = le32_to_cpu(*(pbuf+1));
 	                        ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#1688: FILE: ./core/rtw_wlan_util.c:1688:
+	delay_ms = do_div(tsf, (pmlmeinfo->bcn_interval*1024));
 	                                               ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1689: FILE: ./core/rtw_wlan_util.c:1689:
+	delay_ms = delay_ms/1000;
 	                   ^

CHECK: line length of 107 exceeds 100 columns
#1693: FILE: ./core/rtw_wlan_util.c:1693:
+		/* pmlmeext->bcn_delay_ratio[8] = (pmlmeext->bcn_delay_cnt[8] * 100) /pmlmeext->bcn_cnt; */

CHECK: line length of 121 exceeds 100 columns
#1696: FILE: ./core/rtw_wlan_util.c:1696:
+		/* pmlmeext->bcn_delay_ratio[delay_ms] = (pmlmeext->bcn_delay_cnt[delay_ms] * 100) /pmlmeext->bcn_cnt; */

WARNING: Block comments use * on subsequent lines
#1699: FILE: ./core/rtw_wlan_util.c:1699:
+/*
+

CHECK: Unnecessary parentheses around 'pmlmeext->adaptive_tsf_done == true'
#1707: FILE: ./core/rtw_wlan_util.c:1707:
+	if (pmlmeext->bcn_cnt > 100 && (pmlmeext->adaptive_tsf_done == true)) {

CHECK: Using comparison to true is error prone
#1707: FILE: ./core/rtw_wlan_util.c:1707:
+	if (pmlmeext->bcn_cnt > 100 && (pmlmeext->adaptive_tsf_done == true)) {

CHECK: line length of 110 exceeds 100 columns
#1717: FILE: ./core/rtw_wlan_util.c:1717:
+			pmlmeext->bcn_delay_ratio[i] = (pmlmeext->bcn_delay_cnt[i] * 100) / pmlmeext->bcn_cnt;

CHECK: Using comparison to false is error prone
#1755: FILE: ./core/rtw_wlan_util.c:1755:
+		if (pdvobj->macid[i] == false) {

CHECK: Using comparison to true is error prone
#1780: FILE: ./core/rtw_wlan_util.c:1780:
+		if (pdvobj->macid[psta->mac_id] == true) {

total: 0 errors, 5 warnings, 168 checks, 1786 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_wlan_util.c has style problems, please review.
----------------------
./core/rtw_wlan_util.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_wlan_util.o has style problems, please review.
-----------------
./core/rtw_xmit.c
-----------------
CHECK: line length of 107 exceeds 100 columns
#79: FILE: ./core/rtw_xmit.c:79:
+	pxmitpriv->pxmit_frame_buf = (u8 *)N_BYTE_ALIGMENT((SIZE_PTR)(pxmitpriv->pallocated_frame_buf), 4);

CHECK: No space is necessary after a cast
#81: FILE: ./core/rtw_xmit.c:81:
+	pxframe = (struct xmit_frame *) pxmitpriv->pxmit_frame_buf;

CHECK: line length of 112 exceeds 100 columns
#129: FILE: ./core/rtw_xmit.c:129:
+		res = rtw_os_xmit_resource_alloc(padapter, pxmitbuf, (MAX_XMITBUF_SZ + XMITBUF_ALIGN_SZ), true);

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#131: FILE: ./core/rtw_xmit.c:131:
+			msleep(10);

CHECK: line length of 120 exceeds 100 columns
#132: FILE: ./core/rtw_xmit.c:132:
+			res = rtw_os_xmit_resource_alloc(padapter, pxmitbuf, (MAX_XMITBUF_SZ + XMITBUF_ALIGN_SZ), true);

CHECK: multiple assignments should be avoided
#140: FILE: ./core/rtw_xmit.c:140:
+		pxmitbuf->pdata = pxmitbuf->ptail = pxmitbuf->phead;

CHECK: line length of 103 exceeds 100 columns
#166: FILE: ./core/rtw_xmit.c:166:
+	pxmitpriv->xframe_ext = (u8 *)N_BYTE_ALIGMENT((SIZE_PTR)(pxmitpriv->xframe_ext_alloc_addr), 4);

CHECK: line length of 106 exceeds 100 columns
#200: FILE: ./core/rtw_xmit.c:200:
+	pxmitpriv->pxmit_extbuf = (u8 *)N_BYTE_ALIGMENT((SIZE_PTR)(pxmitpriv->pallocated_xmit_extbuf), 4);

CHECK: line length of 114 exceeds 100 columns
#211: FILE: ./core/rtw_xmit.c:211:
+		res = rtw_os_xmit_resource_alloc(padapter, pxmitbuf, MAX_XMIT_EXTBUF_SZ + XMITBUF_ALIGN_SZ, true);

CHECK: multiple assignments should be avoided
#220: FILE: ./core/rtw_xmit.c:220:
+		pxmitbuf->pdata = pxmitbuf->ptail = pxmitbuf->phead;

CHECK: line length of 115 exceeds 100 columns
#241: FILE: ./core/rtw_xmit.c:241:
+			res = rtw_os_xmit_resource_alloc(padapter, pxmitbuf, MAX_CMDBUF_SZ+XMITBUF_ALIGN_SZ, true);

CHECK: spaces preferred around that '+' (ctx:VxV)
#241: FILE: ./core/rtw_xmit.c:241:
+			res = rtw_os_xmit_resource_alloc(padapter, pxmitbuf, MAX_CMDBUF_SZ+XMITBUF_ALIGN_SZ, true);
 			                                                                  ^

CHECK: multiple assignments should be avoided
#250: FILE: ./core/rtw_xmit.c:250:
+			pxmitbuf->pdata = pxmitbuf->ptail = pxmitbuf->phead;

CHECK: spaces preferred around that '+' (ctx:VxV)
#251: FILE: ./core/rtw_xmit.c:251:
+			pxmitbuf->alloc_sz = MAX_CMDBUF_SZ+XMITBUF_ALIGN_SZ;
 			                                  ^

CHECK: No space is necessary after a cast
#277: FILE: ./core/rtw_xmit.c:277:
+	struct xmit_frame	*pxmitframe = (struct xmit_frame *) pxmitpriv->pxmit_frame_buf;

CHECK: line length of 105 exceeds 100 columns
#292: FILE: ./core/rtw_xmit.c:292:
+		rtw_os_xmit_resource_free(padapter, pxmitbuf, (MAX_XMITBUF_SZ + XMITBUF_ALIGN_SZ), true);

CHECK: line length of 109 exceeds 100 columns
#314: FILE: ./core/rtw_xmit.c:314:
+		rtw_os_xmit_resource_free(padapter, pxmitbuf, (MAX_XMIT_EXTBUF_SZ + XMITBUF_ALIGN_SZ), true);

CHECK: line length of 108 exceeds 100 columns
#324: FILE: ./core/rtw_xmit.c:324:
+			rtw_os_xmit_resource_free(padapter, pxmitbuf, MAX_CMDBUF_SZ+XMITBUF_ALIGN_SZ, true);

CHECK: spaces preferred around that '+' (ctx:VxV)
#324: FILE: ./core/rtw_xmit.c:324:
+			rtw_os_xmit_resource_free(padapter, pxmitbuf, MAX_CMDBUF_SZ+XMITBUF_ALIGN_SZ, true);
 			                                                           ^

CHECK: line length of 108 exceeds 100 columns
#366: FILE: ./core/rtw_xmit.c:366:
+	/*  (2) If there are more than one frag in  this MSDU, only the first frag uses protection frame. */

CHECK: line length of 113 exceeds 100 columns
#383: FILE: ./core/rtw_xmit.c:383:
+			if ((pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS) && (pattrib->ampdu_en == true) &&

CHECK: Unnecessary parentheses around 'pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS'
#383: FILE: ./core/rtw_xmit.c:383:
+			if ((pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS) && (pattrib->ampdu_en == true) &&
+				(padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Unnecessary parentheses around 'pattrib->ampdu_en == true'
#383: FILE: ./core/rtw_xmit.c:383:
+			if ((pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS) && (pattrib->ampdu_en == true) &&
+				(padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.dot11PrivacyAlgrthm == _AES_'
#383: FILE: ./core/rtw_xmit.c:383:
+			if ((pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS) && (pattrib->ampdu_en == true) &&
+				(padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Alignment should match open parenthesis
#384: FILE: ./core/rtw_xmit.c:384:
+			if ((pmlmeinfo->assoc_AP_vendor == HT_IOT_PEER_ATHEROS) && (pattrib->ampdu_en == true) &&
+				(padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)) {

CHECK: Avoid CamelCase: <HTOpMode>
#401: FILE: ./core/rtw_xmit.c:401:
+				u8 HTOpMode = pmlmeinfo->HT_protection;

CHECK: Alignment should match open parenthesis
#404: FILE: ./core/rtw_xmit.c:404:
+				if ((pmlmeext->cur_bwmode && (HTOpMode == 2 || HTOpMode == 3)) ||
+					(!pmlmeext->cur_bwmode && HTOpMode == 3)) {

CHECK: Using comparison to true is error prone
#419: FILE: ./core/rtw_xmit.c:419:
+			if (pattrib->ampdu_en == true) {

CHECK: line length of 111 exceeds 100 columns
#434: FILE: ./core/rtw_xmit.c:434:
+static void update_attrib_phy_info(struct adapter *padapter, struct pkt_attrib *pattrib, struct sta_info *psta)

CHECK: line length of 104 exceeds 100 columns
#462: FILE: ./core/rtw_xmit.c:462:
+	if (padapter->driver_ampdu_spacing != 0xFF) /* driver control AMPDU Density for peer sta's rx */

CHECK: line length of 110 exceeds 100 columns
#470: FILE: ./core/rtw_xmit.c:470:
+static s32 update_attrib_sec_info(struct adapter *padapter, struct pkt_attrib *pattrib, struct sta_info *psta)

CHECK: Using comparison to true is error prone
#481: FILE: ./core/rtw_xmit.c:481:
+	if (psta->ieee8021x_blocked == true) {

CHECK: line length of 108 exceeds 100 columns
#484: FILE: ./core/rtw_xmit.c:484:
+		if ((pattrib->ether_type != 0x888e) && (check_fwstate(pmlmepriv, WIFI_MP_STATE) == false)) {

CHECK: Unnecessary parentheses around 'pattrib->ether_type != 0x888e'
#484: FILE: ./core/rtw_xmit.c:484:
+		if ((pattrib->ether_type != 0x888e) && (check_fwstate(pmlmepriv, WIFI_MP_STATE) == false)) {

CHECK: line length of 121 exceeds 100 columns
#509: FILE: ./core/rtw_xmit.c:509:
+		if (((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) && (pattrib->ether_type == 0x888e))

CHECK: Unnecessary parentheses around 'pattrib->encrypt == _WEP40_'
#509: FILE: ./core/rtw_xmit.c:509:
+		if (((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) && (pattrib->ether_type == 0x888e))

CHECK: Unnecessary parentheses around 'pattrib->encrypt == _WEP104_'
#509: FILE: ./core/rtw_xmit.c:509:
+		if (((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) && (pattrib->ether_type == 0x888e))

CHECK: Unnecessary parentheses around 'pattrib->ether_type == 0x888e'
#509: FILE: ./core/rtw_xmit.c:509:
+		if (((pattrib->encrypt == _WEP40_) || (pattrib->encrypt == _WEP104_)) && (pattrib->ether_type == 0x888e))

CHECK: Unnecessary parentheses around 'padapter->securitypriv.sw_encrypt'
#560: FILE: ./core/rtw_xmit.c:560:
+	if (pattrib->encrypt &&
+		((padapter->securitypriv.sw_encrypt) || (!psecuritypriv->hw_decrypted)))

CHECK: Unnecessary parentheses around '!psecuritypriv->hw_decrypted'
#560: FILE: ./core/rtw_xmit.c:560:
+	if (pattrib->encrypt &&
+		((padapter->securitypriv.sw_encrypt) || (!psecuritypriv->hw_decrypted)))

CHECK: Alignment should match open parenthesis
#561: FILE: ./core/rtw_xmit.c:561:
+	if (pattrib->encrypt &&
+		((padapter->securitypriv.sw_encrypt) || (!psecuritypriv->hw_decrypted)))

CHECK: Avoid CamelCase: <UserPriority>
#603: FILE: ./core/rtw_xmit.c:603:
+	s32 UserPriority = 0;

CHECK: Alignment should match open parenthesis
#639: FILE: ./core/rtw_xmit.c:639:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true) ||
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true)) {

CHECK: line length of 125 exceeds 100 columns
#653: FILE: ./core/rtw_xmit.c:653:
+		/*  The following is for DHCP and ARP packet, we use cck1M to tx these packets and let LPS awake some time */

CHECK: Unnecessary parentheses around 'tmp[21] == 68'
#663: FILE: ./core/rtw_xmit.c:663:
+				if (((tmp[21] == 68) && (tmp[23] == 67)) ||
+					((tmp[21] == 67) && (tmp[23] == 68))) {

CHECK: Unnecessary parentheses around 'tmp[23] == 67'
#663: FILE: ./core/rtw_xmit.c:663:
+				if (((tmp[21] == 68) && (tmp[23] == 67)) ||
+					((tmp[21] == 67) && (tmp[23] == 68))) {

CHECK: Unnecessary parentheses around 'tmp[21] == 67'
#663: FILE: ./core/rtw_xmit.c:663:
+				if (((tmp[21] == 68) && (tmp[23] == 67)) ||
+					((tmp[21] == 67) && (tmp[23] == 68))) {

CHECK: Unnecessary parentheses around 'tmp[23] == 68'
#663: FILE: ./core/rtw_xmit.c:663:
+				if (((tmp[21] == 68) && (tmp[23] == 67)) ||
+					((tmp[21] == 67) && (tmp[23] == 68))) {

CHECK: Alignment should match open parenthesis
#664: FILE: ./core/rtw_xmit.c:664:
+				if (((tmp[21] == 68) && (tmp[23] == 67)) ||
+					((tmp[21] == 67) && (tmp[23] == 68))) {

CHECK: Unnecessary parentheses around 'pattrib->ether_type == 0x888e'
#684: FILE: ./core/rtw_xmit.c:684:
+	if ((pattrib->ether_type == 0x888e) || (pattrib->dhcp_pkt == 1))

CHECK: Unnecessary parentheses around 'pattrib->dhcp_pkt == 1'
#684: FILE: ./core/rtw_xmit.c:684:
+	if ((pattrib->ether_type == 0x888e) || (pattrib->dhcp_pkt == 1))

CHECK: line length of 112 exceeds 100 columns
#703: FILE: ./core/rtw_xmit.c:703:
+		} else if ((check_fwstate(pmlmepriv, WIFI_AP_STATE) == true) && (!(psta->state & _FW_LINKED))) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#739: FILE: ./core/rtw_xmit.c:739:
+	if (check_fwstate(pmlmepriv, WIFI_AP_STATE|WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE)) {
 	                                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#739: FILE: ./core/rtw_xmit.c:739:
+	if (check_fwstate(pmlmepriv, WIFI_AP_STATE|WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE)) {
 	                                                           ^

CHECK: line length of 123 exceeds 100 columns
#774: FILE: ./core/rtw_xmit.c:774:
+			u8 null_key[16] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

CHECK: line length of 136 exceeds 100 columns
#779: FILE: ./core/rtw_xmit.c:779:
+				if (!memcmp(psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey, null_key, 16))

CHECK: Avoid CamelCase: <dot118021XGrptxmickey>
#779: FILE: ./core/rtw_xmit.c:779:
+				if (!memcmp(psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey, null_key, 16))

CHECK: line length of 137 exceeds 100 columns
#782: FILE: ./core/rtw_xmit.c:782:
+				rtw_secmicsetkey(&micdata, psecuritypriv->dot118021XGrptxmickey[psecuritypriv->dot118021XGrpKeyid].skey);

CHECK: spaces preferred around that '&' (ctx:VxV)
#790: FILE: ./core/rtw_xmit.c:790:
+			if (pframe[1]&1) {   /* ToDS == 1 */
 			             ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#792: FILE: ./core/rtw_xmit.c:792:
+				if (pframe[1]&2)  /* From Ds == 1 */
 				             ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#798: FILE: ./core/rtw_xmit.c:798:
+				if (pframe[1]&2)  /* From Ds == 1 */
 				             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#813: FILE: ./core/rtw_xmit.c:813:
+				payload = payload+pattrib->hdrlen+pattrib->iv_len;
 				                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#813: FILE: ./core/rtw_xmit.c:813:
+				payload = payload+pattrib->hdrlen+pattrib->iv_len;
 				                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#815: FILE: ./core/rtw_xmit.c:815:
+				if ((curfragnum+1) == pattrib->nr_frags) {
 				               ^

CHECK: line length of 146 exceeds 100 columns
#816: FILE: ./core/rtw_xmit.c:816:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);

CHECK: spaces preferred around that '-' (ctx:VxV)
#816: FILE: ./core/rtw_xmit.c:816:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#816: FILE: ./core/rtw_xmit.c:816:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#816: FILE: ./core/rtw_xmit.c:816:
+					length = pattrib->last_txcmdsz-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                                                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#818: FILE: ./core/rtw_xmit.c:818:
+					payload = payload+length;
 					                 ^

CHECK: line length of 144 exceeds 100 columns
#820: FILE: ./core/rtw_xmit.c:820:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);

CHECK: spaces preferred around that '-' (ctx:VxV)
#820: FILE: ./core/rtw_xmit.c:820:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#820: FILE: ./core/rtw_xmit.c:820:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#820: FILE: ./core/rtw_xmit.c:820:
+					length = pxmitpriv->frag_len-pattrib->hdrlen-pattrib->iv_len-((pattrib->bswenc) ? pattrib->icv_len : 0);
 					                                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#822: FILE: ./core/rtw_xmit.c:822:
+					payload = payload+length+pattrib->icv_len;
 					                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#822: FILE: ./core/rtw_xmit.c:822:
+					payload = payload+length+pattrib->icv_len;
 					                        ^

CHECK: Avoid CamelCase: <SetMData>
#912: FILE: ./core/rtw_xmit.c:912:
+			SetMData(fctrl);

CHECK: Using comparison to true is error prone
#957: FILE: ./core/rtw_xmit.c:957:
+				if (pattrib->ampdu_en == true) {

CHECK: line length of 101 exceeds 100 columns
#960: FILE: ./core/rtw_xmit.c:960:
+					tx_seq = psta->BA_starting_seqctrl[pattrib->priority & 0x0f];

CHECK: line length of 101 exceeds 100 columns
#966: FILE: ./core/rtw_xmit.c:966:
+						psta->BA_starting_seqctrl[pattrib->priority & 0x0f] =

CHECK: line length of 101 exceeds 100 columns
#971: FILE: ./core/rtw_xmit.c:971:
+						psta->BA_starting_seqctrl[pattrib->priority & 0x0f] =

CHECK: Alignment should match open parenthesis
#991: FILE: ./core/rtw_xmit.c:991:
+	return ((!list_empty(&pxmitpriv->be_pending.queue)) ||
+			 (!list_empty(&pxmitpriv->bk_pending.queue)) ||

CHECK: line length of 104 exceeds 100 columns
#1023: FILE: ./core/rtw_xmit.c:1023:
+s32 rtw_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe)

CHECK: Avoid CamelCase: <SetMFrag>
#1069: FILE: ./core/rtw_xmit.c:1069:
+		SetMFrag(mem_start);

CHECK: Unnecessary parentheses around 'pattrib->icv_len > 0'
#1089: FILE: ./core/rtw_xmit.c:1089:
+		if ((pattrib->icv_len > 0) && (pattrib->bswenc))

CHECK: Unnecessary parentheses around 'pattrib->bswenc'
#1089: FILE: ./core/rtw_xmit.c:1089:
+		if ((pattrib->icv_len > 0) && (pattrib->bswenc))

CHECK: Unnecessary parentheses around 'pattrib->icv_len > 0'
#1101: FILE: ./core/rtw_xmit.c:1101:
+		if ((pattrib->icv_len > 0) && (pattrib->bswenc)) {

CHECK: Unnecessary parentheses around 'pattrib->bswenc'
#1101: FILE: ./core/rtw_xmit.c:1101:
+		if ((pattrib->icv_len > 0) && (pattrib->bswenc)) {

CHECK: line length of 123 exceeds 100 columns
#1111: FILE: ./core/rtw_xmit.c:1111:
+			pattrib->last_txcmdsz = pattrib->hdrlen + pattrib->iv_len + ((pattrib->nr_frags == 1) ? llc_sz:0) +

CHECK: spaces required around that ':' (ctx:VxV)
#1111: FILE: ./core/rtw_xmit.c:1111:
+			pattrib->last_txcmdsz = pattrib->hdrlen + pattrib->iv_len + ((pattrib->nr_frags == 1) ? llc_sz:0) +
 			                                                                                              ^

CHECK: Avoid CamelCase: <ClearMFrag>
#1114: FILE: ./core/rtw_xmit.c:1114:
+			ClearMFrag(mem_start);

CHECK: Using comparison to false is error prone
#1132: FILE: ./core/rtw_xmit.c:1132:
+	if (bmcst == false)

CHECK: line length of 109 exceeds 100 columns
#1142: FILE: ./core/rtw_xmit.c:1142:
+s32 rtw_mgmt_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe)

CHECK: multiple assignments should be avoided
#1158: FILE: ./core/rtw_xmit.c:1158:
+	mem_start = pframe = (u8 *)(pxmitframe->buf_addr) + TXDESC_OFFSET;

CHECK: spaces preferred around that '+' (ctx:VxV)
#1161: FILE: ./core/rtw_xmit.c:1161:
+	ori_len = BIP_AAD_SIZE+pattrib->pktlen;
 	                      ^

CHECK: multiple assignments should be avoided
#1162: FILE: ./core/rtw_xmit.c:1162:
+	tmp_buf = BIP_AAD = rtw_zmalloc(ori_len);

CHECK: line length of 103 exceeds 100 columns
#1186: FILE: ./core/rtw_xmit.c:1186:
+		if (GetFrameSubType(pframe) != WIFI_DEAUTH && GetFrameSubType(pframe) != WIFI_DISASSOC)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1212: FILE: ./core/rtw_xmit.c:1212:
+		memcpy(BIP_AAD+2, pwlanhdr->addr1, 18);
 		              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1214: FILE: ./core/rtw_xmit.c:1214:
+		memcpy(BIP_AAD+BIP_AAD_SIZE, MGMT_body, frame_body_len);
 		              ^

CHECK: line length of 113 exceeds 100 columns
#1216: FILE: ./core/rtw_xmit.c:1216:
+		if (omac1_aes_128(padapter->securitypriv.dot11wBIPKey[padapter->securitypriv.dot11wBIPKeyid].skey

CHECK: spaces preferred around that '+' (ctx:VxV)
#1217: FILE: ./core/rtw_xmit.c:1217:
+			, BIP_AAD, BIP_AAD_SIZE+frame_body_len, mic))
 			                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1221: FILE: ./core/rtw_xmit.c:1221:
+		memcpy(pframe-8, mic, 8);
 		             ^

CHECK: Alignment should match open parenthesis
#1225: FILE: ./core/rtw_xmit.c:1225:
+		if (subtype == WIFI_DEAUTH || subtype == WIFI_DISASSOC ||
+			subtype == WIFI_REASSOCREQ || subtype == WIFI_ACTION) {

CHECK: Alignment should match open parenthesis
#1239: FILE: ./core/rtw_xmit.c:1239:
+			if (subtype == WIFI_ACTION &&
+			(pframe[WLAN_HDR_A3_LEN] == RTW_WLAN_CATEGORY_PUBLIC ||

CHECK: line length of 110 exceeds 100 columns
#1247: FILE: ./core/rtw_xmit.c:1247:
+				memcpy(pattrib->dot118021x_UncstKey.skey, psta->dot118021x_UncstKey.skey, 16);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1270: FILE: ./core/rtw_xmit.c:1270:
+			memcpy(pframe, tmp_buf+pattrib->hdrlen, pattrib->pktlen-pattrib->hdrlen);
 			                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1270: FILE: ./core/rtw_xmit.c:1270:
+			memcpy(pframe, tmp_buf+pattrib->hdrlen, pattrib->pktlen-pattrib->hdrlen);
 			                                                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1272: FILE: ./core/rtw_xmit.c:1272:
+			pframe += pattrib->pktlen-pattrib->hdrlen;
 			                         ^

CHECK: Unnecessary parentheses around 'pattrib->icv_len > 0'
#1275: FILE: ./core/rtw_xmit.c:1275:
+			if ((pattrib->icv_len > 0) && (pattrib->bswenc)) {

CHECK: Unnecessary parentheses around 'pattrib->bswenc'
#1275: FILE: ./core/rtw_xmit.c:1275:
+			if ((pattrib->icv_len > 0) && (pattrib->bswenc)) {

CHECK: spaces preferred around that '&' (ctx:VxV)
#1378: FILE: ./core/rtw_xmit.c:1378:
+	if ((pxmitframe->frame_tag&0x0f) == DATA_FRAMETAG) {
 	                          ^

CHECK: Alignment should match open parenthesis
#1399: FILE: ./core/rtw_xmit.c:1399:
+static struct xmit_buf *__rtw_alloc_cmd_xmitbuf(struct xmit_priv *pxmitpriv,
+		enum cmdbuf_type buf_type)

CHECK: multiple assignments should be avoided
#1408: FILE: ./core/rtw_xmit.c:1408:
+		pxmitbuf->pdata = pxmitbuf->ptail = pxmitbuf->phead;

CHECK: Alignment should match open parenthesis
#1420: FILE: ./core/rtw_xmit.c:1420:
+struct xmit_frame *__rtw_alloc_cmdxmitframe(struct xmit_priv *pxmitpriv,
+		enum cmdbuf_type buf_type)

WARNING: kfree(NULL) is safe and this check is probably not required
#1702: FILE: ./core/rtw_xmit.c:1702:
+	if (pxmitframe->alloc_addr) {
+		kfree(pxmitframe->alloc_addr);

WARNING: braces {} are not necessary for any arm of this statement
#1706: FILE: ./core/rtw_xmit.c:1706:
+	if (pxmitframe->ext_tag == 0)
[...]
+	else if (pxmitframe->ext_tag == 1)
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#1710: FILE: ./core/rtw_xmit.c:1710:
+	else {

CHECK: line length of 108 exceeds 100 columns
#1757: FILE: ./core/rtw_xmit.c:1757:
+struct tx_servq *rtw_get_sta_pending(struct adapter *padapter, struct sta_info *psta, signed int up, u8 *ac)

CHECK: braces {} should be used on all arms of this statement
#1993: FILE: ./core/rtw_xmit.c:1993:
+	if (registry->hiq_filter == RTW_HIQ_FILTER_ALLOW_SPECIAL) {
[...]
+	} else if (registry->hiq_filter == RTW_HIQ_FILTER_ALLOW_ALL)
[...]
+	else if (registry->hiq_filter == RTW_HIQ_FILTER_DENY_ALL) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#2005: FILE: ./core/rtw_xmit.c:2005:
+	} else

CHECK: line length of 102 exceeds 100 columns
#2011: FILE: ./core/rtw_xmit.c:2011:
+signed int xmitframe_enqueue_for_sleeping_sta(struct adapter *padapter, struct xmit_frame *pxmitframe)

CHECK: spaces preferred around that '&' (ctx:VxV)
#2073: FILE: ./core/rtw_xmit.c:2073:
+	if (psta->state&WIFI_SLEEP_STATE) {
 	               ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2086: FILE: ./core/rtw_xmit.c:2086:
+				wmmps_ac = psta->uapsd_bk&BIT(0);
 				                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2090: FILE: ./core/rtw_xmit.c:2090:
+				wmmps_ac = psta->uapsd_vi&BIT(0);
 				                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2094: FILE: ./core/rtw_xmit.c:2094:
+				wmmps_ac = psta->uapsd_vo&BIT(0);
 				                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2099: FILE: ./core/rtw_xmit.c:2099:
+				wmmps_ac = psta->uapsd_be&BIT(0);
 				                         ^

CHECK: line length of 111 exceeds 100 columns
#2106: FILE: ./core/rtw_xmit.c:2106:
+			if (((psta->has_legacy_ac) && (!wmmps_ac)) || ((!psta->has_legacy_ac) && (wmmps_ac))) {

CHECK: Unnecessary parentheses around 'psta->has_legacy_ac'
#2106: FILE: ./core/rtw_xmit.c:2106:
+			if (((psta->has_legacy_ac) && (!wmmps_ac)) || ((!psta->has_legacy_ac) && (wmmps_ac))) {

CHECK: Unnecessary parentheses around '!wmmps_ac'
#2106: FILE: ./core/rtw_xmit.c:2106:
+			if (((psta->has_legacy_ac) && (!wmmps_ac)) || ((!psta->has_legacy_ac) && (wmmps_ac))) {

CHECK: Unnecessary parentheses around '!psta->has_legacy_ac'
#2106: FILE: ./core/rtw_xmit.c:2106:
+			if (((psta->has_legacy_ac) && (!wmmps_ac)) || ((!psta->has_legacy_ac) && (wmmps_ac))) {

CHECK: line length of 126 exceeds 100 columns
#2126: FILE: ./core/rtw_xmit.c:2126:
+static void dequeue_xmitframes_to_sleeping_queue(struct adapter *padapter, struct sta_info *psta, struct __queue *pframequeue)

CHECK: Using comparison to true is error prone
#2146: FILE: ./core/rtw_xmit.c:2146:
+		if (true == ret) {

CHECK: line length of 109 exceeds 100 columns
#2147: FILE: ./core/rtw_xmit.c:2147:
+			ptxservq = rtw_get_sta_pending(padapter, psta, pattrib->priority, (u8 *)(&ac_index));

CHECK: spaces preferred around that '&' (ctx:VxV)
#2217: FILE: ./core/rtw_xmit.c:2217:
+			wmmps_ac = psta->uapsd_bk&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2221: FILE: ./core/rtw_xmit.c:2221:
+			wmmps_ac = psta->uapsd_vi&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2225: FILE: ./core/rtw_xmit.c:2225:
+			wmmps_ac = psta->uapsd_vo&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2230: FILE: ./core/rtw_xmit.c:2230:
+			wmmps_ac = psta->uapsd_be&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2262: FILE: ./core/rtw_xmit.c:2262:
+		if (psta->state&WIFI_SLEEP_STATE)
 		               ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2277: FILE: ./core/rtw_xmit.c:2277:
+	if ((pstapriv->sta_dz_bitmap&0xfffe) == 0x0) { /* no any sta in ps mode */
 	                            ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2330: FILE: ./core/rtw_xmit.c:2330:
+			wmmps_ac = psta->uapsd_bk&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2334: FILE: ./core/rtw_xmit.c:2334:
+			wmmps_ac = psta->uapsd_vi&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2338: FILE: ./core/rtw_xmit.c:2338:
+			wmmps_ac = psta->uapsd_vo&BIT(1);
 			                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2343: FILE: ./core/rtw_xmit.c:2343:
+			wmmps_ac = psta->uapsd_be&BIT(1);
 			                         ^

CHECK: Unnecessary parentheses around 'psta->sleepq_ac_len == 0'
#2366: FILE: ./core/rtw_xmit.c:2366:
+		if ((psta->sleepq_ac_len == 0) && (!psta->has_legacy_ac) && (wmmps_ac)) {

CHECK: Unnecessary parentheses around '!psta->has_legacy_ac'
#2366: FILE: ./core/rtw_xmit.c:2366:
+		if ((psta->sleepq_ac_len == 0) && (!psta->has_legacy_ac) && (wmmps_ac)) {

CHECK: Unnecessary parentheses around 'type == WIFI_PROBEREQ'
#2452: FILE: ./core/rtw_xmit.c:2452:
+			if ((type == WIFI_PROBEREQ) ||
+				(type == WIFI_DATA_NULL) ||
+				(type == WIFI_QOS_DATA_NULL)) {

CHECK: Unnecessary parentheses around 'type == WIFI_DATA_NULL'
#2452: FILE: ./core/rtw_xmit.c:2452:
+			if ((type == WIFI_PROBEREQ) ||
+				(type == WIFI_DATA_NULL) ||
+				(type == WIFI_QOS_DATA_NULL)) {

CHECK: Unnecessary parentheses around 'type == WIFI_QOS_DATA_NULL'
#2452: FILE: ./core/rtw_xmit.c:2452:
+			if ((type == WIFI_PROBEREQ) ||
+				(type == WIFI_DATA_NULL) ||
+				(type == WIFI_QOS_DATA_NULL)) {

CHECK: Alignment should match open parenthesis
#2453: FILE: ./core/rtw_xmit.c:2453:
+			if ((type == WIFI_PROBEREQ) ||
+				(type == WIFI_DATA_NULL) ||

total: 0 errors, 3 warnings, 145 checks, 2562 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_xmit.c has style problems, please review.
-----------------
./core/rtw_xmit.o
-----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./core/rtw_xmit.o has style problems, please review.
-------------------
./hal/Hal8723BReg.h
-------------------
total: 0 errors, 0 warnings, 0 checks, 65 lines checked

./hal/Hal8723BReg.h has no obvious style problems and is ready for submission.
-----------------------
./hal/HalBtc8723b1Ant.c
-----------------------
CHECK: Avoid CamelCase: <GLCoexDm8723b1Ant>
#11: FILE: ./hal/HalBtc8723b1Ant.c:11:
+static struct coex_dm_8723b_1ant GLCoexDm8723b1Ant;

CHECK: Avoid CamelCase: <pCoexDm>
#12: FILE: ./hal/HalBtc8723b1Ant.c:12:
+static struct coex_dm_8723b_1ant *pCoexDm = &GLCoexDm8723b1Ant;

CHECK: Avoid CamelCase: <GLCoexSta8723b1Ant>
#13: FILE: ./hal/HalBtc8723b1Ant.c:13:
+static struct coex_sta_8723b_1ant GLCoexSta8723b1Ant;

CHECK: Avoid CamelCase: <pCoexSta>
#14: FILE: ./hal/HalBtc8723b1Ant.c:14:
+static struct coex_sta_8723b_1ant *pCoexSta = &GLCoexSta8723b1Ant;

CHECK: Lines should not end with a '('
#18: FILE: ./hal/HalBtc8723b1Ant.c:18:
+static u8 halbtc8723b1ant_BtRssiState(

CHECK: Avoid CamelCase: <halbtc8723b1ant_BtRssiState>
#18: FILE: ./hal/HalBtc8723b1Ant.c:18:
+static u8 halbtc8723b1ant_BtRssiState(

CHECK: Avoid CamelCase: <levelNum>
#19: FILE: ./hal/HalBtc8723b1Ant.c:19:
+	u8 levelNum, u8 rssiThresh, u8 rssiThresh1

CHECK: Avoid CamelCase: <rssiThresh>
#19: FILE: ./hal/HalBtc8723b1Ant.c:19:
+	u8 levelNum, u8 rssiThresh, u8 rssiThresh1

CHECK: Avoid CamelCase: <rssiThresh1>
#19: FILE: ./hal/HalBtc8723b1Ant.c:19:
+	u8 levelNum, u8 rssiThresh, u8 rssiThresh1

CHECK: Avoid CamelCase: <btRssi>
#22: FILE: ./hal/HalBtc8723b1Ant.c:22:
+	s32 btRssi = 0;

CHECK: Avoid CamelCase: <btRssiState>
#23: FILE: ./hal/HalBtc8723b1Ant.c:23:
+	u8 btRssiState = pCoexSta->preBtRssiState;

CHECK: Avoid CamelCase: <preBtRssiState>
#23: FILE: ./hal/HalBtc8723b1Ant.c:23:
+	u8 btRssiState = pCoexSta->preBtRssiState;

CHECK: Lines should not end with a '('
#28: FILE: ./hal/HalBtc8723b1Ant.c:28:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW'
#28: FILE: ./hal/HalBtc8723b1Ant.c:28:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW'
#28: FILE: ./hal/HalBtc8723b1Ant.c:28:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Lines should not end with a '('
#47: FILE: ./hal/HalBtc8723b1Ant.c:47:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW'
#47: FILE: ./hal/HalBtc8723b1Ant.c:47:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW'
#47: FILE: ./hal/HalBtc8723b1Ant.c:47:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Lines should not end with a '('
#55: FILE: ./hal/HalBtc8723b1Ant.c:55:
+		} else if (

CHECK: Lines should not end with a '('
#78: FILE: ./hal/HalBtc8723b1Ant.c:78:
+static void halbtc8723b1ant_UpdateRaMask(

CHECK: Avoid CamelCase: <halbtc8723b1ant_UpdateRaMask>
#78: FILE: ./hal/HalBtc8723b1Ant.c:78:
+static void halbtc8723b1ant_UpdateRaMask(

CHECK: Avoid CamelCase: <pBtCoexist>
#79: FILE: ./hal/HalBtc8723b1Ant.c:79:
+	struct btc_coexist *pBtCoexist, bool bForceExec, u32 disRateMask

CHECK: Avoid CamelCase: <bForceExec>
#79: FILE: ./hal/HalBtc8723b1Ant.c:79:
+	struct btc_coexist *pBtCoexist, bool bForceExec, u32 disRateMask

CHECK: Avoid CamelCase: <disRateMask>
#79: FILE: ./hal/HalBtc8723b1Ant.c:79:
+	struct btc_coexist *pBtCoexist, bool bForceExec, u32 disRateMask

CHECK: Avoid CamelCase: <curRaMask>
#82: FILE: ./hal/HalBtc8723b1Ant.c:82:
+	pCoexDm->curRaMask = disRateMask;

CHECK: Unnecessary parentheses around 'pCoexDm->preRaMask != pCoexDm->curRaMask'
#84: FILE: ./hal/HalBtc8723b1Ant.c:84:
+	if (bForceExec || (pCoexDm->preRaMask != pCoexDm->curRaMask))

CHECK: Avoid CamelCase: <preRaMask>
#84: FILE: ./hal/HalBtc8723b1Ant.c:84:
+	if (bForceExec || (pCoexDm->preRaMask != pCoexDm->curRaMask))

CHECK: Lines should not end with a '('
#85: FILE: ./hal/HalBtc8723b1Ant.c:85:
+		pBtCoexist->fBtcSet(

CHECK: Avoid CamelCase: <fBtcSet>
#85: FILE: ./hal/HalBtc8723b1Ant.c:85:
+		pBtCoexist->fBtcSet(

CHECK: Lines should not end with a '('
#93: FILE: ./hal/HalBtc8723b1Ant.c:93:
+static void halbtc8723b1ant_AutoRateFallbackRetry(

CHECK: Avoid CamelCase: <halbtc8723b1ant_AutoRateFallbackRetry>
#93: FILE: ./hal/HalBtc8723b1Ant.c:93:
+static void halbtc8723b1ant_AutoRateFallbackRetry(

CHECK: Avoid CamelCase: <bWifiUnderBMode>
#97: FILE: ./hal/HalBtc8723b1Ant.c:97:
+	bool bWifiUnderBMode = false;

CHECK: Avoid CamelCase: <curArfrType>
#99: FILE: ./hal/HalBtc8723b1Ant.c:99:
+	pCoexDm->curArfrType = type;

CHECK: Unnecessary parentheses around 'pCoexDm->preArfrType != pCoexDm->curArfrType'
#101: FILE: ./hal/HalBtc8723b1Ant.c:101:
+	if (bForceExec || (pCoexDm->preArfrType != pCoexDm->curArfrType)) {

CHECK: Avoid CamelCase: <preArfrType>
#101: FILE: ./hal/HalBtc8723b1Ant.c:101:
+	if (bForceExec || (pCoexDm->preArfrType != pCoexDm->curArfrType)) {

CHECK: Lines should not end with a '('
#104: FILE: ./hal/HalBtc8723b1Ant.c:104:
+			pBtCoexist->fBtcWrite4Byte(

CHECK: Avoid CamelCase: <fBtcWrite4Byte>
#104: FILE: ./hal/HalBtc8723b1Ant.c:104:
+			pBtCoexist->fBtcWrite4Byte(

CHECK: Avoid CamelCase: <backupArfrCnt1>
#105: FILE: ./hal/HalBtc8723b1Ant.c:105:
+				pBtCoexist, 0x430, pCoexDm->backupArfrCnt1

CHECK: Lines should not end with a '('
#107: FILE: ./hal/HalBtc8723b1Ant.c:107:
+			pBtCoexist->fBtcWrite4Byte(

CHECK: Avoid CamelCase: <backupArfrCnt2>
#108: FILE: ./hal/HalBtc8723b1Ant.c:108:
+				pBtCoexist, 0x434, pCoexDm->backupArfrCnt2

CHECK: Lines should not end with a '('
#112: FILE: ./hal/HalBtc8723b1Ant.c:112:
+			pBtCoexist->fBtcGet(

CHECK: Avoid CamelCase: <fBtcGet>
#112: FILE: ./hal/HalBtc8723b1Ant.c:112:
+			pBtCoexist->fBtcGet(

CHECK: Lines should not end with a '('
#131: FILE: ./hal/HalBtc8723b1Ant.c:131:
+static void halbtc8723b1ant_RetryLimit(

CHECK: Avoid CamelCase: <halbtc8723b1ant_RetryLimit>
#131: FILE: ./hal/HalBtc8723b1Ant.c:131:
+static void halbtc8723b1ant_RetryLimit(

CHECK: Avoid CamelCase: <curRetryLimitType>
#135: FILE: ./hal/HalBtc8723b1Ant.c:135:
+	pCoexDm->curRetryLimitType = type;

CHECK: Lines should not end with a '('
#137: FILE: ./hal/HalBtc8723b1Ant.c:137:
+	if (

CHECK: Unnecessary parentheses around 'pCoexDm->preRetryLimitType != pCoexDm->curRetryLimitType'
#137: FILE: ./hal/HalBtc8723b1Ant.c:137:
+	if (
+		bForceExec ||
+		(pCoexDm->preRetryLimitType != pCoexDm->curRetryLimitType)
+	) {

CHECK: Avoid CamelCase: <preRetryLimitType>
#139: FILE: ./hal/HalBtc8723b1Ant.c:139:
+		(pCoexDm->preRetryLimitType != pCoexDm->curRetryLimitType)

CHECK: Lines should not end with a '('
#143: FILE: ./hal/HalBtc8723b1Ant.c:143:
+			pBtCoexist->fBtcWrite2Byte(

CHECK: Avoid CamelCase: <fBtcWrite2Byte>
#143: FILE: ./hal/HalBtc8723b1Ant.c:143:
+			pBtCoexist->fBtcWrite2Byte(

CHECK: Avoid CamelCase: <backupRetryLimit>
#144: FILE: ./hal/HalBtc8723b1Ant.c:144:
+				pBtCoexist, 0x42a, pCoexDm->backupRetryLimit

CHECK: Lines should not end with a '('
#158: FILE: ./hal/HalBtc8723b1Ant.c:158:
+static void halbtc8723b1ant_AmpduMaxTime(

CHECK: Avoid CamelCase: <halbtc8723b1ant_AmpduMaxTime>
#158: FILE: ./hal/HalBtc8723b1Ant.c:158:
+static void halbtc8723b1ant_AmpduMaxTime(

CHECK: Avoid CamelCase: <curAmpduTimeType>
#162: FILE: ./hal/HalBtc8723b1Ant.c:162:
+	pCoexDm->curAmpduTimeType = type;

CHECK: Lines should not end with a '('
#164: FILE: ./hal/HalBtc8723b1Ant.c:164:
+	if (

CHECK: Unnecessary parentheses around 'pCoexDm->preAmpduTimeType != pCoexDm->curAmpduTimeType'
#164: FILE: ./hal/HalBtc8723b1Ant.c:164:
+	if (
+		bForceExec || (pCoexDm->preAmpduTimeType != pCoexDm->curAmpduTimeType)
+	) {

CHECK: Avoid CamelCase: <preAmpduTimeType>
#165: FILE: ./hal/HalBtc8723b1Ant.c:165:
+		bForceExec || (pCoexDm->preAmpduTimeType != pCoexDm->curAmpduTimeType)

CHECK: Lines should not end with a '('
#169: FILE: ./hal/HalBtc8723b1Ant.c:169:
+			pBtCoexist->fBtcWrite1Byte(

CHECK: Avoid CamelCase: <fBtcWrite1Byte>
#169: FILE: ./hal/HalBtc8723b1Ant.c:169:
+			pBtCoexist->fBtcWrite1Byte(

CHECK: Avoid CamelCase: <backupAmpduMaxTime>
#170: FILE: ./hal/HalBtc8723b1Ant.c:170:
+				pBtCoexist, 0x456, pCoexDm->backupAmpduMaxTime

CHECK: Lines should not end with a '('
#184: FILE: ./hal/HalBtc8723b1Ant.c:184:
+static void halbtc8723b1ant_LimitedTx(

CHECK: Avoid CamelCase: <halbtc8723b1ant_LimitedTx>
#184: FILE: ./hal/HalBtc8723b1Ant.c:184:
+static void halbtc8723b1ant_LimitedTx(

CHECK: Avoid CamelCase: <raMaskType>
#187: FILE: ./hal/HalBtc8723b1Ant.c:187:
+	u8 raMaskType,

CHECK: Avoid CamelCase: <arfrType>
#188: FILE: ./hal/HalBtc8723b1Ant.c:188:
+	u8 arfrType,

CHECK: Avoid CamelCase: <retryLimitType>
#189: FILE: ./hal/HalBtc8723b1Ant.c:189:
+	u8 retryLimitType,

CHECK: Avoid CamelCase: <ampduTimeType>
#190: FILE: ./hal/HalBtc8723b1Ant.c:190:
+	u8 ampduTimeType

CHECK: Lines should not end with a '('
#212: FILE: ./hal/HalBtc8723b1Ant.c:212:
+static void halbtc8723b1ant_LimitedRx(

CHECK: Avoid CamelCase: <halbtc8723b1ant_LimitedRx>
#212: FILE: ./hal/HalBtc8723b1Ant.c:212:
+static void halbtc8723b1ant_LimitedRx(

CHECK: Avoid CamelCase: <bRejApAggPkt>
#215: FILE: ./hal/HalBtc8723b1Ant.c:215:
+	bool bRejApAggPkt,

CHECK: Avoid CamelCase: <bBtCtrlAggBufSize>
#216: FILE: ./hal/HalBtc8723b1Ant.c:216:
+	bool bBtCtrlAggBufSize,

CHECK: Avoid CamelCase: <aggBufSize>
#217: FILE: ./hal/HalBtc8723b1Ant.c:217:
+	u8 aggBufSize

CHECK: Avoid CamelCase: <bRejectRxAgg>
#220: FILE: ./hal/HalBtc8723b1Ant.c:220:
+	bool bRejectRxAgg = bRejApAggPkt;

CHECK: Avoid CamelCase: <bBtCtrlRxAggSize>
#221: FILE: ./hal/HalBtc8723b1Ant.c:221:
+	bool bBtCtrlRxAggSize = bBtCtrlAggBufSize;

CHECK: Avoid CamelCase: <rxAggSize>
#222: FILE: ./hal/HalBtc8723b1Ant.c:222:
+	u8 rxAggSize = aggBufSize;

CHECK: Lines should not end with a '('
#227: FILE: ./hal/HalBtc8723b1Ant.c:227:
+	pBtCoexist->fBtcSet(

CHECK: Lines should not end with a '('
#231: FILE: ./hal/HalBtc8723b1Ant.c:231:
+	pBtCoexist->fBtcSet(

CHECK: Please don't use multiple blank lines
#239: FILE: ./hal/HalBtc8723b1Ant.c:239:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#240: FILE: ./hal/HalBtc8723b1Ant.c:240:
+
+}

CHECK: Avoid CamelCase: <halbtc8723b1ant_QueryBtInfo>
#242: FILE: ./hal/HalBtc8723b1Ant.c:242:
+static void halbtc8723b1ant_QueryBtInfo(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <H2C_Parameter>
#244: FILE: ./hal/HalBtc8723b1Ant.c:244:
+	u8 H2C_Parameter[1] = {0};

CHECK: Avoid CamelCase: <bC2hBtInfoReqSent>
#246: FILE: ./hal/HalBtc8723b1Ant.c:246:
+	pCoexSta->bC2hBtInfoReqSent = true;

CHECK: Avoid CamelCase: <fBtcFillH2c>
#250: FILE: ./hal/HalBtc8723b1Ant.c:250:
+	pBtCoexist->fBtcFillH2c(pBtCoexist, 0x61, 1, H2C_Parameter);

CHECK: Avoid CamelCase: <halbtc8723b1ant_MonitorBtCtr>
#253: FILE: ./hal/HalBtc8723b1Ant.c:253:
+static void halbtc8723b1ant_MonitorBtCtr(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <regHPTxRx>
#255: FILE: ./hal/HalBtc8723b1Ant.c:255:
+	u32 regHPTxRx, regLPTxRx, u4Tmp;

CHECK: Avoid CamelCase: <regLPTxRx>
#255: FILE: ./hal/HalBtc8723b1Ant.c:255:
+	u32 regHPTxRx, regLPTxRx, u4Tmp;

CHECK: Avoid CamelCase: <u4Tmp>
#255: FILE: ./hal/HalBtc8723b1Ant.c:255:
+	u32 regHPTxRx, regLPTxRx, u4Tmp;

CHECK: Avoid CamelCase: <regHPTx>
#256: FILE: ./hal/HalBtc8723b1Ant.c:256:
+	u32 regHPTx = 0, regHPRx = 0, regLPTx = 0, regLPRx = 0;

CHECK: Avoid CamelCase: <regHPRx>
#256: FILE: ./hal/HalBtc8723b1Ant.c:256:
+	u32 regHPTx = 0, regHPRx = 0, regLPTx = 0, regLPRx = 0;

CHECK: Avoid CamelCase: <regLPTx>
#256: FILE: ./hal/HalBtc8723b1Ant.c:256:
+	u32 regHPTx = 0, regHPRx = 0, regLPTx = 0, regLPRx = 0;

CHECK: Avoid CamelCase: <regLPRx>
#256: FILE: ./hal/HalBtc8723b1Ant.c:256:
+	u32 regHPTx = 0, regHPRx = 0, regLPTx = 0, regLPRx = 0;

CHECK: Avoid CamelCase: <NumOfBtCounterChk>
#257: FILE: ./hal/HalBtc8723b1Ant.c:257:
+	static u8 NumOfBtCounterChk;

CHECK: Avoid CamelCase: <bUnderIps>
#262: FILE: ./hal/HalBtc8723b1Ant.c:262:
+	if (pCoexSta->bUnderIps) {

CHECK: Avoid CamelCase: <highPriorityTx>
#263: FILE: ./hal/HalBtc8723b1Ant.c:263:
+		pCoexSta->highPriorityTx = 65535;

CHECK: Avoid CamelCase: <highPriorityRx>
#264: FILE: ./hal/HalBtc8723b1Ant.c:264:
+		pCoexSta->highPriorityRx = 65535;

CHECK: Avoid CamelCase: <lowPriorityTx>
#265: FILE: ./hal/HalBtc8723b1Ant.c:265:
+		pCoexSta->lowPriorityTx = 65535;

CHECK: Avoid CamelCase: <lowPriorityRx>
#266: FILE: ./hal/HalBtc8723b1Ant.c:266:
+		pCoexSta->lowPriorityRx = 65535;

CHECK: Avoid CamelCase: <fBtcRead4Byte>
#273: FILE: ./hal/HalBtc8723b1Ant.c:273:
+	u4Tmp = pBtCoexist->fBtcRead4Byte(pBtCoexist, regHPTxRx);

CHECK: Avoid CamelCase: <bMaskLWord>
#274: FILE: ./hal/HalBtc8723b1Ant.c:274:
+	regHPTx = u4Tmp & bMaskLWord;

CHECK: Avoid CamelCase: <bMaskHWord>
#275: FILE: ./hal/HalBtc8723b1Ant.c:275:
+	regHPRx = (u4Tmp & bMaskHWord) >> 16;

CHECK: Unnecessary parentheses around 'pCoexSta->lowPriorityTx >= 1050'
#286: FILE: ./hal/HalBtc8723b1Ant.c:286:
+	if ((pCoexSta->lowPriorityTx >= 1050) && (!pCoexSta->bC2hBtInquiryPage))

CHECK: Unnecessary parentheses around '!pCoexSta->bC2hBtInquiryPage'
#286: FILE: ./hal/HalBtc8723b1Ant.c:286:
+	if ((pCoexSta->lowPriorityTx >= 1050) && (!pCoexSta->bC2hBtInquiryPage))

CHECK: Avoid CamelCase: <bC2hBtInquiryPage>
#286: FILE: ./hal/HalBtc8723b1Ant.c:286:
+	if ((pCoexSta->lowPriorityTx >= 1050) && (!pCoexSta->bC2hBtInquiryPage))

CHECK: Avoid CamelCase: <popEventCnt>
#287: FILE: ./hal/HalBtc8723b1Ant.c:287:
+		pCoexSta->popEventCnt++;

CHECK: Unnecessary parentheses around 'regHPTx == 0'
#292: FILE: ./hal/HalBtc8723b1Ant.c:292:
+	if ((regHPTx == 0) && (regHPRx == 0) && (regLPTx == 0) && (regLPRx == 0)) {

CHECK: Unnecessary parentheses around 'regHPRx == 0'
#292: FILE: ./hal/HalBtc8723b1Ant.c:292:
+	if ((regHPTx == 0) && (regHPRx == 0) && (regLPTx == 0) && (regLPRx == 0)) {

CHECK: Unnecessary parentheses around 'regLPTx == 0'
#292: FILE: ./hal/HalBtc8723b1Ant.c:292:
+	if ((regHPTx == 0) && (regHPRx == 0) && (regLPTx == 0) && (regLPRx == 0)) {

CHECK: Unnecessary parentheses around 'regLPRx == 0'
#292: FILE: ./hal/HalBtc8723b1Ant.c:292:
+	if ((regHPTx == 0) && (regHPRx == 0) && (regLPTx == 0) && (regLPRx == 0)) {

CHECK: Please don't use multiple blank lines
#301: FILE: ./hal/HalBtc8723b1Ant.c:301:
+
+

CHECK: Avoid CamelCase: <halbtc8723b1ant_MonitorWiFiCtr>
#302: FILE: ./hal/HalBtc8723b1Ant.c:302:
+static void halbtc8723b1ant_MonitorWiFiCtr(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <wifiRssi>
#304: FILE: ./hal/HalBtc8723b1Ant.c:304:
+	s32	wifiRssi = 0;

CHECK: Avoid CamelCase: <bWifiBusy>
#305: FILE: ./hal/HalBtc8723b1Ant.c:305:
+	bool bWifiBusy = false, bWifiUnderBMode = false;

CHECK: Avoid CamelCase: <nCCKLockCounter>
#306: FILE: ./hal/HalBtc8723b1Ant.c:306:
+	static u8 nCCKLockCounter;

CHECK: Lines should not end with a '('
#310: FILE: ./hal/HalBtc8723b1Ant.c:310:
+	pBtCoexist->fBtcGet(

CHECK: Avoid CamelCase: <nCRCOK_CCK>
#315: FILE: ./hal/HalBtc8723b1Ant.c:315:
+		pCoexSta->nCRCOK_CCK = 0;

CHECK: Avoid CamelCase: <nCRCOK_11g>
#316: FILE: ./hal/HalBtc8723b1Ant.c:316:
+		pCoexSta->nCRCOK_11g = 0;

CHECK: Avoid CamelCase: <nCRCOK_11n>
#317: FILE: ./hal/HalBtc8723b1Ant.c:317:
+		pCoexSta->nCRCOK_11n = 0;

CHECK: Avoid CamelCase: <nCRCOK_11nAgg>
#318: FILE: ./hal/HalBtc8723b1Ant.c:318:
+		pCoexSta->nCRCOK_11nAgg = 0;

CHECK: Avoid CamelCase: <nCRCErr_CCK>
#320: FILE: ./hal/HalBtc8723b1Ant.c:320:
+		pCoexSta->nCRCErr_CCK = 0;

CHECK: Avoid CamelCase: <nCRCErr_11g>
#321: FILE: ./hal/HalBtc8723b1Ant.c:321:
+		pCoexSta->nCRCErr_11g = 0;

CHECK: Avoid CamelCase: <nCRCErr_11n>
#322: FILE: ./hal/HalBtc8723b1Ant.c:322:
+		pCoexSta->nCRCErr_11n = 0;

CHECK: Avoid CamelCase: <nCRCErr_11nAgg>
#323: FILE: ./hal/HalBtc8723b1Ant.c:323:
+		pCoexSta->nCRCErr_11nAgg = 0;

CHECK: Avoid CamelCase: <fBtcRead2Byte>
#326: FILE: ./hal/HalBtc8723b1Ant.c:326:
+		pCoexSta->nCRCOK_11g	= pBtCoexist->fBtcRead2Byte(pBtCoexist, 0xf94);

CHECK: Please don't use multiple blank lines
#336: FILE: ./hal/HalBtc8723b1Ant.c:336:
+
+

CHECK: Avoid CamelCase: <fBtcWrite1ByteBitMask>
#338: FILE: ./hal/HalBtc8723b1Ant.c:338:
+	pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0xf16, 0x1, 0x1);

CHECK: Unnecessary parentheses around 'wifiRssi >= 30'
#341: FILE: ./hal/HalBtc8723b1Ant.c:341:
+	if (bWifiBusy && (wifiRssi >= 30) && !bWifiUnderBMode) {

CHECK: Lines should not end with a '('
#342: FILE: ./hal/HalBtc8723b1Ant.c:342:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY'
#342: FILE: ./hal/HalBtc8723b1Ant.c:342:
+		if (
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY)
+		) {

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY'
#342: FILE: ./hal/HalBtc8723b1Ant.c:342:
+		if (
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY)
+		) {

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY'
#342: FILE: ./hal/HalBtc8723b1Ant.c:342:
+		if (
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY) ||
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY)
+		) {

CHECK: Avoid CamelCase: <btStatus>
#343: FILE: ./hal/HalBtc8723b1Ant.c:343:
+			(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||

CHECK: Lines should not end with a '('
#347: FILE: ./hal/HalBtc8723b1Ant.c:347:
+			if (

CHECK: Lines should not end with a '('
#348: FILE: ./hal/HalBtc8723b1Ant.c:348:
+				pCoexSta->nCRCOK_CCK > (

CHECK: Avoid CamelCase: <bPreCCKLock>
#370: FILE: ./hal/HalBtc8723b1Ant.c:370:
+	if (!pCoexSta->bPreCCKLock) {

CHECK: Blank lines aren't necessary after an open brace '{'
#371: FILE: ./hal/HalBtc8723b1Ant.c:371:
+	if (!pCoexSta->bPreCCKLock) {
+

CHECK: Avoid CamelCase: <bCCKLock>
#373: FILE: ./hal/HalBtc8723b1Ant.c:373:
+			pCoexSta->bCCKLock = true;

CHECK: Please don't use multiple blank lines
#385: FILE: ./hal/HalBtc8723b1Ant.c:385:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#386: FILE: ./hal/HalBtc8723b1Ant.c:386:
+
+}

CHECK: Avoid CamelCase: <halbtc8723b1ant_IsWifiStatusChanged>
#388: FILE: ./hal/HalBtc8723b1Ant.c:388:
+static bool halbtc8723b1ant_IsWifiStatusChanged(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bPreWifiBusy>
#390: FILE: ./hal/HalBtc8723b1Ant.c:390:
+	static bool	bPreWifiBusy, bPreUnder4way, bPreBtHsOn;

CHECK: Avoid CamelCase: <bPreUnder4way>
#390: FILE: ./hal/HalBtc8723b1Ant.c:390:
+	static bool	bPreWifiBusy, bPreUnder4way, bPreBtHsOn;

CHECK: Avoid CamelCase: <bPreBtHsOn>
#390: FILE: ./hal/HalBtc8723b1Ant.c:390:
+	static bool	bPreWifiBusy, bPreUnder4way, bPreBtHsOn;

CHECK: Avoid CamelCase: <bUnder4way>
#391: FILE: ./hal/HalBtc8723b1Ant.c:391:
+	bool bWifiBusy = false, bUnder4way = false, bBtHsOn = false;

CHECK: Avoid CamelCase: <bBtHsOn>
#391: FILE: ./hal/HalBtc8723b1Ant.c:391:
+	bool bWifiBusy = false, bUnder4way = false, bBtHsOn = false;

CHECK: Avoid CamelCase: <bWifiConnected>
#392: FILE: ./hal/HalBtc8723b1Ant.c:392:
+	bool bWifiConnected = false;

CHECK: Lines should not end with a '('
#394: FILE: ./hal/HalBtc8723b1Ant.c:394:
+	pBtCoexist->fBtcGet(

CHECK: Lines should not end with a '('
#399: FILE: ./hal/HalBtc8723b1Ant.c:399:
+	pBtCoexist->fBtcGet(

CHECK: Avoid CamelCase: <halbtc8723b1ant_UpdateBtLinkInfo>
#423: FILE: ./hal/HalBtc8723b1Ant.c:423:
+static void halbtc8723b1ant_UpdateBtLinkInfo(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <pBtLinkInfo>
#425: FILE: ./hal/HalBtc8723b1Ant.c:425:
+	struct btc_bt_link_info *pBtLinkInfo = &pBtCoexist->btLinkInfo;

CHECK: Avoid CamelCase: <btLinkInfo>
#425: FILE: ./hal/HalBtc8723b1Ant.c:425:
+	struct btc_bt_link_info *pBtLinkInfo = &pBtCoexist->btLinkInfo;

CHECK: Avoid CamelCase: <bBtLinkExist>
#430: FILE: ./hal/HalBtc8723b1Ant.c:430:
+	pBtLinkInfo->bBtLinkExist = pCoexSta->bBtLinkExist;

CHECK: Avoid CamelCase: <bScoExist>
#431: FILE: ./hal/HalBtc8723b1Ant.c:431:
+	pBtLinkInfo->bScoExist = pCoexSta->bScoExist;

CHECK: Avoid CamelCase: <bA2dpExist>
#432: FILE: ./hal/HalBtc8723b1Ant.c:432:
+	pBtLinkInfo->bA2dpExist = pCoexSta->bA2dpExist;

CHECK: Avoid CamelCase: <bPanExist>
#433: FILE: ./hal/HalBtc8723b1Ant.c:433:
+	pBtLinkInfo->bPanExist = pCoexSta->bPanExist;

CHECK: Avoid CamelCase: <bHidExist>
#434: FILE: ./hal/HalBtc8723b1Ant.c:434:
+	pBtLinkInfo->bHidExist = pCoexSta->bHidExist;

CHECK: Lines should not end with a '('
#443: FILE: ./hal/HalBtc8723b1Ant.c:443:
+	if (

CHECK: Avoid CamelCase: <bScoOnly>
#449: FILE: ./hal/HalBtc8723b1Ant.c:449:
+		pBtLinkInfo->bScoOnly = true;

CHECK: Lines should not end with a '('
#454: FILE: ./hal/HalBtc8723b1Ant.c:454:
+	if (

CHECK: Avoid CamelCase: <bA2dpOnly>
#460: FILE: ./hal/HalBtc8723b1Ant.c:460:
+		pBtLinkInfo->bA2dpOnly = true;

CHECK: Lines should not end with a '('
#465: FILE: ./hal/HalBtc8723b1Ant.c:465:
+	if (

CHECK: Avoid CamelCase: <bPanOnly>
#471: FILE: ./hal/HalBtc8723b1Ant.c:471:
+		pBtLinkInfo->bPanOnly = true;

CHECK: Lines should not end with a '('
#476: FILE: ./hal/HalBtc8723b1Ant.c:476:
+	if (

CHECK: Avoid CamelCase: <bHidOnly>
#482: FILE: ./hal/HalBtc8723b1Ant.c:482:
+		pBtLinkInfo->bHidOnly = true;

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionAlgorithm>
#487: FILE: ./hal/HalBtc8723b1Ant.c:487:
+static u8 halbtc8723b1ant_ActionAlgorithm(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <numOfDiffProfile>
#492: FILE: ./hal/HalBtc8723b1Ant.c:492:
+	u8 numOfDiffProfile = 0;

CHECK: Lines should not end with a '('
#554: FILE: ./hal/HalBtc8723b1Ant.c:554:
+			} else if (

CHECK: Lines should not end with a '('
#568: FILE: ./hal/HalBtc8723b1Ant.c:568:
+			if (

CHECK: Lines should not end with a '('
#581: FILE: ./hal/HalBtc8723b1Ant.c:581:
+			if (

CHECK: Blank lines aren't necessary before a close brace '}'
#589: FILE: ./hal/HalBtc8723b1Ant.c:589:
+
+			}

CHECK: Lines should not end with a '('
#596: FILE: ./hal/HalBtc8723b1Ant.c:596:
+static void halbtc8723b1ant_SetSwPenaltyTxRateAdaptive(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetSwPenaltyTxRateAdaptive>
#596: FILE: ./hal/HalBtc8723b1Ant.c:596:
+static void halbtc8723b1ant_SetSwPenaltyTxRateAdaptive(

CHECK: Avoid CamelCase: <bLowPenaltyRa>
#597: FILE: ./hal/HalBtc8723b1Ant.c:597:
+	struct btc_coexist *pBtCoexist, bool bLowPenaltyRa

CHECK: Lines should not end with a '('
#615: FILE: ./hal/HalBtc8723b1Ant.c:615:
+static void halbtc8723b1ant_LowPenaltyRa(

CHECK: Avoid CamelCase: <halbtc8723b1ant_LowPenaltyRa>
#615: FILE: ./hal/HalBtc8723b1Ant.c:615:
+static void halbtc8723b1ant_LowPenaltyRa(

CHECK: Avoid CamelCase: <bCurLowPenaltyRa>
#619: FILE: ./hal/HalBtc8723b1Ant.c:619:
+	pCoexDm->bCurLowPenaltyRa = bLowPenaltyRa;

CHECK: Avoid CamelCase: <bPreLowPenaltyRa>
#622: FILE: ./hal/HalBtc8723b1Ant.c:622:
+		if (pCoexDm->bPreLowPenaltyRa == pCoexDm->bCurLowPenaltyRa)

CHECK: Lines should not end with a '('
#625: FILE: ./hal/HalBtc8723b1Ant.c:625:
+	halbtc8723b1ant_SetSwPenaltyTxRateAdaptive(

CHECK: Lines should not end with a '('
#632: FILE: ./hal/HalBtc8723b1Ant.c:632:
+static void halbtc8723b1ant_SetCoexTable(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetCoexTable>
#632: FILE: ./hal/HalBtc8723b1Ant.c:632:
+static void halbtc8723b1ant_SetCoexTable(

CHECK: Lines should not end with a '('
#649: FILE: ./hal/HalBtc8723b1Ant.c:649:
+static void halbtc8723b1ant_CoexTable(

CHECK: Avoid CamelCase: <halbtc8723b1ant_CoexTable>
#649: FILE: ./hal/HalBtc8723b1Ant.c:649:
+static void halbtc8723b1ant_CoexTable(

CHECK: Avoid CamelCase: <curVal0x6c0>
#658: FILE: ./hal/HalBtc8723b1Ant.c:658:
+	pCoexDm->curVal0x6c0 = val0x6c0;

CHECK: Avoid CamelCase: <curVal0x6c4>
#659: FILE: ./hal/HalBtc8723b1Ant.c:659:
+	pCoexDm->curVal0x6c4 = val0x6c4;

CHECK: Avoid CamelCase: <curVal0x6c8>
#660: FILE: ./hal/HalBtc8723b1Ant.c:660:
+	pCoexDm->curVal0x6c8 = val0x6c8;

CHECK: Avoid CamelCase: <curVal0x6cc>
#661: FILE: ./hal/HalBtc8723b1Ant.c:661:
+	pCoexDm->curVal0x6cc = val0x6cc;

CHECK: Lines should not end with a '('
#664: FILE: ./hal/HalBtc8723b1Ant.c:664:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0'
#664: FILE: ./hal/HalBtc8723b1Ant.c:664:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+		    (pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+		    (pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+		    (pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4'
#664: FILE: ./hal/HalBtc8723b1Ant.c:664:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+		    (pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+		    (pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+		    (pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8'
#664: FILE: ./hal/HalBtc8723b1Ant.c:664:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+		    (pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+		    (pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+		    (pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc'
#664: FILE: ./hal/HalBtc8723b1Ant.c:664:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+		    (pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+		    (pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+		    (pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Avoid CamelCase: <preVal0x6c0>
#665: FILE: ./hal/HalBtc8723b1Ant.c:665:
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&

CHECK: Avoid CamelCase: <preVal0x6c4>
#666: FILE: ./hal/HalBtc8723b1Ant.c:666:
+		    (pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&

CHECK: Avoid CamelCase: <preVal0x6c8>
#667: FILE: ./hal/HalBtc8723b1Ant.c:667:
+		    (pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&

CHECK: Avoid CamelCase: <preVal0x6cc>
#668: FILE: ./hal/HalBtc8723b1Ant.c:668:
+		    (pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)

CHECK: Lines should not end with a '('
#673: FILE: ./hal/HalBtc8723b1Ant.c:673:
+	halbtc8723b1ant_SetCoexTable(

CHECK: Lines should not end with a '('
#683: FILE: ./hal/HalBtc8723b1Ant.c:683:
+static void halbtc8723b1ant_CoexTableWithType(

CHECK: Avoid CamelCase: <halbtc8723b1ant_CoexTableWithType>
#683: FILE: ./hal/HalBtc8723b1Ant.c:683:
+static void halbtc8723b1ant_CoexTableWithType(

CHECK: Avoid CamelCase: <nCoexTableType>
#687: FILE: ./hal/HalBtc8723b1Ant.c:687:
+	pCoexSta->nCoexTableType = type;

CHECK: Lines should not end with a '('
#691: FILE: ./hal/HalBtc8723b1Ant.c:691:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#696: FILE: ./hal/HalBtc8723b1Ant.c:696:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#701: FILE: ./hal/HalBtc8723b1Ant.c:701:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#706: FILE: ./hal/HalBtc8723b1Ant.c:706:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#711: FILE: ./hal/HalBtc8723b1Ant.c:711:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#716: FILE: ./hal/HalBtc8723b1Ant.c:716:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#721: FILE: ./hal/HalBtc8723b1Ant.c:721:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#726: FILE: ./hal/HalBtc8723b1Ant.c:726:
+		halbtc8723b1ant_CoexTable(

CHECK: Lines should not end with a '('
#735: FILE: ./hal/HalBtc8723b1Ant.c:735:
+static void halbtc8723b1ant_SetFwIgnoreWlanAct(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetFwIgnoreWlanAct>
#735: FILE: ./hal/HalBtc8723b1Ant.c:735:
+static void halbtc8723b1ant_SetFwIgnoreWlanAct(

CHECK: Avoid CamelCase: <bEnable>
#736: FILE: ./hal/HalBtc8723b1Ant.c:736:
+	struct btc_coexist *pBtCoexist, bool bEnable

CHECK: Lines should not end with a '('
#747: FILE: ./hal/HalBtc8723b1Ant.c:747:
+static void halbtc8723b1ant_IgnoreWlanAct(

CHECK: Avoid CamelCase: <halbtc8723b1ant_IgnoreWlanAct>
#747: FILE: ./hal/HalBtc8723b1Ant.c:747:
+static void halbtc8723b1ant_IgnoreWlanAct(

CHECK: Avoid CamelCase: <bCurIgnoreWlanAct>
#751: FILE: ./hal/HalBtc8723b1Ant.c:751:
+	pCoexDm->bCurIgnoreWlanAct = bEnable;

CHECK: Avoid CamelCase: <bPreIgnoreWlanAct>
#754: FILE: ./hal/HalBtc8723b1Ant.c:754:
+		if (pCoexDm->bPreIgnoreWlanAct == pCoexDm->bCurIgnoreWlanAct)

CHECK: Lines should not end with a '('
#762: FILE: ./hal/HalBtc8723b1Ant.c:762:
+static void halbtc8723b1ant_SetLpsRpwm(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetLpsRpwm>
#762: FILE: ./hal/HalBtc8723b1Ant.c:762:
+static void halbtc8723b1ant_SetLpsRpwm(

CHECK: Avoid CamelCase: <lpsVal>
#763: FILE: ./hal/HalBtc8723b1Ant.c:763:
+	struct btc_coexist *pBtCoexist, u8 lpsVal, u8 rpwmVal

CHECK: Avoid CamelCase: <rpwmVal>
#763: FILE: ./hal/HalBtc8723b1Ant.c:763:
+	struct btc_coexist *pBtCoexist, u8 lpsVal, u8 rpwmVal

CHECK: Lines should not end with a '('
#773: FILE: ./hal/HalBtc8723b1Ant.c:773:
+static void halbtc8723b1ant_LpsRpwm(

CHECK: Avoid CamelCase: <halbtc8723b1ant_LpsRpwm>
#773: FILE: ./hal/HalBtc8723b1Ant.c:773:
+static void halbtc8723b1ant_LpsRpwm(

CHECK: Avoid CamelCase: <curLps>
#777: FILE: ./hal/HalBtc8723b1Ant.c:777:
+	pCoexDm->curLps = lpsVal;

CHECK: Avoid CamelCase: <curRpwm>
#778: FILE: ./hal/HalBtc8723b1Ant.c:778:
+	pCoexDm->curRpwm = rpwmVal;

CHECK: Lines should not end with a '('
#781: FILE: ./hal/HalBtc8723b1Ant.c:781:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->preLps == pCoexDm->curLps'
#781: FILE: ./hal/HalBtc8723b1Ant.c:781:
+		if (
+			(pCoexDm->preLps == pCoexDm->curLps) &&
+			(pCoexDm->preRpwm == pCoexDm->curRpwm)
+		) {

CHECK: Unnecessary parentheses around 'pCoexDm->preRpwm == pCoexDm->curRpwm'
#781: FILE: ./hal/HalBtc8723b1Ant.c:781:
+		if (
+			(pCoexDm->preLps == pCoexDm->curLps) &&
+			(pCoexDm->preRpwm == pCoexDm->curRpwm)
+		) {

CHECK: Avoid CamelCase: <preLps>
#782: FILE: ./hal/HalBtc8723b1Ant.c:782:
+			(pCoexDm->preLps == pCoexDm->curLps) &&

CHECK: Avoid CamelCase: <preRpwm>
#783: FILE: ./hal/HalBtc8723b1Ant.c:783:
+			(pCoexDm->preRpwm == pCoexDm->curRpwm)

CHECK: Lines should not end with a '('
#794: FILE: ./hal/HalBtc8723b1Ant.c:794:
+static void halbtc8723b1ant_SwMechanism(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SwMechanism>
#794: FILE: ./hal/HalBtc8723b1Ant.c:794:
+static void halbtc8723b1ant_SwMechanism(

CHECK: Avoid CamelCase: <bLowPenaltyRA>
#795: FILE: ./hal/HalBtc8723b1Ant.c:795:
+	struct btc_coexist *pBtCoexist, bool bLowPenaltyRA

CHECK: Lines should not end with a '('
#801: FILE: ./hal/HalBtc8723b1Ant.c:801:
+static void halbtc8723b1ant_SetAntPath(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetAntPath>
#801: FILE: ./hal/HalBtc8723b1Ant.c:801:
+static void halbtc8723b1ant_SetAntPath(

CHECK: Avoid CamelCase: <antPosType>
#802: FILE: ./hal/HalBtc8723b1Ant.c:802:
+	struct btc_coexist *pBtCoexist, u8 antPosType, bool bInitHwCfg, bool bWifiOff

CHECK: Avoid CamelCase: <bInitHwCfg>
#802: FILE: ./hal/HalBtc8723b1Ant.c:802:
+	struct btc_coexist *pBtCoexist, u8 antPosType, bool bInitHwCfg, bool bWifiOff

CHECK: Avoid CamelCase: <bWifiOff>
#802: FILE: ./hal/HalBtc8723b1Ant.c:802:
+	struct btc_coexist *pBtCoexist, u8 antPosType, bool bInitHwCfg, bool bWifiOff

CHECK: Avoid CamelCase: <pBoardInfo>
#805: FILE: ./hal/HalBtc8723b1Ant.c:805:
+	struct btc_board_info *pBoardInfo = &pBtCoexist->boardInfo;

CHECK: Avoid CamelCase: <boardInfo>
#805: FILE: ./hal/HalBtc8723b1Ant.c:805:
+	struct btc_board_info *pBoardInfo = &pBtCoexist->boardInfo;

CHECK: Avoid CamelCase: <fwVer>
#806: FILE: ./hal/HalBtc8723b1Ant.c:806:
+	u32 fwVer = 0, u4Tmp = 0, cntBtCalChk = 0;

CHECK: Avoid CamelCase: <cntBtCalChk>
#806: FILE: ./hal/HalBtc8723b1Ant.c:806:
+	u32 fwVer = 0, u4Tmp = 0, cntBtCalChk = 0;

CHECK: Avoid CamelCase: <bPgExtSwitch>
#807: FILE: ./hal/HalBtc8723b1Ant.c:807:
+	bool bPgExtSwitch = false;

CHECK: Avoid CamelCase: <bUseExtSwitch>
#808: FILE: ./hal/HalBtc8723b1Ant.c:808:
+	bool bUseExtSwitch = false;

CHECK: Avoid CamelCase: <bIsInMpMode>
#809: FILE: ./hal/HalBtc8723b1Ant.c:809:
+	bool bIsInMpMode = false;

CHECK: Avoid CamelCase: <u1Tmp>
#810: FILE: ./hal/HalBtc8723b1Ant.c:810:
+	u8 H2C_Parameter[2] = {0}, u1Tmp = 0;

CHECK: line length of 113 exceeds 100 columns
#813: FILE: ./hal/HalBtc8723b1Ant.c:813:
+	pBtCoexist->fBtcGet(pBtCoexist, BTC_GET_U4_WIFI_FW_VER, &fwVer); /*  [31:16]=fw ver, [15:0]=fw sub ver */

CHECK: line length of 107 exceeds 100 columns
#819: FILE: ./hal/HalBtc8723b1Ant.c:819:
+		pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1, 0xfffff, 0x780); /* WiFi TRx Mask on */

CHECK: Avoid CamelCase: <fBtcSetRfReg>
#819: FILE: ./hal/HalBtc8723b1Ant.c:819:
+		pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1, 0xfffff, 0x780); /* WiFi TRx Mask on */

CHECK: line length of 101 exceeds 100 columns
#820: FILE: ./hal/HalBtc8723b1Ant.c:820:
+		pBtCoexist->fBtcSetBtReg(pBtCoexist, BTC_BT_REG_RF, 0x3c, 0x15); /* BT TRx Mask on */

CHECK: Avoid CamelCase: <fBtcSetBtReg>
#820: FILE: ./hal/HalBtc8723b1Ant.c:820:
+		pBtCoexist->fBtcSetBtReg(pBtCoexist, BTC_BT_REG_RF, 0x3c, 0x15); /* BT TRx Mask on */

CHECK: Unbalanced braces around else statement
#826: FILE: ./hal/HalBtc8723b1Ant.c:826:
+		} else /*  set grant_bt to high */

CHECK: line length of 123 exceeds 100 columns
#832: FILE: ./hal/HalBtc8723b1Ant.c:832:
+		pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x67, 0x20, 0x1); /* BT select s0/s1 is controlled by WiFi */

CHECK: Unbalanced braces around else statement
#843: FILE: ./hal/HalBtc8723b1Ant.c:843:
+		} else /*  set grant_bt to high */

CHECK: line length of 129 exceeds 100 columns
#851: FILE: ./hal/HalBtc8723b1Ant.c:851:
+			pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x67, 0x20, 0x0); /* BT select s0/s1 is controlled by BT */

CHECK: line length of 131 exceeds 100 columns
#853: FILE: ./hal/HalBtc8723b1Ant.c:853:
+			pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x67, 0x20, 0x1); /* BT select s0/s1 is controlled by WiFi */

CHECK: Avoid CamelCase: <fBtcRead1Byte>
#863: FILE: ./hal/HalBtc8723b1Ant.c:863:
+			if (pBtCoexist->fBtcRead1Byte(pBtCoexist, 0x765) != 0) {

CHECK: line length of 121 exceeds 100 columns
#896: FILE: ./hal/HalBtc8723b1Ant.c:896:
+			pBtCoexist->fBtcWrite4Byte(pBtCoexist, 0x948, 0x0); /*  fixed internal switch S1->WiFi, S0->BT */

CHECK: Avoid CamelCase: <btdmAntPos>
#898: FILE: ./hal/HalBtc8723b1Ant.c:898:
+			if (pBoardInfo->btdmAntPos == BTC_ANTENNA_AT_MAIN_PORT) {

CHECK: Please don't use multiple blank lines
#911: FILE: ./hal/HalBtc8723b1Ant.c:911:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#947: FILE: ./hal/HalBtc8723b1Ant.c:947:
+			if (pBoardInfo->btdmAntPos == BTC_ANTENNA_AT_MAIN_PORT) {
+

CHECK: Blank lines aren't necessary after an open brace '{'
#953: FILE: ./hal/HalBtc8723b1Ant.c:953:
+			} else {
+

CHECK: Please don't use multiple blank lines
#961: FILE: ./hal/HalBtc8723b1Ant.c:961:
+
+

CHECK: Lines should not end with a '('
#987: FILE: ./hal/HalBtc8723b1Ant.c:987:
+static void halbtc8723b1ant_SetFwPstdma(

CHECK: Avoid CamelCase: <halbtc8723b1ant_SetFwPstdma>
#987: FILE: ./hal/HalBtc8723b1Ant.c:987:
+static void halbtc8723b1ant_SetFwPstdma(

CHECK: Avoid CamelCase: <realByte1>
#992: FILE: ./hal/HalBtc8723b1Ant.c:992:
+	u8 realByte1 = byte1, realByte5 = byte5;

CHECK: Avoid CamelCase: <realByte5>
#992: FILE: ./hal/HalBtc8723b1Ant.c:992:
+	u8 realByte1 = byte1, realByte5 = byte5;

CHECK: Avoid CamelCase: <bApEnable>
#993: FILE: ./hal/HalBtc8723b1Ant.c:993:
+	bool bApEnable = false;

CHECK: Avoid CamelCase: <psTdmaPara>
#1013: FILE: ./hal/HalBtc8723b1Ant.c:1013:
+	pCoexDm->psTdmaPara[0] = realByte1;

CHECK: Please don't use multiple blank lines
#1022: FILE: ./hal/HalBtc8723b1Ant.c:1022:
+
+

CHECK: Lines should not end with a '('
#1023: FILE: ./hal/HalBtc8723b1Ant.c:1023:
+static void halbtc8723b1ant_PsTdma(

CHECK: Avoid CamelCase: <halbtc8723b1ant_PsTdma>
#1023: FILE: ./hal/HalBtc8723b1Ant.c:1023:
+static void halbtc8723b1ant_PsTdma(

CHECK: Avoid CamelCase: <bTurnOn>
#1024: FILE: ./hal/HalBtc8723b1Ant.c:1024:
+	struct btc_coexist *pBtCoexist, bool bForceExec, bool bTurnOn, u8 type

CHECK: Avoid CamelCase: <rssiAdjustVal>
#1029: FILE: ./hal/HalBtc8723b1Ant.c:1029:
+	u8 rssiAdjustVal = 0;

CHECK: Avoid CamelCase: <psTdmaByte4Val>
#1030: FILE: ./hal/HalBtc8723b1Ant.c:1030:
+	u8 psTdmaByte4Val = 0x50, psTdmaByte0Val = 0x51, psTdmaByte3Val =  0x10;

CHECK: Avoid CamelCase: <psTdmaByte0Val>
#1030: FILE: ./hal/HalBtc8723b1Ant.c:1030:
+	u8 psTdmaByte4Val = 0x50, psTdmaByte0Val = 0x51, psTdmaByte3Val =  0x10;

CHECK: Avoid CamelCase: <psTdmaByte3Val>
#1030: FILE: ./hal/HalBtc8723b1Ant.c:1030:
+	u8 psTdmaByte4Val = 0x50, psTdmaByte0Val = 0x51, psTdmaByte3Val =  0x10;

CHECK: Avoid CamelCase: <nWiFiDurationAdjust>
#1031: FILE: ./hal/HalBtc8723b1Ant.c:1031:
+	s8 nWiFiDurationAdjust = 0x0;

CHECK: Avoid CamelCase: <bCurPsTdmaOn>
#1034: FILE: ./hal/HalBtc8723b1Ant.c:1034:
+	pCoexDm->bCurPsTdmaOn = bTurnOn;

CHECK: Avoid CamelCase: <curPsTdma>
#1035: FILE: ./hal/HalBtc8723b1Ant.c:1035:
+	pCoexDm->curPsTdma = type;

CHECK: Lines should not end with a '('
#1040: FILE: ./hal/HalBtc8723b1Ant.c:1040:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn'
#1040: FILE: ./hal/HalBtc8723b1Ant.c:1040:
+		if (
+			(pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn) &&
+			(pCoexDm->prePsTdma == pCoexDm->curPsTdma)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->prePsTdma == pCoexDm->curPsTdma'
#1040: FILE: ./hal/HalBtc8723b1Ant.c:1040:
+		if (
+			(pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn) &&
+			(pCoexDm->prePsTdma == pCoexDm->curPsTdma)
+		)

CHECK: Avoid CamelCase: <bPrePsTdmaOn>
#1041: FILE: ./hal/HalBtc8723b1Ant.c:1041:
+			(pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn) &&

CHECK: Avoid CamelCase: <prePsTdma>
#1042: FILE: ./hal/HalBtc8723b1Ant.c:1042:
+			(pCoexDm->prePsTdma == pCoexDm->curPsTdma)

CHECK: Avoid CamelCase: <nScanAPNum>
#1047: FILE: ./hal/HalBtc8723b1Ant.c:1047:
+	if (pCoexSta->nScanAPNum <= 5)

CHECK: Avoid CamelCase: <bForceLpsOn>
#1054: FILE: ./hal/HalBtc8723b1Ant.c:1054:
+	if (!pCoexSta->bForceLpsOn) { /* only for A2DP-only case 1/2/9/11 */

CHECK: Please don't use multiple blank lines
#1060: FILE: ./hal/HalBtc8723b1Ant.c:1060:
+
+

CHECK: Avoid CamelCase: <bSlaveRole>
#1062: FILE: ./hal/HalBtc8723b1Ant.c:1062:
+		if (pBtLinkInfo->bSlaveRole)

CHECK: line length of 124 exceeds 100 columns
#1063: FILE: ./hal/HalBtc8723b1Ant.c:1063:
+			psTdmaByte4Val = psTdmaByte4Val | 0x1;  /* 0x778 = 0x1 at wifi slot (no blocking BT Low-Pri pkts) */

CHECK: Please don't use multiple blank lines
#1065: FILE: ./hal/HalBtc8723b1Ant.c:1065:
+
+

CHECK: Lines should not end with a '('
#1068: FILE: ./hal/HalBtc8723b1Ant.c:1068:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1073: FILE: ./hal/HalBtc8723b1Ant.c:1073:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1083: FILE: ./hal/HalBtc8723b1Ant.c:1083:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1093: FILE: ./hal/HalBtc8723b1Ant.c:1093:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1098: FILE: ./hal/HalBtc8723b1Ant.c:1098:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1103: FILE: ./hal/HalBtc8723b1Ant.c:1103:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1108: FILE: ./hal/HalBtc8723b1Ant.c:1108:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1116: FILE: ./hal/HalBtc8723b1Ant.c:1116:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1121: FILE: ./hal/HalBtc8723b1Ant.c:1121:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1134: FILE: ./hal/HalBtc8723b1Ant.c:1134:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1144: FILE: ./hal/HalBtc8723b1Ant.c:1144:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1149: FILE: ./hal/HalBtc8723b1Ant.c:1149:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1154: FILE: ./hal/HalBtc8723b1Ant.c:1154:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1159: FILE: ./hal/HalBtc8723b1Ant.c:1159:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1164: FILE: ./hal/HalBtc8723b1Ant.c:1164:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1169: FILE: ./hal/HalBtc8723b1Ant.c:1169:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1174: FILE: ./hal/HalBtc8723b1Ant.c:1174:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1180: FILE: ./hal/HalBtc8723b1Ant.c:1180:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1185: FILE: ./hal/HalBtc8723b1Ant.c:1185:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1190: FILE: ./hal/HalBtc8723b1Ant.c:1190:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1195: FILE: ./hal/HalBtc8723b1Ant.c:1195:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1200: FILE: ./hal/HalBtc8723b1Ant.c:1200:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1205: FILE: ./hal/HalBtc8723b1Ant.c:1205:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1210: FILE: ./hal/HalBtc8723b1Ant.c:1210:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1215: FILE: ./hal/HalBtc8723b1Ant.c:1215:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1220: FILE: ./hal/HalBtc8723b1Ant.c:1220:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1225: FILE: ./hal/HalBtc8723b1Ant.c:1225:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1230: FILE: ./hal/HalBtc8723b1Ant.c:1230:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1235: FILE: ./hal/HalBtc8723b1Ant.c:1235:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1240: FILE: ./hal/HalBtc8723b1Ant.c:1240:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1245: FILE: ./hal/HalBtc8723b1Ant.c:1245:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1250: FILE: ./hal/HalBtc8723b1Ant.c:1250:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Lines should not end with a '('
#1255: FILE: ./hal/HalBtc8723b1Ant.c:1255:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: line length of 107 exceeds 100 columns
#1259: FILE: ./hal/HalBtc8723b1Ant.c:1259:
+		case 40: /*  SoftAP only with no sta associated, BT disable , TDMA mode for power saving */

CHECK: Lines should not end with a '('
#1261: FILE: ./hal/HalBtc8723b1Ant.c:1261:
+			halbtc8723b1ant_SetFwPstdma(

CHECK: Blank lines aren't necessary after an open brace '{'
#1267: FILE: ./hal/HalBtc8723b1Ant.c:1267:
+	} else {
+

CHECK: Lines should not end with a '('
#1272: FILE: ./hal/HalBtc8723b1Ant.c:1272:
+			halbtc8723b1ant_SetAntPath(

CHECK: Lines should not end with a '('
#1279: FILE: ./hal/HalBtc8723b1Ant.c:1279:
+			halbtc8723b1ant_SetAntPath(

CHECK: Lines should not end with a '('
#1285: FILE: ./hal/HalBtc8723b1Ant.c:1285:
+			halbtc8723b1ant_SetAntPath(

CHECK: Lines should not end with a '('
#1293: FILE: ./hal/HalBtc8723b1Ant.c:1293:
+	pBtCoexist->fBtcSet(

CHECK: Avoid CamelCase: <halbtc8723b1ant_IsCommonAction>
#1302: FILE: ./hal/HalBtc8723b1Ant.c:1302:
+static bool halbtc8723b1ant_IsCommonAction(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bCommon>
#1304: FILE: ./hal/HalBtc8723b1Ant.c:1304:
+	bool bCommon = false, bWifiConnected = false, bWifiBusy = false;

CHECK: Lines should not end with a '('
#1309: FILE: ./hal/HalBtc8723b1Ant.c:1309:
+	if (

CHECK: Lines should not end with a '('
#1316: FILE: ./hal/HalBtc8723b1Ant.c:1316:
+	} else if (

CHECK: Lines should not end with a '('
#1323: FILE: ./hal/HalBtc8723b1Ant.c:1323:
+	} else if (

CHECK: Lines should not end with a '('
#1330: FILE: ./hal/HalBtc8723b1Ant.c:1330:
+	} else if (

CHECK: Lines should not end with a '('
#1337: FILE: ./hal/HalBtc8723b1Ant.c:1337:
+	} else if (

CHECK: Please don't use multiple blank lines
#1351: FILE: ./hal/HalBtc8723b1Ant.c:1351:
+
+

CHECK: Lines should not end with a '('
#1352: FILE: ./hal/HalBtc8723b1Ant.c:1352:
+static void halbtc8723b1ant_TdmaDurationAdjustForAcl(

CHECK: Avoid CamelCase: <halbtc8723b1ant_TdmaDurationAdjustForAcl>
#1352: FILE: ./hal/HalBtc8723b1Ant.c:1352:
+static void halbtc8723b1ant_TdmaDurationAdjustForAcl(

CHECK: Avoid CamelCase: <wifiStatus>
#1353: FILE: ./hal/HalBtc8723b1Ant.c:1353:
+	struct btc_coexist *pBtCoexist, u8 wifiStatus

CHECK: Avoid CamelCase: <WaitCount>
#1356: FILE: ./hal/HalBtc8723b1Ant.c:1356:
+	static s32 up, dn, m, n, WaitCount;

CHECK: Avoid CamelCase: <retryCount>
#1358: FILE: ./hal/HalBtc8723b1Ant.c:1358:
+	u8 retryCount = 0, btInfoExt;

CHECK: Avoid CamelCase: <btInfoExt>
#1358: FILE: ./hal/HalBtc8723b1Ant.c:1358:
+	u8 retryCount = 0, btInfoExt;

CHECK: Lines should not end with a '('
#1360: FILE: ./hal/HalBtc8723b1Ant.c:1360:
+	if (

CHECK: Unnecessary parentheses around 'wifiStatus == BT_8723B_1ANT_WIFI_STATUS_NON_CONNECTED_ASSO_AUTH_SCAN'
#1360: FILE: ./hal/HalBtc8723b1Ant.c:1360:
+	if (
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_NON_CONNECTED_ASSO_AUTH_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SPECIAL_PKT)
+	) {

CHECK: Unnecessary parentheses around 'wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SCAN'
#1360: FILE: ./hal/HalBtc8723b1Ant.c:1360:
+	if (
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_NON_CONNECTED_ASSO_AUTH_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SPECIAL_PKT)
+	) {

CHECK: Unnecessary parentheses around 'wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SPECIAL_PKT'
#1360: FILE: ./hal/HalBtc8723b1Ant.c:1360:
+	if (
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_NON_CONNECTED_ASSO_AUTH_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SCAN) ||
+		(wifiStatus == BT_8723B_1ANT_WIFI_STATUS_CONNECTED_SPECIAL_PKT)
+	) {

CHECK: Lines should not end with a '('
#1365: FILE: ./hal/HalBtc8723b1Ant.c:1365:
+		if (

CHECK: Avoid CamelCase: <psTdmaDuAdjType>
#1372: FILE: ./hal/HalBtc8723b1Ant.c:1372:
+			pCoexDm->psTdmaDuAdjType = 9;

CHECK: Avoid CamelCase: <bAutoTdmaAdjust>
#1384: FILE: ./hal/HalBtc8723b1Ant.c:1384:
+	if (!pCoexDm->bAutoTdmaAdjust) {

CHECK: Avoid CamelCase: <btRetryCnt>
#1398: FILE: ./hal/HalBtc8723b1Ant.c:1398:
+		retryCount = pCoexSta->btRetryCnt;

CHECK: line length of 105 exceeds 100 columns
#1414: FILE: ./hal/HalBtc8723b1Ant.c:1414:
+			if (up >= n) { /*  if 連續 n 個2秒 retry count為0, 則調寬WiFi duration */

CHECK: line length of 104 exceeds 100 columns
#1428: FILE: ./hal/HalBtc8723b1Ant.c:1428:
+			if (dn == 2) { /*  if 連續 2 個2秒 retry count< 3, 則調窄WiFi duration */

CHECK: line length of 117 exceeds 100 columns
#1434: FILE: ./hal/HalBtc8723b1Ant.c:1434:
+				if (m >= 20) /* m 最大值 = 20 ' 最大120秒 recheck是否調整 WiFi duration. */

CHECK: line length of 109 exceeds 100 columns
#1449: FILE: ./hal/HalBtc8723b1Ant.c:1449:
+			if (m >= 20) /* m 最大值 = 20 ' 最大120秒 recheck是否調整 WiFi duration. */

CHECK: Lines should not end with a '('
#1460: FILE: ./hal/HalBtc8723b1Ant.c:1460:
+			if (

CHECK: Unnecessary parentheses around 'pCoexDm->curPsTdma == 1'
#1460: FILE: ./hal/HalBtc8723b1Ant.c:1460:
+			if (
+				BT_INFO_8723B_1ANT_A2DP_BASIC_RATE(btInfoExt) &&
+				((pCoexDm->curPsTdma == 1) || (pCoexDm->curPsTdma == 2))
+			) {

CHECK: Unnecessary parentheses around 'pCoexDm->curPsTdma == 2'
#1460: FILE: ./hal/HalBtc8723b1Ant.c:1460:
+			if (
+				BT_INFO_8723B_1ANT_A2DP_BASIC_RATE(btInfoExt) &&
+				((pCoexDm->curPsTdma == 1) || (pCoexDm->curPsTdma == 2))
+			) {

CHECK: Lines should not end with a '('
#1477: FILE: ./hal/HalBtc8723b1Ant.c:1477:
+			if (

CHECK: Unnecessary parentheses around 'pCoexDm->curPsTdma == 1'
#1477: FILE: ./hal/HalBtc8723b1Ant.c:1477:
+			if (
+				BT_INFO_8723B_1ANT_A2DP_BASIC_RATE(btInfoExt) &&
+				((pCoexDm->curPsTdma == 1) || (pCoexDm->curPsTdma == 2))
+			) {

CHECK: Unnecessary parentheses around 'pCoexDm->curPsTdma == 2'
#1477: FILE: ./hal/HalBtc8723b1Ant.c:1477:
+			if (
+				BT_INFO_8723B_1ANT_A2DP_BASIC_RATE(btInfoExt) &&
+				((pCoexDm->curPsTdma == 1) || (pCoexDm->curPsTdma == 2))
+			) {

CHECK: Lines should not end with a '('
#1495: FILE: ./hal/HalBtc8723b1Ant.c:1495:
+		if (

CHECK: Lines should not end with a '('
#1501: FILE: ./hal/HalBtc8723b1Ant.c:1501:
+			halbtc8723b1ant_PsTdma(

CHECK: Lines should not end with a '('
#1507: FILE: ./hal/HalBtc8723b1Ant.c:1507:
+static void halbtc8723b1ant_PsTdmaCheckForPowerSaveState(

CHECK: Avoid CamelCase: <halbtc8723b1ant_PsTdmaCheckForPowerSaveState>
#1507: FILE: ./hal/HalBtc8723b1Ant.c:1507:
+static void halbtc8723b1ant_PsTdmaCheckForPowerSaveState(

CHECK: Avoid CamelCase: <bNewPsState>
#1508: FILE: ./hal/HalBtc8723b1Ant.c:1508:
+	struct btc_coexist *pBtCoexist, bool bNewPsState

CHECK: Avoid CamelCase: <lpsMode>
#1511: FILE: ./hal/HalBtc8723b1Ant.c:1511:
+	u8 lpsMode = 0x0;

CHECK: braces {} should be used on all arms of this statement
#1516: FILE: ./hal/HalBtc8723b1Ant.c:1516:
+		if (bNewPsState) {
[...]
+		} else /*  will leave LPS state, turn off psTdma first */
[...]

CHECK: Unbalanced braces around else statement
#1518: FILE: ./hal/HalBtc8723b1Ant.c:1518:
+		} else /*  will leave LPS state, turn off psTdma first */

CHECK: braces {} should be used on all arms of this statement
#1521: FILE: ./hal/HalBtc8723b1Ant.c:1521:
+		if (bNewPsState) /*  will enter LPS state, turn off psTdma first */
[...]
+		else {
[...]

CHECK: Unbalanced braces around else statement
#1523: FILE: ./hal/HalBtc8723b1Ant.c:1523:
+		else {

CHECK: Lines should not end with a '('
#1529: FILE: ./hal/HalBtc8723b1Ant.c:1529:
+static void halbtc8723b1ant_PowerSaveState(

CHECK: Avoid CamelCase: <halbtc8723b1ant_PowerSaveState>
#1529: FILE: ./hal/HalBtc8723b1Ant.c:1529:
+static void halbtc8723b1ant_PowerSaveState(

CHECK: Avoid CamelCase: <psType>
#1530: FILE: ./hal/HalBtc8723b1Ant.c:1530:
+	struct btc_coexist *pBtCoexist, u8 psType, u8 lpsVal, u8 rpwmVal

CHECK: Avoid CamelCase: <bLowPwrDisable>
#1533: FILE: ./hal/HalBtc8723b1Ant.c:1533:
+	bool bLowPwrDisable = false;

CHECK: Lines should not end with a '('
#1539: FILE: ./hal/HalBtc8723b1Ant.c:1539:
+		pBtCoexist->fBtcSet(

CHECK: Lines should not end with a '('
#1550: FILE: ./hal/HalBtc8723b1Ant.c:1550:
+		pBtCoexist->fBtcSet(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiMultiPort>
#1578: FILE: ./hal/HalBtc8723b1Ant.c:1578:
+static void halbtc8723b1ant_ActionWifiMultiPort(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionHs>
#1586: FILE: ./hal/HalBtc8723b1Ant.c:1586:
+static void halbtc8723b1ant_ActionHs(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionBtInquiry>
#1592: FILE: ./hal/HalBtc8723b1Ant.c:1592:
+static void halbtc8723b1ant_ActionBtInquiry(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bBtBusy>
#1598: FILE: ./hal/HalBtc8723b1Ant.c:1598:
+	bool bBtBusy = false;

CHECK: Avoid CamelCase: <bWiFiIsHighPriTask>
#1605: FILE: ./hal/HalBtc8723b1Ant.c:1605:
+	if (!bWifiConnected && !pCoexSta->bWiFiIsHighPriTask) {

CHECK: Lines should not end with a '('
#1610: FILE: ./hal/HalBtc8723b1Ant.c:1610:
+	} else if (

CHECK: Lines should not end with a '('
#1633: FILE: ./hal/HalBtc8723b1Ant.c:1633:
+static void halbtc8723b1ant_ActionBtScoHidOnlyBusy(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionBtScoHidOnlyBusy>
#1633: FILE: ./hal/HalBtc8723b1Ant.c:1633:
+static void halbtc8723b1ant_ActionBtScoHidOnlyBusy(

CHECK: Lines should not end with a '('
#1653: FILE: ./hal/HalBtc8723b1Ant.c:1653:
+static void halbtc8723b1ant_ActionWifiConnectedBtAclBusy(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiConnectedBtAclBusy>
#1653: FILE: ./hal/HalBtc8723b1Ant.c:1653:
+static void halbtc8723b1ant_ActionWifiConnectedBtAclBusy(

CHECK: Unnecessary parentheses around 'pCoexSta->lowPriorityRx >= 1000'
#1661: FILE: ./hal/HalBtc8723b1Ant.c:1661:
+	if ((pCoexSta->lowPriorityRx >= 1000) && (pCoexSta->lowPriorityRx != 65535))

CHECK: Unnecessary parentheses around 'pCoexSta->lowPriorityRx != 65535'
#1661: FILE: ./hal/HalBtc8723b1Ant.c:1661:
+	if ((pCoexSta->lowPriorityRx >= 1000) && (pCoexSta->lowPriorityRx != 65535))

CHECK: Lines should not end with a '('
#1685: FILE: ./hal/HalBtc8723b1Ant.c:1685:
+	} else if (

CHECK: Lines should not end with a '('
#1692: FILE: ./hal/HalBtc8723b1Ant.c:1692:
+	} else if (

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiNotConnected>
#1707: FILE: ./hal/HalBtc8723b1Ant.c:1707:
+static void halbtc8723b1ant_ActionWifiNotConnected(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1717: FILE: ./hal/HalBtc8723b1Ant.c:1717:
+static void halbtc8723b1ant_ActionWifiNotConnectedScan(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiNotConnectedScan>
#1717: FILE: ./hal/HalBtc8723b1Ant.c:1717:
+static void halbtc8723b1ant_ActionWifiNotConnectedScan(

CHECK: Lines should not end with a '('
#1737: FILE: ./hal/HalBtc8723b1Ant.c:1737:
+	} else if (

CHECK: Lines should not end with a '('
#1741: FILE: ./hal/HalBtc8723b1Ant.c:1741:
+		halbtc8723b1ant_ActionBtScoHidOnlyBusy(

CHECK: Lines should not end with a '('
#1751: FILE: ./hal/HalBtc8723b1Ant.c:1751:
+static void halbtc8723b1ant_ActionWifiNotConnectedAssoAuth(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiNotConnectedAssoAuth>
#1751: FILE: ./hal/HalBtc8723b1Ant.c:1751:
+static void halbtc8723b1ant_ActionWifiNotConnectedAssoAuth(

CHECK: Lines should not end with a '('
#1760: FILE: ./hal/HalBtc8723b1Ant.c:1760:
+	if (

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bScoExist'
#1760: FILE: ./hal/HalBtc8723b1Ant.c:1760:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bHidExist'
#1760: FILE: ./hal/HalBtc8723b1Ant.c:1760:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bA2dpExist'
#1760: FILE: ./hal/HalBtc8723b1Ant.c:1760:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiConnectedScan>
#1776: FILE: ./hal/HalBtc8723b1Ant.c:1776:
+static void halbtc8723b1ant_ActionWifiConnectedScan(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1794: FILE: ./hal/HalBtc8723b1Ant.c:1794:
+	} else if (

CHECK: Lines should not end with a '('
#1798: FILE: ./hal/HalBtc8723b1Ant.c:1798:
+		halbtc8723b1ant_ActionBtScoHidOnlyBusy(

CHECK: Lines should not end with a '('
#1808: FILE: ./hal/HalBtc8723b1Ant.c:1808:
+static void halbtc8723b1ant_ActionWifiConnectedSpecialPacket(

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiConnectedSpecialPacket>
#1808: FILE: ./hal/HalBtc8723b1Ant.c:1808:
+static void halbtc8723b1ant_ActionWifiConnectedSpecialPacket(

CHECK: Lines should not end with a '('
#1817: FILE: ./hal/HalBtc8723b1Ant.c:1817:
+	if (

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bScoExist'
#1817: FILE: ./hal/HalBtc8723b1Ant.c:1817:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bHidExist'
#1817: FILE: ./hal/HalBtc8723b1Ant.c:1817:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bA2dpExist'
#1817: FILE: ./hal/HalBtc8723b1Ant.c:1817:
+	if (
+		(pBtLinkInfo->bScoExist) ||
+		(pBtLinkInfo->bHidExist) ||
+		(pBtLinkInfo->bA2dpExist)
+	) {

CHECK: Avoid CamelCase: <halbtc8723b1ant_ActionWifiConnected>
#1833: FILE: ./hal/HalBtc8723b1Ant.c:1833:
+static void halbtc8723b1ant_ActionWifiConnected(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bScan>
#1836: FILE: ./hal/HalBtc8723b1Ant.c:1836:
+	bool bScan = false, bLink = false, bRoam = false;

CHECK: Avoid CamelCase: <bLink>
#1836: FILE: ./hal/HalBtc8723b1Ant.c:1836:
+	bool bScan = false, bLink = false, bRoam = false;

CHECK: Avoid CamelCase: <bRoam>
#1836: FILE: ./hal/HalBtc8723b1Ant.c:1836:
+	bool bScan = false, bLink = false, bRoam = false;

CHECK: Lines should not end with a '('
#1860: FILE: ./hal/HalBtc8723b1Ant.c:1860:
+	if (

CHECK: braces {} should be used on all arms of this statement
#1860: FILE: ./hal/HalBtc8723b1Ant.c:1860:
+	if (
[...]
+	} else
[...]

CHECK: braces {} should be used on all arms of this statement
#1865: FILE: ./hal/HalBtc8723b1Ant.c:1865:
+		if (pBtCoexist->btLinkInfo.bA2dpOnly) { /* A2DP */
[...]
+		} else if (
[...]
+		else
[...]

CHECK: Lines should not end with a '('
#1867: FILE: ./hal/HalBtc8723b1Ant.c:1867:
+				halbtc8723b1ant_PowerSaveState(

CHECK: Unbalanced braces around else statement
#1870: FILE: ./hal/HalBtc8723b1Ant.c:1870:
+			else { /* busy */

CHECK: line length of 140 exceeds 100 columns
#1871: FILE: ./hal/HalBtc8723b1Ant.c:1871:
+				if  (pCoexSta->nScanAPNum >= BT_8723B_1ANT_WIFI_NOISY_THRESH)  /* no force LPS, no PS-TDMA, use pure TDMA */

CHECK: Lines should not end with a '('
#1872: FILE: ./hal/HalBtc8723b1Ant.c:1872:
+					halbtc8723b1ant_PowerSaveState(

CHECK: Lines should not end with a '('
#1876: FILE: ./hal/HalBtc8723b1Ant.c:1876:
+					halbtc8723b1ant_PowerSaveState(

CHECK: Lines should not end with a '('
#1880: FILE: ./hal/HalBtc8723b1Ant.c:1880:
+		} else if (

CHECK: Unbalanced braces around else statement
#1888: FILE: ./hal/HalBtc8723b1Ant.c:1888:
+	} else

CHECK: Lines should not end with a '('
#1894: FILE: ./hal/HalBtc8723b1Ant.c:1894:
+			halbtc8723b1ant_ActionWifiConnectedBtAclBusy(

CHECK: Lines should not end with a '('
#1898: FILE: ./hal/HalBtc8723b1Ant.c:1898:
+		} else if (

CHECK: Alignment should match open parenthesis
#1903: FILE: ./hal/HalBtc8723b1Ant.c:1903:
+			halbtc8723b1ant_ActionBtScoHidOnlyBusy(pBtCoexist,
+				BT_8723B_1ANT_WIFI_STATUS_CONNECTED_IDLE);

CHECK: Unnecessary parentheses around 'pCoexSta->highPriorityTx'
#1907: FILE: ./hal/HalBtc8723b1Ant.c:1907:
+			if ((pCoexSta->highPriorityTx) + (pCoexSta->highPriorityRx) <= 60)

CHECK: Unnecessary parentheses around 'pCoexSta->highPriorityRx'
#1907: FILE: ./hal/HalBtc8723b1Ant.c:1907:
+			if ((pCoexSta->highPriorityTx) + (pCoexSta->highPriorityRx) <= 60)

CHECK: Lines should not end with a '('
#1914: FILE: ./hal/HalBtc8723b1Ant.c:1914:
+			halbtc8723b1ant_ActionWifiConnectedBtAclBusy(

CHECK: Lines should not end with a '('
#1918: FILE: ./hal/HalBtc8723b1Ant.c:1918:
+		} else if (

CHECK: Lines should not end with a '('
#1922: FILE: ./hal/HalBtc8723b1Ant.c:1922:
+			halbtc8723b1ant_ActionBtScoHidOnlyBusy(

CHECK: Unnecessary parentheses around 'pCoexSta->highPriorityTx'
#1929: FILE: ./hal/HalBtc8723b1Ant.c:1929:
+			if ((pCoexSta->highPriorityTx) + (pCoexSta->highPriorityRx) <= 60)

CHECK: Unnecessary parentheses around 'pCoexSta->highPriorityRx'
#1929: FILE: ./hal/HalBtc8723b1Ant.c:1929:
+			if ((pCoexSta->highPriorityTx) + (pCoexSta->highPriorityRx) <= 60)

CHECK: Avoid CamelCase: <halbtc8723b1ant_RunSwCoexistMechanism>
#1937: FILE: ./hal/HalBtc8723b1Ant.c:1937:
+static void halbtc8723b1ant_RunSwCoexistMechanism(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <curAlgorithm>
#1942: FILE: ./hal/HalBtc8723b1Ant.c:1942:
+	pCoexDm->curAlgorithm = algorithm;

CHECK: Blank lines aren't necessary after an open brace '{'
#1945: FILE: ./hal/HalBtc8723b1Ant.c:1945:
+	if (halbtc8723b1ant_IsCommonAction(pBtCoexist)) {
+

CHECK: Avoid CamelCase: <preAlgorithm>
#1981: FILE: ./hal/HalBtc8723b1Ant.c:1981:
+		pCoexDm->preAlgorithm = pCoexDm->curAlgorithm;

CHECK: Avoid CamelCase: <halbtc8723b1ant_RunCoexistMechanism>
#1985: FILE: ./hal/HalBtc8723b1Ant.c:1985:
+static void halbtc8723b1ant_RunCoexistMechanism(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bIncreaseScanDevNum>
#1989: FILE: ./hal/HalBtc8723b1Ant.c:1989:
+	bool bIncreaseScanDevNum = false;

CHECK: Avoid CamelCase: <wifiLinkStatus>
#1992: FILE: ./hal/HalBtc8723b1Ant.c:1992:
+	u32 wifiLinkStatus = 0;

CHECK: Avoid CamelCase: <numOfWifiLink>
#1993: FILE: ./hal/HalBtc8723b1Ant.c:1993:
+	u32 numOfWifiLink = 0;

CHECK: Avoid CamelCase: <bManualControl>
#1995: FILE: ./hal/HalBtc8723b1Ant.c:1995:
+	if (pBtCoexist->bManualControl)

CHECK: Avoid CamelCase: <bStopCoexDm>
#1998: FILE: ./hal/HalBtc8723b1Ant.c:1998:
+	if (pBtCoexist->bStopCoexDm)

CHECK: Lines should not end with a '('
#2004: FILE: ./hal/HalBtc8723b1Ant.c:2004:
+	if (

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY'
#2004: FILE: ./hal/HalBtc8723b1Ant.c:2004:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	){

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY'
#2004: FILE: ./hal/HalBtc8723b1Ant.c:2004:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	){

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY'
#2004: FILE: ./hal/HalBtc8723b1Ant.c:2004:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	){

CHECK: Lines should not end with a '('
#2012: FILE: ./hal/HalBtc8723b1Ant.c:2012:
+	pBtCoexist->fBtcSet(

CHECK: Lines should not end with a '('
#2017: FILE: ./hal/HalBtc8723b1Ant.c:2017:
+	pBtCoexist->fBtcGet(

CHECK: Lines should not end with a '('
#2023: FILE: ./hal/HalBtc8723b1Ant.c:2023:
+	pBtCoexist->fBtcGet(

CHECK: Unnecessary parentheses around 'numOfWifiLink >= 2'
#2030: FILE: ./hal/HalBtc8723b1Ant.c:2030:
+	if ((numOfWifiLink >= 2) || (wifiLinkStatus & WIFI_P2P_GO_CONNECTED)) {

CHECK: line length of 105 exceeds 100 columns
#2032: FILE: ./hal/HalBtc8723b1Ant.c:2032:
+		halbtc8723b1ant_LimitedRx(pBtCoexist, NORMAL_EXEC, false, bBtCtrlAggBufSize, aggBufSize);

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bA2dpExist'
#2034: FILE: ./hal/HalBtc8723b1Ant.c:2034:
+		if ((pBtLinkInfo->bA2dpExist) && (pCoexSta->bC2hBtInquiryPage))

CHECK: Unnecessary parentheses around 'pCoexSta->bC2hBtInquiryPage'
#2034: FILE: ./hal/HalBtc8723b1Ant.c:2034:
+		if ((pBtLinkInfo->bA2dpExist) && (pCoexSta->bC2hBtInquiryPage))

CHECK: Unnecessary parentheses around 'pBtLinkInfo->bBtLinkExist'
#2042: FILE: ./hal/HalBtc8723b1Ant.c:2042:
+	if ((pBtLinkInfo->bBtLinkExist) && (bWifiConnected)) {

CHECK: Please don't use multiple blank lines
#2070: FILE: ./hal/HalBtc8723b1Ant.c:2070:
+
+

CHECK: braces {} should be used on all arms of this statement
#2078: FILE: ./hal/HalBtc8723b1Ant.c:2078:
+		if (bScan || bLink || bRoam) {
[...]
+		} else
[...]

CHECK: Unbalanced braces around else statement
#2083: FILE: ./hal/HalBtc8723b1Ant.c:2083:
+		} else

CHECK: Unbalanced braces around else statement
#2085: FILE: ./hal/HalBtc8723b1Ant.c:2085:
+	} else /*  wifi LPS/Busy */

CHECK: Avoid CamelCase: <halbtc8723b1ant_InitCoexDm>
#2089: FILE: ./hal/HalBtc8723b1Ant.c:2089:
+static void halbtc8723b1ant_InitCoexDm(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#2102: FILE: ./hal/HalBtc8723b1Ant.c:2102:
+static void halbtc8723b1ant_InitHwConfig(

CHECK: Avoid CamelCase: <halbtc8723b1ant_InitHwConfig>
#2102: FILE: ./hal/HalBtc8723b1Ant.c:2102:
+static void halbtc8723b1ant_InitHwConfig(

CHECK: Avoid CamelCase: <bBackUp>
#2104: FILE: ./hal/HalBtc8723b1Ant.c:2104:
+	bool bBackUp,

CHECK: Avoid CamelCase: <bWifiOnly>
#2105: FILE: ./hal/HalBtc8723b1Ant.c:2105:
+	bool bWifiOnly

CHECK: braces {} should be used on all arms of this statement
#2118: FILE: ./hal/HalBtc8723b1Ant.c:2118:
+	if (bWifiOnly) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#2121: FILE: ./hal/HalBtc8723b1Ant.c:2121:
+	} else

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_PowerOnSetting>
#2138: FILE: ./hal/HalBtc8723b1Ant.c:2138:
+void EXhalbtc8723b1ant_PowerOnSetting(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <u2Tmp>
#2142: FILE: ./hal/HalBtc8723b1Ant.c:2142:
+	u16 u2Tmp = 0x0;

CHECK: line length of 113 exceeds 100 columns
#2156: FILE: ./hal/HalBtc8723b1Ant.c:2156:
+	/*  S0 or S1 setting and Local register setting(By the setting fw can get ant number, S0/S1, ... info) */

CHECK: Avoid CamelCase: <chipInterface>
#2162: FILE: ./hal/HalBtc8723b1Ant.c:2162:
+	if (pBtCoexist->chipInterface == BTC_INTF_USB) {

CHECK: Avoid CamelCase: <fBtcWriteLocalReg1Byte>
#2167: FILE: ./hal/HalBtc8723b1Ant.c:2167:
+		pBtCoexist->fBtcWriteLocalReg1Byte(pBtCoexist, 0xfe08, u1Tmp);

CHECK: Avoid CamelCase: <singleAntPath>
#2172: FILE: ./hal/HalBtc8723b1Ant.c:2172:
+		if (pBoardInfo->singleAntPath == 0) {

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_InitHwConfig>
#2190: FILE: ./hal/HalBtc8723b1Ant.c:2190:
+void EXhalbtc8723b1ant_InitHwConfig(struct btc_coexist *pBtCoexist, bool bWifiOnly)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_InitCoexDm>
#2195: FILE: ./hal/HalBtc8723b1Ant.c:2195:
+void EXhalbtc8723b1ant_InitCoexDm(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_IpsNotify>
#2204: FILE: ./hal/HalBtc8723b1Ant.c:2204:
+void EXhalbtc8723b1ant_IpsNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_LpsNotify>
#2224: FILE: ./hal/HalBtc8723b1Ant.c:2224:
+void EXhalbtc8723b1ant_LpsNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <bUnderLps>
#2230: FILE: ./hal/HalBtc8723b1Ant.c:2230:
+		pCoexSta->bUnderLps = true;

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_ScanNotify>
#2235: FILE: ./hal/HalBtc8723b1Ant.c:2235:
+void EXhalbtc8723b1ant_ScanNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: line length of 125 exceeds 100 columns
#2249: FILE: ./hal/HalBtc8723b1Ant.c:2249:
+		halbtc8723b1ant_PsTdma(pBtCoexist, FORCE_EXEC, false, 8);  /* Force antenna setup for no scan result issue */

CHECK: Lines should not end with a '('
#2256: FILE: ./hal/HalBtc8723b1Ant.c:2256:
+		pBtCoexist->fBtcGet(

CHECK: Avoid CamelCase: <btInfo>
#2261: FILE: ./hal/HalBtc8723b1Ant.c:2261:
+	if (pBtCoexist->btInfo.bBtDisabled)

CHECK: Avoid CamelCase: <bBtDisabled>
#2261: FILE: ./hal/HalBtc8723b1Ant.c:2261:
+	if (pBtCoexist->btInfo.bBtDisabled)

CHECK: Lines should not end with a '('
#2274: FILE: ./hal/HalBtc8723b1Ant.c:2274:
+		halbtc8723b1ant_LimitedRx(

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_ConnectNotify>
#2302: FILE: ./hal/HalBtc8723b1Ant.c:2302:
+void EXhalbtc8723b1ant_ConnectNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Lines should not end with a '('
#2310: FILE: ./hal/HalBtc8723b1Ant.c:2310:
+	if (

CHECK: Avoid CamelCase: <nArpCnt>
#2319: FILE: ./hal/HalBtc8723b1Ant.c:2319:
+		 pCoexDm->nArpCnt = 0;

CHECK: line length of 105 exceeds 100 columns
#2329: FILE: ./hal/HalBtc8723b1Ant.c:2329:
+		halbtc8723b1ant_LimitedRx(pBtCoexist, NORMAL_EXEC, false, bBtCtrlAggBufSize, aggBufSize);

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_MediaStatusNotify>
#2354: FILE: ./hal/HalBtc8723b1Ant.c:2354:
+void EXhalbtc8723b1ant_MediaStatusNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <wifiBw>
#2357: FILE: ./hal/HalBtc8723b1Ant.c:2357:
+	u32 wifiBw;

CHECK: Avoid CamelCase: <wifiCentralChnl>
#2358: FILE: ./hal/HalBtc8723b1Ant.c:2358:
+	u8 wifiCentralChnl;

CHECK: Lines should not end with a '('
#2361: FILE: ./hal/HalBtc8723b1Ant.c:2361:
+	if (

CHECK: Unnecessary parentheses around 'type == BTC_MEDIA_CONNECT'
#2393: FILE: ./hal/HalBtc8723b1Ant.c:2393:
+	if ((type == BTC_MEDIA_CONNECT) && (wifiCentralChnl <= 14)) {

CHECK: Unnecessary parentheses around 'wifiCentralChnl <= 14'
#2393: FILE: ./hal/HalBtc8723b1Ant.c:2393:
+	if ((type == BTC_MEDIA_CONNECT) && (wifiCentralChnl <= 14)) {

CHECK: Avoid CamelCase: <wifiChnlInfo>
#2405: FILE: ./hal/HalBtc8723b1Ant.c:2405:
+	pCoexDm->wifiChnlInfo[0] = H2C_Parameter[0];

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_SpecialPacketNotify>
#2412: FILE: ./hal/HalBtc8723b1Ant.c:2412:
+void EXhalbtc8723b1ant_SpecialPacketNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Lines should not end with a '('
#2420: FILE: ./hal/HalBtc8723b1Ant.c:2420:
+	if (

CHECK: Lines should not end with a '('
#2427: FILE: ./hal/HalBtc8723b1Ant.c:2427:
+	if (

CHECK: line length of 147 exceeds 100 columns
#2435: FILE: ./hal/HalBtc8723b1Ant.c:2435:
+			if (pCoexDm->nArpCnt >= 10) /*  if APR PKT > 10 after connect, do not go to ActionWifiConnectedSpecialPacket(pBtCoexist) */

CHECK: Avoid CamelCase: <specialPktPeriodCnt>
#2446: FILE: ./hal/HalBtc8723b1Ant.c:2446:
+	pCoexSta->specialPktPeriodCnt = 0;

CHECK: Lines should not end with a '('
#2448: FILE: ./hal/HalBtc8723b1Ant.c:2448:
+	pBtCoexist->fBtcGet(

CHECK: Lines should not end with a '('
#2455: FILE: ./hal/HalBtc8723b1Ant.c:2455:
+		halbtc8723b1ant_LimitedRx(

CHECK: Lines should not end with a '('
#2471: FILE: ./hal/HalBtc8723b1Ant.c:2471:
+	if (

CHECK: Unnecessary parentheses around 'type == BTC_PACKET_ARP'
#2471: FILE: ./hal/HalBtc8723b1Ant.c:2471:
+	if (
+		type == BTC_PACKET_DHCP ||
+		type == BTC_PACKET_EAPOL ||
+		((type == BTC_PACKET_ARP) && (pCoexSta->bWiFiIsHighPriTask))
+	)

CHECK: Unnecessary parentheses around 'pCoexSta->bWiFiIsHighPriTask'
#2471: FILE: ./hal/HalBtc8723b1Ant.c:2471:
+	if (
+		type == BTC_PACKET_DHCP ||
+		type == BTC_PACKET_EAPOL ||
+		((type == BTC_PACKET_ARP) && (pCoexSta->bWiFiIsHighPriTask))
+	)

CHECK: Lines should not end with a '('
#2479: FILE: ./hal/HalBtc8723b1Ant.c:2479:
+void EXhalbtc8723b1ant_BtInfoNotify(

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_BtInfoNotify>
#2479: FILE: ./hal/HalBtc8723b1Ant.c:2479:
+void EXhalbtc8723b1ant_BtInfoNotify(

CHECK: Avoid CamelCase: <tmpBuf>
#2480: FILE: ./hal/HalBtc8723b1Ant.c:2480:
+	struct btc_coexist *pBtCoexist, u8 *tmpBuf, u8 length

CHECK: Avoid CamelCase: <rspSource>
#2484: FILE: ./hal/HalBtc8723b1Ant.c:2484:
+	u8 i, rspSource = 0;

CHECK: Avoid CamelCase: <btInfoC2hCnt>
#2493: FILE: ./hal/HalBtc8723b1Ant.c:2493:
+	pCoexSta->btInfoC2hCnt[rspSource]++;

CHECK: Avoid CamelCase: <btInfoC2h>
#2496: FILE: ./hal/HalBtc8723b1Ant.c:2496:
+		pCoexSta->btInfoC2h[rspSource][i] = tmpBuf[i];

CHECK: Avoid CamelCase: <bC2hBtPage>
#2508: FILE: ./hal/HalBtc8723b1Ant.c:2508:
+			pCoexSta->bC2hBtPage = true;

CHECK: Avoid CamelCase: <bBtTxRxMask>
#2517: FILE: ./hal/HalBtc8723b1Ant.c:2517:
+		pCoexSta->bBtTxRxMask = (pCoexSta->btInfoC2h[rspSource][2] & 0x40);

CHECK: line length of 116 exceeds 100 columns
#2521: FILE: ./hal/HalBtc8723b1Ant.c:2521:
+			/* BT into is responded by BT FW and BT RF REG 0x3C != 0x15 => Need to switch BT TRx Mask */

CHECK: line length of 102 exceeds 100 columns
#2532: FILE: ./hal/HalBtc8723b1Ant.c:2532:
+				EXhalbtc8723b1ant_MediaStatusNotify(pBtCoexist, BTC_MEDIA_DISCONNECT);

CHECK: line length of 122 exceeds 100 columns
#2581: FILE: ./hal/HalBtc8723b1Ant.c:2581:
+	btInfo = btInfo & 0x1f;  /* mask profile bit for connect-ilde identification (for CSR case: A2DP idle --> 0x41) */

CHECK: Lines should not end with a '('
#2588: FILE: ./hal/HalBtc8723b1Ant.c:2588:
+	} else if (

CHECK: Lines should not end with a '('
#2602: FILE: ./hal/HalBtc8723b1Ant.c:2602:
+	if (

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY'
#2602: FILE: ./hal/HalBtc8723b1Ant.c:2602:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	)

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY'
#2602: FILE: ./hal/HalBtc8723b1Ant.c:2602:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	)

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY'
#2602: FILE: ./hal/HalBtc8723b1Ant.c:2602:
+	if (
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_1ANT_BT_STATUS_ACL_SCO_BUSY)
+	)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_HaltNotify>
#2615: FILE: ./hal/HalBtc8723b1Ant.c:2615:
+void EXhalbtc8723b1ant_HaltNotify(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_PnpNotify>
#2628: FILE: ./hal/HalBtc8723b1Ant.c:2628:
+void EXhalbtc8723b1ant_PnpNotify(struct btc_coexist *pBtCoexist, u8 pnpState)

CHECK: Avoid CamelCase: <pnpState>
#2628: FILE: ./hal/HalBtc8723b1Ant.c:2628:
+void EXhalbtc8723b1ant_PnpNotify(struct btc_coexist *pBtCoexist, u8 pnpState)

CHECK: Avoid CamelCase: <EXhalbtc8723b1ant_Periodical>
#2645: FILE: ./hal/HalBtc8723b1Ant.c:2645:
+void EXhalbtc8723b1ant_Periodical(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <disVerInfoCnt>
#2647: FILE: ./hal/HalBtc8723b1Ant.c:2647:
+	static u8 disVerInfoCnt;

CHECK: Avoid CamelCase: <btPatchVer>
#2648: FILE: ./hal/HalBtc8723b1Ant.c:2648:
+	u32 fwVer = 0, btPatchVer = 0;

CHECK: Lines should not end with a '('
#2659: FILE: ./hal/HalBtc8723b1Ant.c:2659:
+	if (

total: 0 errors, 0 warnings, 526 checks, 2666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b1Ant.c has style problems, please review.
-----------------------
./hal/HalBtc8723b1Ant.h
-----------------------
CHECK: Macro argument '_BT_INFO_EXT_' may be better as '(_BT_INFO_EXT_)' to avoid precedence issues
#17: FILE: ./hal/HalBtc8723b1Ant.h:17:
+#define	BT_INFO_8723B_1ANT_A2DP_BASIC_RATE(_BT_INFO_EXT_)	\
+		(((_BT_INFO_EXT_ & BIT0)) ? true : false)

CHECK: Avoid CamelCase: <bPreBtAutoReport>
#77: FILE: ./hal/HalBtc8723b1Ant.h:77:
+	bool bPreBtAutoReport;

CHECK: Avoid CamelCase: <bCurBtAutoReport>
#78: FILE: ./hal/HalBtc8723b1Ant.h:78:
+	bool bCurBtAutoReport;

CHECK: Avoid CamelCase: <bLimitedDig>
#95: FILE: ./hal/HalBtc8723b1Ant.h:95:
+	bool bLimitedDig;

CHECK: Avoid CamelCase: <errorCondition>
#118: FILE: ./hal/HalBtc8723b1Ant.h:118:
+	u8 errorCondition;

CHECK: Avoid CamelCase: <preWifiRssiState>
#138: FILE: ./hal/HalBtc8723b1Ant.h:138:
+	u8 preWifiRssiState[4];

CHECK: Lines should not end with a '('
#179: FILE: ./hal/HalBtc8723b1Ant.h:179:
+void EXhalbtc8723b1ant_BtInfoNotify(

total: 0 errors, 0 warnings, 7 checks, 184 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b1Ant.h has style problems, please review.
-----------------------
./hal/HalBtc8723b1Ant.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b1Ant.o has style problems, please review.
-----------------------
./hal/HalBtc8723b2Ant.c
-----------------------
CHECK: Macro argument reuse 'val' - possible side-effects?
#11: FILE: ./hal/HalBtc8723b2Ant.c:11:
+#define HAL_BTC8723B2ANT_DMA_DURATION_ADJUST(val)			      \
+do {									      \
+	halbtc8723b2ant_PsTdma(pBtCoexist, NORMAL_EXEC, true, val);           \
+	pCoexDm->psTdmaDuAdjType = val;                                       \
+} while (0)

CHECK: Avoid CamelCase: <halbtc8723b2ant_PsTdma>
#13: FILE: ./hal/HalBtc8723b2Ant.c:13:
+	halbtc8723b2ant_PsTdma(pBtCoexist, NORMAL_EXEC, true, val);           \

CHECK: Avoid CamelCase: <GLCoexDm8723b2Ant>
#18: FILE: ./hal/HalBtc8723b2Ant.c:18:
+static struct coex_dm_8723b_2ant GLCoexDm8723b2Ant;

CHECK: Avoid CamelCase: <GLCoexSta8723b2Ant>
#20: FILE: ./hal/HalBtc8723b2Ant.c:20:
+static struct coex_sta_8723b_2ant GLCoexSta8723b2Ant;

CHECK: Lines should not end with a '('
#24: FILE: ./hal/HalBtc8723b2Ant.c:24:
+static u8 halbtc8723b2ant_BtRssiState(

CHECK: Avoid CamelCase: <halbtc8723b2ant_BtRssiState>
#24: FILE: ./hal/HalBtc8723b2Ant.c:24:
+static u8 halbtc8723b2ant_BtRssiState(

CHECK: Lines should not end with a '('
#34: FILE: ./hal/HalBtc8723b2Ant.c:34:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW'
#34: FILE: ./hal/HalBtc8723b2Ant.c:34:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW'
#34: FILE: ./hal/HalBtc8723b2Ant.c:34:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

WARNING: braces {} are not necessary for any arm of this statement
#38: FILE: ./hal/HalBtc8723b2Ant.c:38:
+			if (btRssi >= (rssiThresh + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for any arm of this statement
#44: FILE: ./hal/HalBtc8723b2Ant.c:44:
+			if (btRssi < rssiThresh) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for single statement blocks
#51: FILE: ./hal/HalBtc8723b2Ant.c:51:
+		if (rssiThresh > rssiThresh1) {
+			return pCoexSta->preBtRssiState;
+		}

CHECK: Lines should not end with a '('
#55: FILE: ./hal/HalBtc8723b2Ant.c:55:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW'
#55: FILE: ./hal/HalBtc8723b2Ant.c:55:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW'
#55: FILE: ./hal/HalBtc8723b2Ant.c:55:
+		if (
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preBtRssiState == BTC_RSSI_STATE_STAY_LOW)
+		) {

WARNING: braces {} are not necessary for any arm of this statement
#59: FILE: ./hal/HalBtc8723b2Ant.c:59:
+			if (btRssi >= (rssiThresh + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else {
[...]

CHECK: Lines should not end with a '('
#64: FILE: ./hal/HalBtc8723b2Ant.c:64:
+		} else if (

WARNING: braces {} are not necessary for any arm of this statement
#68: FILE: ./hal/HalBtc8723b2Ant.c:68:
+			if (btRssi >= (rssiThresh1 + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else if (btRssi < rssiThresh) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for any arm of this statement
#76: FILE: ./hal/HalBtc8723b2Ant.c:76:
+			if (btRssi < rssiThresh1) {
[...]
+			} else {
[...]

CHECK: Lines should not end with a '('
#89: FILE: ./hal/HalBtc8723b2Ant.c:89:
+static u8 halbtc8723b2ant_WifiRssiState(

CHECK: Avoid CamelCase: <halbtc8723b2ant_WifiRssiState>
#89: FILE: ./hal/HalBtc8723b2Ant.c:89:
+static u8 halbtc8723b2ant_WifiRssiState(

CHECK: Avoid CamelCase: <wifiRssiState>
#98: FILE: ./hal/HalBtc8723b2Ant.c:98:
+	u8 wifiRssiState = pCoexSta->preWifiRssiState[index];

CHECK: Lines should not end with a '('
#103: FILE: ./hal/HalBtc8723b2Ant.c:103:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW'
#103: FILE: ./hal/HalBtc8723b2Ant.c:103:
+		if (
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW'
#103: FILE: ./hal/HalBtc8723b2Ant.c:103:
+		if (
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW)
+		) {

WARNING: braces {} are not necessary for any arm of this statement
#107: FILE: ./hal/HalBtc8723b2Ant.c:107:
+			if (wifiRssi >= (rssiThresh + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for any arm of this statement
#113: FILE: ./hal/HalBtc8723b2Ant.c:113:
+			if (wifiRssi < rssiThresh) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for single statement blocks
#120: FILE: ./hal/HalBtc8723b2Ant.c:120:
+		if (rssiThresh > rssiThresh1) {
+			return pCoexSta->preWifiRssiState[index];
+		}

CHECK: Lines should not end with a '('
#124: FILE: ./hal/HalBtc8723b2Ant.c:124:
+		if (

CHECK: Unnecessary parentheses around 'pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW'
#124: FILE: ./hal/HalBtc8723b2Ant.c:124:
+		if (
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW)
+		) {

CHECK: Unnecessary parentheses around 'pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW'
#124: FILE: ./hal/HalBtc8723b2Ant.c:124:
+		if (
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_LOW) ||
+			(pCoexSta->preWifiRssiState[index] == BTC_RSSI_STATE_STAY_LOW)
+		) {

WARNING: braces {} are not necessary for any arm of this statement
#128: FILE: ./hal/HalBtc8723b2Ant.c:128:
+			if (wifiRssi >= (rssiThresh + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else {
[...]

CHECK: Lines should not end with a '('
#133: FILE: ./hal/HalBtc8723b2Ant.c:133:
+		} else if (

WARNING: braces {} are not necessary for any arm of this statement
#137: FILE: ./hal/HalBtc8723b2Ant.c:137:
+			if (wifiRssi >= (rssiThresh1 + BTC_RSSI_COEX_THRESH_TOL_8723B_2ANT)) {
[...]
+			} else if (wifiRssi < rssiThresh) {
[...]
+			} else {
[...]

WARNING: braces {} are not necessary for any arm of this statement
#145: FILE: ./hal/HalBtc8723b2Ant.c:145:
+			if (wifiRssi < rssiThresh1) {
[...]
+			} else {
[...]

CHECK: Lines should not end with a '('
#158: FILE: ./hal/HalBtc8723b2Ant.c:158:
+static void halbtc8723b2ant_LimitedRx(

CHECK: Avoid CamelCase: <halbtc8723b2ant_LimitedRx>
#158: FILE: ./hal/HalBtc8723b2Ant.c:158:
+static void halbtc8723b2ant_LimitedRx(

WARNING: please, no space before tabs
#171: FILE: ./hal/HalBtc8723b2Ant.c:171:
+^I/* ^IRx Aggregation related setting */$

CHECK: Avoid CamelCase: <halbtc8723b2ant_QueryBtInfo>
#182: FILE: ./hal/HalBtc8723b2Ant.c:182:
+static void halbtc8723b2ant_QueryBtInfo(struct btc_coexist *pBtCoexist)

WARNING: please, no space before tabs
#184: FILE: ./hal/HalBtc8723b2Ant.c:184:
+^Iu8 ^IH2C_Parameter[1] = {0};$

CHECK: Avoid CamelCase: <halbtc8723b2ant_IsWifiStatusChanged>
#193: FILE: ./hal/HalBtc8723b2Ant.c:193:
+static bool halbtc8723b2ant_IsWifiStatusChanged(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtc8723b2ant_UpdateBtLinkInfo>
#224: FILE: ./hal/HalBtc8723b2Ant.c:224:
+static void halbtc8723b2ant_UpdateBtLinkInfo(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#244: FILE: ./hal/HalBtc8723b2Ant.c:244:
+	if (

CHECK: Lines should not end with a '('
#255: FILE: ./hal/HalBtc8723b2Ant.c:255:
+	if (

CHECK: Lines should not end with a '('
#266: FILE: ./hal/HalBtc8723b2Ant.c:266:
+	if (

CHECK: Lines should not end with a '('
#277: FILE: ./hal/HalBtc8723b2Ant.c:277:
+	if (

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionAlgorithm>
#288: FILE: ./hal/HalBtc8723b2Ant.c:288:
+static u8 halbtc8723b2ant_ActionAlgorithm(struct btc_coexist *pBtCoexist)

WARNING: braces {} are not necessary for single statement blocks
#297: FILE: ./hal/HalBtc8723b2Ant.c:297:
+	if (!pBtLinkInfo->bBtLinkExist) {
+		return algorithm;
+	}

WARNING: braces {} are not necessary for any arm of this statement
#322: FILE: ./hal/HalBtc8723b2Ant.c:322:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

WARNING: braces {} are not necessary for any arm of this statement
#336: FILE: ./hal/HalBtc8723b2Ant.c:336:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

CHECK: Lines should not end with a '('
#343: FILE: ./hal/HalBtc8723b2Ant.c:343:
+			if (

CHECK: Lines should not end with a '('
#348: FILE: ./hal/HalBtc8723b2Ant.c:348:
+			} else if (

WARNING: braces {} are not necessary for any arm of this statement
#352: FILE: ./hal/HalBtc8723b2Ant.c:352:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

CHECK: Lines should not end with a '('
#357: FILE: ./hal/HalBtc8723b2Ant.c:357:
+			} else if (

WARNING: braces {} are not necessary for any arm of this statement
#361: FILE: ./hal/HalBtc8723b2Ant.c:361:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

CHECK: Lines should not end with a '('
#370: FILE: ./hal/HalBtc8723b2Ant.c:370:
+			if (

CHECK: Lines should not end with a '('
#375: FILE: ./hal/HalBtc8723b2Ant.c:375:
+			} else if (

CHECK: Lines should not end with a '('
#380: FILE: ./hal/HalBtc8723b2Ant.c:380:
+			} else if (

CHECK: Lines should not end with a '('
#387: FILE: ./hal/HalBtc8723b2Ant.c:387:
+			if (

WARNING: braces {} are not necessary for any arm of this statement
#392: FILE: ./hal/HalBtc8723b2Ant.c:392:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

CHECK: Lines should not end with a '('
#401: FILE: ./hal/HalBtc8723b2Ant.c:401:
+			if (

WARNING: braces {} are not necessary for any arm of this statement
#406: FILE: ./hal/HalBtc8723b2Ant.c:406:
+				if (bBtHsOn) {
[...]
+				} else {
[...]

CHECK: Lines should not end with a '('
#417: FILE: ./hal/HalBtc8723b2Ant.c:417:
+static void halbtc8723b2ant_SetFwDacSwingLevel(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetFwDacSwingLevel>
#417: FILE: ./hal/HalBtc8723b2Ant.c:417:
+static void halbtc8723b2ant_SetFwDacSwingLevel(

CHECK: Avoid CamelCase: <dacSwingLvl>
#418: FILE: ./hal/HalBtc8723b2Ant.c:418:
+	struct btc_coexist *pBtCoexist, u8 dacSwingLvl

WARNING: please, no space before tabs
#421: FILE: ./hal/HalBtc8723b2Ant.c:421:
+^Iu8 ^IH2C_Parameter[1] = {0};$

CHECK: Lines should not end with a '('
#430: FILE: ./hal/HalBtc8723b2Ant.c:430:
+static void halbtc8723b2ant_SetFwDecBtPwr(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetFwDecBtPwr>
#430: FILE: ./hal/HalBtc8723b2Ant.c:430:
+static void halbtc8723b2ant_SetFwDecBtPwr(

CHECK: Avoid CamelCase: <decBtPwrLvl>
#431: FILE: ./hal/HalBtc8723b2Ant.c:431:
+	struct btc_coexist *pBtCoexist, u8 decBtPwrLvl

WARNING: please, no space before tabs
#434: FILE: ./hal/HalBtc8723b2Ant.c:434:
+^Iu8 ^IH2C_Parameter[1] = {0};$

CHECK: Lines should not end with a '('
#441: FILE: ./hal/HalBtc8723b2Ant.c:441:
+static void halbtc8723b2ant_DecBtPwr(

CHECK: Avoid CamelCase: <halbtc8723b2ant_DecBtPwr>
#441: FILE: ./hal/HalBtc8723b2Ant.c:441:
+static void halbtc8723b2ant_DecBtPwr(

CHECK: Avoid CamelCase: <curBtDecPwrLvl>
#445: FILE: ./hal/HalBtc8723b2Ant.c:445:
+	pCoexDm->curBtDecPwrLvl = decBtPwrLvl;

CHECK: Avoid CamelCase: <preBtDecPwrLvl>
#448: FILE: ./hal/HalBtc8723b2Ant.c:448:
+		if (pCoexDm->preBtDecPwrLvl == pCoexDm->curBtDecPwrLvl)

CHECK: Lines should not end with a '('
#456: FILE: ./hal/HalBtc8723b2Ant.c:456:
+static void halbtc8723b2ant_FwDacSwingLvl(

CHECK: Avoid CamelCase: <halbtc8723b2ant_FwDacSwingLvl>
#456: FILE: ./hal/HalBtc8723b2Ant.c:456:
+static void halbtc8723b2ant_FwDacSwingLvl(

CHECK: Avoid CamelCase: <fwDacSwingLvl>
#457: FILE: ./hal/HalBtc8723b2Ant.c:457:
+	struct btc_coexist *pBtCoexist, bool bForceExec, u8 fwDacSwingLvl

CHECK: Avoid CamelCase: <curFwDacSwingLvl>
#460: FILE: ./hal/HalBtc8723b2Ant.c:460:
+	pCoexDm->curFwDacSwingLvl = fwDacSwingLvl;

CHECK: Avoid CamelCase: <preFwDacSwingLvl>
#463: FILE: ./hal/HalBtc8723b2Ant.c:463:
+		if (pCoexDm->preFwDacSwingLvl == pCoexDm->curFwDacSwingLvl)

CHECK: Lines should not end with a '('
#472: FILE: ./hal/HalBtc8723b2Ant.c:472:
+static void halbtc8723b2ant_SetSwRfRxLpfCorner(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetSwRfRxLpfCorner>
#472: FILE: ./hal/HalBtc8723b2Ant.c:472:
+static void halbtc8723b2ant_SetSwRfRxLpfCorner(

CHECK: Avoid CamelCase: <bRxRfShrinkOn>
#474: FILE: ./hal/HalBtc8723b2Ant.c:474:
+	bool bRxRfShrinkOn

CHECK: Avoid CamelCase: <bInitilized>
#483: FILE: ./hal/HalBtc8723b2Ant.c:483:
+		if (pBtCoexist->bInitilized) {

WARNING: braces {} are not necessary for single statement blocks
#483: FILE: ./hal/HalBtc8723b2Ant.c:483:
+		if (pBtCoexist->bInitilized) {
+			pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1e, 0xfffff, pCoexDm->btRf0x1eBackup);
+		}

CHECK: line length of 111 exceeds 100 columns
#484: FILE: ./hal/HalBtc8723b2Ant.c:484:
+			pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1e, 0xfffff, pCoexDm->btRf0x1eBackup);

CHECK: Avoid CamelCase: <btRf0x1eBackup>
#484: FILE: ./hal/HalBtc8723b2Ant.c:484:
+			pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1e, 0xfffff, pCoexDm->btRf0x1eBackup);

CHECK: Lines should not end with a '('
#489: FILE: ./hal/HalBtc8723b2Ant.c:489:
+static void halbtc8723b2ant_RfShrink(

CHECK: Avoid CamelCase: <halbtc8723b2ant_RfShrink>
#489: FILE: ./hal/HalBtc8723b2Ant.c:489:
+static void halbtc8723b2ant_RfShrink(

CHECK: Avoid CamelCase: <bCurRfRxLpfShrink>
#493: FILE: ./hal/HalBtc8723b2Ant.c:493:
+	pCoexDm->bCurRfRxLpfShrink = bRxRfShrinkOn;

CHECK: Avoid CamelCase: <bPreRfRxLpfShrink>
#496: FILE: ./hal/HalBtc8723b2Ant.c:496:
+		if (pCoexDm->bPreRfRxLpfShrink == pCoexDm->bCurRfRxLpfShrink)

CHECK: Lines should not end with a '('
#504: FILE: ./hal/HalBtc8723b2Ant.c:504:
+static void halbtc8723b2ant_SetSwPenaltyTxRateAdaptive(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetSwPenaltyTxRateAdaptive>
#504: FILE: ./hal/HalBtc8723b2Ant.c:504:
+static void halbtc8723b2ant_SetSwPenaltyTxRateAdaptive(

WARNING: please, no space before tabs
#508: FILE: ./hal/HalBtc8723b2Ant.c:508:
+^Iu8 ^IH2C_Parameter[6] = {0};$

CHECK: Lines should not end with a '('
#523: FILE: ./hal/HalBtc8723b2Ant.c:523:
+static void halbtc8723b2ant_LowPenaltyRa(

CHECK: Avoid CamelCase: <halbtc8723b2ant_LowPenaltyRa>
#523: FILE: ./hal/HalBtc8723b2Ant.c:523:
+static void halbtc8723b2ant_LowPenaltyRa(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetDacSwingReg>
#539: FILE: ./hal/HalBtc8723b2Ant.c:539:
+static void halbtc8723b2ant_SetDacSwingReg(struct btc_coexist *pBtCoexist, u32 level)

CHECK: Lines should not end with a '('
#546: FILE: ./hal/HalBtc8723b2Ant.c:546:
+static void halbtc8723b2ant_SetSwFullTimeDacSwing(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetSwFullTimeDacSwing>
#546: FILE: ./hal/HalBtc8723b2Ant.c:546:
+static void halbtc8723b2ant_SetSwFullTimeDacSwing(

CHECK: Avoid CamelCase: <bSwDacSwingOn>
#547: FILE: ./hal/HalBtc8723b2Ant.c:547:
+	struct btc_coexist *pBtCoexist, bool bSwDacSwingOn, u32 swDacSwingLvl

CHECK: Avoid CamelCase: <swDacSwingLvl>
#547: FILE: ./hal/HalBtc8723b2Ant.c:547:
+	struct btc_coexist *pBtCoexist, bool bSwDacSwingOn, u32 swDacSwingLvl

CHECK: Please don't use multiple blank lines
#556: FILE: ./hal/HalBtc8723b2Ant.c:556:
+
+

CHECK: Lines should not end with a '('
#557: FILE: ./hal/HalBtc8723b2Ant.c:557:
+static void halbtc8723b2ant_DacSwing(

CHECK: Avoid CamelCase: <halbtc8723b2ant_DacSwing>
#557: FILE: ./hal/HalBtc8723b2Ant.c:557:
+static void halbtc8723b2ant_DacSwing(

CHECK: Avoid CamelCase: <bDacSwingOn>
#560: FILE: ./hal/HalBtc8723b2Ant.c:560:
+	bool bDacSwingOn,

CHECK: Avoid CamelCase: <bCurDacSwingOn>
#564: FILE: ./hal/HalBtc8723b2Ant.c:564:
+	pCoexDm->bCurDacSwingOn = bDacSwingOn;

CHECK: Avoid CamelCase: <curDacSwingLvl>
#565: FILE: ./hal/HalBtc8723b2Ant.c:565:
+	pCoexDm->curDacSwingLvl = dacSwingLvl;

CHECK: Unnecessary parentheses around 'pCoexDm->bPreDacSwingOn == pCoexDm->bCurDacSwingOn'
#568: FILE: ./hal/HalBtc8723b2Ant.c:568:
+		if ((pCoexDm->bPreDacSwingOn == pCoexDm->bCurDacSwingOn) &&
+			(pCoexDm->preDacSwingLvl == pCoexDm->curDacSwingLvl))

CHECK: Unnecessary parentheses around 'pCoexDm->preDacSwingLvl == pCoexDm->curDacSwingLvl'
#568: FILE: ./hal/HalBtc8723b2Ant.c:568:
+		if ((pCoexDm->bPreDacSwingOn == pCoexDm->bCurDacSwingOn) &&
+			(pCoexDm->preDacSwingLvl == pCoexDm->curDacSwingLvl))

CHECK: Avoid CamelCase: <bPreDacSwingOn>
#568: FILE: ./hal/HalBtc8723b2Ant.c:568:
+		if ((pCoexDm->bPreDacSwingOn == pCoexDm->bCurDacSwingOn) &&

CHECK: Alignment should match open parenthesis
#569: FILE: ./hal/HalBtc8723b2Ant.c:569:
+		if ((pCoexDm->bPreDacSwingOn == pCoexDm->bCurDacSwingOn) &&
+			(pCoexDm->preDacSwingLvl == pCoexDm->curDacSwingLvl))

CHECK: Avoid CamelCase: <preDacSwingLvl>
#569: FILE: ./hal/HalBtc8723b2Ant.c:569:
+			(pCoexDm->preDacSwingLvl == pCoexDm->curDacSwingLvl))

CHECK: Lines should not end with a '('
#579: FILE: ./hal/HalBtc8723b2Ant.c:579:
+static void halbtc8723b2ant_SetAgcTable(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetAgcTable>
#579: FILE: ./hal/HalBtc8723b2Ant.c:579:
+static void halbtc8723b2ant_SetAgcTable(

CHECK: Avoid CamelCase: <bAgcTableEn>
#580: FILE: ./hal/HalBtc8723b2Ant.c:580:
+	struct btc_coexist *pBtCoexist, bool bAgcTableEn

CHECK: Please don't use multiple blank lines
#604: FILE: ./hal/HalBtc8723b2Ant.c:604:
+
+

CHECK: Lines should not end with a '('
#633: FILE: ./hal/HalBtc8723b2Ant.c:633:
+static void halbtc8723b2ant_AgcTable(

CHECK: Avoid CamelCase: <halbtc8723b2ant_AgcTable>
#633: FILE: ./hal/HalBtc8723b2Ant.c:633:
+static void halbtc8723b2ant_AgcTable(

CHECK: Avoid CamelCase: <bCurAgcTableEn>
#637: FILE: ./hal/HalBtc8723b2Ant.c:637:
+	pCoexDm->bCurAgcTableEn = bAgcTableEn;

CHECK: Avoid CamelCase: <bPreAgcTableEn>
#640: FILE: ./hal/HalBtc8723b2Ant.c:640:
+		if (pCoexDm->bPreAgcTableEn == pCoexDm->bCurAgcTableEn)

CHECK: Lines should not end with a '('
#648: FILE: ./hal/HalBtc8723b2Ant.c:648:
+static void halbtc8723b2ant_SetCoexTable(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetCoexTable>
#648: FILE: ./hal/HalBtc8723b2Ant.c:648:
+static void halbtc8723b2ant_SetCoexTable(

CHECK: Lines should not end with a '('
#665: FILE: ./hal/HalBtc8723b2Ant.c:665:
+static void halbtc8723b2ant_CoexTable(

CHECK: Avoid CamelCase: <halbtc8723b2ant_CoexTable>
#665: FILE: ./hal/HalBtc8723b2Ant.c:665:
+static void halbtc8723b2ant_CoexTable(

CHECK: Lines should not end with a '('
#680: FILE: ./hal/HalBtc8723b2Ant.c:680:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0'
#680: FILE: ./hal/HalBtc8723b2Ant.c:680:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+			(pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+			(pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+			(pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4'
#680: FILE: ./hal/HalBtc8723b2Ant.c:680:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+			(pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+			(pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+			(pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8'
#680: FILE: ./hal/HalBtc8723b2Ant.c:680:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+			(pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+			(pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+			(pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc'
#680: FILE: ./hal/HalBtc8723b2Ant.c:680:
+		if (
+			(pCoexDm->preVal0x6c0 == pCoexDm->curVal0x6c0) &&
+			(pCoexDm->preVal0x6c4 == pCoexDm->curVal0x6c4) &&
+			(pCoexDm->preVal0x6c8 == pCoexDm->curVal0x6c8) &&
+			(pCoexDm->preVal0x6cc == pCoexDm->curVal0x6cc)
+		)

CHECK: Lines should not end with a '('
#696: FILE: ./hal/HalBtc8723b2Ant.c:696:
+static void halbtc8723b2ant_CoexTableWithType(

CHECK: Avoid CamelCase: <halbtc8723b2ant_CoexTableWithType>
#696: FILE: ./hal/HalBtc8723b2Ant.c:696:
+static void halbtc8723b2ant_CoexTableWithType(

CHECK: line length of 103 exceeds 100 columns
#702: FILE: ./hal/HalBtc8723b2Ant.c:702:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55555555, 0x55555555, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#705: FILE: ./hal/HalBtc8723b2Ant.c:705:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55555555, 0x5afa5afa, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#708: FILE: ./hal/HalBtc8723b2Ant.c:708:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x5a5a5a5a, 0x5a5a5a5a, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#711: FILE: ./hal/HalBtc8723b2Ant.c:711:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0xaaaaaaaa, 0xaaaaaaaa, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#714: FILE: ./hal/HalBtc8723b2Ant.c:714:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0xffffffff, 0xffffffff, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#717: FILE: ./hal/HalBtc8723b2Ant.c:717:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x5fff5fff, 0x5fff5fff, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#720: FILE: ./hal/HalBtc8723b2Ant.c:720:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0x5a5a5a5a, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#723: FILE: ./hal/HalBtc8723b2Ant.c:723:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0xfafafafa, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#726: FILE: ./hal/HalBtc8723b2Ant.c:726:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x5aea5aea, 0x5aea5aea, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#729: FILE: ./hal/HalBtc8723b2Ant.c:729:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0x5aea5aea, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#732: FILE: ./hal/HalBtc8723b2Ant.c:732:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0x5aff5aff, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#735: FILE: ./hal/HalBtc8723b2Ant.c:735:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0x5a5f5a5f, 0xffff, 0x3);

CHECK: line length of 103 exceeds 100 columns
#738: FILE: ./hal/HalBtc8723b2Ant.c:738:
+		halbtc8723b2ant_CoexTable(pBtCoexist, bForceExec, 0x55ff55ff, 0x5f5f5f5f, 0xffff, 0x3);

CHECK: Lines should not end with a '('
#745: FILE: ./hal/HalBtc8723b2Ant.c:745:
+static void halbtc8723b2ant_SetFwIgnoreWlanAct(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetFwIgnoreWlanAct>
#745: FILE: ./hal/HalBtc8723b2Ant.c:745:
+static void halbtc8723b2ant_SetFwIgnoreWlanAct(

WARNING: please, no space before tabs
#749: FILE: ./hal/HalBtc8723b2Ant.c:749:
+^Iu8 ^IH2C_Parameter[1] = {0};$

CHECK: Lines should not end with a '('
#757: FILE: ./hal/HalBtc8723b2Ant.c:757:
+static void halbtc8723b2ant_IgnoreWlanAct(

CHECK: Avoid CamelCase: <halbtc8723b2ant_IgnoreWlanAct>
#757: FILE: ./hal/HalBtc8723b2Ant.c:757:
+static void halbtc8723b2ant_IgnoreWlanAct(

CHECK: Lines should not end with a '('
#772: FILE: ./hal/HalBtc8723b2Ant.c:772:
+static void halbtc8723b2ant_SetFwPstdma(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetFwPstdma>
#772: FILE: ./hal/HalBtc8723b2Ant.c:772:
+static void halbtc8723b2ant_SetFwPstdma(

WARNING: please, no space before tabs
#781: FILE: ./hal/HalBtc8723b2Ant.c:781:
+^Iu8 ^IH2C_Parameter[5] = {0};$

CHECK: Lines should not end with a '('
#798: FILE: ./hal/HalBtc8723b2Ant.c:798:
+static void halbtc8723b2ant_SwMechanism1(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SwMechanism1>
#798: FILE: ./hal/HalBtc8723b2Ant.c:798:
+static void halbtc8723b2ant_SwMechanism1(

CHECK: Avoid CamelCase: <bShrinkRxLPF>
#800: FILE: ./hal/HalBtc8723b2Ant.c:800:
+	bool bShrinkRxLPF,

CHECK: Avoid CamelCase: <bLimitedDIG>
#802: FILE: ./hal/HalBtc8723b2Ant.c:802:
+	bool bLimitedDIG,

CHECK: Avoid CamelCase: <bBTLNAConstrain>
#803: FILE: ./hal/HalBtc8723b2Ant.c:803:
+	bool bBTLNAConstrain

CHECK: Lines should not end with a '('
#810: FILE: ./hal/HalBtc8723b2Ant.c:810:
+static void halbtc8723b2ant_SwMechanism2(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SwMechanism2>
#810: FILE: ./hal/HalBtc8723b2Ant.c:810:
+static void halbtc8723b2ant_SwMechanism2(

CHECK: Avoid CamelCase: <bAGCTableShift>
#812: FILE: ./hal/HalBtc8723b2Ant.c:812:
+	bool bAGCTableShift,

CHECK: Avoid CamelCase: <bADCBackOff>
#813: FILE: ./hal/HalBtc8723b2Ant.c:813:
+	bool bADCBackOff,

CHECK: Avoid CamelCase: <bSWDACSwing>
#814: FILE: ./hal/HalBtc8723b2Ant.c:814:
+	bool bSWDACSwing,

CHECK: Lines should not end with a '('
#822: FILE: ./hal/HalBtc8723b2Ant.c:822:
+static void halbtc8723b2ant_SetAntPath(

CHECK: Avoid CamelCase: <halbtc8723b2ant_SetAntPath>
#822: FILE: ./hal/HalBtc8723b2Ant.c:822:
+static void halbtc8723b2ant_SetAntPath(

WARNING: please, no space before tabs
#830: FILE: ./hal/HalBtc8723b2Ant.c:830:
+^Iu8 ^IH2C_Parameter[2] = {0};$

CHECK: line length of 120 exceeds 100 columns
#833: FILE: ./hal/HalBtc8723b2Ant.c:833:
+	pBtCoexist->fBtcGet(pBtCoexist, BTC_GET_U4_WIFI_FW_VER, &fwVer);	/*  [31:16]=fw ver, [15:0]=fw sub ver */

CHECK: line length of 106 exceeds 100 columns
#855: FILE: ./hal/HalBtc8723b2Ant.c:855:
+		pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1, 0xfffff, 0x0); /* WiFi TRx Mask off */

CHECK: line length of 102 exceeds 100 columns
#856: FILE: ./hal/HalBtc8723b2Ant.c:856:
+		pBtCoexist->fBtcSetBtReg(pBtCoexist, BTC_BT_REG_RF, 0x3c, 0x01); /* BT TRx Mask off */

CHECK: line length of 113 exceeds 100 columns
#886: FILE: ./hal/HalBtc8723b2Ant.c:886:
+		pBtCoexist->fBtcWrite4Byte(pBtCoexist, 0x948, 0x0); /*  fixed internal switch S1->WiFi, S0->BT */

CHECK: line length of 118 exceeds 100 columns
#889: FILE: ./hal/HalBtc8723b2Ant.c:889:
+			pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x92c, 0x3, 0x1);	/*  ext switch main at wifi */

CHECK: line length of 117 exceeds 100 columns
#892: FILE: ./hal/HalBtc8723b2Ant.c:892:
+			pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x92c, 0x3, 0x2);	/*  ext switch aux at wifi */

CHECK: line length of 124 exceeds 100 columns
#904: FILE: ./hal/HalBtc8723b2Ant.c:904:
+		pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x64, 0x1, 0x0); /* fixed external switch S1->Main, S0->Aux */

CHECK: line length of 121 exceeds 100 columns
#907: FILE: ./hal/HalBtc8723b2Ant.c:907:
+			pBtCoexist->fBtcWrite4Byte(pBtCoexist, 0x948, 0x0); /*  fixed internal switch S1->WiFi, S0->BT */

CHECK: line length of 123 exceeds 100 columns
#910: FILE: ./hal/HalBtc8723b2Ant.c:910:
+			pBtCoexist->fBtcWrite4Byte(pBtCoexist, 0x948, 0x280); /*  fixed internal switch S0->WiFi, S1->BT */

CHECK: Lines should not end with a '('
#916: FILE: ./hal/HalBtc8723b2Ant.c:916:
+static void halbtc8723b2ant_PsTdma(

CHECK: Lines should not end with a '('
#924: FILE: ./hal/HalBtc8723b2Ant.c:924:
+		if (

CHECK: Unnecessary parentheses around 'pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn'
#924: FILE: ./hal/HalBtc8723b2Ant.c:924:
+		if (
+			(pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn) &&
+			(pCoexDm->prePsTdma == pCoexDm->curPsTdma)
+		)

CHECK: Unnecessary parentheses around 'pCoexDm->prePsTdma == pCoexDm->curPsTdma'
#924: FILE: ./hal/HalBtc8723b2Ant.c:924:
+		if (
+			(pCoexDm->bPrePsTdmaOn == pCoexDm->bCurPsTdmaOn) &&
+			(pCoexDm->prePsTdma == pCoexDm->curPsTdma)
+		)

CHECK: Avoid CamelCase: <halbtc8723b2ant_CoexAllOff>
#1021: FILE: ./hal/HalBtc8723b2Ant.c:1021:
+static void halbtc8723b2ant_CoexAllOff(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtc8723b2ant_InitCoexDm>
#1037: FILE: ./hal/HalBtc8723b2Ant.c:1037:
+static void halbtc8723b2ant_InitCoexDm(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionBtInquiry>
#1049: FILE: ./hal/HalBtc8723b2Ant.c:1049:
+static void halbtc8723b2ant_ActionBtInquiry(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bNeedRecover0x948>
#1071: FILE: ./hal/HalBtc8723b2Ant.c:1071:
+	pCoexDm->bNeedRecover0x948 = true;

CHECK: Avoid CamelCase: <halbtc8723b2ant_IsCommonAction>
#1077: FILE: ./hal/HalBtc8723b2Ant.c:1077:
+static bool halbtc8723b2ant_IsCommonAction(struct btc_coexist *pBtCoexist)

CHECK: line length of 104 exceeds 100 columns
#1105: FILE: ./hal/HalBtc8723b2Ant.c:1105:
+			pBtCoexist->fBtcSet(pBtCoexist, BTC_SET_ACT_DISABLE_LOW_POWER, &bLowPwrDisable);

CHECK: line length of 104 exceeds 100 columns
#1120: FILE: ./hal/HalBtc8723b2Ant.c:1120:
+			pBtCoexist->fBtcSet(pBtCoexist, BTC_SET_ACT_DISABLE_LOW_POWER, &bLowPwrDisable);

CHECK: line length of 104 exceeds 100 columns
#1139: FILE: ./hal/HalBtc8723b2Ant.c:1139:
+			pBtCoexist->fBtcSet(pBtCoexist, BTC_SET_ACT_DISABLE_LOW_POWER, &bLowPwrDisable);

CHECK: line length of 102 exceeds 100 columns
#1148: FILE: ./hal/HalBtc8723b2Ant.c:1148:
+				halbtc8723b2ant_LimitedRx(pBtCoexist, NORMAL_EXEC, false, false, 0x8);

CHECK: line length of 101 exceeds 100 columns
#1160: FILE: ./hal/HalBtc8723b2Ant.c:1160:
+				halbtc8723b2ant_SwMechanism1(pBtCoexist, false, false, false, false);

CHECK: Lines should not end with a '('
#1170: FILE: ./hal/HalBtc8723b2Ant.c:1170:
+static void halbtc8723b2ant_TdmaDurationAdjust(

CHECK: Avoid CamelCase: <halbtc8723b2ant_TdmaDurationAdjust>
#1170: FILE: ./hal/HalBtc8723b2Ant.c:1170:
+static void halbtc8723b2ant_TdmaDurationAdjust(

CHECK: Avoid CamelCase: <bScoHid>
#1171: FILE: ./hal/HalBtc8723b2Ant.c:1171:
+	struct btc_coexist *pBtCoexist, bool bScoHid, bool bTxPause, u8 maxInterval

CHECK: Avoid CamelCase: <bTxPause>
#1171: FILE: ./hal/HalBtc8723b2Ant.c:1171:
+	struct btc_coexist *pBtCoexist, bool bScoHid, bool bTxPause, u8 maxInterval

CHECK: Avoid CamelCase: <maxInterval>
#1171: FILE: ./hal/HalBtc8723b2Ant.c:1171:
+	struct btc_coexist *pBtCoexist, bool bScoHid, bool bTxPause, u8 maxInterval

CHECK: line length of 105 exceeds 100 columns
#1235: FILE: ./hal/HalBtc8723b2Ant.c:1235:
+			if (up >= n) { /*  if 連續 n 個2秒 retry count為0, 則調寬WiFi duration */

CHECK: line length of 104 exceeds 100 columns
#1249: FILE: ./hal/HalBtc8723b2Ant.c:1249:
+			if (dn == 2) { /*  if 連續 2 個2秒 retry count< 3, 則調窄WiFi duration */

CHECK: line length of 117 exceeds 100 columns
#1255: FILE: ./hal/HalBtc8723b2Ant.c:1255:
+				if (m >= 20) /* m 最大值 = 20 ' 最大120秒 recheck是否調整 WiFi duration. */

CHECK: line length of 109 exceeds 100 columns
#1270: FILE: ./hal/HalBtc8723b2Ant.c:1270:
+			if (m >= 20) /* m 最大值 = 20 ' 最大120秒 recheck是否調整 WiFi duration. */

CHECK: line length of 104 exceeds 100 columns
#1581: FILE: ./hal/HalBtc8723b2Ant.c:1581:
+			halbtc8723b2ant_PsTdma(pBtCoexist, NORMAL_EXEC, true, pCoexDm->psTdmaDuAdjType);

CHECK: Blank lines aren't necessary before a close brace '}'
#1583: FILE: ./hal/HalBtc8723b2Ant.c:1583:
+
+	}

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionSco>
#1587: FILE: ./hal/HalBtc8723b2Ant.c:1587:
+static void halbtc8723b2ant_ActionSco(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1617: FILE: ./hal/HalBtc8723b2Ant.c:1617:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1617: FILE: ./hal/HalBtc8723b2Ant.c:1617:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1617: FILE: ./hal/HalBtc8723b2Ant.c:1617:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1628: FILE: ./hal/HalBtc8723b2Ant.c:1628:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1628: FILE: ./hal/HalBtc8723b2Ant.c:1628:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1628: FILE: ./hal/HalBtc8723b2Ant.c:1628:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Please don't use multiple blank lines
#1641: FILE: ./hal/HalBtc8723b2Ant.c:1641:
+
+

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionHid>
#1642: FILE: ./hal/HalBtc8723b2Ant.c:1642:
+static void halbtc8723b2ant_ActionHid(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1668: FILE: ./hal/HalBtc8723b2Ant.c:1668:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#1668: FILE: ./hal/HalBtc8723b2Ant.c:1668:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1668: FILE: ./hal/HalBtc8723b2Ant.c:1668:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Lines should not end with a '('
#1678: FILE: ./hal/HalBtc8723b2Ant.c:1678:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1678: FILE: ./hal/HalBtc8723b2Ant.c:1678:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1678: FILE: ./hal/HalBtc8723b2Ant.c:1678:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1689: FILE: ./hal/HalBtc8723b2Ant.c:1689:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1689: FILE: ./hal/HalBtc8723b2Ant.c:1689:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1689: FILE: ./hal/HalBtc8723b2Ant.c:1689:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionA2dp>
#1703: FILE: ./hal/HalBtc8723b2Ant.c:1703:
+static void halbtc8723b2ant_ActionA2dp(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <wifiRssiState1>
#1705: FILE: ./hal/HalBtc8723b2Ant.c:1705:
+	u8 wifiRssiState, wifiRssiState1, btRssiState;

CHECK: Avoid CamelCase: <apNum>
#1707: FILE: ./hal/HalBtc8723b2Ant.c:1707:
+	u8 apNum = 0;

CHECK: Lines should not end with a '('
#1748: FILE: ./hal/HalBtc8723b2Ant.c:1748:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#1748: FILE: ./hal/HalBtc8723b2Ant.c:1748:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1748: FILE: ./hal/HalBtc8723b2Ant.c:1748:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Lines should not end with a '('
#1759: FILE: ./hal/HalBtc8723b2Ant.c:1759:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1759: FILE: ./hal/HalBtc8723b2Ant.c:1759:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1759: FILE: ./hal/HalBtc8723b2Ant.c:1759:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1770: FILE: ./hal/HalBtc8723b2Ant.c:1770:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1770: FILE: ./hal/HalBtc8723b2Ant.c:1770:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1770: FILE: ./hal/HalBtc8723b2Ant.c:1770:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionA2dpPanHs>
#1783: FILE: ./hal/HalBtc8723b2Ant.c:1783:
+static void halbtc8723b2ant_ActionA2dpPanHs(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1809: FILE: ./hal/HalBtc8723b2Ant.c:1809:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1809: FILE: ./hal/HalBtc8723b2Ant.c:1809:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1809: FILE: ./hal/HalBtc8723b2Ant.c:1809:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1820: FILE: ./hal/HalBtc8723b2Ant.c:1820:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1820: FILE: ./hal/HalBtc8723b2Ant.c:1820:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1820: FILE: ./hal/HalBtc8723b2Ant.c:1820:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionPanEdr>
#1833: FILE: ./hal/HalBtc8723b2Ant.c:1833:
+static void halbtc8723b2ant_ActionPanEdr(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1854: FILE: ./hal/HalBtc8723b2Ant.c:1854:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#1854: FILE: ./hal/HalBtc8723b2Ant.c:1854:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1854: FILE: ./hal/HalBtc8723b2Ant.c:1854:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Lines should not end with a '('
#1865: FILE: ./hal/HalBtc8723b2Ant.c:1865:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1865: FILE: ./hal/HalBtc8723b2Ant.c:1865:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1865: FILE: ./hal/HalBtc8723b2Ant.c:1865:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1876: FILE: ./hal/HalBtc8723b2Ant.c:1876:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1876: FILE: ./hal/HalBtc8723b2Ant.c:1876:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1876: FILE: ./hal/HalBtc8723b2Ant.c:1876:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Please don't use multiple blank lines
#1889: FILE: ./hal/HalBtc8723b2Ant.c:1889:
+
+

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionPanHs>
#1891: FILE: ./hal/HalBtc8723b2Ant.c:1891:
+static void halbtc8723b2ant_ActionPanHs(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1916: FILE: ./hal/HalBtc8723b2Ant.c:1916:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1916: FILE: ./hal/HalBtc8723b2Ant.c:1916:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1916: FILE: ./hal/HalBtc8723b2Ant.c:1916:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1927: FILE: ./hal/HalBtc8723b2Ant.c:1927:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1927: FILE: ./hal/HalBtc8723b2Ant.c:1927:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1927: FILE: ./hal/HalBtc8723b2Ant.c:1927:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionPanEdrA2dp>
#1941: FILE: ./hal/HalBtc8723b2Ant.c:1941:
+static void halbtc8723b2ant_ActionPanEdrA2dp(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#1962: FILE: ./hal/HalBtc8723b2Ant.c:1962:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#1962: FILE: ./hal/HalBtc8723b2Ant.c:1962:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1962: FILE: ./hal/HalBtc8723b2Ant.c:1962:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: Lines should not end with a '('
#1978: FILE: ./hal/HalBtc8723b2Ant.c:1978:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1978: FILE: ./hal/HalBtc8723b2Ant.c:1978:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1978: FILE: ./hal/HalBtc8723b2Ant.c:1978:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#1989: FILE: ./hal/HalBtc8723b2Ant.c:1989:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#1989: FILE: ./hal/HalBtc8723b2Ant.c:1989:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#1989: FILE: ./hal/HalBtc8723b2Ant.c:1989:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionPanEdrHid>
#2002: FILE: ./hal/HalBtc8723b2Ant.c:2002:
+static void halbtc8723b2ant_ActionPanEdrHid(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#2018: FILE: ./hal/HalBtc8723b2Ant.c:2018:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#2018: FILE: ./hal/HalBtc8723b2Ant.c:2018:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2018: FILE: ./hal/HalBtc8723b2Ant.c:2018:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: Lines should not end with a '('
#2041: FILE: ./hal/HalBtc8723b2Ant.c:2041:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2041: FILE: ./hal/HalBtc8723b2Ant.c:2041:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2041: FILE: ./hal/HalBtc8723b2Ant.c:2041:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#2052: FILE: ./hal/HalBtc8723b2Ant.c:2052:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2052: FILE: ./hal/HalBtc8723b2Ant.c:2052:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2052: FILE: ./hal/HalBtc8723b2Ant.c:2052:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionHidA2dpPanEdr>
#2066: FILE: ./hal/HalBtc8723b2Ant.c:2066:
+static void halbtc8723b2ant_ActionHidA2dpPanEdr(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#2089: FILE: ./hal/HalBtc8723b2Ant.c:2089:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#2089: FILE: ./hal/HalBtc8723b2Ant.c:2089:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2089: FILE: ./hal/HalBtc8723b2Ant.c:2089:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	) {

CHECK: braces {} should be used on all arms of this statement
#2089: FILE: ./hal/HalBtc8723b2Ant.c:2089:
+	if (
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#2097: FILE: ./hal/HalBtc8723b2Ant.c:2097:
+	} else

CHECK: Lines should not end with a '('
#2102: FILE: ./hal/HalBtc8723b2Ant.c:2102:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2102: FILE: ./hal/HalBtc8723b2Ant.c:2102:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2102: FILE: ./hal/HalBtc8723b2Ant.c:2102:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#2113: FILE: ./hal/HalBtc8723b2Ant.c:2113:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2113: FILE: ./hal/HalBtc8723b2Ant.c:2113:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2113: FILE: ./hal/HalBtc8723b2Ant.c:2113:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_ActionHidA2dp>
#2126: FILE: ./hal/HalBtc8723b2Ant.c:2126:
+static void halbtc8723b2ant_ActionHidA2dp(struct btc_coexist *pBtCoexist)

CHECK: braces {} should be used on all arms of this statement
#2152: FILE: ./hal/HalBtc8723b2Ant.c:2152:
+		if (BTC_RSSI_HIGH(btRssiState)) {
[...]
+		} else if (BTC_RSSI_MEDIUM(btRssiState))
[...]
+		else
[...]

CHECK: Lines should not end with a '('
#2167: FILE: ./hal/HalBtc8723b2Ant.c:2167:
+	if (

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_HIGH'
#2167: FILE: ./hal/HalBtc8723b2Ant.c:2167:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Unnecessary parentheses around 'btRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2167: FILE: ./hal/HalBtc8723b2Ant.c:2167:
+	if (
+		(btRssiState == BTC_RSSI_STATE_HIGH) ||
+		(btRssiState == BTC_RSSI_STATE_STAY_HIGH)
+	)

CHECK: Lines should not end with a '('
#2177: FILE: ./hal/HalBtc8723b2Ant.c:2177:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2177: FILE: ./hal/HalBtc8723b2Ant.c:2177:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2177: FILE: ./hal/HalBtc8723b2Ant.c:2177:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Lines should not end with a '('
#2188: FILE: ./hal/HalBtc8723b2Ant.c:2188:
+		if (

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_HIGH'
#2188: FILE: ./hal/HalBtc8723b2Ant.c:2188:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Unnecessary parentheses around 'wifiRssiState == BTC_RSSI_STATE_STAY_HIGH'
#2188: FILE: ./hal/HalBtc8723b2Ant.c:2188:
+		if (
+			(wifiRssiState == BTC_RSSI_STATE_HIGH) ||
+			(wifiRssiState == BTC_RSSI_STATE_STAY_HIGH)
+		) {

CHECK: Avoid CamelCase: <halbtc8723b2ant_RunCoexistMechanism>
#2201: FILE: ./hal/HalBtc8723b2Ant.c:2201:
+static void halbtc8723b2ant_RunCoexistMechanism(struct btc_coexist *pBtCoexist)

WARNING: braces {} are not necessary for single statement blocks
#2205: FILE: ./hal/HalBtc8723b2Ant.c:2205:
+	if (pBtCoexist->bManualControl) {
+		return;
+	}

WARNING: braces {} are not necessary for single statement blocks
#2209: FILE: ./hal/HalBtc8723b2Ant.c:2209:
+	if (pCoexSta->bUnderIps) {
+		return;
+	}

CHECK: Unnecessary parentheses around 'BT_8723B_2ANT_COEX_ALGO_PANHS != algorithm'
#2214: FILE: ./hal/HalBtc8723b2Ant.c:2214:
+	if (pCoexSta->bC2hBtInquiryPage && (BT_8723B_2ANT_COEX_ALGO_PANHS != algorithm)) {

WARNING: Comparisons should place the constant on the right side of the test
#2214: FILE: ./hal/HalBtc8723b2Ant.c:2214:
+	if (pCoexSta->bC2hBtInquiryPage && (BT_8723B_2ANT_COEX_ALGO_PANHS != algorithm)) {

WARNING: else is not generally useful after a break or return
#2217: FILE: ./hal/HalBtc8723b2Ant.c:2217:
+		return;
+	} else {

WARNING: braces {} are not necessary for single statement blocks
#2229: FILE: ./hal/HalBtc8723b2Ant.c:2229:
+		if (pCoexDm->curAlgorithm != pCoexDm->preAlgorithm) {
+			pCoexDm->bAutoTdmaAdjust = false;
+		}

CHECK: Please don't use multiple blank lines
#2233: FILE: ./hal/HalBtc8723b2Ant.c:2233:
+
+

CHECK: Avoid CamelCase: <halbtc8723b2ant_WifiOffHwCfg>
#2273: FILE: ./hal/HalBtc8723b2Ant.c:2273:
+static void halbtc8723b2ant_WifiOffHwCfg(struct btc_coexist *pBtCoexist)

CHECK: line length of 119 exceeds 100 columns
#2282: FILE: ./hal/HalBtc8723b2Ant.c:2282:
+	pBtCoexist->fBtcSetRfReg(pBtCoexist, BTC_RF_A, 0x1, 0xfffff, 0x780); /* WiFi goto standby while GNT_BT 0-->1 */

CHECK: braces {} should be used on all arms of this statement
#2284: FILE: ./hal/HalBtc8723b2Ant.c:2284:
+	if (fwVer >= 0x180000) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#2288: FILE: ./hal/HalBtc8723b2Ant.c:2288:
+	} else

CHECK: line length of 121 exceeds 100 columns
#2293: FILE: ./hal/HalBtc8723b2Ant.c:2293:
+		pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x67, 0x20, 0x0); /* BT select s0/s1 is controlled by BT */

CHECK: line length of 123 exceeds 100 columns
#2295: FILE: ./hal/HalBtc8723b2Ant.c:2295:
+		pBtCoexist->fBtcWrite1ByteBitMask(pBtCoexist, 0x67, 0x20, 0x1); /* BT select s0/s1 is controlled by WiFi */

CHECK: Avoid CamelCase: <halbtc8723b2ant_InitHwConfig>
#2298: FILE: ./hal/HalBtc8723b2Ant.c:2298:
+static void halbtc8723b2ant_InitHwConfig(struct btc_coexist *pBtCoexist, bool bBackUp)

CHECK: Avoid CamelCase: <fBtcGetRfReg>
#2304: FILE: ./hal/HalBtc8723b2Ant.c:2304:
+		pBtCoexist->fBtcGetRfReg(pBtCoexist, BTC_RF_A, 0x1e, 0xfffff);

CHECK: line length of 103 exceeds 100 columns
#2319: FILE: ./hal/HalBtc8723b2Ant.c:2319:
+	pBtCoexist->fBtcWrite1Byte(pBtCoexist, 0x76e, 0xc); /* 0x76e[3] = 1, WLAN_Act control by PTA */

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_PowerOnSetting>
#2330: FILE: ./hal/HalBtc8723b2Ant.c:2330:
+void EXhalbtc8723b2ant_PowerOnSetting(struct btc_coexist *pBtCoexist)

CHECK: line length of 113 exceeds 100 columns
#2348: FILE: ./hal/HalBtc8723b2Ant.c:2348:
+	/*  S0 or S1 setting and Local register setting(By the setting fw can get ant number, S0/S1, ... info) */

WARNING: please, no space before tabs
#2350: FILE: ./hal/HalBtc8723b2Ant.c:2350:
+^I/* ^IBIT0: "0" for no antenna inverse; "1" for antenna inverse */$

WARNING: please, no space before tabs
#2351: FILE: ./hal/HalBtc8723b2Ant.c:2351:
+^I/* ^IBIT1: "0" for internal switch; "1" for external switch */$

WARNING: please, no space before tabs
#2352: FILE: ./hal/HalBtc8723b2Ant.c:2352:
+^I/* ^IBIT2: "0" for one antenna; "1" for two antenna */$

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_InitHwConfig>
#2382: FILE: ./hal/HalBtc8723b2Ant.c:2382:
+void EXhalbtc8723b2ant_InitHwConfig(struct btc_coexist *pBtCoexist, bool bWifiOnly)

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_InitCoexDm>
#2387: FILE: ./hal/HalBtc8723b2Ant.c:2387:
+void EXhalbtc8723b2ant_InitCoexDm(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_IpsNotify>
#2392: FILE: ./hal/HalBtc8723b2Ant.c:2392:
+void EXhalbtc8723b2ant_IpsNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_LpsNotify>
#2407: FILE: ./hal/HalBtc8723b2Ant.c:2407:
+void EXhalbtc8723b2ant_LpsNotify(struct btc_coexist *pBtCoexist, u8 type)

WARNING: braces {} are not necessary for any arm of this statement
#2409: FILE: ./hal/HalBtc8723b2Ant.c:2409:
+	if (type == BTC_LPS_ENABLE) {
[...]
+	} else if (type == BTC_LPS_DISABLE) {
[...]

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_ScanNotify>
#2416: FILE: ./hal/HalBtc8723b2Ant.c:2416:
+void EXhalbtc8723b2ant_ScanNotify(struct btc_coexist *pBtCoexist, u8 type)

WARNING: braces {} are not necessary for any arm of this statement
#2418: FILE: ./hal/HalBtc8723b2Ant.c:2418:
+	if (type == BTC_SCAN_START) {
[...]
+	} else if (type == BTC_SCAN_FINISH) {
[...]

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_ConnectNotify>
#2423: FILE: ./hal/HalBtc8723b2Ant.c:2423:
+void EXhalbtc8723b2ant_ConnectNotify(struct btc_coexist *pBtCoexist, u8 type)

WARNING: braces {} are not necessary for any arm of this statement
#2425: FILE: ./hal/HalBtc8723b2Ant.c:2425:
+	if (type == BTC_ASSOCIATE_START) {
[...]
+	} else if (type == BTC_ASSOCIATE_FINISH) {
[...]

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_MediaStatusNotify>
#2430: FILE: ./hal/HalBtc8723b2Ant.c:2430:
+void EXhalbtc8723b2ant_MediaStatusNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Unnecessary parentheses around 'type == BTC_MEDIA_CONNECT'
#2439: FILE: ./hal/HalBtc8723b2Ant.c:2439:
+	if ((type == BTC_MEDIA_CONNECT) && (wifiCentralChnl <= 14)) {

CHECK: Unnecessary parentheses around 'wifiCentralChnl <= 14'
#2439: FILE: ./hal/HalBtc8723b2Ant.c:2439:
+	if ((type == BTC_MEDIA_CONNECT) && (wifiCentralChnl <= 14)) {

CHECK: braces {} should be used on all arms of this statement
#2443: FILE: ./hal/HalBtc8723b2Ant.c:2443:
+		if (wifiBw == BTC_WIFI_BW_HT40)
[...]
+		else {
[...]

CHECK: Unbalanced braces around else statement
#2445: FILE: ./hal/HalBtc8723b2Ant.c:2445:
+		else {

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_SpecialPacketNotify>
#2461: FILE: ./hal/HalBtc8723b2Ant.c:2461:
+void EXhalbtc8723b2ant_SpecialPacketNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Lines should not end with a '('
#2465: FILE: ./hal/HalBtc8723b2Ant.c:2465:
+void EXhalbtc8723b2ant_BtInfoNotify(

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_BtInfoNotify>
#2465: FILE: ./hal/HalBtc8723b2Ant.c:2465:
+void EXhalbtc8723b2ant_BtInfoNotify(

WARNING: please, no space before tabs
#2469: FILE: ./hal/HalBtc8723b2Ant.c:2469:
+^Iu8 ^IbtInfo = 0;$

WARNING: please, no space before tabs
#2470: FILE: ./hal/HalBtc8723b2Ant.c:2470:
+^Iu8 ^Ii, rspSource = 0;$

CHECK: Blank lines aren't necessary before a close brace '}'
#2487: FILE: ./hal/HalBtc8723b2Ant.c:2487:
+
+	}

WARNING: braces {} are not necessary for single statement blocks
#2489: FILE: ./hal/HalBtc8723b2Ant.c:2489:
+	if (pBtCoexist->bManualControl) {
+		return;
+	}

WARNING: Comparisons should place the constant on the right side of the test
#2493: FILE: ./hal/HalBtc8723b2Ant.c:2493:
+	if (BT_INFO_SRC_8723B_2ANT_WIFI_FW != rspSource) {

CHECK: line length of 116 exceeds 100 columns
#2503: FILE: ./hal/HalBtc8723b2Ant.c:2503:
+			/* BT into is responded by BT FW and BT RF REG 0x3C != 0x01 => Need to switch BT TRx Mask */

CHECK: line length of 102 exceeds 100 columns
#2515: FILE: ./hal/HalBtc8723b2Ant.c:2515:
+				EXhalbtc8723b2ant_MediaStatusNotify(pBtCoexist, BTC_MEDIA_DISCONNECT);

WARNING: braces {} are not necessary for any arm of this statement
#2518: FILE: ./hal/HalBtc8723b2Ant.c:2518:
+		if ((pCoexSta->btInfoExt & BIT3)) {
[...]
+		} else {
[...]

CHECK: line length of 102 exceeds 100 columns
#2562: FILE: ./hal/HalBtc8723b2Ant.c:2562:
+	} else if (btInfo == BT_INFO_8723B_2ANT_B_CONNECTION)	{ /*  connection exists but no busy */

CHECK: Lines should not end with a '('
#2564: FILE: ./hal/HalBtc8723b2Ant.c:2564:
+	} else if (

CHECK: Lines should not end with a '('
#2575: FILE: ./hal/HalBtc8723b2Ant.c:2575:
+	if (

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_BUSY'
#2575: FILE: ./hal/HalBtc8723b2Ant.c:2575:
+	if (
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_SCO_BUSY)
+	) {

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_SCO_BUSY'
#2575: FILE: ./hal/HalBtc8723b2Ant.c:2575:
+	if (
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_SCO_BUSY)
+	) {

CHECK: Unnecessary parentheses around 'pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_SCO_BUSY'
#2575: FILE: ./hal/HalBtc8723b2Ant.c:2575:
+	if (
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_SCO_BUSY) ||
+		(pCoexDm->btStatus == BT_8723B_2ANT_BT_STATUS_ACL_SCO_BUSY)
+	) {

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_HaltNotify>
#2595: FILE: ./hal/HalBtc8723b2Ant.c:2595:
+void EXhalbtc8723b2ant_HaltNotify(struct btc_coexist *pBtCoexist)

CHECK: line length of 113 exceeds 100 columns
#2598: FILE: ./hal/HalBtc8723b2Ant.c:2598:
+	pBtCoexist->fBtcSetBtReg(pBtCoexist, BTC_BT_REG_RF, 0x3c, 0x15); /* BT goto standby while GNT_BT 1-->0 */

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_PnpNotify>
#2604: FILE: ./hal/HalBtc8723b2Ant.c:2604:
+void EXhalbtc8723b2ant_PnpNotify(struct btc_coexist *pBtCoexist, u8 pnpState)

CHECK: Avoid CamelCase: <EXhalbtc8723b2ant_Periodical>
#2614: FILE: ./hal/HalBtc8723b2Ant.c:2614:
+void EXhalbtc8723b2ant_Periodical(struct btc_coexist *pBtCoexist)

CHECK: Lines should not end with a '('
#2625: FILE: ./hal/HalBtc8723b2Ant.c:2625:
+	if (

total: 0 errors, 44 warnings, 310 checks, 2630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b2Ant.c has style problems, please review.
-----------------------
./hal/HalBtc8723b2Ant.h
-----------------------
CHECK: Avoid CamelCase: <bResetTdmaAdjust>
#63: FILE: ./hal/HalBtc8723b2Ant.h:63:
+	bool bResetTdmaAdjust;

CHECK: Avoid CamelCase: <bPreAdcBackOff>
#80: FILE: ./hal/HalBtc8723b2Ant.h:80:
+	bool bPreAdcBackOff;

CHECK: Avoid CamelCase: <bCurAdcBackOff>
#81: FILE: ./hal/HalBtc8723b2Ant.h:81:
+	bool bCurAdcBackOff;

CHECK: Lines should not end with a '('
#141: FILE: ./hal/HalBtc8723b2Ant.h:141:
+void EXhalbtc8723b2ant_BtInfoNotify(

total: 0 errors, 0 warnings, 4 checks, 146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b2Ant.h has style problems, please review.
-----------------------
./hal/HalBtc8723b2Ant.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtc8723b2Ant.o has style problems, please review.
------------------
./hal/hal_btcoex.c
------------------
WARNING: please, no space before tabs
#12: FILE: ./hal/hal_btcoex.c:12:
+/* ^I^IGlobal variables */$

CHECK: Avoid CamelCase: <GLBtCoexist>
#14: FILE: ./hal/hal_btcoex.c:14:
+struct btc_coexist GLBtCoexist;

CHECK: Avoid CamelCase: <GLBtcWiFiInScanState>
#15: FILE: ./hal/hal_btcoex.c:15:
+static u8 GLBtcWiFiInScanState;

CHECK: Avoid CamelCase: <GLBtcWiFiInIQKState>
#16: FILE: ./hal/hal_btcoex.c:16:
+static u8 GLBtcWiFiInIQKState;

WARNING: please, no space before tabs
#19: FILE: ./hal/hal_btcoex.c:19:
+/* ^I^IDebug related function */$

CHECK: Avoid CamelCase: <halbtcoutsrc_IsBtCoexistAvailable>
#21: FILE: ./hal/hal_btcoex.c:21:
+static u8 halbtcoutsrc_IsBtCoexistAvailable(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bBinded>
#23: FILE: ./hal/hal_btcoex.c:23:
+	if (!pBtCoexist->bBinded || !pBtCoexist->Adapter)

CHECK: Avoid CamelCase: <halbtcoutsrc_LeaveLps>
#29: FILE: ./hal/hal_btcoex.c:29:
+static void halbtcoutsrc_LeaveLps(struct btc_coexist *pBtCoexist)

CHECK: Please don't use multiple blank lines
#33: FILE: ./hal/hal_btcoex.c:33:
+
+

CHECK: Avoid CamelCase: <bBtCtrlLps>
#36: FILE: ./hal/hal_btcoex.c:36:
+	pBtCoexist->btInfo.bBtCtrlLps = true;

CHECK: Avoid CamelCase: <bBtLpsOn>
#37: FILE: ./hal/hal_btcoex.c:37:
+	pBtCoexist->btInfo.bBtLpsOn = false;

CHECK: Avoid CamelCase: <halbtcoutsrc_EnterLps>
#42: FILE: ./hal/hal_btcoex.c:42:
+static void halbtcoutsrc_EnterLps(struct btc_coexist *pBtCoexist)

CHECK: Please don't use multiple blank lines
#46: FILE: ./hal/hal_btcoex.c:46:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_NormalLps>
#55: FILE: ./hal/hal_btcoex.c:55:
+static void halbtcoutsrc_NormalLps(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <halbtcoutsrc_LeaveLowPower>
#74: FILE: ./hal/hal_btcoex.c:74:
+static void halbtcoutsrc_LeaveLowPower(struct btc_coexist *pBtCoexist)

CHECK: Please don't use multiple blank lines
#82: FILE: ./hal/hal_btcoex.c:82:
+
+

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#101: FILE: ./hal/hal_btcoex.c:101:
+		msleep(1);

CHECK: Avoid CamelCase: <halbtcoutsrc_NormalLowPower>
#109: FILE: ./hal/hal_btcoex.c:109:
+static void halbtcoutsrc_NormalLowPower(struct btc_coexist *pBtCoexist)

CHECK: Please don't use multiple blank lines
#113: FILE: ./hal/hal_btcoex.c:113:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_DisableLowPower>
#118: FILE: ./hal/hal_btcoex.c:118:
+static void halbtcoutsrc_DisableLowPower(struct btc_coexist *pBtCoexist, u8 bLowPwrDisable)

CHECK: Avoid CamelCase: <bBtDisableLowPwr>
#120: FILE: ./hal/hal_btcoex.c:120:
+	pBtCoexist->btInfo.bBtDisableLowPwr = bLowPwrDisable;

CHECK: line length of 103 exceeds 100 columns
#124: FILE: ./hal/hal_btcoex.c:124:
+		halbtcoutsrc_NormalLowPower(pBtCoexist);	/*  original 32k low power behavior. */

CHECK: Avoid CamelCase: <halbtcoutsrc_AggregationCheck>
#127: FILE: ./hal/hal_btcoex.c:127:
+static void halbtcoutsrc_AggregationCheck(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <bNeedToAct>
#130: FILE: ./hal/hal_btcoex.c:130:
+	bool bNeedToAct;

CHECK: Please don't use multiple blank lines
#132: FILE: ./hal/hal_btcoex.c:132:
+
+

CHECK: Avoid CamelCase: <bRejectAggPkt>
#136: FILE: ./hal/hal_btcoex.c:136:
+	if (pBtCoexist->btInfo.bRejectAggPkt) {

CHECK: Avoid CamelCase: <bPreBtCtrlAggBufSize>
#139: FILE: ./hal/hal_btcoex.c:139:
+		if (pBtCoexist->btInfo.bPreBtCtrlAggBufSize !=

CHECK: line length of 103 exceeds 100 columns
#142: FILE: ./hal/hal_btcoex.c:142:
+			pBtCoexist->btInfo.bPreBtCtrlAggBufSize = pBtCoexist->btInfo.bBtCtrlAggBufSize;

CHECK: Avoid CamelCase: <preAggBufSize>
#146: FILE: ./hal/hal_btcoex.c:146:
+			if (pBtCoexist->btInfo.preAggBufSize !=

CHECK: Avoid CamelCase: <halbtcoutsrc_IsWifiBusy>
#160: FILE: ./hal/hal_btcoex.c:160:
+static u8 halbtcoutsrc_IsWifiBusy(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#164: FILE: ./hal/hal_btcoex.c:164:
+
+

CHECK: Avoid CamelCase: <_halbtcoutsrc_GetWifiLinkStatus>
#177: FILE: ./hal/hal_btcoex.c:177:
+static u32 _halbtcoutsrc_GetWifiLinkStatus(struct adapter *padapter)

CHECK: Avoid CamelCase: <portConnectedStatus>
#181: FILE: ./hal/hal_btcoex.c:181:
+	u32 portConnectedStatus;

CHECK: Please don't use multiple blank lines
#183: FILE: ./hal/hal_btcoex.c:183:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_GetWifiLinkStatus>
#205: FILE: ./hal/hal_btcoex.c:205:
+static u32 halbtcoutsrc_GetWifiLinkStatus(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <retVal>
#214: FILE: ./hal/hal_btcoex.c:214:
+	u32 retVal;

CHECK: Avoid CamelCase: <numOfConnectedPort>
#215: FILE: ./hal/hal_btcoex.c:215:
+	u32 portConnectedStatus, numOfConnectedPort;

CHECK: Please don't use multiple blank lines
#217: FILE: ./hal/hal_btcoex.c:217:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_GetBtPatchVer>
#233: FILE: ./hal/hal_btcoex.c:233:
+static u32 halbtcoutsrc_GetBtPatchVer(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <btRealFwVer>
#235: FILE: ./hal/hal_btcoex.c:235:
+	return pBtCoexist->btInfo.btRealFwVer;

CHECK: Avoid CamelCase: <halbtcoutsrc_GetWifiRssi>
#238: FILE: ./hal/hal_btcoex.c:238:
+static s32 halbtcoutsrc_GetWifiRssi(struct adapter *padapter)

CHECK: Avoid CamelCase: <pHalData>
#240: FILE: ./hal/hal_btcoex.c:240:
+	struct hal_com_data *pHalData = GET_HAL_DATA(padapter);

CHECK: Avoid CamelCase: <EntryMinUndecoratedSmoothedPWDB>
#242: FILE: ./hal/hal_btcoex.c:242:
+	return pHalData->dmpriv.EntryMinUndecoratedSmoothedPWDB;

CHECK: Avoid CamelCase: <halbtcoutsrc_GetWifiScanAPNum>
#245: FILE: ./hal/hal_btcoex.c:245:
+static u8 halbtcoutsrc_GetWifiScanAPNum(struct adapter *padapter)

CHECK: Avoid CamelCase: <halbtcoutsrc_Get>
#262: FILE: ./hal/hal_btcoex.c:262:
+static u8 halbtcoutsrc_Get(void *pBtcContext, u8 getType, void *pOutBuf)

CHECK: Avoid CamelCase: <pBtcContext>
#262: FILE: ./hal/hal_btcoex.c:262:
+static u8 halbtcoutsrc_Get(void *pBtcContext, u8 getType, void *pOutBuf)

CHECK: Avoid CamelCase: <getType>
#262: FILE: ./hal/hal_btcoex.c:262:
+static u8 halbtcoutsrc_Get(void *pBtcContext, u8 getType, void *pOutBuf)

CHECK: Avoid CamelCase: <pOutBuf>
#262: FILE: ./hal/hal_btcoex.c:262:
+static u8 halbtcoutsrc_Get(void *pBtcContext, u8 getType, void *pOutBuf)

CHECK: Avoid CamelCase: <pS4Tmp>
#269: FILE: ./hal/hal_btcoex.c:269:
+	s32 *pS4Tmp;

CHECK: Avoid CamelCase: <pU4Tmp>
#270: FILE: ./hal/hal_btcoex.c:270:
+	u32 *pU4Tmp;

CHECK: Please don't use multiple blank lines
#273: FILE: ./hal/hal_btcoex.c:273:
+
+

CHECK: line length of 151 exceeds 100 columns
#306: FILE: ./hal/hal_btcoex.c:306:
+		/* Use the value of the new variable GLBtcWiFiInScanState to judge whether WiFi is in scan state or not, since the originally used flag

WARNING: Block comments use * on subsequent lines
#307: FILE: ./hal/hal_btcoex.c:307:
+		/* Use the value of the new variable GLBtcWiFiInScanState to judge whether WiFi is in scan state or not, since the originally used flag
+			WIFI_SITE_MONITOR in fwstate may not be cleared in time */

WARNING: Block comments use a trailing */ on a separate line
#307: FILE: ./hal/hal_btcoex.c:307:
+			WIFI_SITE_MONITOR in fwstate may not be cleared in time */

CHECK: Avoid CamelCase: <CurrentChannelBW>
#358: FILE: ./hal/hal_btcoex.c:358:
+		else if (pHalData->CurrentChannelBW == CHANNEL_WIDTH_20)

WARNING: Missing a blank line after declarations
#367: FILE: ./hal/hal_btcoex.c:367:
+			struct rt_link_detect_t *plinkinfo;
+			plinkinfo = &padapter->mlmepriv.LinkDetectInfo;

CHECK: Avoid CamelCase: <FirmwareVersion>
#377: FILE: ./hal/hal_btcoex.c:377:
+		*pU4Tmp = pHalData->FirmwareVersion << 16;

CHECK: Avoid CamelCase: <FirmwareSubVersion>
#378: FILE: ./hal/hal_btcoex.c:378:
+		*pU4Tmp |= pHalData->FirmwareSubVersion;

CHECK: Avoid CamelCase: <CurrentChannel>
#394: FILE: ./hal/hal_btcoex.c:394:
+		*pu8 = pHalData->CurrentChannel;

WARNING: please, no space before tabs
#404: FILE: ./hal/hal_btcoex.c:404:
+/* ^I^I^I*pU1Tmp = BTC_DMSP; */$

WARNING: please, no space before tabs
#405: FILE: ./hal/hal_btcoex.c:405:
+/* ^I^I^I*pU1Tmp = BTC_DMDP; */$

WARNING: please, no space before tabs
#406: FILE: ./hal/hal_btcoex.c:406:
+/* ^I^I^I*pU1Tmp = BTC_MP_UNKNOWN; */$

CHECK: Avoid CamelCase: <halbtcoutsrc_Set>
#426: FILE: ./hal/hal_btcoex.c:426:
+static u8 halbtcoutsrc_Set(void *pBtcContext, u8 setType, void *pInBuf)

CHECK: Avoid CamelCase: <setType>
#426: FILE: ./hal/hal_btcoex.c:426:
+static u8 halbtcoutsrc_Set(void *pBtcContext, u8 setType, void *pInBuf)

CHECK: Avoid CamelCase: <pInBuf>
#426: FILE: ./hal/hal_btcoex.c:426:
+static u8 halbtcoutsrc_Set(void *pBtcContext, u8 setType, void *pInBuf)

CHECK: Please don't use multiple blank lines
#434: FILE: ./hal/hal_btcoex.c:434:
+
+

CHECK: Avoid CamelCase: <bForceToRoam>
#459: FILE: ./hal/hal_btcoex.c:459:
+		pBtCoexist->btInfo.bForceToRoam = *pu8;

CHECK: Avoid CamelCase: <rssiAdjustForAgcTableOn>
#480: FILE: ./hal/hal_btcoex.c:480:
+		pBtCoexist->btInfo.rssiAdjustForAgcTableOn = *pu8;

CHECK: Avoid CamelCase: <rssiAdjustFor1AntCoexType>
#499: FILE: ./hal/hal_btcoex.c:499:
+		pBtCoexist->btInfo.rssiAdjustFor1AntCoexType = *pu8;

CHECK: Avoid CamelCase: <raMask>
#528: FILE: ./hal/hal_btcoex.c:528:
+		pBtCoexist->btInfo.raMask = *pU4Tmp;

WARNING: please, no space before tabs
#564: FILE: ./hal/hal_btcoex.c:564:
+/* ^I^IIO related function */$

CHECK: Avoid CamelCase: <halbtcoutsrc_Read1Byte>
#566: FILE: ./hal/hal_btcoex.c:566:
+static u8 halbtcoutsrc_Read1Byte(void *pBtcContext, u32 RegAddr)

CHECK: Avoid CamelCase: <RegAddr>
#566: FILE: ./hal/hal_btcoex.c:566:
+static u8 halbtcoutsrc_Read1Byte(void *pBtcContext, u32 RegAddr)

CHECK: Please don't use multiple blank lines
#571: FILE: ./hal/hal_btcoex.c:571:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_Read2Byte>
#578: FILE: ./hal/hal_btcoex.c:578:
+static u16 halbtcoutsrc_Read2Byte(void *pBtcContext, u32 RegAddr)

CHECK: Please don't use multiple blank lines
#583: FILE: ./hal/hal_btcoex.c:583:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_Read4Byte>
#590: FILE: ./hal/hal_btcoex.c:590:
+static u32 halbtcoutsrc_Read4Byte(void *pBtcContext, u32 RegAddr)

CHECK: Please don't use multiple blank lines
#595: FILE: ./hal/hal_btcoex.c:595:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_Write1Byte>
#602: FILE: ./hal/hal_btcoex.c:602:
+static void halbtcoutsrc_Write1Byte(void *pBtcContext, u32 RegAddr, u8 Data)

CHECK: Avoid CamelCase: <Data>
#602: FILE: ./hal/hal_btcoex.c:602:
+static void halbtcoutsrc_Write1Byte(void *pBtcContext, u32 RegAddr, u8 Data)

CHECK: Please don't use multiple blank lines
#607: FILE: ./hal/hal_btcoex.c:607:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_BitMaskWrite1Byte>
#614: FILE: ./hal/hal_btcoex.c:614:
+static void halbtcoutsrc_BitMaskWrite1Byte(void *pBtcContext, u32 regAddr, u8 bitMask, u8 data1b)

CHECK: Avoid CamelCase: <regAddr>
#614: FILE: ./hal/hal_btcoex.c:614:
+static void halbtcoutsrc_BitMaskWrite1Byte(void *pBtcContext, u32 regAddr, u8 bitMask, u8 data1b)

CHECK: Avoid CamelCase: <bitMask>
#614: FILE: ./hal/hal_btcoex.c:614:
+static void halbtcoutsrc_BitMaskWrite1Byte(void *pBtcContext, u32 regAddr, u8 bitMask, u8 data1b)

CHECK: Avoid CamelCase: <originalValue>
#618: FILE: ./hal/hal_btcoex.c:618:
+	u8 originalValue, bitShift;

CHECK: Avoid CamelCase: <bitShift>
#618: FILE: ./hal/hal_btcoex.c:618:
+	u8 originalValue, bitShift;

CHECK: Please don't use multiple blank lines
#621: FILE: ./hal/hal_btcoex.c:621:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_Write2Byte>
#642: FILE: ./hal/hal_btcoex.c:642:
+static void halbtcoutsrc_Write2Byte(void *pBtcContext, u32 RegAddr, u16 Data)

CHECK: Please don't use multiple blank lines
#647: FILE: ./hal/hal_btcoex.c:647:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_Write4Byte>
#654: FILE: ./hal/hal_btcoex.c:654:
+static void halbtcoutsrc_Write4Byte(void *pBtcContext, u32 RegAddr, u32 Data)

CHECK: Please don't use multiple blank lines
#659: FILE: ./hal/hal_btcoex.c:659:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_WriteLocalReg1Byte>
#666: FILE: ./hal/hal_btcoex.c:666:
+static void halbtcoutsrc_WriteLocalReg1Byte(void *pBtcContext, u32 RegAddr, u8 Data)

CHECK: Avoid CamelCase: <halbtcoutsrc_SetBbReg>
#677: FILE: ./hal/hal_btcoex.c:677:
+static void halbtcoutsrc_SetBbReg(void *pBtcContext, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Avoid CamelCase: <BitMask>
#677: FILE: ./hal/hal_btcoex.c:677:
+static void halbtcoutsrc_SetBbReg(void *pBtcContext, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Please don't use multiple blank lines
#682: FILE: ./hal/hal_btcoex.c:682:
+
+

CHECK: Please don't use multiple blank lines
#689: FILE: ./hal/hal_btcoex.c:689:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_GetBbReg>
#690: FILE: ./hal/hal_btcoex.c:690:
+static u32 halbtcoutsrc_GetBbReg(void *pBtcContext, u32 RegAddr, u32 BitMask)

CHECK: Please don't use multiple blank lines
#695: FILE: ./hal/hal_btcoex.c:695:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_SetRfReg>
#702: FILE: ./hal/hal_btcoex.c:702:
+static void halbtcoutsrc_SetRfReg(void *pBtcContext, u8 eRFPath, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Avoid CamelCase: <eRFPath>
#702: FILE: ./hal/hal_btcoex.c:702:
+static void halbtcoutsrc_SetRfReg(void *pBtcContext, u8 eRFPath, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Please don't use multiple blank lines
#707: FILE: ./hal/hal_btcoex.c:707:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_GetRfReg>
#714: FILE: ./hal/hal_btcoex.c:714:
+static u32 halbtcoutsrc_GetRfReg(void *pBtcContext, u8 eRFPath, u32 RegAddr, u32 BitMask)

CHECK: Please don't use multiple blank lines
#719: FILE: ./hal/hal_btcoex.c:719:
+
+

CHECK: Avoid CamelCase: <halbtcoutsrc_SetBtReg>
#726: FILE: ./hal/hal_btcoex.c:726:
+static void halbtcoutsrc_SetBtReg(void *pBtcContext, u8 RegType, u32 RegAddr, u32 Data)

CHECK: Avoid CamelCase: <RegType>
#726: FILE: ./hal/hal_btcoex.c:726:
+static void halbtcoutsrc_SetBtReg(void *pBtcContext, u8 RegType, u32 RegAddr, u32 Data)

CHECK: Avoid CamelCase: <CmdBuffer1>
#730: FILE: ./hal/hal_btcoex.c:730:
+	u8 CmdBuffer1[4] = {0};

CHECK: Avoid CamelCase: <CmdBuffer2>
#731: FILE: ./hal/hal_btcoex.c:731:
+	u8 CmdBuffer2[4] = {0};

CHECK: Avoid CamelCase: <AddrToSet>
#732: FILE: ./hal/hal_btcoex.c:732:
+	u8 *AddrToSet = (u8 *)&RegAddr;

CHECK: Avoid CamelCase: <ValueToSet>
#733: FILE: ./hal/hal_btcoex.c:733:
+	u8 *ValueToSet = (u8 *)&Data;

CHECK: Avoid CamelCase: <OperVer>
#734: FILE: ./hal/hal_btcoex.c:734:
+	u8 OperVer = 0;

CHECK: Avoid CamelCase: <ReqNum>
#735: FILE: ./hal/hal_btcoex.c:735:
+	u8 ReqNum = 0;

CHECK: line length of 105 exceeds 100 columns
#740: FILE: ./hal/hal_btcoex.c:740:
+	CmdBuffer1[0] |= (OperVer & 0x0f);						/* Set OperVer */

CHECK: line length of 140 exceeds 100 columns
#742: FILE: ./hal/hal_btcoex.c:742:
+	CmdBuffer1[1] = 0x0d;									/* Set OpCode to BT_LO_OP_WRITE_REG_VALUE */

CHECK: line length of 111 exceeds 100 columns
#743: FILE: ./hal/hal_btcoex.c:743:
+	CmdBuffer1[2] = ValueToSet[0];							/* Set WriteRegValue */

CHECK: Unnecessary parentheses around CmdBuffer1[0]
#744: FILE: ./hal/hal_btcoex.c:744:
+	rtw_hal_fill_h2c_cmd(padapter, 0x67, 4, &(CmdBuffer1[0]));

CHECK: line length of 105 exceeds 100 columns
#749: FILE: ./hal/hal_btcoex.c:749:
+	CmdBuffer2[0] |= (OperVer & 0x0f);						/* Set OperVer */

CHECK: line length of 139 exceeds 100 columns
#751: FILE: ./hal/hal_btcoex.c:751:
+	CmdBuffer2[1] = 0x0c;									/* Set OpCode of BT_LO_OP_WRITE_REG_ADDR */

CHECK: line length of 110 exceeds 100 columns
#752: FILE: ./hal/hal_btcoex.c:752:
+	CmdBuffer2[3] = AddrToSet[0];							/* Set WriteRegAddr */

CHECK: Unnecessary parentheses around CmdBuffer2[0]
#753: FILE: ./hal/hal_btcoex.c:753:
+	rtw_hal_fill_h2c_cmd(padapter, 0x67, 4, &(CmdBuffer2[0]));

CHECK: Avoid CamelCase: <halbtcoutsrc_GetBtReg>
#756: FILE: ./hal/hal_btcoex.c:756:
+static u32 halbtcoutsrc_GetBtReg(void *pBtcContext, u8 RegType, u32 RegAddr)

CHECK: Avoid CamelCase: <halbtcoutsrc_FillH2cCmd>
#762: FILE: ./hal/hal_btcoex.c:762:
+static void halbtcoutsrc_FillH2cCmd(void *pBtcContext, u8 elementId, u32 cmdLen, u8 *pCmdBuffer)

CHECK: Avoid CamelCase: <elementId>
#762: FILE: ./hal/hal_btcoex.c:762:
+static void halbtcoutsrc_FillH2cCmd(void *pBtcContext, u8 elementId, u32 cmdLen, u8 *pCmdBuffer)

CHECK: Avoid CamelCase: <cmdLen>
#762: FILE: ./hal/hal_btcoex.c:762:
+static void halbtcoutsrc_FillH2cCmd(void *pBtcContext, u8 elementId, u32 cmdLen, u8 *pCmdBuffer)

CHECK: Avoid CamelCase: <pCmdBuffer>
#762: FILE: ./hal/hal_btcoex.c:762:
+static void halbtcoutsrc_FillH2cCmd(void *pBtcContext, u8 elementId, u32 cmdLen, u8 *pCmdBuffer)

CHECK: Please don't use multiple blank lines
#767: FILE: ./hal/hal_btcoex.c:767:
+
+

WARNING: please, no space before tabs
#775: FILE: ./hal/hal_btcoex.c:775:
+/* ^I^IExtern functions called by other module */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_BindBtCoexWithAdapter>
#777: FILE: ./hal/hal_btcoex.c:777:
+static u8 EXhalbtcoutsrc_BindBtCoexWithAdapter(void *padapter)

WARNING: else is not generally useful after a break or return
#783: FILE: ./hal/hal_btcoex.c:783:
+		return false;
+	else

CHECK: Avoid CamelCase: <cntBind>
#786: FILE: ./hal/hal_btcoex.c:786:
+	pBtCoexist->statistics.cntBind++;

CHECK: Avoid CamelCase: <stackInfo>
#790: FILE: ./hal/hal_btcoex.c:790:
+	pBtCoexist->stackInfo.bProfileNotified = false;

CHECK: Avoid CamelCase: <bProfileNotified>
#790: FILE: ./hal/hal_btcoex.c:790:
+	pBtCoexist->stackInfo.bProfileNotified = false;

CHECK: Avoid CamelCase: <hal_btcoex_Initialize>
#803: FILE: ./hal/hal_btcoex.c:803:
+void hal_btcoex_Initialize(void *padapter)

CHECK: Avoid CamelCase: <fBtcSetBbReg>
#826: FILE: ./hal/hal_btcoex.c:826:
+	pBtCoexist->fBtcSetBbReg = halbtcoutsrc_SetBbReg;

CHECK: Avoid CamelCase: <fBtcGetBbReg>
#827: FILE: ./hal/hal_btcoex.c:827:
+	pBtCoexist->fBtcGetBbReg = halbtcoutsrc_GetBbReg;

CHECK: Avoid CamelCase: <fBtcGetBtReg>
#836: FILE: ./hal/hal_btcoex.c:836:
+	pBtCoexist->fBtcGetBtReg = halbtcoutsrc_GetBtReg;

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_PowerOnSetting>
#846: FILE: ./hal/hal_btcoex.c:846:
+void EXhalbtcoutsrc_PowerOnSetting(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <btdmAntNum>
#852: FILE: ./hal/hal_btcoex.c:852:
+	if (pBtCoexist->boardInfo.btdmAntNum == 2)

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_InitHwConfig>
#858: FILE: ./hal/hal_btcoex.c:858:
+void EXhalbtcoutsrc_InitHwConfig(struct btc_coexist *pBtCoexist, u8 bWifiOnly)

CHECK: Avoid CamelCase: <cntInitHwConfig>
#863: FILE: ./hal/hal_btcoex.c:863:
+	pBtCoexist->statistics.cntInitHwConfig++;

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_InitCoexDm>
#871: FILE: ./hal/hal_btcoex.c:871:
+void EXhalbtcoutsrc_InitCoexDm(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <cntInitCoexDm>
#876: FILE: ./hal/hal_btcoex.c:876:
+	pBtCoexist->statistics.cntInitCoexDm++;

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_IpsNotify>
#886: FILE: ./hal/hal_btcoex.c:886:
+void EXhalbtcoutsrc_IpsNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <ipsType>
#888: FILE: ./hal/hal_btcoex.c:888:
+	u8 ipsType;

CHECK: Avoid CamelCase: <cntIpsNotify>
#893: FILE: ./hal/hal_btcoex.c:893:
+	pBtCoexist->statistics.cntIpsNotify++;

WARNING: please, no space before tabs
#903: FILE: ./hal/hal_btcoex.c:903:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#910: FILE: ./hal/hal_btcoex.c:910:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_LpsNotify>
#913: FILE: ./hal/hal_btcoex.c:913:
+void EXhalbtcoutsrc_LpsNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <lpsType>
#915: FILE: ./hal/hal_btcoex.c:915:
+	u8 lpsType;

CHECK: Please don't use multiple blank lines
#917: FILE: ./hal/hal_btcoex.c:917:
+
+

CHECK: Avoid CamelCase: <cntLpsNotify>
#921: FILE: ./hal/hal_btcoex.c:921:
+	pBtCoexist->statistics.cntLpsNotify++;

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_ScanNotify>
#936: FILE: ./hal/hal_btcoex.c:936:
+void EXhalbtcoutsrc_ScanNotify(struct btc_coexist *pBtCoexist, u8 type)

CHECK: Avoid CamelCase: <scanType>
#938: FILE: ./hal/hal_btcoex.c:938:
+	u8 scanType;

CHECK: Avoid CamelCase: <cntScanNotify>
#942: FILE: ./hal/hal_btcoex.c:942:
+	pBtCoexist->statistics.cntScanNotify++;

WARNING: please, no space before tabs
#955: FILE: ./hal/hal_btcoex.c:955:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#962: FILE: ./hal/hal_btcoex.c:962:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_ConnectNotify>
#965: FILE: ./hal/hal_btcoex.c:965:
+void EXhalbtcoutsrc_ConnectNotify(struct btc_coexist *pBtCoexist, u8 action)

CHECK: Avoid CamelCase: <assoType>
#967: FILE: ./hal/hal_btcoex.c:967:
+	u8 assoType;

CHECK: Avoid CamelCase: <cntConnectNotify>
#971: FILE: ./hal/hal_btcoex.c:971:
+	pBtCoexist->statistics.cntConnectNotify++;

WARNING: please, no space before tabs
#981: FILE: ./hal/hal_btcoex.c:981:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#988: FILE: ./hal/hal_btcoex.c:988:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_MediaStatusNotify>
#991: FILE: ./hal/hal_btcoex.c:991:
+void EXhalbtcoutsrc_MediaStatusNotify(struct btc_coexist *pBtCoexist, enum

CHECK: Avoid CamelCase: <mediaStatus>
#992: FILE: ./hal/hal_btcoex.c:992:
+	rt_media_status mediaStatus)

CHECK: Avoid CamelCase: <mStatus>
#994: FILE: ./hal/hal_btcoex.c:994:
+	u8 mStatus;

CHECK: Avoid CamelCase: <cntMediaStatusNotify>
#999: FILE: ./hal/hal_btcoex.c:999:
+	pBtCoexist->statistics.cntMediaStatusNotify++;

WARNING: please, no space before tabs
#1009: FILE: ./hal/hal_btcoex.c:1009:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#1016: FILE: ./hal/hal_btcoex.c:1016:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_SpecialPacketNotify>
#1019: FILE: ./hal/hal_btcoex.c:1019:
+void EXhalbtcoutsrc_SpecialPacketNotify(struct btc_coexist *pBtCoexist, u8 pktType)

CHECK: Avoid CamelCase: <pktType>
#1019: FILE: ./hal/hal_btcoex.c:1019:
+void EXhalbtcoutsrc_SpecialPacketNotify(struct btc_coexist *pBtCoexist, u8 pktType)

CHECK: Avoid CamelCase: <cntSpecialPacketNotify>
#1025: FILE: ./hal/hal_btcoex.c:1025:
+	pBtCoexist->statistics.cntSpecialPacketNotify++;

WARNING: braces {} are not necessary for any arm of this statement
#1029: FILE: ./hal/hal_btcoex.c:1029:
+	if (pktType == PACKET_DHCP) {
[...]
+	} else if (pktType == PACKET_EAPOL) {
[...]
+	} else if (pktType == PACKET_ARP) {
[...]
+	} else {
[...]

WARNING: please, no space before tabs
#1040: FILE: ./hal/hal_btcoex.c:1040:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#1047: FILE: ./hal/hal_btcoex.c:1047:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_BtInfoNotify>
#1050: FILE: ./hal/hal_btcoex.c:1050:
+void EXhalbtcoutsrc_BtInfoNotify(struct btc_coexist *pBtCoexist, u8 *tmpBuf, u8 length)

CHECK: Avoid CamelCase: <cntBtInfoNotify>
#1055: FILE: ./hal/hal_btcoex.c:1055:
+	pBtCoexist->statistics.cntBtInfoNotify++;

WARNING: please, no space before tabs
#1058: FILE: ./hal/hal_btcoex.c:1058:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#1065: FILE: ./hal/hal_btcoex.c:1065:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_HaltNotify>
#1068: FILE: ./hal/hal_btcoex.c:1068:
+void EXhalbtcoutsrc_HaltNotify(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_PnpNotify>
#1081: FILE: ./hal/hal_btcoex.c:1081:
+void EXhalbtcoutsrc_PnpNotify(struct btc_coexist *pBtCoexist, u8 pnpState)

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_Periodical>
#1097: FILE: ./hal/hal_btcoex.c:1097:
+void EXhalbtcoutsrc_Periodical(struct btc_coexist *pBtCoexist)

CHECK: Avoid CamelCase: <cntPeriodical>
#1101: FILE: ./hal/hal_btcoex.c:1101:
+	pBtCoexist->statistics.cntPeriodical++;

WARNING: please, no space before tabs
#1105: FILE: ./hal/hal_btcoex.c:1105:
+/* ^Ihalbtcoutsrc_LeaveLowPower(pBtCoexist); */$

WARNING: please, no space before tabs
#1112: FILE: ./hal/hal_btcoex.c:1112:
+/* ^Ihalbtcoutsrc_NormalLowPower(pBtCoexist); */$

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_SetAntNum>
#1115: FILE: ./hal/hal_btcoex.c:1115:
+void EXhalbtcoutsrc_SetAntNum(u8 type, u8 antNum)

CHECK: Avoid CamelCase: <antNum>
#1115: FILE: ./hal/hal_btcoex.c:1115:
+void EXhalbtcoutsrc_SetAntNum(u8 type, u8 antNum)

CHECK: Avoid CamelCase: <pgAntNum>
#1118: FILE: ./hal/hal_btcoex.c:1118:
+		GLBtCoexist.boardInfo.pgAntNum = antNum;

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_SetSingleAntPath>
#1132: FILE: ./hal/hal_btcoex.c:1132:
+void EXhalbtcoutsrc_SetSingleAntPath(u8 singleAntPath)

CHECK: Avoid CamelCase: <hal_btcoex_SetBTCoexist>
#1142: FILE: ./hal/hal_btcoex.c:1142:
+void hal_btcoex_SetBTCoexist(struct adapter *padapter, u8 bBtExist)

CHECK: Avoid CamelCase: <bBtExist>
#1142: FILE: ./hal/hal_btcoex.c:1142:
+void hal_btcoex_SetBTCoexist(struct adapter *padapter, u8 bBtExist)

CHECK: Please don't use multiple blank lines
#1146: FILE: ./hal/hal_btcoex.c:1146:
+
+

CHECK: Avoid CamelCase: <hal_btcoex_IsBtExist>
#1159: FILE: ./hal/hal_btcoex.c:1159:
+bool hal_btcoex_IsBtExist(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#1163: FILE: ./hal/hal_btcoex.c:1163:
+
+

CHECK: Avoid CamelCase: <hal_btcoex_SetPgAntNum>
#1179: FILE: ./hal/hal_btcoex.c:1179:
+void hal_btcoex_SetPgAntNum(struct adapter *padapter, u8 antNum)

CHECK: Please don't use multiple blank lines
#1183: FILE: ./hal/hal_btcoex.c:1183:
+
+

CHECK: Avoid CamelCase: <btTotalAntNum>
#1186: FILE: ./hal/hal_btcoex.c:1186:
+	pHalData->bt_coexist.btTotalAntNum = antNum;

CHECK: Avoid CamelCase: <hal_btcoex_SetSingleAntPath>
#1190: FILE: ./hal/hal_btcoex.c:1190:
+void hal_btcoex_SetSingleAntPath(struct adapter *padapter, u8 singleAntPath)

CHECK: Avoid CamelCase: <hal_btcoex_PowerOnSetting>
#1195: FILE: ./hal/hal_btcoex.c:1195:
+void hal_btcoex_PowerOnSetting(struct adapter *padapter)

CHECK: Avoid CamelCase: <hal_btcoex_InitHwConfig>
#1200: FILE: ./hal/hal_btcoex.c:1200:
+void hal_btcoex_InitHwConfig(struct adapter *padapter, u8 bWifiOnly)

CHECK: Avoid CamelCase: <hal_btcoex_ConnectNotify>
#1224: FILE: ./hal/hal_btcoex.c:1224:
+void hal_btcoex_ConnectNotify(struct adapter *padapter, u8 action)

CHECK: Avoid CamelCase: <hal_btcoex_IQKNotify>
#1239: FILE: ./hal/hal_btcoex.c:1239:
+void hal_btcoex_IQKNotify(struct adapter *padapter, u8 state)

CHECK: Avoid CamelCase: <hal_btcoex_SuspendNotify>
#1252: FILE: ./hal/hal_btcoex.c:1252:
+void hal_btcoex_SuspendNotify(struct adapter *padapter, u8 state)

CHECK: Avoid CamelCase: <hal_btcoex_RpwmVal>
#1305: FILE: ./hal/hal_btcoex.c:1305:
+u8 hal_btcoex_RpwmVal(struct adapter *padapter)

CHECK: Avoid CamelCase: <hal_btcoex_GetRaMask>
#1315: FILE: ./hal/hal_btcoex.c:1315:
+u32 hal_btcoex_GetRaMask(struct adapter *padapter)

CHECK: Avoid CamelCase: <hal_btcoex_RecordPwrMode>
#1329: FILE: ./hal/hal_btcoex.c:1329:
+void hal_btcoex_RecordPwrMode(struct adapter *padapter, u8 *pCmdBuf, u8 cmdLen)

CHECK: Avoid CamelCase: <pCmdBuf>
#1329: FILE: ./hal/hal_btcoex.c:1329:
+void hal_btcoex_RecordPwrMode(struct adapter *padapter, u8 *pCmdBuf, u8 cmdLen)

CHECK: Avoid CamelCase: <pwrModeVal>
#1331: FILE: ./hal/hal_btcoex.c:1331:
+	memcpy(GLBtCoexist.pwrModeVal, pCmdBuf, cmdLen);

total: 0 errors, 27 warnings, 178 checks, 1332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_btcoex.c has style problems, please review.
------------------
./hal/hal_btcoex.o
------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_btcoex.o has style problems, please review.
--------------------
./hal/HalBtcOutSrc.h
--------------------
CHECK: line length of 134 exceeds 100 columns
#82: FILE: ./hal/HalBtcOutSrc.h:82:
+	u8 btdmAntPos;		/* Bryant Add to indicate Antenna Position for (pgAntNum = 2) && (btdmAntNum = 1)  (DPDT+1Ant case) */

CHECK: line length of 118 exceeds 100 columns
#96: FILE: ./hal/HalBtcOutSrc.h:96:
+#define BTC_RSSI_HIGH(_rssi_)	((_rssi_ == BTC_RSSI_STATE_HIGH || _rssi_ == BTC_RSSI_STATE_STAY_HIGH) ? true : false)

CHECK: Please use a blank line after function/struct/union/enum declarations
#96: FILE: ./hal/HalBtcOutSrc.h:96:
+};
+#define BTC_RSSI_HIGH(_rssi_)	((_rssi_ == BTC_RSSI_STATE_HIGH || _rssi_ == BTC_RSSI_STATE_STAY_HIGH) ? true : false)

CHECK: Macro argument reuse '_rssi_' - possible side-effects?
#96: FILE: ./hal/HalBtcOutSrc.h:96:
+#define BTC_RSSI_HIGH(_rssi_)	((_rssi_ == BTC_RSSI_STATE_HIGH || _rssi_ == BTC_RSSI_STATE_STAY_HIGH) ? true : false)

CHECK: Macro argument '_rssi_' may be better as '(_rssi_)' to avoid precedence issues
#96: FILE: ./hal/HalBtcOutSrc.h:96:
+#define BTC_RSSI_HIGH(_rssi_)	((_rssi_ == BTC_RSSI_STATE_HIGH || _rssi_ == BTC_RSSI_STATE_STAY_HIGH) ? true : false)

CHECK: line length of 122 exceeds 100 columns
#97: FILE: ./hal/HalBtcOutSrc.h:97:
+#define BTC_RSSI_MEDIUM(_rssi_)	((_rssi_ == BTC_RSSI_STATE_MEDIUM || _rssi_ == BTC_RSSI_STATE_STAY_MEDIUM) ? true : false)

CHECK: Macro argument reuse '_rssi_' - possible side-effects?
#97: FILE: ./hal/HalBtcOutSrc.h:97:
+#define BTC_RSSI_MEDIUM(_rssi_)	((_rssi_ == BTC_RSSI_STATE_MEDIUM || _rssi_ == BTC_RSSI_STATE_STAY_MEDIUM) ? true : false)

CHECK: Macro argument '_rssi_' may be better as '(_rssi_)' to avoid precedence issues
#97: FILE: ./hal/HalBtcOutSrc.h:97:
+#define BTC_RSSI_MEDIUM(_rssi_)	((_rssi_ == BTC_RSSI_STATE_MEDIUM || _rssi_ == BTC_RSSI_STATE_STAY_MEDIUM) ? true : false)

CHECK: line length of 116 exceeds 100 columns
#98: FILE: ./hal/HalBtcOutSrc.h:98:
+#define BTC_RSSI_LOW(_rssi_)	((_rssi_ == BTC_RSSI_STATE_LOW || _rssi_ == BTC_RSSI_STATE_STAY_LOW) ? true : false)

CHECK: Macro argument reuse '_rssi_' - possible side-effects?
#98: FILE: ./hal/HalBtcOutSrc.h:98:
+#define BTC_RSSI_LOW(_rssi_)	((_rssi_ == BTC_RSSI_STATE_LOW || _rssi_ == BTC_RSSI_STATE_STAY_LOW) ? true : false)

CHECK: Macro argument '_rssi_' may be better as '(_rssi_)' to avoid precedence issues
#98: FILE: ./hal/HalBtcOutSrc.h:98:
+#define BTC_RSSI_LOW(_rssi_)	((_rssi_ == BTC_RSSI_STATE_LOW || _rssi_ == BTC_RSSI_STATE_STAY_LOW) ? true : false)

CHECK: Lines should not end with a '('
#256: FILE: ./hal/HalBtcOutSrc.h:256:
+typedef void(*BFP_BTC_W1_BIT_MASK)(

CHECK: Lines should not end with a '('
#262: FILE: ./hal/HalBtcOutSrc.h:262:
+typedef void (*BFP_BTC_SET_BB_REG)(

CHECK: Lines should not end with a '('
#266: FILE: ./hal/HalBtcOutSrc.h:266:
+typedef void (*BFP_BTC_SET_RF_REG)(

CHECK: Lines should not end with a '('
#269: FILE: ./hal/HalBtcOutSrc.h:269:
+typedef u32 (*BFP_BTC_GET_RF_REG)(

CHECK: Lines should not end with a '('
#272: FILE: ./hal/HalBtcOutSrc.h:272:
+typedef void (*BFP_BTC_FILL_H2C)(

CHECK: Lines should not end with a '('
#279: FILE: ./hal/HalBtcOutSrc.h:279:
+typedef void (*BFP_BTC_SET_BT_REG)(

CHECK: Avoid CamelCase: <regType>
#280: FILE: ./hal/HalBtcOutSrc.h:280:
+	void *pBtcContext, u8 regType, u32 offset, u32 value

CHECK: Avoid CamelCase: <dispType>
#283: FILE: ./hal/HalBtcOutSrc.h:283:
+typedef void (*BFP_BTC_DISP_DBG_MSG)(void *pBtCoexist, u8 dispType);

CHECK: Avoid CamelCase: <btHciVer>
#298: FILE: ./hal/HalBtcOutSrc.h:298:
+	u16 btHciVer;

CHECK: Avoid CamelCase: <btFwVer>
#300: FILE: ./hal/HalBtcOutSrc.h:300:
+	u8 btFwVer;

CHECK: Avoid CamelCase: <getBtFwVerCnt>
#301: FILE: ./hal/HalBtcOutSrc.h:301:
+	u32 getBtFwVerCnt;

CHECK: Avoid CamelCase: <hciVersion>
#315: FILE: ./hal/HalBtcOutSrc.h:315:
+	u16 hciVersion;	/*  stack hci version */

CHECK: Avoid CamelCase: <numOfLink>
#316: FILE: ./hal/HalBtcOutSrc.h:316:
+	u8 numOfLink;

CHECK: Avoid CamelCase: <bAclExist>
#319: FILE: ./hal/HalBtcOutSrc.h:319:
+	bool bAclExist;

CHECK: Avoid CamelCase: <numOfHid>
#322: FILE: ./hal/HalBtcOutSrc.h:322:
+	u8 numOfHid;

CHECK: Avoid CamelCase: <bUnknownAclExist>
#324: FILE: ./hal/HalBtcOutSrc.h:324:
+	bool bUnknownAclExist;

CHECK: Avoid CamelCase: <minBtRssi>
#325: FILE: ./hal/HalBtcOutSrc.h:325:
+	s8 minBtRssi;

CHECK: Avoid CamelCase: <cntPowerOn>
#343: FILE: ./hal/HalBtcOutSrc.h:343:
+	u32 cntPowerOn;

CHECK: Avoid CamelCase: <cntRfStatusNotify>
#353: FILE: ./hal/HalBtcOutSrc.h:353:
+	u32 cntRfStatusNotify;

CHECK: Avoid CamelCase: <cntCoexDmSwitch>
#355: FILE: ./hal/HalBtcOutSrc.h:355:
+	u32 cntCoexDmSwitch;

CHECK: Avoid CamelCase: <cntStackOperationNotify>
#356: FILE: ./hal/HalBtcOutSrc.h:356:
+	u32 cntStackOperationNotify;

CHECK: Avoid CamelCase: <cntDbgCtrl>
#357: FILE: ./hal/HalBtcOutSrc.h:357:
+	u32 cntDbgCtrl;

CHECK: Lines should not end with a '('
#412: FILE: ./hal/HalBtcOutSrc.h:412:
+void EXhalbtcoutsrc_MediaStatusNotify(

CHECK: Lines should not end with a '('
#416: FILE: ./hal/HalBtcOutSrc.h:416:
+void EXhalbtcoutsrc_BtInfoNotify(

CHECK: Avoid CamelCase: <EXhalbtcoutsrc_SetChipType>
#422: FILE: ./hal/HalBtcOutSrc.h:422:
+void EXhalbtcoutsrc_SetChipType(u8 chipType);

CHECK: Avoid CamelCase: <chipType>
#422: FILE: ./hal/HalBtcOutSrc.h:422:
+void EXhalbtcoutsrc_SetChipType(u8 chipType);

total: 0 errors, 0 warnings, 37 checks, 426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalBtcOutSrc.h has style problems, please review.
---------------
./hal/hal_com.c
---------------
CHECK: Avoid CamelCase: <HalData>
#17: FILE: ./hal/hal_com.c:17:
+	padapter->HalData = vzalloc(padapter->hal_data_sz);

CHECK: Please don't use multiple blank lines
#33: FILE: ./hal/hal_com.c:33:
+
+

CHECK: Avoid CamelCase: <ChipVersion>
#34: FILE: ./hal/hal_com.c:34:
+void dump_chip_info(struct hal_version	ChipVersion)

CHECK: Avoid CamelCase: <CUTVersion>
#67: FILE: ./hal/hal_com.c:67:
+				"UNKNOWN_CUT(%d)_", ChipVersion.CUTVersion);

CHECK: Avoid CamelCase: <ROMVer>
#71: FILE: ./hal/hal_com.c:71:
+	cnt += scnprintf(buf + cnt, sizeof(buf) - cnt, "RomVer(%d)\n", ChipVersion.ROMVer);

CHECK: Please don't use multiple blank lines
#74: FILE: ./hal/hal_com.c:74:
+
+

CHECK: Lines should not end with a '('
#95: FILE: ./hal/hal_com.c:95:
+u8 hal_com_config_channel_plan(

CHECK: Avoid CamelCase: <AutoLoadFail>
#100: FILE: ./hal/hal_com.c:100:
+	bool AutoLoadFail

CHECK: Avoid CamelCase: <chnlPlan>
#104: FILE: ./hal/hal_com.c:104:
+	u8 chnlPlan;

CHECK: Avoid CamelCase: <bDisableSWChannelPlan>
#107: FILE: ./hal/hal_com.c:107:
+	pHalData->bDisableSWChannelPlan = false;

WARNING: Comparisons should place the constant on the right side of the test
#110: FILE: ./hal/hal_com.c:110:
+	if (0xFF == hw_channel_plan)

CHECK: Avoid CamelCase: <hw_chnlPlan>
#114: FILE: ./hal/hal_com.c:114:
+		u8 hw_chnlPlan;

CHECK: Lines should not end with a '('
#125: FILE: ./hal/hal_com.c:125:
+	if (

CHECK: Unnecessary parentheses around 'false == pHalData->bDisableSWChannelPlan'
#125: FILE: ./hal/hal_com.c:125:
+	if (
+		(false == pHalData->bDisableSWChannelPlan) &&
+		rtw_is_channel_plan_valid(sw_channel_plan)
+	)

CHECK: Using comparison to false is error prone
#126: FILE: ./hal/hal_com.c:126:
+		(false == pHalData->bDisableSWChannelPlan) &&

CHECK: Avoid CamelCase: <bLegalChannel>
#136: FILE: ./hal/hal_com.c:136:
+	bool bLegalChannel = true;

CHECK: Unnecessary parentheses around 'Channel <= 14'
#138: FILE: ./hal/hal_com.c:138:
+	if ((Channel <= 14) && (Channel >= 1)) {

CHECK: Unnecessary parentheses around 'Channel >= 1'
#138: FILE: ./hal/hal_com.c:138:
+	if ((Channel <= 14) && (Channel >= 1)) {

CHECK: Avoid CamelCase: <MRateToHwRate>
#148: FILE: ./hal/hal_com.c:148:
+u8 MRateToHwRate(u8 rate)

CHECK: Avoid CamelCase: <HwRateToMRate>
#220: FILE: ./hal/hal_com.c:220:
+u8 HwRateToMRate(u8 rate)

CHECK: Avoid CamelCase: <HalSetBrateCfg>
#292: FILE: ./hal/hal_com.c:292:
+void HalSetBrateCfg(struct adapter *Adapter, u8 *mBratesOS, u16 *pBrateCfg)

CHECK: Avoid CamelCase: <pBrateCfg>
#292: FILE: ./hal/hal_com.c:292:
+void HalSetBrateCfg(struct adapter *Adapter, u8 *mBratesOS, u16 *pBrateCfg)

CHECK: Blank lines aren't necessary after an open brace '{'
#297: FILE: ./hal/hal_com.c:297:
+	for (i = 0; i < NDIS_802_11_LENGTH_RATES_EX; i++) {
+

CHECK: Avoid CamelCase: <_OneOutPipeMapping>
#344: FILE: ./hal/hal_com.c:344:
+static void _OneOutPipeMapping(struct adapter *padapter)

CHECK: Avoid CamelCase: <Queue2Pipe>
#348: FILE: ./hal/hal_com.c:348:
+	pdvobjpriv->Queue2Pipe[0] = pdvobjpriv->RtOutPipe[0];/* VO */

CHECK: Avoid CamelCase: <RtOutPipe>
#348: FILE: ./hal/hal_com.c:348:
+	pdvobjpriv->Queue2Pipe[0] = pdvobjpriv->RtOutPipe[0];/* VO */

CHECK: Avoid CamelCase: <_TwoOutPipeMapping>
#359: FILE: ./hal/hal_com.c:359:
+static void _TwoOutPipeMapping(struct adapter *padapter, bool bWIFICfg)

CHECK: Avoid CamelCase: <bWIFICfg>
#359: FILE: ./hal/hal_com.c:359:
+static void _TwoOutPipeMapping(struct adapter *padapter, bool bWIFICfg)

WARNING: please, no space before tabs
#365: FILE: ./hal/hal_com.c:365:
+^I^I/* ^IBK,^IBE,^IVI,^IVO,^IBCN,^ICMD, MGT, HIGH, HCCA */$

CHECK: line length of 109 exceeds 100 columns
#366: FILE: ./hal/hal_com.c:366:
+		/*   0,		1,	0,	1,	0,	0,	0,	0,		0	}; */

CHECK: Please don't use multiple blank lines
#381: FILE: ./hal/hal_com.c:381:
+
+

CHECK: line length of 109 exceeds 100 columns
#383: FILE: ./hal/hal_com.c:383:
+		/*   1,		1,	0,	0,	0,	0,	0,	0,		0	}; */

CHECK: Blank lines aren't necessary before a close brace '}'
#396: FILE: ./hal/hal_com.c:396:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#398: FILE: ./hal/hal_com.c:398:
+
+}

CHECK: Avoid CamelCase: <_ThreeOutPipeMapping>
#400: FILE: ./hal/hal_com.c:400:
+static void _ThreeOutPipeMapping(struct adapter *padapter, bool bWIFICfg)

WARNING: please, no space before tabs
#406: FILE: ./hal/hal_com.c:406:
+^I^I/* ^IBK,^IBE,^IVI,^IVO,^IBCN,^ICMD, MGT, HIGH, HCCA */$

CHECK: line length of 109 exceeds 100 columns
#407: FILE: ./hal/hal_com.c:407:
+		/*   1,		2,	1,	0,	0,	0,	0,	0,		0	}; */

CHECK: Please don't use multiple blank lines
#422: FILE: ./hal/hal_com.c:422:
+
+

WARNING: please, no space before tabs
#423: FILE: ./hal/hal_com.c:423:
+^I^I/* ^IBK,^IBE,^IVI,^IVO,^IBCN,^ICMD, MGT, HIGH, HCCA */$

CHECK: line length of 109 exceeds 100 columns
#424: FILE: ./hal/hal_com.c:424:
+		/*   2,		2,	1,	0,	0,	0,	0,	0,		0	}; */

CHECK: Blank lines aren't necessary before a close brace '}'
#438: FILE: ./hal/hal_com.c:438:
+
+}

CHECK: Avoid CamelCase: <Hal_MappingOutPipe>
#440: FILE: ./hal/hal_com.c:440:
+bool Hal_MappingOutPipe(struct adapter *padapter, u8 NumOutPipe)

CHECK: Avoid CamelCase: <NumOutPipe>
#440: FILE: ./hal/hal_com.c:440:
+bool Hal_MappingOutPipe(struct adapter *padapter, u8 NumOutPipe)

CHECK: Blank lines aren't necessary before a close brace '}'
#466: FILE: ./hal/hal_com.c:466:
+
+}

CHECK: Avoid CamelCase: <AntDetection>
#477: FILE: ./hal/hal_com.c:477:
+	pHalData->AntDetection = 1;

WARNING: Block comments should align the * on each line
#481: FILE: ./hal/hal_com.c:481:
+/*
+* C2H event format:

WARNING: Block comments should align the * on each line
#492: FILE: ./hal/hal_com.c:492:
+/*
+* C2H event format:

WARNING: Block comments should align the * on each line
#529: FILE: ./hal/hal_com.c:529:
+	/*
+	* Clear event to notify FW we have read the command.

CHECK: spaces preferred around that '&' (ctx:VxV)
#555: FILE: ./hal/hal_com.c:555:
+			tx_ra_bitmap |= rtw_get_bit_value_from_ieee_value(psta->bssrateset[i]&0x7f);
 			                                                                     ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#563: FILE: ./hal/hal_com.c:563:
+			if (psta->htpriv.ht_cap.mcs.rx_mask[i/8] & BIT(i%8))
 			                                     ^

CHECK: spaces preferred around that '%' (ctx:VxV)
#563: FILE: ./hal/hal_com.c:563:
+			if (psta->htpriv.ht_cap.mcs.rx_mask[i/8] & BIT(i%8))
 			                                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#564: FILE: ./hal/hal_com.c:564:
+				tx_ra_bitmap |= BIT(i+12);
 				                     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#569: FILE: ./hal/hal_com.c:569:
+	psta->init_rate = get_highest_rate_idx(tx_ra_bitmap)&0x3f;
 	                                                    ^

CHECK: Avoid CamelCase: <SetHwReg>
#576: FILE: ./hal/hal_com.c:576:
+void SetHwReg(struct adapter *adapter, u8 variable, u8 *val)

CHECK: Unnecessary parentheses around hal_data->odmpriv
#579: FILE: ./hal/hal_com.c:579:
+	struct dm_odm_t *odm = &(hal_data->odmpriv);

CHECK: line length of 104 exceeds 100 columns
#593: FILE: ./hal/hal_com.c:593:
+		rtw_write16(adapter, REG_SECCFG, reg_scr|SCR_CHK_KEYID|SCR_RxDecEnable|SCR_TxEncEnable);

CHECK: spaces preferred around that '|' (ctx:VxV)
#593: FILE: ./hal/hal_com.c:593:
+		rtw_write16(adapter, REG_SECCFG, reg_scr|SCR_CHK_KEYID|SCR_RxDecEnable|SCR_TxEncEnable);
 		                                        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#593: FILE: ./hal/hal_com.c:593:
+		rtw_write16(adapter, REG_SECCFG, reg_scr|SCR_CHK_KEYID|SCR_RxDecEnable|SCR_TxEncEnable);
 		                                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#593: FILE: ./hal/hal_com.c:593:
+		rtw_write16(adapter, REG_SECCFG, reg_scr|SCR_CHK_KEYID|SCR_RxDecEnable|SCR_TxEncEnable);
 		                                                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#604: FILE: ./hal/hal_com.c:604:
+				reg_scr |= (SCR_RxUseDK|SCR_TxUseDK);
 				                       ^

CHECK: Unbalanced braces around else statement
#605: FILE: ./hal/hal_com.c:605:
+		} else /* Disable default key related setting */

CHECK: spaces preferred around that '|' (ctx:VxV)
#606: FILE: ./hal/hal_com.c:606:
+			reg_scr &= ~(SCR_RXBCUSEDK|SCR_TXBCUSEDK|SCR_RxUseDK|SCR_TxUseDK);
 			                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#606: FILE: ./hal/hal_com.c:606:
+			reg_scr &= ~(SCR_RXBCUSEDK|SCR_TXBCUSEDK|SCR_RxUseDK|SCR_TxUseDK);
 			                                        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#606: FILE: ./hal/hal_com.c:606:
+			reg_scr &= ~(SCR_RXBCUSEDK|SCR_TXBCUSEDK|SCR_RxUseDK|SCR_TxUseDK);
 			                                                    ^

CHECK: Avoid CamelCase: <SupportAbility>
#612: FILE: ./hal/hal_com.c:612:
+		odm->SupportAbility = *((u32 *)val);

CHECK: Avoid CamelCase: <BK_SupportAbility>
#617: FILE: ./hal/hal_com.c:617:
+			odm->BK_SupportAbility = odm->SupportAbility;

WARNING: Missing a blank line after declarations
#626: FILE: ./hal/hal_com.c:626:
+			struct dm_priv *dm = &hal_data->dmpriv;
+			dm->DMFlag = dm->InitDMFlag;

CHECK: Avoid CamelCase: <DMFlag>
#626: FILE: ./hal/hal_com.c:626:
+			dm->DMFlag = dm->InitDMFlag;

CHECK: Avoid CamelCase: <InitDMFlag>
#626: FILE: ./hal/hal_com.c:626:
+			dm->DMFlag = dm->InitDMFlag;

CHECK: Avoid CamelCase: <InitODMFlag>
#627: FILE: ./hal/hal_com.c:627:
+			odm->SupportAbility = dm->InitODMFlag;

WARNING: Block comments should align the * on each line
#634: FILE: ./hal/hal_com.c:634:
+		/*
+		* input is already a mask to clear function

CHECK: Avoid CamelCase: <GetHwReg>
#653: FILE: ./hal/hal_com.c:653:
+void GetHwReg(struct adapter *adapter, u8 variable, u8 *val)

CHECK: Unnecessary parentheses around hal_data->odmpriv
#656: FILE: ./hal/hal_com.c:656:
+	struct dm_odm_t *odm = &(hal_data->odmpriv);

CHECK: Avoid CamelCase: <BasicRateSet>
#660: FILE: ./hal/hal_com.c:660:
+		*((u16 *)val) = hal_data->BasicRateSet;

CHECK: Please don't use multiple blank lines
#673: FILE: ./hal/hal_com.c:673:
+
+

CHECK: Please don't use multiple blank lines
#675: FILE: ./hal/hal_com.c:675:
+
+

CHECK: Lines should not end with a '('
#676: FILE: ./hal/hal_com.c:676:
+u8 SetHalDefVar(

CHECK: Avoid CamelCase: <SetHalDefVar>
#676: FILE: ./hal/hal_com.c:676:
+u8 SetHalDefVar(

CHECK: Unnecessary parentheses around hal_data->odmpriv
#681: FILE: ./hal/hal_com.c:681:
+	struct dm_odm_t *odm = &(hal_data->odmpriv);

CHECK: Avoid CamelCase: <pDigTable>
#710: FILE: ./hal/hal_com.c:710:
+				struct dig_t	*pDigTable = &odm->DM_DigTable;

CHECK: Avoid CamelCase: <DM_DigTable>
#710: FILE: ./hal/hal_com.c:710:
+				struct dig_t	*pDigTable = &odm->DM_DigTable;

WARNING: Missing a blank line after declarations
#711: FILE: ./hal/hal_com.c:711:
+				struct dig_t	*pDigTable = &odm->DM_DigTable;
+				pDigTable->CurIGValue = rtw_read8(adapter, 0xc50);

CHECK: Avoid CamelCase: <CurIGValue>
#711: FILE: ./hal/hal_com.c:711:
+				pDigTable->CurIGValue = rtw_read8(adapter, 0xc50);

CHECK: Avoid CamelCase: <bDumpTxPkt>
#722: FILE: ./hal/hal_com.c:722:
+		hal_data->bDumpTxPkt = *((u8 *)value);

CHECK: Lines should not end with a '('
#738: FILE: ./hal/hal_com.c:738:
+u8 GetHalDefVar(

CHECK: Avoid CamelCase: <GetHalDefVar>
#738: FILE: ./hal/hal_com.c:738:
+u8 GetHalDefVar(

CHECK: line length of 101 exceeds 100 columns
#754: FILE: ./hal/hal_com.c:754:
+			psta = rtw_get_stainfo(pstapriv, pmlmepriv->cur_network.network.mac_address);

CHECK: Lines should not end with a '('
#788: FILE: ./hal/hal_com.c:788:
+void SetHalODMVar(

CHECK: Avoid CamelCase: <SetHalODMVar>
#788: FILE: ./hal/hal_com.c:788:
+void SetHalODMVar(

CHECK: Avoid CamelCase: <eVariable>
#790: FILE: ./hal/hal_com.c:790:
+	enum hal_odm_variable eVariable,

CHECK: Avoid CamelCase: <pValue1>
#791: FILE: ./hal/hal_com.c:791:
+	void *pValue1,

CHECK: Avoid CamelCase: <bSet>
#792: FILE: ./hal/hal_com.c:792:
+	bool bSet

WARNING: Missing a blank line after declarations
#802: FILE: ./hal/hal_com.c:802:
+			struct sta_info *psta = pValue1;
+			if (bSet) {

CHECK: line length of 110 exceeds 100 columns
#803: FILE: ./hal/hal_com.c:803:
+				ODM_CmnInfoPtrArrayHook(podmpriv, ODM_CMNINFO_STA_STATUS, psta->mac_id, psta);

CHECK: line length of 110 exceeds 100 columns
#806: FILE: ./hal/hal_com.c:806:
+				ODM_CmnInfoPtrArrayHook(podmpriv, ODM_CMNINFO_STA_STATUS, psta->mac_id, NULL);

WARNING: Statements should start on a tabstop
#809: FILE: ./hal/hal_com.c:809:
+		    }

CHECK: Please don't use multiple blank lines
#824: FILE: ./hal/hal_com.c:824:
+
+

CHECK: Avoid CamelCase: <eqNByte>
#825: FILE: ./hal/hal_com.c:825:
+bool eqNByte(u8 *str1, u8 *str2, u32 num)

CHECK: Avoid CamelCase: <GetU1ByteIntegerFromStringInDecimal>
#837: FILE: ./hal/hal_com.c:837:
+bool GetU1ByteIntegerFromStringInDecimal(char *Str, u8 *pInt)

CHECK: Avoid CamelCase: <Str>
#837: FILE: ./hal/hal_com.c:837:
+bool GetU1ByteIntegerFromStringInDecimal(char *Str, u8 *pInt)

CHECK: Avoid CamelCase: <pInt>
#837: FILE: ./hal/hal_com.c:837:
+bool GetU1ByteIntegerFromStringInDecimal(char *Str, u8 *pInt)

CHECK: braces {} should be used on all arms of this statement
#843: FILE: ./hal/hal_com.c:843:
+		if (Str[i] >= '0' && Str[i] <= '9') {
[...]
+		} else
[...]

CHECK: Unbalanced braces around else statement
#846: FILE: ./hal/hal_com.c:846:
+		} else

CHECK: spaces preferred around that '+' (ctx:VxV)
#862: FILE: ./hal/hal_com.c:862:
+	rtw_write8(adapter, REG_RXERR_RPT+3, rtw_read8(adapter, REG_RXERR_RPT+3)|0xf0);
 	                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#862: FILE: ./hal/hal_com.c:862:
+	rtw_write8(adapter, REG_RXERR_RPT+3, rtw_read8(adapter, REG_RXERR_RPT+3)|0xf0);
 	                                                                     ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#862: FILE: ./hal/hal_com.c:862:
+	rtw_write8(adapter, REG_RXERR_RPT+3, rtw_read8(adapter, REG_RXERR_RPT+3)|0xf0);
 	                                                                        ^

CHECK: line length of 101 exceeds 100 columns
#867: FILE: ./hal/hal_com.c:867:
+		/* rtw_write8(adapter, REG_RXERR_RPT+3, rtw_read8(adapter, REG_RXERR_RPT+3)|0xa0); */

CHECK: line length of 126 exceeds 100 columns
#870: FILE: ./hal/hal_com.c:870:
+		pdbgpriv->dbg_rx_fifo_diff_overflow = pdbgpriv->dbg_rx_fifo_curr_overflow-pdbgpriv->dbg_rx_fifo_last_overflow;

CHECK: spaces preferred around that '-' (ctx:VxV)
#870: FILE: ./hal/hal_com.c:870:
+		pdbgpriv->dbg_rx_fifo_diff_overflow = pdbgpriv->dbg_rx_fifo_curr_overflow-pdbgpriv->dbg_rx_fifo_last_overflow;
 		                                                                         ^

CHECK: Avoid CamelCase: <Array_kfreemap>
#874: FILE: ./hal/hal_com.c:874:
+static u32 Array_kfreemap[] = {

CHECK: Avoid CamelCase: <EEPROMRFGainOffset>
#892: FILE: ./hal/hal_com.c:892:
+	u8 value = padapter->eeprompriv.EEPROMRFGainOffset;

CHECK: Avoid CamelCase: <Array>
#893: FILE: ./hal/hal_com.c:893:
+	u32 *Array = Array_kfreemap;

CHECK: Avoid CamelCase: <EEPROMRFGainVal>
#898: FILE: ./hal/hal_com.c:898:
+		if (padapter->eeprompriv.EEPROMRFGainVal != 0xff) {

CHECK: spaces preferred around that '+' (ctx:VxV)
#903: FILE: ./hal/hal_com.c:903:
+				v2 = Array[i+1];
 				            ^

CHECK: line length of 114 exceeds 100 columns
#909: FILE: ./hal/hal_com.c:909:
+			PHY_SetRFReg(padapter, RF_PATH_A, REG_RF_BB_GAIN_OFFSET, BIT18|BIT17|BIT16|BIT15, target);

CHECK: spaces preferred around that '|' (ctx:VxV)
#909: FILE: ./hal/hal_com.c:909:
+			PHY_SetRFReg(padapter, RF_PATH_A, REG_RF_BB_GAIN_OFFSET, BIT18|BIT17|BIT16|BIT15, target);
 			                                                              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#909: FILE: ./hal/hal_com.c:909:
+			PHY_SetRFReg(padapter, RF_PATH_A, REG_RF_BB_GAIN_OFFSET, BIT18|BIT17|BIT16|BIT15, target);
 			                                                                    ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#909: FILE: ./hal/hal_com.c:909:
+			PHY_SetRFReg(padapter, RF_PATH_A, REG_RF_BB_GAIN_OFFSET, BIT18|BIT17|BIT16|BIT15, target);
 			                                                                          ^

total: 0 errors, 12 warnings, 106 checks, 914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_com.c has style problems, please review.
---------------
./hal/hal_com.o
---------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_com.o has style problems, please review.
----------------------
./hal/hal_com_phycfg.c
----------------------
CHECK: Avoid CamelCase: <RfPath>
#12: FILE: ./hal/hal_com_phycfg.c:12:
+u8 PHY_GetTxPowerByRateBase(struct adapter *Adapter, u8 RfPath,

CHECK: Avoid CamelCase: <RateSection>
#13: FILE: ./hal/hal_com_phycfg.c:13:
+			    enum rate_section RateSection)

CHECK: Avoid CamelCase: <TxPwrByRateBase2_4G>
#23: FILE: ./hal/hal_com_phycfg.c:23:
+		value = pHalData->TxPwrByRateBase2_4G[RfPath][0];

CHECK: Avoid CamelCase: <phy_SetTxPowerByRateBase>
#39: FILE: ./hal/hal_com_phycfg.c:39:
+phy_SetTxPowerByRateBase(struct adapter *Adapter, u8 RfPath,

CHECK: Lines should not end with a '('
#63: FILE: ./hal/hal_com_phycfg.c:63:
+phy_StoreTxPowerByRateBase(

CHECK: Avoid CamelCase: <phy_StoreTxPowerByRateBase>
#63: FILE: ./hal/hal_com_phycfg.c:63:
+phy_StoreTxPowerByRateBase(

CHECK: Lines should not end with a '('
#81: FILE: ./hal/hal_com_phycfg.c:81:
+u8 PHY_GetRateSectionIndexOfTxPowerByRate(

CHECK: Avoid CamelCase: <pDM_Odm>
#86: FILE: ./hal/hal_com_phycfg.c:86:
+	struct dm_odm_t *pDM_Odm = &pHalData->odmpriv;

CHECK: Avoid CamelCase: <PhyRegPgVersion>
#89: FILE: ./hal/hal_com_phycfg.c:89:
+	if (pDM_Odm->PhyRegPgVersion == 0) {

CHECK: Avoid CamelCase: <bMaskH3Bytes>
#101: FILE: ./hal/hal_com_phycfg.c:101:
+			if (BitMask == bMaskH3Bytes)

CHECK: Lines should not end with a '('
#137: FILE: ./hal/hal_com_phycfg.c:137:
+PHY_GetRateValuesOfTxPowerByRate(

CHECK: Avoid CamelCase: <RateIndex>
#142: FILE: ./hal/hal_com_phycfg.c:142:
+	u8 *RateIndex,

CHECK: Avoid CamelCase: <PwrByRateVal>
#143: FILE: ./hal/hal_com_phycfg.c:143:
+	s8 *PwrByRateVal,

CHECK: Avoid CamelCase: <RateNum>
#144: FILE: ./hal/hal_com_phycfg.c:144:
+	u8 *RateNum

CHECK: No space is necessary after a cast
#157: FILE: ./hal/hal_com_phycfg.c:157:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#158: FILE: ./hal/hal_com_phycfg.c:158:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#170: FILE: ./hal/hal_com_phycfg.c:170:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#171: FILE: ./hal/hal_com_phycfg.c:171:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#178: FILE: ./hal/hal_com_phycfg.c:178:
+		PwrByRateVal[0] = (s8) ((((Value >> (8 + 4)) & 0xF)) * 10 +

CHECK: line length of 102 exceeds 100 columns
#179: FILE: ./hal/hal_com_phycfg.c:179:
+										((Value >> 8) & 0xF));

CHECK: No space is necessary after a cast
#189: FILE: ./hal/hal_com_phycfg.c:189:
+				PwrByRateVal[i - 1] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 124 exceeds 100 columns
#190: FILE: ./hal/hal_com_phycfg.c:190:
+												((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#195: FILE: ./hal/hal_com_phycfg.c:195:
+			PwrByRateVal[0] = (s8) ((((Value >> 4) & 0xF)) * 10 + (Value & 0xF));

CHECK: No space is necessary after a cast
#207: FILE: ./hal/hal_com_phycfg.c:207:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#208: FILE: ./hal/hal_com_phycfg.c:208:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#220: FILE: ./hal/hal_com_phycfg.c:220:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#221: FILE: ./hal/hal_com_phycfg.c:221:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#231: FILE: ./hal/hal_com_phycfg.c:231:
+			PwrByRateVal[i - 1] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#232: FILE: ./hal/hal_com_phycfg.c:232:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#246: FILE: ./hal/hal_com_phycfg.c:246:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#247: FILE: ./hal/hal_com_phycfg.c:247:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#261: FILE: ./hal/hal_com_phycfg.c:261:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#262: FILE: ./hal/hal_com_phycfg.c:262:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#276: FILE: ./hal/hal_com_phycfg.c:276:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#277: FILE: ./hal/hal_com_phycfg.c:277:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#291: FILE: ./hal/hal_com_phycfg.c:291:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#292: FILE: ./hal/hal_com_phycfg.c:292:
+											((Value >> (i * 8)) & 0xF));

CHECK: No space is necessary after a cast
#306: FILE: ./hal/hal_com_phycfg.c:306:
+			PwrByRateVal[i] = (s8) ((((Value >> (i * 8 + 4)) & 0xF)) * 10 +

CHECK: line length of 116 exceeds 100 columns
#307: FILE: ./hal/hal_com_phycfg.c:307:
+											((Value >> (i * 8)) & 0xF));

CHECK: Avoid CamelCase: <rateIndex>
#321: FILE: ./hal/hal_com_phycfg.c:321:
+	u8 i = 0, rateIndex[4] = {0}, rateNum = 0;

CHECK: Avoid CamelCase: <rateNum>
#321: FILE: ./hal/hal_com_phycfg.c:321:
+	u8 i = 0, rateIndex[4] = {0}, rateNum = 0;

CHECK: line length of 110 exceeds 100 columns
#324: FILE: ./hal/hal_com_phycfg.c:324:
+	PHY_GetRateValuesOfTxPowerByRate(padapter, RegAddr, BitMask, Data, rateIndex, PwrByRateVal, &rateNum);

WARNING: braces {} are not necessary for single statement blocks
#329: FILE: ./hal/hal_com_phycfg.c:329:
+	for (i = 0; i < rateNum; ++i) {
+		pHalData->TxPwrByRateOffset[RfPath][rateIndex[i]] = PwrByRateVal[i];
+	}

CHECK: Avoid CamelCase: <TxPwrByRateOffset>
#330: FILE: ./hal/hal_com_phycfg.c:330:
+		pHalData->TxPwrByRateOffset[RfPath][rateIndex[i]] = PwrByRateVal[i];

CHECK: Lines should not end with a '('
#334: FILE: ./hal/hal_com_phycfg.c:334:
+static void PHY_StoreTxPowerByRateOld(

CHECK: Avoid CamelCase: <MCSTxPowerLevelOriginalOffset>
#341: FILE: ./hal/hal_com_phycfg.c:341:
+	pHalData->MCSTxPowerLevelOriginalOffset[pHalData->pwrGroupCnt][index] = Data;

CHECK: Avoid CamelCase: <pwrGroupCnt>
#341: FILE: ./hal/hal_com_phycfg.c:341:
+	pHalData->MCSTxPowerLevelOriginalOffset[pHalData->pwrGroupCnt][index] = Data;

CHECK: Avoid CamelCase: <rfPath>
#347: FILE: ./hal/hal_com_phycfg.c:347:
+	u8 rfPath, rate;

CHECK: Lines should not end with a '('
#354: FILE: ./hal/hal_com_phycfg.c:354:
+void PHY_StoreTxPowerByRate(

WARNING: braces {} are not necessary for any arm of this statement
#365: FILE: ./hal/hal_com_phycfg.c:365:
+	if (pDM_Odm->PhyRegPgVersion > 0)
[...]
+	else if (pDM_Odm->PhyRegPgVersion == 0) {
[...]

CHECK: Lines should not end with a '('
#373: FILE: ./hal/hal_com_phycfg.c:373:
+phy_ConvertTxPowerByRateInDbmToRelativeValues(

CHECK: Avoid CamelCase: <phy_ConvertTxPowerByRateInDbmToRelativeValues>
#373: FILE: ./hal/hal_com_phycfg.c:373:
+phy_ConvertTxPowerByRateInDbmToRelativeValues(

CHECK: Avoid CamelCase: <cckRates>
#378: FILE: ./hal/hal_com_phycfg.c:378:
+	u8	cckRates[4] = {

CHECK: Avoid CamelCase: <ofdmRates>
#381: FILE: ./hal/hal_com_phycfg.c:381:
+	u8	ofdmRates[8] = {

CHECK: Avoid CamelCase: <mcs0_7Rates>
#384: FILE: ./hal/hal_com_phycfg.c:384:
+	u8 mcs0_7Rates[8] = {

WARNING: Block comments should align the * on each line
#412: FILE: ./hal/hal_com_phycfg.c:412:
+/*
+  * This function must be called if the value in the PHY_REG_PG.txt(or header)

CHECK: Lines should not end with a '('
#421: FILE: ./hal/hal_com_phycfg.c:421:
+void PHY_SetTxPowerIndexByRateSection(

CHECK: Avoid CamelCase: <RFPath>
#422: FILE: ./hal/hal_com_phycfg.c:422:
+	struct adapter *padapter, u8 RFPath, u8 Channel, u8 RateSection

WARNING: Missing a blank line after declarations
#429: FILE: ./hal/hal_com_phycfg.c:429:
+		u8 cckRates[]   = {MGN_1M, MGN_2M, MGN_5_5M, MGN_11M};
+		PHY_SetTxPowerIndexByRateArray(padapter, RFPath,

CHECK: Alignment should match open parenthesis
#430: FILE: ./hal/hal_com_phycfg.c:430:
+		PHY_SetTxPowerIndexByRateArray(padapter, RFPath,
+					     pHalData->CurrentChannelBW,

CHECK: line length of 105 exceeds 100 columns
#435: FILE: ./hal/hal_com_phycfg.c:435:
+		u8 ofdmRates[]  = {MGN_6M, MGN_9M, MGN_12M, MGN_18M, MGN_24M, MGN_36M, MGN_48M, MGN_54M};

WARNING: Missing a blank line after declarations
#436: FILE: ./hal/hal_com_phycfg.c:436:
+		u8 ofdmRates[]  = {MGN_6M, MGN_9M, MGN_12M, MGN_18M, MGN_24M, MGN_36M, MGN_48M, MGN_54M};
+		PHY_SetTxPowerIndexByRateArray(padapter, RFPath,

CHECK: line length of 115 exceeds 100 columns
#442: FILE: ./hal/hal_com_phycfg.c:442:
+		u8 htRates1T[]  = {MGN_MCS0, MGN_MCS1, MGN_MCS2, MGN_MCS3, MGN_MCS4, MGN_MCS5, MGN_MCS6, MGN_MCS7};

CHECK: Avoid CamelCase: <htRates1T>
#442: FILE: ./hal/hal_com_phycfg.c:442:
+		u8 htRates1T[]  = {MGN_MCS0, MGN_MCS1, MGN_MCS2, MGN_MCS3, MGN_MCS4, MGN_MCS5, MGN_MCS6, MGN_MCS7};

WARNING: Missing a blank line after declarations
#443: FILE: ./hal/hal_com_phycfg.c:443:
+		u8 htRates1T[]  = {MGN_MCS0, MGN_MCS1, MGN_MCS2, MGN_MCS3, MGN_MCS4, MGN_MCS5, MGN_MCS6, MGN_MCS7};
+		PHY_SetTxPowerIndexByRateArray(padapter, RFPath,

CHECK: Blank lines aren't necessary before a close brace '}'
#448: FILE: ./hal/hal_com_phycfg.c:448:
+
+	}

CHECK: Lines should not end with a '('
#451: FILE: ./hal/hal_com_phycfg.c:451:
+u8 PHY_GetTxPowerIndexBase(

CHECK: Avoid CamelCase: <Rate>
#454: FILE: ./hal/hal_com_phycfg.c:454:
+	u8 Rate,

CHECK: Avoid CamelCase: <BandWidth>
#455: FILE: ./hal/hal_com_phycfg.c:455:
+	enum channel_width	BandWidth,

CHECK: Avoid CamelCase: <txPower>
#460: FILE: ./hal/hal_com_phycfg.c:460:
+	u8 txPower = 0;

CHECK: spaces preferred around that '-' (ctx:VxV)
#461: FILE: ./hal/hal_com_phycfg.c:461:
+	u8 chnlIdx = (Channel-1);
 	                     ^

CHECK: Avoid CamelCase: <chnlIdx>
#461: FILE: ./hal/hal_com_phycfg.c:461:
+	u8 chnlIdx = (Channel-1);

CHECK: Avoid CamelCase: <Index24G_CCK_Base>
#467: FILE: ./hal/hal_com_phycfg.c:467:
+		txPower = pHalData->Index24G_CCK_Base[RFPath][chnlIdx];

WARNING: Comparisons should place the constant on the right side of the test
#468: FILE: ./hal/hal_com_phycfg.c:468:
+	else if (MGN_6M <= Rate)

CHECK: Avoid CamelCase: <Index24G_BW40_Base>
#469: FILE: ./hal/hal_com_phycfg.c:469:
+		txPower = pHalData->Index24G_BW40_Base[RFPath][chnlIdx];

WARNING: Comparisons should place the constant on the right side of the test
#472: FILE: ./hal/hal_com_phycfg.c:472:
+	if ((MGN_6M <= Rate && Rate <= MGN_54M) && !IS_CCK_RATE(Rate))

CHECK: Avoid CamelCase: <OFDM_24G_Diff>
#473: FILE: ./hal/hal_com_phycfg.c:473:
+		txPower += pHalData->OFDM_24G_Diff[RFPath][TX_1S];

WARNING: Comparisons should place the constant on the right side of the test
#476: FILE: ./hal/hal_com_phycfg.c:476:
+		if (MGN_MCS0 <= Rate && Rate <= MGN_MCS7)

CHECK: Avoid CamelCase: <BW20_24G_Diff>
#477: FILE: ./hal/hal_com_phycfg.c:477:
+			txPower += pHalData->BW20_24G_Diff[RFPath][TX_1S];

WARNING: Comparisons should place the constant on the right side of the test
#479: FILE: ./hal/hal_com_phycfg.c:479:
+		if (MGN_MCS0 <= Rate && Rate <= MGN_MCS7)

CHECK: Avoid CamelCase: <BW40_24G_Diff>
#480: FILE: ./hal/hal_com_phycfg.c:480:
+			txPower += pHalData->BW40_24G_Diff[RFPath][TX_1S];

CHECK: Avoid CamelCase: <RFCalibrateInfo>
#492: FILE: ./hal/hal_com_phycfg.c:492:
+	if (pDM_Odm->RFCalibrateInfo.TxPowerTrackControl  == false)

CHECK: Avoid CamelCase: <TxPowerTrackControl>
#492: FILE: ./hal/hal_com_phycfg.c:492:
+	if (pDM_Odm->RFCalibrateInfo.TxPowerTrackControl  == false)

CHECK: Using comparison to false is error prone
#492: FILE: ./hal/hal_com_phycfg.c:492:
+	if (pDM_Odm->RFCalibrateInfo.TxPowerTrackControl  == false)

CHECK: Unnecessary parentheses around 'Rate == MGN_1M'
#495: FILE: ./hal/hal_com_phycfg.c:495:
+	if ((Rate == MGN_1M) || (Rate == MGN_2M) || (Rate == MGN_5_5M) || (Rate == MGN_11M))

CHECK: Unnecessary parentheses around 'Rate == MGN_2M'
#495: FILE: ./hal/hal_com_phycfg.c:495:
+	if ((Rate == MGN_1M) || (Rate == MGN_2M) || (Rate == MGN_5_5M) || (Rate == MGN_11M))

CHECK: Unnecessary parentheses around 'Rate == MGN_5_5M'
#495: FILE: ./hal/hal_com_phycfg.c:495:
+	if ((Rate == MGN_1M) || (Rate == MGN_2M) || (Rate == MGN_5_5M) || (Rate == MGN_11M))

CHECK: Unnecessary parentheses around 'Rate == MGN_11M'
#495: FILE: ./hal/hal_com_phycfg.c:495:
+	if ((Rate == MGN_1M) || (Rate == MGN_2M) || (Rate == MGN_5_5M) || (Rate == MGN_11M))

CHECK: Avoid CamelCase: <Remnant_CCKSwingIdx>
#496: FILE: ./hal/hal_com_phycfg.c:496:
+		offset = pDM_Odm->Remnant_CCKSwingIdx;

CHECK: Avoid CamelCase: <Remnant_OFDMSwingIdx>
#498: FILE: ./hal/hal_com_phycfg.c:498:
+		offset = pDM_Odm->Remnant_OFDMSwingIdx[RFPath];

WARNING: Missing a blank line after declarations
#506: FILE: ./hal/hal_com_phycfg.c:506:
+	u8 index = 0;
+	switch (Rate) {

CHECK: line length of 102 exceeds 100 columns
#579: FILE: ./hal/hal_com_phycfg.c:579:
+	if ((padapter->registrypriv.RegEnableTxPowerByRate == 2 && pHalData->EEPROMRegulatory == 2) ||

CHECK: Avoid CamelCase: <RegEnableTxPowerByRate>
#579: FILE: ./hal/hal_com_phycfg.c:579:
+	if ((padapter->registrypriv.RegEnableTxPowerByRate == 2 && pHalData->EEPROMRegulatory == 2) ||

CHECK: Avoid CamelCase: <EEPROMRegulatory>
#579: FILE: ./hal/hal_com_phycfg.c:579:
+	if ((padapter->registrypriv.RegEnableTxPowerByRate == 2 && pHalData->EEPROMRegulatory == 2) ||

CHECK: Alignment should match open parenthesis
#580: FILE: ./hal/hal_com_phycfg.c:580:
+	if ((padapter->registrypriv.RegEnableTxPowerByRate == 2 && pHalData->EEPROMRegulatory == 2) ||
+		   padapter->registrypriv.RegEnableTxPowerByRate == 0)

CHECK: Blank lines aren't necessary before a close brace '}'
#591: FILE: ./hal/hal_com_phycfg.c:591:
+
+}

CHECK: Lines should not end with a '('
#593: FILE: ./hal/hal_com_phycfg.c:593:
+void PHY_SetTxPowerByRate(

CHECK: Lines should not end with a '('
#620: FILE: ./hal/hal_com_phycfg.c:620:
+void PHY_SetTxPowerIndexByRateArray(

CHECK: Avoid CamelCase: <Rates>
#625: FILE: ./hal/hal_com_phycfg.c:625:
+	u8 *Rates,

CHECK: Avoid CamelCase: <RateArraySize>
#626: FILE: ./hal/hal_com_phycfg.c:626:
+	u8 RateArraySize

CHECK: Avoid CamelCase: <powerIndex>
#629: FILE: ./hal/hal_com_phycfg.c:629:
+	u32 powerIndex = 0;

CHECK: Avoid CamelCase: <phy_GetWorldWideLimit>
#638: FILE: ./hal/hal_com_phycfg.c:638:
+static s8 phy_GetWorldWideLimit(s8 *LimitTable)

CHECK: Avoid CamelCase: <LimitTable>
#638: FILE: ./hal/hal_com_phycfg.c:638:
+static s8 phy_GetWorldWideLimit(s8 *LimitTable)

CHECK: Avoid CamelCase: <phy_GetChannelIndexOfTxPowerLimit>
#651: FILE: ./hal/hal_com_phycfg.c:651:
+static s8 phy_GetChannelIndexOfTxPowerLimit(u8 Channel)

CHECK: Unnecessary parentheses around 'adapter->registrypriv.RegEnableTxPowerLimit == 2'
#696: FILE: ./hal/hal_com_phycfg.c:696:
+	if (((adapter->registrypriv.RegEnableTxPowerLimit == 2) &&
+	     (hal_data->EEPROMRegulatory != 1)) ||
+	    (adapter->registrypriv.RegEnableTxPowerLimit == 0))

CHECK: Unnecessary parentheses around 'hal_data->EEPROMRegulatory != 1'
#696: FILE: ./hal/hal_com_phycfg.c:696:
+	if (((adapter->registrypriv.RegEnableTxPowerLimit == 2) &&
+	     (hal_data->EEPROMRegulatory != 1)) ||
+	    (adapter->registrypriv.RegEnableTxPowerLimit == 0))

CHECK: Unnecessary parentheses around 'adapter->registrypriv.RegEnableTxPowerLimit == 0'
#696: FILE: ./hal/hal_com_phycfg.c:696:
+	if (((adapter->registrypriv.RegEnableTxPowerLimit == 2) &&
+	     (hal_data->EEPROMRegulatory != 1)) ||
+	    (adapter->registrypriv.RegEnableTxPowerLimit == 0))

CHECK: Avoid CamelCase: <RegEnableTxPowerLimit>
#696: FILE: ./hal/hal_com_phycfg.c:696:
+	if (((adapter->registrypriv.RegEnableTxPowerLimit == 2) &&

CHECK: Avoid CamelCase: <RegPwrTblSel>
#701: FILE: ./hal/hal_com_phycfg.c:701:
+	switch (adapter->registrypriv.RegPwrTblSel) {

CHECK: Avoid CamelCase: <Regulation2_4G>
#715: FILE: ./hal/hal_com_phycfg.c:715:
+		idx_regulation = hal_data->Regulation2_4G;

CHECK: Please don't use multiple blank lines
#735: FILE: ./hal/hal_com_phycfg.c:735:
+
+

CHECK: Avoid CamelCase: <TxPwrLimit_2_4G>
#737: FILE: ./hal/hal_com_phycfg.c:737:
+		limits[i] = hal_data->TxPwrLimit_2_4G[i]

CHECK: Avoid CamelCase: <BW40PwrBasedBm2_4G>
#757: FILE: ./hal/hal_com_phycfg.c:757:
+	u8 BW40PwrBasedBm2_4G = 0x2E;

CHECK: Avoid CamelCase: <rateSection>
#758: FILE: ./hal/hal_com_phycfg.c:758:
+	u8 regulation, bw, channel, rateSection;

CHECK: Avoid CamelCase: <tempValue>
#759: FILE: ./hal/hal_com_phycfg.c:759:
+	s8 tempValue = 0, tempPwrLmt = 0;

CHECK: Avoid CamelCase: <tempPwrLmt>
#759: FILE: ./hal/hal_com_phycfg.c:759:
+	s8 tempValue = 0, tempPwrLmt = 0;

CHECK: line length of 106 exceeds 100 columns
#765: FILE: ./hal/hal_com_phycfg.c:765:
+				for (rateSection = 0; rateSection < MAX_RATE_SECTION_NUM; ++rateSection) {

CHECK: line length of 128 exceeds 100 columns
#766: FILE: ./hal/hal_com_phycfg.c:766:
+					tempPwrLmt = pHalData->TxPwrLimit_2_4G[regulation][bw][rateSection][channel][RF_PATH_A];

CHECK: line length of 102 exceeds 100 columns
#768: FILE: ./hal/hal_com_phycfg.c:768:
+					for (rfPath = RF_PATH_A; rfPath < MAX_RF_PATH_NUM; ++rfPath) {

CHECK: line length of 116 exceeds 100 columns
#769: FILE: ./hal/hal_com_phycfg.c:769:
+						if (pHalData->odmpriv.PhyRegPgValueType == PHY_REG_PG_EXACT_VALUE) {

WARNING: Too many leading tabs - consider code refactoring
#769: FILE: ./hal/hal_com_phycfg.c:769:
+						if (pHalData->odmpriv.PhyRegPgValueType == PHY_REG_PG_EXACT_VALUE) {

CHECK: Avoid CamelCase: <PhyRegPgValueType>
#769: FILE: ./hal/hal_com_phycfg.c:769:
+						if (pHalData->odmpriv.PhyRegPgValueType == PHY_REG_PG_EXACT_VALUE) {

CHECK: braces {} should be used on all arms of this statement
#769: FILE: ./hal/hal_com_phycfg.c:769:
+						if (pHalData->odmpriv.PhyRegPgValueType == PHY_REG_PG_EXACT_VALUE) {
[...]
+						} else
[...]

WARNING: Too many leading tabs - consider code refactoring
#770: FILE: ./hal/hal_com_phycfg.c:770:
+							if (rateSection == 2) /*  HT 1T */

CHECK: line length of 141 exceeds 100 columns
#771: FILE: ./hal/hal_com_phycfg.c:771:
+								BW40PwrBasedBm2_4G = PHY_GetTxPowerByRateBase(Adapter, rfPath, HT_MCS0_MCS7);

WARNING: Too many leading tabs - consider code refactoring
#772: FILE: ./hal/hal_com_phycfg.c:772:
+							else if (rateSection == 1) /*  OFDM */

CHECK: line length of 133 exceeds 100 columns
#773: FILE: ./hal/hal_com_phycfg.c:773:
+								BW40PwrBasedBm2_4G = PHY_GetTxPowerByRateBase(Adapter, rfPath, OFDM);

WARNING: Too many leading tabs - consider code refactoring
#774: FILE: ./hal/hal_com_phycfg.c:774:
+							else if (rateSection == 0) /*  CCK */

CHECK: line length of 132 exceeds 100 columns
#775: FILE: ./hal/hal_com_phycfg.c:775:
+								BW40PwrBasedBm2_4G = PHY_GetTxPowerByRateBase(Adapter, rfPath, CCK);

WARNING: Too many leading tabs - consider code refactoring
#776: FILE: ./hal/hal_com_phycfg.c:776:
+						} else

CHECK: Unbalanced braces around else statement
#776: FILE: ./hal/hal_com_phycfg.c:776:
+						} else

CHECK: line length of 116 exceeds 100 columns
#777: FILE: ./hal/hal_com_phycfg.c:777:
+							BW40PwrBasedBm2_4G = Adapter->registrypriv.RegPowerBase * 2;

CHECK: Avoid CamelCase: <RegPowerBase>
#777: FILE: ./hal/hal_com_phycfg.c:777:
+							BW40PwrBasedBm2_4G = Adapter->registrypriv.RegPowerBase * 2;

WARNING: Too many leading tabs - consider code refactoring
#779: FILE: ./hal/hal_com_phycfg.c:779:
+						if (tempPwrLmt != MAX_POWER_INDEX) {

CHECK: line length of 140 exceeds 100 columns
#781: FILE: ./hal/hal_com_phycfg.c:781:
+							pHalData->TxPwrLimit_2_4G[regulation][bw][rateSection][channel][rfPath] = tempValue;

CHECK: line length of 107 exceeds 100 columns
#800: FILE: ./hal/hal_com_phycfg.c:800:
+						pHalData->TxPwrLimit_2_4G[i][j][k][m][l] = MAX_POWER_INDEX;

CHECK: Lines should not end with a '('
#804: FILE: ./hal/hal_com_phycfg.c:804:
+void PHY_SetTxPowerLimit(

CHECK: Avoid CamelCase: <Regulation>
#806: FILE: ./hal/hal_com_phycfg.c:806:
+	u8 *Regulation,

CHECK: Avoid CamelCase: <Bandwidth>
#807: FILE: ./hal/hal_com_phycfg.c:807:
+	u8 *Bandwidth,

CHECK: Avoid CamelCase: <PowerLimit>
#811: FILE: ./hal/hal_com_phycfg.c:811:
+	u8 *PowerLimit

CHECK: Avoid CamelCase: <powerLimit>
#816: FILE: ./hal/hal_com_phycfg.c:816:
+	s8 powerLimit = 0, prevPowerLimit, channelIndex;

CHECK: Avoid CamelCase: <prevPowerLimit>
#816: FILE: ./hal/hal_com_phycfg.c:816:
+	s8 powerLimit = 0, prevPowerLimit, channelIndex;

CHECK: Avoid CamelCase: <channelIndex>
#816: FILE: ./hal/hal_com_phycfg.c:816:
+	s8 powerLimit = 0, prevPowerLimit, channelIndex;

CHECK: line length of 112 exceeds 100 columns
#851: FILE: ./hal/hal_com_phycfg.c:851:
+	prevPowerLimit = pHalData->TxPwrLimit_2_4G[regulation][bandwidth][rateSection][channelIndex][RF_PATH_A];

CHECK: line length of 116 exceeds 100 columns
#854: FILE: ./hal/hal_com_phycfg.c:854:
+		pHalData->TxPwrLimit_2_4G[regulation][bandwidth][rateSection][channelIndex][RF_PATH_A] = powerLimit;

CHECK: Avoid CamelCase: <Hal_ChannelPlanToRegulation>
#857: FILE: ./hal/hal_com_phycfg.c:857:
+void Hal_ChannelPlanToRegulation(struct adapter *Adapter, u16 ChannelPlan)

WARNING: Missing a blank line after declarations
#860: FILE: ./hal/hal_com_phycfg.c:860:
+	struct hal_com_data *pHalData = GET_HAL_DATA(Adapter);
+	pHalData->Regulation2_4G = TXPWR_LMT_WW;

total: 0 errors, 18 warnings, 129 checks, 983 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_com_phycfg.c has style problems, please review.
----------------------
./hal/hal_com_phycfg.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_com_phycfg.o has style problems, please review.
------------------------
./hal/HalHWImg8723B_BB.c
------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_BB.c:3:
+/******************************************************************************
+*

CHECK: Lines should not end with a '('
#11: FILE: ./hal/HalHWImg8723B_BB.c:11:
+static bool CheckPositive(

CHECK: Avoid CamelCase: <CheckPositive>
#11: FILE: ./hal/HalHWImg8723B_BB.c:11:
+static bool CheckPositive(

CHECK: Avoid CamelCase: <Condition1>
#12: FILE: ./hal/HalHWImg8723B_BB.c:12:
+	struct dm_odm_t *pDM_Odm, const u32 Condition1, const u32 Condition2

CHECK: Avoid CamelCase: <Condition2>
#12: FILE: ./hal/HalHWImg8723B_BB.c:12:
+	struct dm_odm_t *pDM_Odm, const u32 Condition1, const u32 Condition2

CHECK: Avoid CamelCase: <_BoardType>
#15: FILE: ./hal/HalHWImg8723B_BB.c:15:
+	u8 _BoardType =

CHECK: Avoid CamelCase: <BoardType>
#16: FILE: ./hal/HalHWImg8723B_BB.c:16:
+		((pDM_Odm->BoardType & BIT4) >> 4) << 0 | /*  _GLNA */

CHECK: Avoid CamelCase: <CutVersion>
#24: FILE: ./hal/HalHWImg8723B_BB.c:24:
+		pDM_Odm->CutVersion << 24 |

CHECK: Avoid CamelCase: <SupportPlatform>
#25: FILE: ./hal/HalHWImg8723B_BB.c:25:
+		pDM_Odm->SupportPlatform << 16 |

CHECK: Avoid CamelCase: <PackageType>
#26: FILE: ./hal/HalHWImg8723B_BB.c:26:
+		pDM_Odm->PackageType << 12 |

CHECK: Avoid CamelCase: <SupportInterface>
#27: FILE: ./hal/HalHWImg8723B_BB.c:27:
+		pDM_Odm->SupportInterface << 8  |

CHECK: Avoid CamelCase: <TypeGLNA>
#31: FILE: ./hal/HalHWImg8723B_BB.c:31:
+		pDM_Odm->TypeGLNA << 0 |

CHECK: Avoid CamelCase: <TypeGPA>
#32: FILE: ./hal/HalHWImg8723B_BB.c:32:
+		pDM_Odm->TypeGPA << 8 |

CHECK: Avoid CamelCase: <TypeALNA>
#33: FILE: ./hal/HalHWImg8723B_BB.c:33:
+		pDM_Odm->TypeALNA << 16 |

CHECK: Avoid CamelCase: <TypeAPA>
#34: FILE: ./hal/HalHWImg8723B_BB.c:34:
+		pDM_Odm->TypeAPA << 24;

CHECK: Please don't use multiple blank lines
#36: FILE: ./hal/HalHWImg8723B_BB.c:36:
+
+

WARNING: Block comments should align the * on each line
#74: FILE: ./hal/HalHWImg8723B_BB.c:74:
+/******************************************************************************
+*                           AGC_TAB.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_AGC_TAB>
#77: FILE: ./hal/HalHWImg8723B_BB.c:77:
+static u32 Array_MP_8723B_AGC_TAB[] = {

CHECK: Avoid CamelCase: <ArrayLen>
#215: FILE: ./hal/HalHWImg8723B_BB.c:215:
+	u32 ArrayLen = ARRAY_SIZE(Array_MP_8723B_AGC_TAB);

CHECK: spaces preferred around that '+' (ctx:VxV)
#220: FILE: ./hal/HalHWImg8723B_BB.c:220:
+		u32 v2 = Array[i+1];
 		                ^

CHECK: Avoid CamelCase: <odm_ConfigBB_AGC_8723B>
#224: FILE: ./hal/HalHWImg8723B_BB.c:224:
+			odm_ConfigBB_AGC_8723B(pDM_Odm, v1, bMaskDWord, v2);

CHECK: Avoid CamelCase: <bMaskDWord>
#224: FILE: ./hal/HalHWImg8723B_BB.c:224:
+			odm_ConfigBB_AGC_8723B(pDM_Odm, v1, bMaskDWord, v2);

CHECK: Avoid CamelCase: <bMatched>
#228: FILE: ./hal/HalHWImg8723B_BB.c:228:
+			bool bMatched = true;

CHECK: spaces preferred around that '|' (ctx:VxV)
#229: FILE: ./hal/HalHWImg8723B_BB.c:229:
+			u8  cCond  = (u8)((v1 & (BIT29|BIT28)) >> 28);
 			                              ^

CHECK: Avoid CamelCase: <cCond>
#229: FILE: ./hal/HalHWImg8723B_BB.c:229:
+			u8  cCond  = (u8)((v1 & (BIT29|BIT28)) >> 28);

WARNING: Block comments should align the * on each line
#246: FILE: ./hal/HalHWImg8723B_BB.c:246:
+				/*  Condition isn't matched.
+				*   Discard the following (offset, data) pairs.

CHECK: spaces preferred around that '-' (ctx:VxV)
#248: FILE: ./hal/HalHWImg8723B_BB.c:248:
+				while (v1 < 0x40000000 && i < ArrayLen-2)
 				                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#254: FILE: ./hal/HalHWImg8723B_BB.c:254:
+				while (v1 < 0x40000000 && i < ArrayLen-2) {
 				                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#260: FILE: ./hal/HalHWImg8723B_BB.c:260:
+				cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 				                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#261: FILE: ./hal/HalHWImg8723B_BB.c:261:
+				while (cCond != COND_ENDIF && i < ArrayLen-2) {
 				                                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#263: FILE: ./hal/HalHWImg8723B_BB.c:263:
+					cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 					                         ^

WARNING: Block comments should align the * on each line
#271: FILE: ./hal/HalHWImg8723B_BB.c:271:
+/******************************************************************************
+*                           PHY_REG.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_PHY_REG>
#274: FILE: ./hal/HalHWImg8723B_BB.c:274:
+static u32 Array_MP_8723B_PHY_REG[] = {

CHECK: spaces preferred around that '+' (ctx:VxV)
#479: FILE: ./hal/HalHWImg8723B_BB.c:479:
+		u32 v2 = Array[i+1];
 		                ^

CHECK: Avoid CamelCase: <odm_ConfigBB_PHY_8723B>
#483: FILE: ./hal/HalHWImg8723B_BB.c:483:
+			odm_ConfigBB_PHY_8723B(pDM_Odm, v1, bMaskDWord, v2);

CHECK: spaces preferred around that '|' (ctx:VxV)
#488: FILE: ./hal/HalHWImg8723B_BB.c:488:
+			u8  cCond  = (u8)((v1 & (BIT29|BIT28)) >> 28);
 			                              ^

WARNING: Block comments should align the * on each line
#505: FILE: ./hal/HalHWImg8723B_BB.c:505:
+				/*  Condition isn't matched.
+				*   Discard the following (offset, data) pairs.

CHECK: spaces preferred around that '-' (ctx:VxV)
#507: FILE: ./hal/HalHWImg8723B_BB.c:507:
+				while (v1 < 0x40000000 && i < ArrayLen-2)
 				                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#512: FILE: ./hal/HalHWImg8723B_BB.c:512:
+				while (v1 < 0x40000000 && i < ArrayLen-2) {
 				                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#518: FILE: ./hal/HalHWImg8723B_BB.c:518:
+				cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 				                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#519: FILE: ./hal/HalHWImg8723B_BB.c:519:
+				while (cCond != COND_ENDIF && i < ArrayLen-2) {
 				                                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#521: FILE: ./hal/HalHWImg8723B_BB.c:521:
+					cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 					                         ^

WARNING: Block comments should align the * on each line
#529: FILE: ./hal/HalHWImg8723B_BB.c:529:
+/******************************************************************************
+*                           PHY_REG_PG.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_PHY_REG_PG>
#532: FILE: ./hal/HalHWImg8723B_BB.c:532:
+static u32 Array_MP_8723B_PHY_REG_PG[] = {

CHECK: spaces preferred around that '+' (ctx:VxV)
#551: FILE: ./hal/HalHWImg8723B_BB.c:551:
+		u32 v2 = Array[i+1];
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#552: FILE: ./hal/HalHWImg8723B_BB.c:552:
+		u32 v3 = Array[i+2];
 		                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#553: FILE: ./hal/HalHWImg8723B_BB.c:553:
+		u32 v4 = Array[i+3];
 		                ^

CHECK: Avoid CamelCase: <odm_ConfigBB_PHY_REG_PG_8723B>
#555: FILE: ./hal/HalHWImg8723B_BB.c:555:
+		odm_ConfigBB_PHY_REG_PG_8723B(pDM_Odm, v1, v2, v3, v4);

total: 0 errors, 6 warnings, 42 checks, 557 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_BB.c has style problems, please review.
------------------------
./hal/HalHWImg8723B_BB.h
------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_BB.h:3:
+/******************************************************************************
+*

CHECK: Please don't use multiple blank lines
#11: FILE: ./hal/HalHWImg8723B_BB.h:11:
+
+

WARNING: Block comments should align the * on each line
#13: FILE: ./hal/HalHWImg8723B_BB.h:13:
+/******************************************************************************
+*                           AGC_TAB.TXT

WARNING: Block comments should align the * on each line
#22: FILE: ./hal/HalHWImg8723B_BB.h:22:
+/******************************************************************************
+*                           PHY_REG.TXT

WARNING: Block comments should align the * on each line
#31: FILE: ./hal/HalHWImg8723B_BB.h:31:
+/******************************************************************************
+*                           PHY_REG_PG.TXT

total: 0 errors, 4 warnings, 1 checks, 40 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_BB.h has style problems, please review.
------------------------
./hal/HalHWImg8723B_BB.o
------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_BB.o has style problems, please review.
-------------------------
./hal/HalHWImg8723B_MAC.c
-------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_MAC.c:3:
+/******************************************************************************
+*

CHECK: Lines should not end with a '('
#11: FILE: ./hal/HalHWImg8723B_MAC.c:11:
+static bool CheckPositive(

CHECK: Please don't use multiple blank lines
#36: FILE: ./hal/HalHWImg8723B_MAC.c:36:
+
+

WARNING: Missing a blank line after declarations
#53: FILE: ./hal/HalHWImg8723B_MAC.c:53:
+		u32 bitMask = 0;
+		if ((cond1 & 0x0F) == 0) /*  BoardType is DONTCARE */

CHECK: line length of 105 exceeds 100 columns
#65: FILE: ./hal/HalHWImg8723B_MAC.c:65:
+		if ((cond2 & bitMask) == (driver2 & bitMask)) /*  BoardType of each RF path is matched */

WARNING: Block comments should align the * on each line
#72: FILE: ./hal/HalHWImg8723B_MAC.c:72:
+/******************************************************************************
+*                           MAC_REG.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_MAC_REG>
#75: FILE: ./hal/HalHWImg8723B_MAC.c:75:
+static u32 Array_MP_8723B_MAC_REG[] = {

CHECK: spaces preferred around that '+' (ctx:VxV)
#190: FILE: ./hal/HalHWImg8723B_MAC.c:190:
+		u32 v2 = Array[i+1];
 		                ^

CHECK: Avoid CamelCase: <odm_ConfigMAC_8723B>
#194: FILE: ./hal/HalHWImg8723B_MAC.c:194:
+			odm_ConfigMAC_8723B(pDM_Odm, v1, (u8)v2);

CHECK: spaces preferred around that '|' (ctx:VxV)
#199: FILE: ./hal/HalHWImg8723B_MAC.c:199:
+			u8  cCond  = (u8)((v1 & (BIT29|BIT28)) >> 28);
 			                              ^

CHECK: line length of 107 exceeds 100 columns
#215: FILE: ./hal/HalHWImg8723B_MAC.c:215:
+				/*  Condition isn't matched. Discard the following (offset, data) pairs. */

CHECK: spaces preferred around that '-' (ctx:VxV)
#216: FILE: ./hal/HalHWImg8723B_MAC.c:216:
+				while (v1 < 0x40000000 && i < ArrayLen-2)
 				                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#221: FILE: ./hal/HalHWImg8723B_MAC.c:221:
+				while (v1 < 0x40000000 && i < ArrayLen-2) {
 				                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#227: FILE: ./hal/HalHWImg8723B_MAC.c:227:
+				cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 				                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#228: FILE: ./hal/HalHWImg8723B_MAC.c:228:
+				while (cCond != COND_ENDIF && i < ArrayLen-2) {
 				                                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#230: FILE: ./hal/HalHWImg8723B_MAC.c:230:
+					cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 					                         ^

total: 0 errors, 3 warnings, 13 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_MAC.c has style problems, please review.
-------------------------
./hal/HalHWImg8723B_MAC.h
-------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_MAC.h:3:
+/******************************************************************************
+*

CHECK: Please don't use multiple blank lines
#11: FILE: ./hal/HalHWImg8723B_MAC.h:11:
+
+

WARNING: Block comments should align the * on each line
#13: FILE: ./hal/HalHWImg8723B_MAC.h:13:
+/******************************************************************************
+*                           MAC_REG.TXT

total: 0 errors, 2 warnings, 1 checks, 20 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_MAC.h has style problems, please review.
-------------------------
./hal/HalHWImg8723B_MAC.o
-------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_MAC.o has style problems, please review.
------------------------
./hal/HalHWImg8723B_RF.c
------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_RF.c:3:
+/******************************************************************************
+*

CHECK: Lines should not end with a '('
#11: FILE: ./hal/HalHWImg8723B_RF.c:11:
+static bool CheckPositive(

CHECK: Lines should not end with a '('
#39: FILE: ./hal/HalHWImg8723B_RF.c:39:
+	if (

CHECK: Lines should not end with a '('
#45: FILE: ./hal/HalHWImg8723B_RF.c:45:
+	if (

WARNING: Block comments should align the * on each line
#82: FILE: ./hal/HalHWImg8723B_RF.c:82:
+/******************************************************************************
+*                           RadioA.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_RadioA>
#85: FILE: ./hal/HalHWImg8723B_RF.c:85:
+static u32 Array_MP_8723B_RadioA[] = {

CHECK: spaces preferred around that '+' (ctx:VxV)
#221: FILE: ./hal/HalHWImg8723B_RF.c:221:
+		u32 v2 = Array[i+1];
 		                ^

CHECK: Avoid CamelCase: <odm_ConfigRF_RadioA_8723B>
#225: FILE: ./hal/HalHWImg8723B_RF.c:225:
+			odm_ConfigRF_RadioA_8723B(pDM_Odm, v1, v2);

CHECK: spaces preferred around that '|' (ctx:VxV)
#230: FILE: ./hal/HalHWImg8723B_RF.c:230:
+			u8  cCond  = (u8)((v1 & (BIT29|BIT28)) >> 28);
 			                              ^

WARNING: Block comments should align the * on each line
#247: FILE: ./hal/HalHWImg8723B_RF.c:247:
+				/*  Condition isn't matched.
+				*   Discard the following (offset, data) pairs.

CHECK: spaces preferred around that '-' (ctx:VxV)
#249: FILE: ./hal/HalHWImg8723B_RF.c:249:
+				while (v1 < 0x40000000 && i < ArrayLen-2)
 				                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#255: FILE: ./hal/HalHWImg8723B_RF.c:255:
+				while (v1 < 0x40000000 && i < ArrayLen-2) {
 				                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#261: FILE: ./hal/HalHWImg8723B_RF.c:261:
+				cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 				                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#262: FILE: ./hal/HalHWImg8723B_RF.c:262:
+				while (cCond != COND_ENDIF && i < ArrayLen-2) {
 				                                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#264: FILE: ./hal/HalHWImg8723B_RF.c:264:
+					cCond = (u8)((v1 & (BIT29|BIT28)) >> 28);
 					                         ^

WARNING: Block comments should align the * on each line
#272: FILE: ./hal/HalHWImg8723B_RF.c:272:
+/******************************************************************************
+*                           TxPowerTrack_SDIO.TXT

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GB_N_TxPowerTrack_SDIO_8723B>
#275: FILE: ./hal/HalHWImg8723B_RF.c:275:
+static u8 gDeltaSwingTableIdx_MP_2GB_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#279: FILE: ./hal/HalHWImg8723B_RF.c:279:
+};
+static u8 gDeltaSwingTableIdx_MP_2GB_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GB_P_TxPowerTrack_SDIO_8723B>
#279: FILE: ./hal/HalHWImg8723B_RF.c:279:
+static u8 gDeltaSwingTableIdx_MP_2GB_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#283: FILE: ./hal/HalHWImg8723B_RF.c:283:
+};
+static u8 gDeltaSwingTableIdx_MP_2GA_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GA_N_TxPowerTrack_SDIO_8723B>
#283: FILE: ./hal/HalHWImg8723B_RF.c:283:
+static u8 gDeltaSwingTableIdx_MP_2GA_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#287: FILE: ./hal/HalHWImg8723B_RF.c:287:
+};
+static u8 gDeltaSwingTableIdx_MP_2GA_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GA_P_TxPowerTrack_SDIO_8723B>
#287: FILE: ./hal/HalHWImg8723B_RF.c:287:
+static u8 gDeltaSwingTableIdx_MP_2GA_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#291: FILE: ./hal/HalHWImg8723B_RF.c:291:
+};
+static u8 gDeltaSwingTableIdx_MP_2GCCKB_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GCCKB_N_TxPowerTrack_SDIO_8723B>
#291: FILE: ./hal/HalHWImg8723B_RF.c:291:
+static u8 gDeltaSwingTableIdx_MP_2GCCKB_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#295: FILE: ./hal/HalHWImg8723B_RF.c:295:
+};
+static u8 gDeltaSwingTableIdx_MP_2GCCKB_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GCCKB_P_TxPowerTrack_SDIO_8723B>
#295: FILE: ./hal/HalHWImg8723B_RF.c:295:
+static u8 gDeltaSwingTableIdx_MP_2GCCKB_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#299: FILE: ./hal/HalHWImg8723B_RF.c:299:
+};
+static u8 gDeltaSwingTableIdx_MP_2GCCKA_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GCCKA_N_TxPowerTrack_SDIO_8723B>
#299: FILE: ./hal/HalHWImg8723B_RF.c:299:
+static u8 gDeltaSwingTableIdx_MP_2GCCKA_N_TxPowerTrack_SDIO_8723B[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#303: FILE: ./hal/HalHWImg8723B_RF.c:303:
+};
+static u8 gDeltaSwingTableIdx_MP_2GCCKA_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <gDeltaSwingTableIdx_MP_2GCCKA_P_TxPowerTrack_SDIO_8723B>
#303: FILE: ./hal/HalHWImg8723B_RF.c:303:
+static u8 gDeltaSwingTableIdx_MP_2GCCKA_P_TxPowerTrack_SDIO_8723B[] = {

CHECK: Avoid CamelCase: <pRFCalibrateInfo>
#310: FILE: ./hal/HalHWImg8723B_RF.c:310:
+	struct odm_rf_cal_t *pRFCalibrateInfo = &pDM_Odm->RFCalibrateInfo;

CHECK: Please don't use multiple blank lines
#312: FILE: ./hal/HalHWImg8723B_RF.c:312:
+
+

CHECK: Lines should not end with a '('
#313: FILE: ./hal/HalHWImg8723B_RF.c:313:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GA_P>
#314: FILE: ./hal/HalHWImg8723B_RF.c:314:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GA_P,

CHECK: Lines should not end with a '('
#318: FILE: ./hal/HalHWImg8723B_RF.c:318:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GA_N>
#319: FILE: ./hal/HalHWImg8723B_RF.c:319:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GA_N,

CHECK: Lines should not end with a '('
#323: FILE: ./hal/HalHWImg8723B_RF.c:323:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GB_P>
#324: FILE: ./hal/HalHWImg8723B_RF.c:324:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GB_P,

CHECK: Lines should not end with a '('
#328: FILE: ./hal/HalHWImg8723B_RF.c:328:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GB_N>
#329: FILE: ./hal/HalHWImg8723B_RF.c:329:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GB_N,

CHECK: Lines should not end with a '('
#334: FILE: ./hal/HalHWImg8723B_RF.c:334:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GCCKA_P>
#335: FILE: ./hal/HalHWImg8723B_RF.c:335:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GCCKA_P,

CHECK: Lines should not end with a '('
#339: FILE: ./hal/HalHWImg8723B_RF.c:339:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GCCKA_N>
#340: FILE: ./hal/HalHWImg8723B_RF.c:340:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GCCKA_N,

CHECK: Lines should not end with a '('
#344: FILE: ./hal/HalHWImg8723B_RF.c:344:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GCCKB_P>
#345: FILE: ./hal/HalHWImg8723B_RF.c:345:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GCCKB_P,

CHECK: Lines should not end with a '('
#349: FILE: ./hal/HalHWImg8723B_RF.c:349:
+	memcpy(

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GCCKB_N>
#350: FILE: ./hal/HalHWImg8723B_RF.c:350:
+		pRFCalibrateInfo->DeltaSwingTableIdx_2GCCKB_N,

WARNING: Block comments should align the * on each line
#357: FILE: ./hal/HalHWImg8723B_RF.c:357:
+/******************************************************************************
+*                           TXPWR_LMT.TXT

CHECK: Avoid CamelCase: <Array_MP_8723B_TXPWR_LMT>
#360: FILE: ./hal/HalHWImg8723B_RF.c:360:
+static u8 *Array_MP_8723B_TXPWR_LMT[] = {

CHECK: spaces preferred around that '+' (ctx:VxV)
#538: FILE: ./hal/HalHWImg8723B_RF.c:538:
+		u8 *bandwidth = Array[i+1];
 		                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#539: FILE: ./hal/HalHWImg8723B_RF.c:539:
+		u8 *rate = Array[i+2];
 		                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#540: FILE: ./hal/HalHWImg8723B_RF.c:540:
+		u8 *rfPath = Array[i+3];
 		                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#541: FILE: ./hal/HalHWImg8723B_RF.c:541:
+		u8 *chnl = Array[i+4];
 		                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#542: FILE: ./hal/HalHWImg8723B_RF.c:542:
+		u8 *val = Array[i+5];
 		                 ^

CHECK: Lines should not end with a '('
#544: FILE: ./hal/HalHWImg8723B_RF.c:544:
+		odm_ConfigBB_TXPWR_LMT_8723B(

CHECK: Avoid CamelCase: <odm_ConfigBB_TXPWR_LMT_8723B>
#544: FILE: ./hal/HalHWImg8723B_RF.c:544:
+		odm_ConfigBB_TXPWR_LMT_8723B(

total: 0 errors, 5 warnings, 53 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_RF.c has style problems, please review.
------------------------
./hal/HalHWImg8723B_RF.h
------------------------
WARNING: Block comments should align the * on each line
#3: FILE: ./hal/HalHWImg8723B_RF.h:3:
+/******************************************************************************
+*

CHECK: Please don't use multiple blank lines
#11: FILE: ./hal/HalHWImg8723B_RF.h:11:
+
+

WARNING: Block comments should align the * on each line
#13: FILE: ./hal/HalHWImg8723B_RF.h:13:
+/******************************************************************************
+*                           RadioA.TXT

WARNING: Block comments should align the * on each line
#22: FILE: ./hal/HalHWImg8723B_RF.h:22:
+/******************************************************************************
+*                           TxPowerTrack_SDIO.TXT

WARNING: Block comments should align the * on each line
#32: FILE: ./hal/HalHWImg8723B_RF.h:32:
+/******************************************************************************
+*                           TXPWR_LMT.TXT

total: 0 errors, 4 warnings, 1 checks, 41 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_RF.h has style problems, please review.
------------------------
./hal/HalHWImg8723B_RF.o
------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalHWImg8723B_RF.o has style problems, please review.
----------------
./hal/hal_intf.c
----------------
CHECK: Avoid CamelCase: <ReadAdapterInfo8723BS>
#17: FILE: ./hal/hal_intf.c:17:
+	ReadAdapterInfo8723BS(padapter);

CHECK: Avoid CamelCase: <networkType>
#47: FILE: ./hal/hal_intf.c:47:
+	enum ndis_802_11_network_infrastructure networkType = Ndis802_11InfrastructureMax;

CHECK: Avoid CamelCase: <Ndis802_11InfrastructureMax>
#47: FILE: ./hal/hal_intf.c:47:
+	enum ndis_802_11_network_infrastructure networkType = Ndis802_11InfrastructureMax;

CHECK: Unnecessary parentheses around padapter->mlmepriv
#48: FILE: ./hal/hal_intf.c:48:
+	struct  mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Avoid CamelCase: <GetHwReg8723BS>
#116: FILE: ./hal/hal_intf.c:116:
+	GetHwReg8723BS(padapter, variable, val);

CHECK: Avoid CamelCase: <SetHwRegWithBuf8723B>
#121: FILE: ./hal/hal_intf.c:121:
+	SetHwRegWithBuf8723B(padapter, variable, pbuf, len);

CHECK: Avoid CamelCase: <pValue>
#124: FILE: ./hal/hal_intf.c:124:
+u8 rtw_hal_set_def_var(struct adapter *padapter, enum hal_def_variable eVariable, void *pValue)

CHECK: Avoid CamelCase: <SetHalDefVar8723BSDIO>
#126: FILE: ./hal/hal_intf.c:126:
+	return SetHalDefVar8723BSDIO(padapter, eVariable, pValue);

CHECK: Avoid CamelCase: <GetHalDefVar8723BSDIO>
#131: FILE: ./hal/hal_intf.c:131:
+	return GetHalDefVar8723BSDIO(padapter, eVariable, pValue);

CHECK: line length of 109 exceeds 100 columns
#134: FILE: ./hal/hal_intf.c:134:
+void rtw_hal_set_odm_var(struct adapter *padapter, enum hal_odm_variable eVariable, void *pValue1, bool bSet)

CHECK: Avoid CamelCase: <SetHalODMVarHandler>
#136: FILE: ./hal/hal_intf.c:136:
+	if (padapter->HalFunc.SetHalODMVarHandler)

CHECK: Avoid CamelCase: <EnableInterrupt8723BSdio>
#142: FILE: ./hal/hal_intf.c:142:
+	EnableInterrupt8723BSdio(padapter);

CHECK: Avoid CamelCase: <DisableInterrupt8723BSdio>
#147: FILE: ./hal/hal_intf.c:147:
+	DisableInterrupt8723BSdio(padapter);

CHECK: Avoid CamelCase: <CheckIPSStatus>
#152: FILE: ./hal/hal_intf.c:152:
+	return CheckIPSStatus(padapter);

CHECK: Using comparison to true is error prone
#175: FILE: ./hal/hal_intf.c:175:
+	if (padapter->securitypriv.binstallBIPkey == true) {

CHECK: Unnecessary parentheses around padapter->mlmepriv
#219: FILE: ./hal/hal_intf.c:219:
+	pmlmepriv = &(padapter->mlmepriv);

WARNING: braces {} are not necessary for any arm of this statement
#221: FILE: ./hal/hal_intf.c:221:
+	if (check_fwstate(pmlmepriv, WIFI_AP_STATE) == true)
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#223: FILE: ./hal/hal_intf.c:223:
+	else {

CHECK: Avoid CamelCase: <UpdateHalRAMask8723B>
#224: FILE: ./hal/hal_intf.c:224:
+		UpdateHalRAMask8723B(padapter, psta->mac_id, rssi_level);

CHECK: Avoid CamelCase: <rtl8723b_Add_RateATid>
#230: FILE: ./hal/hal_intf.c:230:
+	rtl8723b_Add_RateATid(padapter, bitmap, arg, rssi_level);

CHECK: Please use a blank line after function/struct/union/enum declarations
#238: FILE: ./hal/hal_intf.c:238:
+}
+/*Start specifical interface thread		*/

CHECK: Please use a blank line after function/struct/union/enum declarations
#248: FILE: ./hal/hal_intf.c:248:
+}
+void rtw_hal_write_bbreg(struct adapter *padapter, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Please use a blank line after function/struct/union/enum declarations
#257: FILE: ./hal/hal_intf.c:257:
+}
+void rtw_hal_write_rfreg(struct adapter *padapter, u32 eRFPath, u32 RegAddr, u32 BitMask, u32 Data)

CHECK: Avoid CamelCase: <Offset40>
#268: FILE: ./hal/hal_intf.c:268:
+			 enum channel_width Bandwidth, u8 Offset40, u8 Offset80)

CHECK: Avoid CamelCase: <Offset80>
#268: FILE: ./hal/hal_intf.c:268:
+			 enum channel_width Bandwidth, u8 Offset40, u8 Offset80)

CHECK: Avoid CamelCase: <rtl8723b_HalDmWatchDog>
#275: FILE: ./hal/hal_intf.c:275:
+	rtl8723b_HalDmWatchDog(padapter);

WARNING: braces {} are not necessary for single statement blocks
#280: FILE: ./hal/hal_intf.c:280:
+	if (adapter_to_pwrctl(padapter)->fw_current_in_ps_mode) {
+		rtl8723b_HalDmWatchDog_in_LPS(padapter); /* this function caller is in interrupt context */
+	}

CHECK: line length of 107 exceeds 100 columns
#281: FILE: ./hal/hal_intf.c:281:
+		rtl8723b_HalDmWatchDog_in_LPS(padapter); /* this function caller is in interrupt context */

CHECK: Avoid CamelCase: <rtl8723b_HalDmWatchDog_in_LPS>
#281: FILE: ./hal/hal_intf.c:281:
+		rtl8723b_HalDmWatchDog_in_LPS(padapter); /* this function caller is in interrupt context */

CHECK: Avoid CamelCase: <rtl8723b_SetBeaconRelatedRegisters>
#287: FILE: ./hal/hal_intf.c:287:
+	rtl8723b_SetBeaconRelatedRegisters(padapter);

CHECK: Please don't use multiple blank lines
#290: FILE: ./hal/hal_intf.c:290:
+
+

CHECK: Using comparison to false is error prone
#335: FILE: ./hal/hal_intf.c:335:
+	if (false == support)

CHECK: Using comparison to false is error prone
#349: FILE: ./hal/hal_intf.c:349:
+	if (false == support)

CHECK: Avoid CamelCase: <ElementID>
#357: FILE: ./hal/hal_intf.c:357:
+s32 rtw_hal_fill_h2c_cmd(struct adapter *padapter, u8 ElementID, u32 CmdLen, u8 *pCmdBuffer)

CHECK: Avoid CamelCase: <CmdLen>
#357: FILE: ./hal/hal_intf.c:357:
+s32 rtw_hal_fill_h2c_cmd(struct adapter *padapter, u8 ElementID, u32 CmdLen, u8 *pCmdBuffer)

total: 0 errors, 2 warnings, 33 checks, 365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_intf.c has style problems, please review.
----------------
./hal/hal_intf.o
----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_intf.o has style problems, please review.
----------------------
./hal/HalPhyRf_8723B.c
----------------------
CHECK: Avoid CamelCase: <IDX_0xC94>
#13: FILE: ./hal/HalPhyRf_8723B.c:13:
+#define		IDX_0xC94						0

CHECK: Avoid CamelCase: <IDX_0xC80>
#14: FILE: ./hal/HalPhyRf_8723B.c:14:
+#define		IDX_0xC80						1

CHECK: Avoid CamelCase: <IDX_0xC14>
#15: FILE: ./hal/HalPhyRf_8723B.c:15:
+#define		IDX_0xC14						0

CHECK: Avoid CamelCase: <IDX_0xCA0>
#16: FILE: ./hal/HalPhyRf_8723B.c:16:
+#define		IDX_0xCA0						1

CHECK: Avoid CamelCase: <IDX_0xC4C>
#22: FILE: ./hal/HalPhyRf_8723B.c:22:
+#define		IDX_0xC4C						2

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GA_N_8188E>
#29: FILE: ./hal/HalPhyRf_8723B.c:29:
+static u8 DeltaSwingTableIdx_2GA_N_8188E[] = {

CHECK: Please use a blank line after function/struct/union/enum declarations
#33: FILE: ./hal/HalPhyRf_8723B.c:33:
+};
+static u8 DeltaSwingTableIdx_2GA_P_8188E[] = {

CHECK: Avoid CamelCase: <DeltaSwingTableIdx_2GA_P_8188E>
#33: FILE: ./hal/HalPhyRf_8723B.c:33:
+static u8 DeltaSwingTableIdx_2GA_P_8188E[] = {

CHECK: Please don't use multiple blank lines
#42: FILE: ./hal/HalPhyRf_8723B.c:42:
+
+

CHECK: Lines should not end with a '('
#43: FILE: ./hal/HalPhyRf_8723B.c:43:
+static void setIqkMatrix_8723B(

CHECK: Avoid CamelCase: <setIqkMatrix_8723B>
#43: FILE: ./hal/HalPhyRf_8723B.c:43:
+static void setIqkMatrix_8723B(

CHECK: Avoid CamelCase: <IqkResult_X>
#47: FILE: ./hal/HalPhyRf_8723B.c:47:
+	s32 IqkResult_X,

CHECK: Avoid CamelCase: <IqkResult_Y>
#48: FILE: ./hal/HalPhyRf_8723B.c:48:
+	s32 IqkResult_Y

CHECK: spaces preferred around that '-' (ctx:VxV)
#54: FILE: ./hal/HalPhyRf_8723B.c:54:
+		OFDM_index = OFDM_TABLE_SIZE-1;
 		                            ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#56: FILE: ./hal/HalPhyRf_8723B.c:56:
+	ele_D = (OFDMSwingTable_New[OFDM_index] & 0xFFC00000)>>22;
 	                                                     ^

CHECK: Avoid CamelCase: <OFDMSwingTable_New>
#56: FILE: ./hal/HalPhyRf_8723B.c:56:
+	ele_D = (OFDMSwingTable_New[OFDM_index] & 0xFFC00000)>>22;

CHECK: spaces preferred around that '>>' (ctx:VxV)
#62: FILE: ./hal/HalPhyRf_8723B.c:62:
+		ele_A = ((IqkResult_X * ele_D)>>8)&0x000003FF;
 		                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#62: FILE: ./hal/HalPhyRf_8723B.c:62:
+		ele_A = ((IqkResult_X * ele_D)>>8)&0x000003FF;
 		                                  ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#67: FILE: ./hal/HalPhyRf_8723B.c:67:
+		ele_C = ((IqkResult_Y * ele_D)>>8)&0x000003FF;
 		                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#67: FILE: ./hal/HalPhyRf_8723B.c:67:
+		ele_C = ((IqkResult_Y * ele_D)>>8)&0x000003FF;
 		                                  ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: ./hal/HalPhyRf_8723B.c:75:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#75: FILE: ./hal/HalPhyRf_8723B.c:75:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#75: FILE: ./hal/HalPhyRf_8723B.c:75:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                             ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: ./hal/HalPhyRf_8723B.c:75:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#75: FILE: ./hal/HalPhyRf_8723B.c:75:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                                        ^

CHECK: Avoid CamelCase: <rOFDM0_XATxIQImbalance>
#76: FILE: ./hal/HalPhyRf_8723B.c:76:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XATxIQImbalance, bMaskDWord, value32);

CHECK: spaces preferred around that '&' (ctx:VxV)
#78: FILE: ./hal/HalPhyRf_8723B.c:78:
+			value32 = (ele_C&0x000003C0)>>6;
 			                ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#78: FILE: ./hal/HalPhyRf_8723B.c:78:
+			value32 = (ele_C&0x000003C0)>>6;
 			                            ^

CHECK: Avoid CamelCase: <rOFDM0_XCTxAFE>
#79: FILE: ./hal/HalPhyRf_8723B.c:79:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XCTxAFE, bMaskH4Bits, value32);

CHECK: Avoid CamelCase: <bMaskH4Bits>
#79: FILE: ./hal/HalPhyRf_8723B.c:79:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XCTxAFE, bMaskH4Bits, value32);

CHECK: spaces preferred around that '>>' (ctx:VxV)
#81: FILE: ./hal/HalPhyRf_8723B.c:81:
+			value32 = ((IqkResult_X * ele_D)>>7)&0x01;
 			                                ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#81: FILE: ./hal/HalPhyRf_8723B.c:81:
+			value32 = ((IqkResult_X * ele_D)>>7)&0x01;
 			                                    ^

CHECK: Avoid CamelCase: <rOFDM0_ECCAThreshold>
#82: FILE: ./hal/HalPhyRf_8723B.c:82:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT24, value32);

CHECK: spaces preferred around that '<<' (ctx:VxV)
#88: FILE: ./hal/HalPhyRf_8723B.c:88:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#88: FILE: ./hal/HalPhyRf_8723B.c:88:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#88: FILE: ./hal/HalPhyRf_8723B.c:88:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                             ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#88: FILE: ./hal/HalPhyRf_8723B.c:88:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#88: FILE: ./hal/HalPhyRf_8723B.c:88:
+			value32 = (ele_D<<22)|((ele_C&0x3F)<<16)|ele_A;
 			                                        ^

CHECK: Avoid CamelCase: <rOFDM0_XBTxIQImbalance>
#89: FILE: ./hal/HalPhyRf_8723B.c:89:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XBTxIQImbalance, bMaskDWord, value32);

CHECK: spaces preferred around that '&' (ctx:VxV)
#91: FILE: ./hal/HalPhyRf_8723B.c:91:
+			value32 = (ele_C&0x000003C0)>>6;
 			                ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#91: FILE: ./hal/HalPhyRf_8723B.c:91:
+			value32 = (ele_C&0x000003C0)>>6;
 			                            ^

CHECK: Avoid CamelCase: <rOFDM0_XDTxAFE>
#92: FILE: ./hal/HalPhyRf_8723B.c:92:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, bMaskH4Bits, value32);

CHECK: spaces preferred around that '>>' (ctx:VxV)
#94: FILE: ./hal/HalPhyRf_8723B.c:94:
+			value32 = ((IqkResult_X * ele_D)>>7)&0x01;
 			                                ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#94: FILE: ./hal/HalPhyRf_8723B.c:94:
+			value32 = ((IqkResult_X * ele_D)>>7)&0x01;
 			                                    ^

CHECK: line length of 123 exceeds 100 columns
#104: FILE: ./hal/HalPhyRf_8723B.c:104:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XATxIQImbalance, bMaskDWord, OFDMSwingTable_New[OFDM_index]);

CHECK: line length of 123 exceeds 100 columns
#110: FILE: ./hal/HalPhyRf_8723B.c:110:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XBTxIQImbalance, bMaskDWord, OFDMSwingTable_New[OFDM_index]);

CHECK: Please don't use multiple blank lines
#121: FILE: ./hal/HalPhyRf_8723B.c:121:
+
+

CHECK: Avoid CamelCase: <setCCKFilterCoefficient>
#122: FILE: ./hal/HalPhyRf_8723B.c:122:
+static void setCCKFilterCoefficient(struct dm_odm_t *pDM_Odm, u8 CCKSwingIndex)

CHECK: Avoid CamelCase: <CCKSwingIndex>
#122: FILE: ./hal/HalPhyRf_8723B.c:122:
+static void setCCKFilterCoefficient(struct dm_odm_t *pDM_Odm, u8 CCKSwingIndex)

CHECK: Avoid CamelCase: <bCCKinCH14>
#124: FILE: ./hal/HalPhyRf_8723B.c:124:
+	if (!pDM_Odm->RFCalibrateInfo.bCCKinCH14) {

CHECK: Avoid CamelCase: <CCKSwingTable_Ch1_Ch13_New>
#125: FILE: ./hal/HalPhyRf_8723B.c:125:
+		rtw_write8(pDM_Odm->Adapter, 0xa22, CCKSwingTable_Ch1_Ch13_New[CCKSwingIndex][0]);

CHECK: Avoid CamelCase: <CCKSwingTable_Ch14_New>
#134: FILE: ./hal/HalPhyRf_8723B.c:134:
+		rtw_write8(pDM_Odm->Adapter, 0xa22, CCKSwingTable_Ch14_New[CCKSwingIndex][0]);

CHECK: Lines should not end with a '('
#145: FILE: ./hal/HalPhyRf_8723B.c:145:
+void DoIQK_8723B(

CHECK: Avoid CamelCase: <DoIQK_8723B>
#145: FILE: ./hal/HalPhyRf_8723B.c:145:
+void DoIQK_8723B(

CHECK: Avoid CamelCase: <DeltaThermalIndex>
#147: FILE: ./hal/HalPhyRf_8723B.c:147:
+	u8 DeltaThermalIndex,

CHECK: Avoid CamelCase: <ThermalValue>
#148: FILE: ./hal/HalPhyRf_8723B.c:148:
+	u8 ThermalValue,

CHECK: Avoid CamelCase: <Threshold>
#149: FILE: ./hal/HalPhyRf_8723B.c:149:
+	u8 Threshold

WARNING: Block comments use a trailing */ on a separate line
#170: FILE: ./hal/HalPhyRf_8723B.c:170:
+ *---------------------------------------------------------------------------*/

CHECK: Lines should not end with a '('
#171: FILE: ./hal/HalPhyRf_8723B.c:171:
+void ODM_TxPwrTrackSetPwr_8723B(

CHECK: Avoid CamelCase: <Method>
#173: FILE: ./hal/HalPhyRf_8723B.c:173:
+	enum pwrtrack_method Method,

CHECK: Avoid CamelCase: <ChannelMappedIndex>
#175: FILE: ./hal/HalPhyRf_8723B.c:175:
+	u8 ChannelMappedIndex

CHECK: Avoid CamelCase: <PwrTrackingLimit_OFDM>
#180: FILE: ./hal/HalPhyRf_8723B.c:180:
+	u8 PwrTrackingLimit_OFDM = 34; /* 0dB */

CHECK: Avoid CamelCase: <PwrTrackingLimit_CCK>
#181: FILE: ./hal/HalPhyRf_8723B.c:181:
+	u8 PwrTrackingLimit_CCK = 28; /* 2dB */

CHECK: Avoid CamelCase: <TxRate>
#182: FILE: ./hal/HalPhyRf_8723B.c:182:
+	u8 TxRate = 0xFF;

CHECK: Avoid CamelCase: <Final_OFDM_Swing_Index>
#183: FILE: ./hal/HalPhyRf_8723B.c:183:
+	u8 Final_OFDM_Swing_Index = 0;

CHECK: Avoid CamelCase: <Final_CCK_Swing_Index>
#184: FILE: ./hal/HalPhyRf_8723B.c:184:
+	u8 Final_CCK_Swing_Index = 0;

CHECK: Unnecessary parentheses around pDM_Odm->pForcedDataRate
#187: FILE: ./hal/HalPhyRf_8723B.c:187:
+		u16 rate = *(pDM_Odm->pForcedDataRate);

CHECK: Avoid CamelCase: <pForcedDataRate>
#187: FILE: ./hal/HalPhyRf_8723B.c:187:
+		u16 rate = *(pDM_Odm->pForcedDataRate);

CHECK: Unbalanced braces around else statement
#192: FILE: ./hal/HalPhyRf_8723B.c:192:
+		} else /* force rate */

CHECK: Blank lines aren't necessary before a close brace '}'
#195: FILE: ./hal/HalPhyRf_8723B.c:195:
+
+	}

CHECK: Unnecessary parentheses around 'TxRate >= MGN_1M'
#199: FILE: ./hal/HalPhyRf_8723B.c:199:
+		if ((TxRate >= MGN_1M) && (TxRate <= MGN_11M))

CHECK: Unnecessary parentheses around 'TxRate <= MGN_11M'
#199: FILE: ./hal/HalPhyRf_8723B.c:199:
+		if ((TxRate >= MGN_1M) && (TxRate <= MGN_11M))

CHECK: line length of 107 exceeds 100 columns
#216: FILE: ./hal/HalPhyRf_8723B.c:216:
+			PwrTrackingLimit_OFDM =  pDM_Odm->DefaultOfdmIndex;   /* Default OFDM index = 30 */

CHECK: Avoid CamelCase: <DefaultOfdmIndex>
#216: FILE: ./hal/HalPhyRf_8723B.c:216:
+			PwrTrackingLimit_OFDM =  pDM_Odm->DefaultOfdmIndex;   /* Default OFDM index = 30 */

CHECK: braces {} should be used on all arms of this statement
#219: FILE: ./hal/HalPhyRf_8723B.c:219:
+	if (Method == TXAGC) {
[...]
+	} else if (Method == BBSWING) {
[...]
+	} else if (Method == MIX_MODE) {
[...]
+	} else
[...]

CHECK: Avoid CamelCase: <Absolute_OFDMSwingIdx>
#222: FILE: ./hal/HalPhyRf_8723B.c:222:
+		pDM_Odm->Remnant_OFDMSwingIdx[RFPath] = pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: Avoid CamelCase: <Modify_TxAGC_Flag_PathA>
#224: FILE: ./hal/HalPhyRf_8723B.c:224:
+		pDM_Odm->Modify_TxAGC_Flag_PathA = true;

CHECK: Avoid CamelCase: <Modify_TxAGC_Flag_PathA_CCK>
#225: FILE: ./hal/HalPhyRf_8723B.c:225:
+		pDM_Odm->Modify_TxAGC_Flag_PathA_CCK = true;

CHECK: line length of 106 exceeds 100 columns
#229: FILE: ./hal/HalPhyRf_8723B.c:229:
+		PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, HT_MCS0_MCS7);

CHECK: line length of 108 exceeds 100 columns
#231: FILE: ./hal/HalPhyRf_8723B.c:231:
+		Final_OFDM_Swing_Index = pDM_Odm->DefaultOfdmIndex + pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: line length of 106 exceeds 100 columns
#232: FILE: ./hal/HalPhyRf_8723B.c:232:
+		Final_CCK_Swing_Index = pDM_Odm->DefaultCckIndex + pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: Avoid CamelCase: <DefaultCckIndex>
#232: FILE: ./hal/HalPhyRf_8723B.c:232:
+		Final_CCK_Swing_Index = pDM_Odm->DefaultCckIndex + pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: spaces preferred around that '-' (ctx:VxV)
#241: FILE: ./hal/HalPhyRf_8723B.c:241:
+			Final_CCK_Swing_Index = CCK_TABLE_SIZE-1;
 			                                      ^

CHECK: Avoid CamelCase: <BbSwingIdxCck>
#242: FILE: ./hal/HalPhyRf_8723B.c:242:
+		else if (pDM_Odm->BbSwingIdxCck <= 0)

CHECK: line length of 102 exceeds 100 columns
#246: FILE: ./hal/HalPhyRf_8723B.c:246:
+			pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: Alignment should match open parenthesis
#246: FILE: ./hal/HalPhyRf_8723B.c:246:
+		setIqkMatrix_8723B(pDM_Odm, Final_OFDM_Swing_Index, RFPath,
+			pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: line length of 103 exceeds 100 columns
#247: FILE: ./hal/HalPhyRf_8723B.c:247:
+			pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][1]);

CHECK: line length of 108 exceeds 100 columns
#252: FILE: ./hal/HalPhyRf_8723B.c:252:
+		Final_OFDM_Swing_Index = pDM_Odm->DefaultOfdmIndex + pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: line length of 106 exceeds 100 columns
#253: FILE: ./hal/HalPhyRf_8723B.c:253:
+		Final_CCK_Swing_Index = pDM_Odm->DefaultCckIndex + pDM_Odm->Absolute_OFDMSwingIdx[RFPath];

CHECK: line length of 101 exceeds 100 columns
#255: FILE: ./hal/HalPhyRf_8723B.c:255:
+		if (Final_OFDM_Swing_Index > PwrTrackingLimit_OFDM) { /* BBSwing higher then Limit */

CHECK: line length of 111 exceeds 100 columns
#256: FILE: ./hal/HalPhyRf_8723B.c:256:
+			pDM_Odm->Remnant_OFDMSwingIdx[RFPath] = Final_OFDM_Swing_Index - PwrTrackingLimit_OFDM;

CHECK: line length of 110 exceeds 100 columns
#259: FILE: ./hal/HalPhyRf_8723B.c:259:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: Alignment should match open parenthesis
#259: FILE: ./hal/HalPhyRf_8723B.c:259:
+			setIqkMatrix_8723B(pDM_Odm, PwrTrackingLimit_OFDM, RFPath,
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: line length of 111 exceeds 100 columns
#260: FILE: ./hal/HalPhyRf_8723B.c:260:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][1]);

CHECK: line length of 106 exceeds 100 columns
#263: FILE: ./hal/HalPhyRf_8723B.c:263:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, OFDM);

CHECK: line length of 114 exceeds 100 columns
#264: FILE: ./hal/HalPhyRf_8723B.c:264:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, HT_MCS0_MCS7);

CHECK: line length of 110 exceeds 100 columns
#269: FILE: ./hal/HalPhyRf_8723B.c:269:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: Alignment should match open parenthesis
#269: FILE: ./hal/HalPhyRf_8723B.c:269:
+			setIqkMatrix_8723B(pDM_Odm, 0, RFPath,
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: line length of 111 exceeds 100 columns
#270: FILE: ./hal/HalPhyRf_8723B.c:270:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][1]);

CHECK: line length of 106 exceeds 100 columns
#273: FILE: ./hal/HalPhyRf_8723B.c:273:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, OFDM);

CHECK: line length of 114 exceeds 100 columns
#274: FILE: ./hal/HalPhyRf_8723B.c:274:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, HT_MCS0_MCS7);

CHECK: line length of 110 exceeds 100 columns
#277: FILE: ./hal/HalPhyRf_8723B.c:277:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: Alignment should match open parenthesis
#277: FILE: ./hal/HalPhyRf_8723B.c:277:
+			setIqkMatrix_8723B(pDM_Odm, Final_OFDM_Swing_Index, RFPath,
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][0],

CHECK: line length of 111 exceeds 100 columns
#278: FILE: ./hal/HalPhyRf_8723B.c:278:
+				pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[ChannelMappedIndex][1]);

CHECK: line length of 109 exceeds 100 columns
#280: FILE: ./hal/HalPhyRf_8723B.c:280:
+			if (pDM_Odm->Modify_TxAGC_Flag_PathA) { /* If TxAGC has changed, reset TxAGC again */

CHECK: line length of 114 exceeds 100 columns
#282: FILE: ./hal/HalPhyRf_8723B.c:282:
+				PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, OFDM);

CHECK: line length of 122 exceeds 100 columns
#283: FILE: ./hal/HalPhyRf_8723B.c:283:
+				PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, HT_MCS0_MCS7);

CHECK: line length of 105 exceeds 100 columns
#292: FILE: ./hal/HalPhyRf_8723B.c:292:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, CCK);

CHECK: line length of 105 exceeds 100 columns
#297: FILE: ./hal/HalPhyRf_8723B.c:297:
+			PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, CCK);

CHECK: line length of 113 exceeds 100 columns
#301: FILE: ./hal/HalPhyRf_8723B.c:301:
+			if (pDM_Odm->Modify_TxAGC_Flag_PathA_CCK) { /* If TxAGC has changed, reset TxAGC again */

CHECK: line length of 113 exceeds 100 columns
#303: FILE: ./hal/HalPhyRf_8723B.c:303:
+				PHY_SetTxPowerIndexByRateSection(Adapter, RFPath, pHalData->CurrentChannel, CCK);

CHECK: Unbalanced braces around else statement
#307: FILE: ./hal/HalPhyRf_8723B.c:307:
+	} else

CHECK: Lines should not end with a '('
#311: FILE: ./hal/HalPhyRf_8723B.c:311:
+static void GetDeltaSwingTable_8723B(

CHECK: Avoid CamelCase: <GetDeltaSwingTable_8723B>
#311: FILE: ./hal/HalPhyRf_8723B.c:311:
+static void GetDeltaSwingTable_8723B(

CHECK: Avoid CamelCase: <TemperatureUP_A>
#313: FILE: ./hal/HalPhyRf_8723B.c:313:
+	u8 **TemperatureUP_A,

CHECK: Avoid CamelCase: <TemperatureDOWN_A>
#314: FILE: ./hal/HalPhyRf_8723B.c:314:
+	u8 **TemperatureDOWN_A,

CHECK: Avoid CamelCase: <TemperatureUP_B>
#315: FILE: ./hal/HalPhyRf_8723B.c:315:
+	u8 **TemperatureUP_B,

CHECK: Avoid CamelCase: <TemperatureDOWN_B>
#316: FILE: ./hal/HalPhyRf_8723B.c:316:
+	u8 **TemperatureDOWN_B

CHECK: Unnecessary parentheses around pDM_Odm->pForcedDataRate
#322: FILE: ./hal/HalPhyRf_8723B.c:322:
+	u16 rate = *(pDM_Odm->pForcedDataRate);

WARNING: Comparisons should place the constant on the right side of the test
#325: FILE: ./hal/HalPhyRf_8723B.c:325:
+	if (1 <= channel && channel <= 14) {

CHECK: Please don't use multiple blank lines
#345: FILE: ./hal/HalPhyRf_8723B.c:345:
+
+

CHECK: Avoid CamelCase: <ConfigureTxpowerTrack_8723B>
#346: FILE: ./hal/HalPhyRf_8723B.c:346:
+void ConfigureTxpowerTrack_8723B(struct txpwrtrack_cfg *pConfig)

CHECK: Avoid CamelCase: <pConfig>
#346: FILE: ./hal/HalPhyRf_8723B.c:346:
+void ConfigureTxpowerTrack_8723B(struct txpwrtrack_cfg *pConfig)

CHECK: Avoid CamelCase: <SwingTableSize_CCK>
#348: FILE: ./hal/HalPhyRf_8723B.c:348:
+	pConfig->SwingTableSize_CCK = CCK_TABLE_SIZE;

CHECK: Avoid CamelCase: <SwingTableSize_OFDM>
#349: FILE: ./hal/HalPhyRf_8723B.c:349:
+	pConfig->SwingTableSize_OFDM = OFDM_TABLE_SIZE;

CHECK: Avoid CamelCase: <Threshold_IQK>
#350: FILE: ./hal/HalPhyRf_8723B.c:350:
+	pConfig->Threshold_IQK = IQK_THRESHOLD;

CHECK: Avoid CamelCase: <AverageThermalNum>
#351: FILE: ./hal/HalPhyRf_8723B.c:351:
+	pConfig->AverageThermalNum = AVG_THERMAL_NUM_8723B;

CHECK: Avoid CamelCase: <RfPathCount>
#352: FILE: ./hal/HalPhyRf_8723B.c:352:
+	pConfig->RfPathCount = MAX_PATH_NUM_8723B;

CHECK: Avoid CamelCase: <ThermalRegAddr>
#353: FILE: ./hal/HalPhyRf_8723B.c:353:
+	pConfig->ThermalRegAddr = RF_T_METER_8723B;

CHECK: Avoid CamelCase: <ODM_TxPwrTrackSetPwr>
#355: FILE: ./hal/HalPhyRf_8723B.c:355:
+	pConfig->ODM_TxPwrTrackSetPwr = ODM_TxPwrTrackSetPwr_8723B;

CHECK: Avoid CamelCase: <DoIQK>
#356: FILE: ./hal/HalPhyRf_8723B.c:356:
+	pConfig->DoIQK = DoIQK_8723B;

CHECK: Avoid CamelCase: <PHY_LCCalibrate>
#357: FILE: ./hal/HalPhyRf_8723B.c:357:
+	pConfig->PHY_LCCalibrate = PHY_LCCalibrate_8723B;

CHECK: Avoid CamelCase: <GetDeltaSwingTable>
#358: FILE: ./hal/HalPhyRf_8723B.c:358:
+	pConfig->GetDeltaSwingTable = GetDeltaSwingTable_8723B;

CHECK: Lines should not end with a '('
#365: FILE: ./hal/HalPhyRf_8723B.c:365:
+static u8 phy_PathA_IQK_8723B(

CHECK: Avoid CamelCase: <phy_PathA_IQK_8723B>
#365: FILE: ./hal/HalPhyRf_8723B.c:365:
+static u8 phy_PathA_IQK_8723B(

CHECK: Avoid CamelCase: <configPathB>
#366: FILE: ./hal/HalPhyRf_8723B.c:366:
+	struct adapter *padapter, bool configPathB, u8 RF_Path

CHECK: Avoid CamelCase: <regEAC>
#369: FILE: ./hal/HalPhyRf_8723B.c:369:
+	u32 regEAC, regE94, regE9C, tmp, Path_SEL_BB /*, regEA4*/;

CHECK: Avoid CamelCase: <regE94>
#369: FILE: ./hal/HalPhyRf_8723B.c:369:
+	u32 regEAC, regE94, regE9C, tmp, Path_SEL_BB /*, regEA4*/;

CHECK: Avoid CamelCase: <regE9C>
#369: FILE: ./hal/HalPhyRf_8723B.c:369:
+	u32 regEAC, regE94, regE9C, tmp, Path_SEL_BB /*, regEA4*/;

CHECK: Avoid CamelCase: <Path_SEL_BB>
#369: FILE: ./hal/HalPhyRf_8723B.c:369:
+	u32 regEAC, regE94, regE9C, tmp, Path_SEL_BB /*, regEA4*/;

CHECK: Avoid CamelCase: <rFPGA0_IQK>
#379: FILE: ./hal/HalPhyRf_8723B.c:379:
+	PHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_IQK, bMaskH3Bytes, 0x000000);

WARNING: please, no space before tabs
#381: FILE: ./hal/HalPhyRf_8723B.c:381:
+^I/* ^Ienable path A PA in TXIQK mode */$

CHECK: Avoid CamelCase: <bRFRegOffsetMask>
#383: FILE: ./hal/HalPhyRf_8723B.c:383:
+	PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_RCK_OS, bRFRegOffsetMask, 0x18000);

WARNING: please, no space before tabs
#386: FILE: ./hal/HalPhyRf_8723B.c:386:
+^I/* ^Idisable path B PA in TXIQK mode */$

WARNING: please, no space before tabs
#387: FILE: ./hal/HalPhyRf_8723B.c:387:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xed, bRFRegOffsetMask, 0x00020); */$

WARNING: please, no space before tabs
#388: FILE: ./hal/HalPhyRf_8723B.c:388:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0x43, bRFRegOffsetMask, 0x40ec1); */$

CHECK: Avoid CamelCase: <rTx_IQK>
#392: FILE: ./hal/HalPhyRf_8723B.c:392:
+	PHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK, bMaskDWord, 0x01007c00);

CHECK: Avoid CamelCase: <rRx_IQK>
#393: FILE: ./hal/HalPhyRf_8723B.c:393:
+	PHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK, bMaskDWord, 0x01004800);

CHECK: Avoid CamelCase: <rTx_IQK_Tone_A>
#395: FILE: ./hal/HalPhyRf_8723B.c:395:
+	PHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_Tone_A, bMaskDWord, 0x18008c1c);

CHECK: Avoid CamelCase: <rRx_IQK_Tone_A>
#396: FILE: ./hal/HalPhyRf_8723B.c:396:
+	PHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_Tone_A, bMaskDWord, 0x38008c1c);

CHECK: Avoid CamelCase: <rTx_IQK_Tone_B>
#397: FILE: ./hal/HalPhyRf_8723B.c:397:
+	PHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_Tone_B, bMaskDWord, 0x38008c1c);

CHECK: Avoid CamelCase: <rRx_IQK_Tone_B>
#398: FILE: ./hal/HalPhyRf_8723B.c:398:
+	PHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_Tone_B, bMaskDWord, 0x38008c1c);

WARNING: please, no space before tabs
#399: FILE: ./hal/HalPhyRf_8723B.c:399:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_A, bMaskDWord, 0x8214010a); */$

CHECK: Avoid CamelCase: <rTx_IQK_PI_A>
#400: FILE: ./hal/HalPhyRf_8723B.c:400:
+	PHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_A, bMaskDWord, 0x821303ea);

CHECK: Avoid CamelCase: <rRx_IQK_PI_A>
#401: FILE: ./hal/HalPhyRf_8723B.c:401:
+	PHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_PI_A, bMaskDWord, 0x28110000);

CHECK: Avoid CamelCase: <rTx_IQK_PI_B>
#402: FILE: ./hal/HalPhyRf_8723B.c:402:
+	PHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_B, bMaskDWord, 0x82110000);

CHECK: Avoid CamelCase: <rRx_IQK_PI_B>
#403: FILE: ./hal/HalPhyRf_8723B.c:403:
+	PHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_PI_B, bMaskDWord, 0x28110000);

CHECK: Avoid CamelCase: <rIQK_AGC_Rsp>
#406: FILE: ./hal/HalPhyRf_8723B.c:406:
+	PHY_SetBBReg(pDM_Odm->Adapter, rIQK_AGC_Rsp, bMaskDWord, 0x00462911);

CHECK: Unnecessary parentheses around 'RF_Path == 0'
#412: FILE: ./hal/HalPhyRf_8723B.c:412:
+	if (configPathB || (RF_Path == 0))

CHECK: Avoid CamelCase: <rIQK_AGC_Pts>
#423: FILE: ./hal/HalPhyRf_8723B.c:423:
+	PHY_SetBBReg(pDM_Odm->Adapter, rIQK_AGC_Pts, bMaskDWord, 0xf9000000);

CHECK: Please don't use multiple blank lines
#438: FILE: ./hal/HalPhyRf_8723B.c:438:
+
+

CHECK: Avoid CamelCase: <rRx_Power_After_IQK_A_2>
#440: FILE: ./hal/HalPhyRf_8723B.c:440:
+	regEAC = PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord);

CHECK: Avoid CamelCase: <rTx_Power_Before_IQK_A>
#441: FILE: ./hal/HalPhyRf_8723B.c:441:
+	regE94 = PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord);

CHECK: Avoid CamelCase: <rTx_Power_After_IQK_A>
#442: FILE: ./hal/HalPhyRf_8723B.c:442:
+	regE9C = PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord);

CHECK: Please don't use multiple blank lines
#444: FILE: ./hal/HalPhyRf_8723B.c:444:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#446: FILE: ./hal/HalPhyRf_8723B.c:446:
+	tmp = (regE9C & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#450: FILE: ./hal/HalPhyRf_8723B.c:450:
+	if (

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#450: FILE: ./hal/HalPhyRf_8723B.c:450:
+	if (
+		!(regEAC & BIT28) &&
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#452: FILE: ./hal/HalPhyRf_8723B.c:452:
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#453: FILE: ./hal/HalPhyRf_8723B.c:453:
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#454: FILE: ./hal/HalPhyRf_8723B.c:454:
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#455: FILE: ./hal/HalPhyRf_8723B.c:455:
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: Lines should not end with a '('
#466: FILE: ./hal/HalPhyRf_8723B.c:466:
+static u8 phy_PathA_RxIQK8723B(

CHECK: Avoid CamelCase: <phy_PathA_RxIQK8723B>
#466: FILE: ./hal/HalPhyRf_8723B.c:466:
+static u8 phy_PathA_RxIQK8723B(

CHECK: Avoid CamelCase: <regEA4>
#470: FILE: ./hal/HalPhyRf_8723B.c:470:
+	u32 regEAC, regE94, regE9C, regEA4, u4tmp, tmp, Path_SEL_BB;

WARNING: please, no space before tabs
#487: FILE: ./hal/HalPhyRf_8723B.c:487:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_WE_LUT, 0x80000, 0x0); */$

WARNING: please, no space before tabs
#500: FILE: ./hal/HalPhyRf_8723B.c:500:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_A, bMaskDWord, 0x82160c1f); */$

CHECK: Unnecessary parentheses around 'RF_Path == 0'
#513: FILE: ./hal/HalPhyRf_8723B.c:513:
+	if (configPathB || (RF_Path == 0))

CHECK: spaces preferred around that '>>' (ctx:VxV)
#545: FILE: ./hal/HalPhyRf_8723B.c:545:
+	tmp = (regE9C & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#549: FILE: ./hal/HalPhyRf_8723B.c:549:
+	if (

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#549: FILE: ./hal/HalPhyRf_8723B.c:549:
+	if (
+		!(regEAC & BIT28) &&
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#551: FILE: ./hal/HalPhyRf_8723B.c:551:
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#552: FILE: ./hal/HalPhyRf_8723B.c:552:
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#553: FILE: ./hal/HalPhyRf_8723B.c:553:
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#554: FILE: ./hal/HalPhyRf_8723B.c:554:
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#561: FILE: ./hal/HalPhyRf_8723B.c:561:
+	u4tmp = 0x80007C00 | (regE94&0x3FF0000) | ((regE9C&0x3FF0000) >> 16);
 	                            ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#561: FILE: ./hal/HalPhyRf_8723B.c:561:
+	u4tmp = 0x80007C00 | (regE94&0x3FF0000) | ((regE9C&0x3FF0000) >> 16);
 	                                                  ^

WARNING: please, no space before tabs
#571: FILE: ./hal/HalPhyRf_8723B.c:571:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_WE_LUT, 0x80000, 0x0); */$

CHECK: Please don't use multiple blank lines
#577: FILE: ./hal/HalPhyRf_8723B.c:577:
+
+

WARNING: please, no space before tabs
#588: FILE: ./hal/HalPhyRf_8723B.c:588:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_PI_A, bMaskDWord, 0x281604c2); */$

CHECK: Unnecessary parentheses around 'RF_Path == 0'
#600: FILE: ./hal/HalPhyRf_8723B.c:600:
+	if (configPathB || (RF_Path == 0))

CHECK: Avoid CamelCase: <rRx_Power_Before_IQK_A_2>
#628: FILE: ./hal/HalPhyRf_8723B.c:628:
+	regEA4 = PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord);

WARNING: please, no space before tabs
#630: FILE: ./hal/HalPhyRf_8723B.c:630:
+^I/* ^IPA/PAD controlled by 0x0 */$

CHECK: spaces preferred around that '>>' (ctx:VxV)
#636: FILE: ./hal/HalPhyRf_8723B.c:636:
+	tmp = (regEAC & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#640: FILE: ./hal/HalPhyRf_8723B.c:640:
+	if (

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#640: FILE: ./hal/HalPhyRf_8723B.c:640:
+	if (
+		!(regEAC & BIT27) && /* if Tx is OK, check whether Rx is OK */
+		(((regEA4 & 0x03FF0000)>>16) != 0x132) &&
+		(((regEAC & 0x03FF0000)>>16) != 0x36) &&
+		(((regEA4 & 0x03FF0000)>>16) < 0x110) &&
+		(((regEA4 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#642: FILE: ./hal/HalPhyRf_8723B.c:642:
+		(((regEA4 & 0x03FF0000)>>16) != 0x132) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#643: FILE: ./hal/HalPhyRf_8723B.c:643:
+		(((regEAC & 0x03FF0000)>>16) != 0x36) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#644: FILE: ./hal/HalPhyRf_8723B.c:644:
+		(((regEA4 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#645: FILE: ./hal/HalPhyRf_8723B.c:645:
+		(((regEA4 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: Avoid CamelCase: <phy_PathB_IQK_8723B>
#654: FILE: ./hal/HalPhyRf_8723B.c:654:
+static u8 phy_PathB_IQK_8723B(struct adapter *padapter)

WARNING: please, no space before tabs
#667: FILE: ./hal/HalPhyRf_8723B.c:667:
+^I/* ^Iin TXIQK mode */$

WARNING: please, no space before tabs
#668: FILE: ./hal/HalPhyRf_8723B.c:668:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_WE_LUT, 0x80000, 0x1); */$

WARNING: please, no space before tabs
#669: FILE: ./hal/HalPhyRf_8723B.c:669:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_RCK_OS, bRFRegOffsetMask, 0x20000); */$

WARNING: please, no space before tabs
#670: FILE: ./hal/HalPhyRf_8723B.c:670:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_TXPA_G1, bRFRegOffsetMask, 0x0003f); */$

WARNING: please, no space before tabs
#671: FILE: ./hal/HalPhyRf_8723B.c:671:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_TXPA_G2, bRFRegOffsetMask, 0xc7f87); */$

WARNING: please, no space before tabs
#672: FILE: ./hal/HalPhyRf_8723B.c:672:
+^I/* ^Ienable path B PA in TXIQK mode */$

CHECK: Please don't use multiple blank lines
#676: FILE: ./hal/HalPhyRf_8723B.c:676:
+
+

WARNING: please, no space before tabs
#688: FILE: ./hal/HalPhyRf_8723B.c:688:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_A, bMaskDWord, 0x82140114); */$

WARNING: please, no space before tabs
#702: FILE: ./hal/HalPhyRf_8723B.c:702:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, bRFRegOffsetMask, 0xeffe0); */$

CHECK: spaces preferred around that '>>' (ctx:VxV)
#729: FILE: ./hal/HalPhyRf_8723B.c:729:
+	tmp = (regE9C & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#733: FILE: ./hal/HalPhyRf_8723B.c:733:
+	if (

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#733: FILE: ./hal/HalPhyRf_8723B.c:733:
+	if (
+		!(regEAC & BIT28) &&
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#735: FILE: ./hal/HalPhyRf_8723B.c:735:
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#736: FILE: ./hal/HalPhyRf_8723B.c:736:
+		(((regE9C & 0x03FF0000)>>16) != 0x42) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#737: FILE: ./hal/HalPhyRf_8723B.c:737:
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#738: FILE: ./hal/HalPhyRf_8723B.c:738:
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: Avoid CamelCase: <phy_PathB_RxIQK8723B>
#747: FILE: ./hal/HalPhyRf_8723B.c:747:
+static u8 phy_PathB_RxIQK8723B(struct adapter *padapter, bool configPathB)

CHECK: Please don't use multiple blank lines
#770: FILE: ./hal/HalPhyRf_8723B.c:770:
+
+

CHECK: Please don't use multiple blank lines
#775: FILE: ./hal/HalPhyRf_8723B.c:775:
+
+

WARNING: please, no space before tabs
#782: FILE: ./hal/HalPhyRf_8723B.c:782:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rTx_IQK_PI_A, bMaskDWord, 0x82160c1f); */$

WARNING: please, no space before tabs
#796: FILE: ./hal/HalPhyRf_8723B.c:796:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, bRFRegOffsetMask, 0xeffe0); */$

CHECK: Please don't use multiple blank lines
#805: FILE: ./hal/HalPhyRf_8723B.c:805:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#824: FILE: ./hal/HalPhyRf_8723B.c:824:
+	tmp = (regE9C & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#828: FILE: ./hal/HalPhyRf_8723B.c:828:
+	if (

WARNING: suspect code indent for conditional statements (8, 24)
#828: FILE: ./hal/HalPhyRf_8723B.c:828:
+	if (
[...]
+			result |= 0x01;

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#828: FILE: ./hal/HalPhyRf_8723B.c:828:
+	if (
+		!(regEAC & BIT28) &&
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
+		(((regE9C & 0x03FF0000)>>16) != 0x42)  &&
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#830: FILE: ./hal/HalPhyRf_8723B.c:830:
+		(((regE94 & 0x03FF0000)>>16) != 0x142) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#831: FILE: ./hal/HalPhyRf_8723B.c:831:
+		(((regE9C & 0x03FF0000)>>16) != 0x42)  &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#832: FILE: ./hal/HalPhyRf_8723B.c:832:
+		(((regE94 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#833: FILE: ./hal/HalPhyRf_8723B.c:833:
+		(((regE94 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#840: FILE: ./hal/HalPhyRf_8723B.c:840:
+	u4tmp = 0x80007C00 | (regE94&0x3FF0000)  | ((regE9C&0x3FF0000) >> 16);
 	                            ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#840: FILE: ./hal/HalPhyRf_8723B.c:840:
+	u4tmp = 0x80007C00 | (regE94&0x3FF0000)  | ((regE9C&0x3FF0000) >> 16);
 	                                                   ^

WARNING: please, no space before tabs
#850: FILE: ./hal/HalPhyRf_8723B.c:850:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_WE_LUT, 0x80000, 0x0); */$

WARNING: please, no space before tabs
#857: FILE: ./hal/HalPhyRf_8723B.c:857:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xdf, bRFRegOffsetMask, 0xf80); */$

WARNING: please, no space before tabs
#858: FILE: ./hal/HalPhyRf_8723B.c:858:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0x56, bRFRegOffsetMask, 0x51000); */$

WARNING: please, no space before tabs
#870: FILE: ./hal/HalPhyRf_8723B.c:870:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rRx_IQK_PI_A, bMaskDWord, 0x281604c2); */$

WARNING: please, no space before tabs
#883: FILE: ./hal/HalPhyRf_8723B.c:883:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, bRFRegOffsetMask, 0xeffe0); */$

WARNING: please, no space before tabs
#908: FILE: ./hal/HalPhyRf_8723B.c:908:
+^I/* ^IPA/PAD controlled by 0x0 */$

WARNING: please, no space before tabs
#910: FILE: ./hal/HalPhyRf_8723B.c:910:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_IQK, 0xffffff00, 0x00000000); */$

WARNING: please, no space before tabs
#911: FILE: ./hal/HalPhyRf_8723B.c:911:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_B, 0xdf, bRFRegOffsetMask, 0x180); */$

CHECK: Please don't use multiple blank lines
#913: FILE: ./hal/HalPhyRf_8723B.c:913:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#916: FILE: ./hal/HalPhyRf_8723B.c:916:
+	tmp = (regEAC & 0x03FF0000)>>16;
 	                           ^

CHECK: Lines should not end with a '('
#920: FILE: ./hal/HalPhyRf_8723B.c:920:
+	if (

CHECK: Unnecessary parentheses around 'tmp < 0xf'
#920: FILE: ./hal/HalPhyRf_8723B.c:920:
+	if (
+		!(regEAC & BIT27) && /* if Tx is OK, check whether Rx is OK */
+		(((regEA4 & 0x03FF0000)>>16) != 0x132) &&
+		(((regEAC & 0x03FF0000)>>16) != 0x36) &&
+		(((regEA4 & 0x03FF0000)>>16) < 0x110) &&
+		(((regEA4 & 0x03FF0000)>>16) > 0xf0) &&
+		(tmp < 0xf)
+	)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#922: FILE: ./hal/HalPhyRf_8723B.c:922:
+		(((regEA4 & 0x03FF0000)>>16) != 0x132) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#923: FILE: ./hal/HalPhyRf_8723B.c:923:
+		(((regEAC & 0x03FF0000)>>16) != 0x36) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#924: FILE: ./hal/HalPhyRf_8723B.c:924:
+		(((regEA4 & 0x03FF0000)>>16) < 0x110) &&
 		                       ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#925: FILE: ./hal/HalPhyRf_8723B.c:925:
+		(((regEA4 & 0x03FF0000)>>16) > 0xf0) &&
 		                       ^

CHECK: Lines should not end with a '('
#933: FILE: ./hal/HalPhyRf_8723B.c:933:
+static void _PHY_PathAFillIQKMatrix8723B(

CHECK: Avoid CamelCase: <_PHY_PathAFillIQKMatrix8723B>
#933: FILE: ./hal/HalPhyRf_8723B.c:933:
+static void _PHY_PathAFillIQKMatrix8723B(

CHECK: Avoid CamelCase: <bIQKOK>
#935: FILE: ./hal/HalPhyRf_8723B.c:935:
+	bool bIQKOK,

CHECK: Avoid CamelCase: <bTxOnly>
#938: FILE: ./hal/HalPhyRf_8723B.c:938:
+	bool bTxOnly

CHECK: Avoid CamelCase: <Oldval_0>
#941: FILE: ./hal/HalPhyRf_8723B.c:941:
+	u32 Oldval_0, X, TX0_A, reg;

CHECK: braces {} should be used on all arms of this statement
#948: FILE: ./hal/HalPhyRf_8723B.c:948:
+	if (final_candidate == 0xFF)
[...]
+	else if (bIQKOK) {
[...]

CHECK: line length of 112 exceeds 100 columns
#952: FILE: ./hal/HalPhyRf_8723B.c:952:
+		Oldval_0 = (PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XATxIQImbalance, bMaskDWord) >> 22) & 0x3FF;

CHECK: line length of 103 exceeds 100 columns
#960: FILE: ./hal/HalPhyRf_8723B.c:960:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(31), ((X*Oldval_0>>7) & 0x1));

CHECK: spaces preferred around that '*' (ctx:VxV)
#960: FILE: ./hal/HalPhyRf_8723B.c:960:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(31), ((X*Oldval_0>>7) & 0x1));
 		                                                                 ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#960: FILE: ./hal/HalPhyRf_8723B.c:960:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(31), ((X*Oldval_0>>7) & 0x1));
 		                                                                          ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#968: FILE: ./hal/HalPhyRf_8723B.c:968:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XCTxAFE, 0xF0000000, ((TX0_C&0x3C0)>>6));
 		                                                                  ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#968: FILE: ./hal/HalPhyRf_8723B.c:968:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XCTxAFE, 0xF0000000, ((TX0_C&0x3C0)>>6));
 		                                                                         ^

CHECK: Avoid CamelCase: <TxIQC_8723B>
#969: FILE: ./hal/HalPhyRf_8723B.c:969:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC94][KEY] = rOFDM0_XCTxAFE;

CHECK: line length of 134 exceeds 100 columns
#970: FILE: ./hal/HalPhyRf_8723B.c:970:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC94][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XCTxAFE, bMaskDWord);

CHECK: spaces preferred around that '&' (ctx:VxV)
#972: FILE: ./hal/HalPhyRf_8723B.c:972:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XATxIQImbalance, 0x003F0000, (TX0_C&0x3F));
 		                                                                         ^

CHECK: line length of 142 exceeds 100 columns
#974: FILE: ./hal/HalPhyRf_8723B.c:974:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XATxIQImbalance, bMaskDWord);

CHECK: line length of 103 exceeds 100 columns
#976: FILE: ./hal/HalPhyRf_8723B.c:976:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(29), ((Y*Oldval_0>>7) & 0x1));

CHECK: spaces preferred around that '*' (ctx:VxV)
#976: FILE: ./hal/HalPhyRf_8723B.c:976:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(29), ((Y*Oldval_0>>7) & 0x1));
 		                                                                 ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#976: FILE: ./hal/HalPhyRf_8723B.c:976:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(29), ((Y*Oldval_0>>7) & 0x1));
 		                                                                          ^

CHECK: line length of 140 exceeds 100 columns
#978: FILE: ./hal/HalPhyRf_8723B.c:978:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC4C][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, bMaskDWord);

CHECK: Avoid CamelCase: <RxIQC_8723B>
#982: FILE: ./hal/HalPhyRf_8723B.c:982:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][KEY] = rOFDM0_RxIQExtAnta;

CHECK: Avoid CamelCase: <rOFDM0_RxIQExtAnta>
#982: FILE: ./hal/HalPhyRf_8723B.c:982:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][KEY] = rOFDM0_RxIQExtAnta;

CHECK: line length of 158 exceeds 100 columns
#983: FILE: ./hal/HalPhyRf_8723B.c:983:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][VAL] = 0xfffffff & PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord);

CHECK: line length of 104 exceeds 100 columns
#984: FILE: ./hal/HalPhyRf_8723B.c:984:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][KEY] = rOFDM0_XARxIQImbalance;

CHECK: Avoid CamelCase: <rOFDM0_XARxIQImbalance>
#984: FILE: ./hal/HalPhyRf_8723B.c:984:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][KEY] = rOFDM0_XARxIQImbalance;

CHECK: line length of 153 exceeds 100 columns
#985: FILE: ./hal/HalPhyRf_8723B.c:985:
+/* 			pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XARxIQImbalance, bMaskDWord); */

WARNING: please, no space before tabs
#985: FILE: ./hal/HalPhyRf_8723B.c:985:
+/* ^I^I^IpRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XARxIQImbalance, bMaskDWord); */$

CHECK: line length of 142 exceeds 100 columns
#997: FILE: ./hal/HalPhyRf_8723B.c:997:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XARxIQImbalance, bMaskDWord);

CHECK: line length of 138 exceeds 100 columns
#1002: FILE: ./hal/HalPhyRf_8723B.c:1002:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord);

CHECK: Blank lines aren't necessary before a close brace '}'
#1004: FILE: ./hal/HalPhyRf_8723B.c:1004:
+
+	}

CHECK: Lines should not end with a '('
#1007: FILE: ./hal/HalPhyRf_8723B.c:1007:
+static void _PHY_PathBFillIQKMatrix8723B(

CHECK: Avoid CamelCase: <_PHY_PathBFillIQKMatrix8723B>
#1007: FILE: ./hal/HalPhyRf_8723B.c:1007:
+static void _PHY_PathBFillIQKMatrix8723B(

CHECK: Avoid CamelCase: <Oldval_1>
#1015: FILE: ./hal/HalPhyRf_8723B.c:1015:
+	u32 Oldval_1, X, TX1_A, reg;

CHECK: braces {} should be used on all arms of this statement
#1022: FILE: ./hal/HalPhyRf_8723B.c:1022:
+	if (final_candidate == 0xFF)
[...]
+	else if (bIQKOK) {
[...]

CHECK: line length of 112 exceeds 100 columns
#1026: FILE: ./hal/HalPhyRf_8723B.c:1026:
+		Oldval_1 = (PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XBTxIQImbalance, bMaskDWord) >> 22) & 0x3FF;

CHECK: line length of 103 exceeds 100 columns
#1035: FILE: ./hal/HalPhyRf_8723B.c:1035:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(27), ((X*Oldval_1>>7) & 0x1));

CHECK: spaces preferred around that '*' (ctx:VxV)
#1035: FILE: ./hal/HalPhyRf_8723B.c:1035:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(27), ((X*Oldval_1>>7) & 0x1));
 		                                                                 ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1035: FILE: ./hal/HalPhyRf_8723B.c:1035:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(27), ((X*Oldval_1>>7) & 0x1));
 		                                                                          ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1044: FILE: ./hal/HalPhyRf_8723B.c:1044:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, 0xF0000000, ((TX1_C&0x3C0)>>6));
 		                                                                  ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1044: FILE: ./hal/HalPhyRf_8723B.c:1044:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, 0xF0000000, ((TX1_C&0x3C0)>>6));
 		                                                                         ^

WARNING: please, no space before tabs
#1045: FILE: ./hal/HalPhyRf_8723B.c:1045:
+/* ^I^IpRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC9C][KEY] = rOFDM0_XDTxAFE; */$

CHECK: line length of 137 exceeds 100 columns
#1046: FILE: ./hal/HalPhyRf_8723B.c:1046:
+/* 		pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC9C][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, bMaskDWord); */

WARNING: please, no space before tabs
#1046: FILE: ./hal/HalPhyRf_8723B.c:1046:
+/* ^I^IpRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC9C][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, bMaskDWord); */$

CHECK: line length of 134 exceeds 100 columns
#1048: FILE: ./hal/HalPhyRf_8723B.c:1048:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC94][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XDTxAFE, bMaskDWord);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1050: FILE: ./hal/HalPhyRf_8723B.c:1050:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XBTxIQImbalance, 0x003F0000, (TX1_C&0x3F));
 		                                                                         ^

CHECK: line length of 142 exceeds 100 columns
#1052: FILE: ./hal/HalPhyRf_8723B.c:1052:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XBTxIQImbalance, bMaskDWord);

CHECK: line length of 103 exceeds 100 columns
#1054: FILE: ./hal/HalPhyRf_8723B.c:1054:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(25), ((Y*Oldval_1>>7) & 0x1));

CHECK: spaces preferred around that '*' (ctx:VxV)
#1054: FILE: ./hal/HalPhyRf_8723B.c:1054:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(25), ((Y*Oldval_1>>7) & 0x1));
 		                                                                 ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1054: FILE: ./hal/HalPhyRf_8723B.c:1054:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, BIT(25), ((Y*Oldval_1>>7) & 0x1));
 		                                                                          ^

CHECK: line length of 140 exceeds 100 columns
#1056: FILE: ./hal/HalPhyRf_8723B.c:1056:
+		pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC4C][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, bMaskDWord);

CHECK: line length of 104 exceeds 100 columns
#1059: FILE: ./hal/HalPhyRf_8723B.c:1059:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][KEY] = rOFDM0_XARxIQImbalance;

CHECK: line length of 153 exceeds 100 columns
#1060: FILE: ./hal/HalPhyRf_8723B.c:1060:
+/* 			pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XARxIQImbalance, bMaskDWord); */

WARNING: please, no space before tabs
#1060: FILE: ./hal/HalPhyRf_8723B.c:1060:
+/* ^I^I^IpRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XARxIQImbalance, bMaskDWord); */$

CHECK: line length of 159 exceeds 100 columns
#1063: FILE: ./hal/HalPhyRf_8723B.c:1063:
+			pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][VAL] = 0x0fffffff & PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord);

CHECK: Avoid CamelCase: <rOFDM0_XBRxIQImbalance>
#1069: FILE: ./hal/HalPhyRf_8723B.c:1069:
+		PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_XBRxIQImbalance, 0x3FF, reg);

CHECK: line length of 142 exceeds 100 columns
#1073: FILE: ./hal/HalPhyRf_8723B.c:1073:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] = PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_XBRxIQImbalance, bMaskDWord);

WARNING: please, no space before tabs
#1076: FILE: ./hal/HalPhyRf_8723B.c:1076:
+/* ^I^IPHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_AGCRSSITable, 0x0000F000, reg); */$

CHECK: line length of 163 exceeds 100 columns
#1078: FILE: ./hal/HalPhyRf_8723B.c:1078:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][VAL] = (reg << 28)|(PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord)&0x0fffffff);

CHECK: spaces preferred around that '|' (ctx:VxV)
#1078: FILE: ./hal/HalPhyRf_8723B.c:1078:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][VAL] = (reg << 28)|(PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord)&0x0fffffff);
 		                                                                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1078: FILE: ./hal/HalPhyRf_8723B.c:1078:
+		pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][VAL] = (reg << 28)|(PHY_QueryBBReg(pDM_Odm->Adapter, rOFDM0_RxIQExtAnta, bMaskDWord)&0x0fffffff);
 		                                                                                                                                      ^

CHECK: Avoid CamelCase: <RFpath>
#1087: FILE: ./hal/HalPhyRf_8723B.c:1087:
+void ODM_SetIQCbyRFpath(struct dm_odm_t *pDM_Odm, u32 RFpath)

CHECK: Blank lines aren't necessary after an open brace '{'
#1089: FILE: ./hal/HalPhyRf_8723B.c:1089:
+{
+

CHECK: Lines should not end with a '('
#1092: FILE: ./hal/HalPhyRf_8723B.c:1092:
+	if (

CHECK: Unnecessary parentheses around 'pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] != 0x0'
#1092: FILE: ./hal/HalPhyRf_8723B.c:1092:
+	if (
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] != 0x0) &&
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] != 0x0)
+	) {

CHECK: Unnecessary parentheses around 'pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] != 0x0'
#1092: FILE: ./hal/HalPhyRf_8723B.c:1092:
+	if (
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] != 0x0) &&
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] != 0x0)
+	) {

CHECK: Unnecessary parentheses around 'pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] != 0x0'
#1092: FILE: ./hal/HalPhyRf_8723B.c:1092:
+	if (
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] != 0x0) &&
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] != 0x0)
+	) {

CHECK: Unnecessary parentheses around 'pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] != 0x0'
#1092: FILE: ./hal/HalPhyRf_8723B.c:1092:
+	if (
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL] != 0x0) &&
+		(pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL] != 0x0) &&
+		(pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL] != 0x0)
+	) {

CHECK: line length of 179 exceeds 100 columns
#1100: FILE: ./hal/HalPhyRf_8723B.c:1100:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC94][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC94][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1101: FILE: ./hal/HalPhyRf_8723B.c:1101:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC80][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1102: FILE: ./hal/HalPhyRf_8723B.c:1102:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC4C][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S0][IDX_0xC4C][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1104: FILE: ./hal/HalPhyRf_8723B.c:1104:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][KEY], bMaskDWord, pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xC14][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1105: FILE: ./hal/HalPhyRf_8723B.c:1105:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][KEY], bMaskDWord, pRFCalibrateInfo->RxIQC_8723B[PATH_S0][IDX_0xCA0][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1108: FILE: ./hal/HalPhyRf_8723B.c:1108:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC94][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC94][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1109: FILE: ./hal/HalPhyRf_8723B.c:1109:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC80][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1110: FILE: ./hal/HalPhyRf_8723B.c:1110:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC4C][KEY], bMaskDWord, pRFCalibrateInfo->TxIQC_8723B[PATH_S1][IDX_0xC4C][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1112: FILE: ./hal/HalPhyRf_8723B.c:1112:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][KEY], bMaskDWord, pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xC14][VAL]);

CHECK: line length of 179 exceeds 100 columns
#1113: FILE: ./hal/HalPhyRf_8723B.c:1113:
+			PHY_SetBBReg(pDM_Odm->Adapter, pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][KEY], bMaskDWord, pRFCalibrateInfo->RxIQC_8723B[PATH_S1][IDX_0xCA0][VAL]);

CHECK: Lines should not end with a '('
#1123: FILE: ./hal/HalPhyRf_8723B.c:1123:
+static void _PHY_SaveADDARegisters8723B(

CHECK: Avoid CamelCase: <_PHY_SaveADDARegisters8723B>
#1123: FILE: ./hal/HalPhyRf_8723B.c:1123:
+static void _PHY_SaveADDARegisters8723B(

CHECK: Avoid CamelCase: <ADDAReg>
#1125: FILE: ./hal/HalPhyRf_8723B.c:1125:
+	u32 *ADDAReg,

CHECK: Avoid CamelCase: <ADDABackup>
#1126: FILE: ./hal/HalPhyRf_8723B.c:1126:
+	u32 *ADDABackup,

CHECK: Avoid CamelCase: <RegisterNum>
#1127: FILE: ./hal/HalPhyRf_8723B.c:1127:
+	u32 RegisterNum

WARNING: braces {} are not necessary for single statement blocks
#1137: FILE: ./hal/HalPhyRf_8723B.c:1137:
+	for (i = 0 ; i < RegisterNum ; i++) {
+		ADDABackup[i] = PHY_QueryBBReg(pDM_Odm->Adapter, ADDAReg[i], bMaskDWord);
+	}

CHECK: Please don't use multiple blank lines
#1142: FILE: ./hal/HalPhyRf_8723B.c:1142:
+
+

CHECK: Lines should not end with a '('
#1143: FILE: ./hal/HalPhyRf_8723B.c:1143:
+static void _PHY_SaveMACRegisters8723B(

CHECK: Avoid CamelCase: <_PHY_SaveMACRegisters8723B>
#1143: FILE: ./hal/HalPhyRf_8723B.c:1143:
+static void _PHY_SaveMACRegisters8723B(

CHECK: Avoid CamelCase: <MACReg>
#1144: FILE: ./hal/HalPhyRf_8723B.c:1144:
+	struct adapter *padapter, u32 *MACReg, u32 *MACBackup

CHECK: Avoid CamelCase: <MACBackup>
#1144: FILE: ./hal/HalPhyRf_8723B.c:1144:
+	struct adapter *padapter, u32 *MACReg, u32 *MACBackup

WARNING: braces {} are not necessary for single statement blocks
#1151: FILE: ./hal/HalPhyRf_8723B.c:1151:
+	for (i = 0 ; i < (IQK_MAC_REG_NUM - 1); i++) {
+		MACBackup[i] = rtw_read8(pDM_Odm->Adapter, MACReg[i]);
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1156: FILE: ./hal/HalPhyRf_8723B.c:1156:
+
+}

CHECK: Please don't use multiple blank lines
#1158: FILE: ./hal/HalPhyRf_8723B.c:1158:
+
+

CHECK: Lines should not end with a '('
#1159: FILE: ./hal/HalPhyRf_8723B.c:1159:
+static void _PHY_ReloadADDARegisters8723B(

CHECK: Avoid CamelCase: <_PHY_ReloadADDARegisters8723B>
#1159: FILE: ./hal/HalPhyRf_8723B.c:1159:
+static void _PHY_ReloadADDARegisters8723B(

CHECK: Avoid CamelCase: <RegiesterNum>
#1163: FILE: ./hal/HalPhyRf_8723B.c:1163:
+	u32 RegiesterNum

WARNING: braces {} are not necessary for single statement blocks
#1170: FILE: ./hal/HalPhyRf_8723B.c:1170:
+	for (i = 0 ; i < RegiesterNum; i++) {
+		PHY_SetBBReg(pDM_Odm->Adapter, ADDAReg[i], bMaskDWord, ADDABackup[i]);
+	}

CHECK: Lines should not end with a '('
#1175: FILE: ./hal/HalPhyRf_8723B.c:1175:
+static void _PHY_ReloadMACRegisters8723B(

CHECK: Avoid CamelCase: <_PHY_ReloadMACRegisters8723B>
#1175: FILE: ./hal/HalPhyRf_8723B.c:1175:
+static void _PHY_ReloadMACRegisters8723B(

WARNING: braces {} are not necessary for single statement blocks
#1181: FILE: ./hal/HalPhyRf_8723B.c:1181:
+	for (i = 0 ; i < (IQK_MAC_REG_NUM - 1); i++) {
+		rtw_write8(padapter, MACReg[i], (u8)MACBackup[i]);
+	}

CHECK: Please don't use multiple blank lines
#1187: FILE: ./hal/HalPhyRf_8723B.c:1187:
+
+

CHECK: Lines should not end with a '('
#1188: FILE: ./hal/HalPhyRf_8723B.c:1188:
+static void _PHY_PathADDAOn8723B(

CHECK: Avoid CamelCase: <_PHY_PathADDAOn8723B>
#1188: FILE: ./hal/HalPhyRf_8723B.c:1188:
+static void _PHY_PathADDAOn8723B(

CHECK: Avoid CamelCase: <pathOn>
#1194: FILE: ./hal/HalPhyRf_8723B.c:1194:
+	u32 pathOn;

WARNING: braces {} are not necessary for single statement blocks
#1207: FILE: ./hal/HalPhyRf_8723B.c:1207:
+	for (i = 1 ; i < IQK_ADDA_REG_NUM ; i++) {
+		PHY_SetBBReg(pDM_Odm->Adapter, ADDAReg[i], bMaskDWord, pathOn);
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1211: FILE: ./hal/HalPhyRf_8723B.c:1211:
+
+}

CHECK: Lines should not end with a '('
#1213: FILE: ./hal/HalPhyRf_8723B.c:1213:
+static void _PHY_MACSettingCalibration8723B(

CHECK: Avoid CamelCase: <_PHY_MACSettingCalibration8723B>
#1213: FILE: ./hal/HalPhyRf_8723B.c:1213:
+static void _PHY_MACSettingCalibration8723B(

WARNING: braces {} are not necessary for single statement blocks
#1223: FILE: ./hal/HalPhyRf_8723B.c:1223:
+	for (i = 1 ; i < (IQK_MAC_REG_NUM - 1); i++) {
+		rtw_write8(pDM_Odm->Adapter, MACReg[i], (u8)(MACBackup[i]&(~BIT3)));
+	}

CHECK: spaces preferred around that '&' (ctx:VxV)
#1224: FILE: ./hal/HalPhyRf_8723B.c:1224:
+		rtw_write8(pDM_Odm->Adapter, MACReg[i], (u8)(MACBackup[i]&(~BIT3)));
 		                                                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1226: FILE: ./hal/HalPhyRf_8723B.c:1226:
+	rtw_write8(pDM_Odm->Adapter, MACReg[i], (u8)(MACBackup[i]&(~BIT5)));
 	                                                         ^

CHECK: Blank lines aren't necessary before a close brace '}'
#1228: FILE: ./hal/HalPhyRf_8723B.c:1228:
+
+}

CHECK: Lines should not end with a '('
#1230: FILE: ./hal/HalPhyRf_8723B.c:1230:
+static bool phy_SimularityCompare_8723B(

CHECK: Avoid CamelCase: <phy_SimularityCompare_8723B>
#1230: FILE: ./hal/HalPhyRf_8723B.c:1230:
+static bool phy_SimularityCompare_8723B(

CHECK: Avoid CamelCase: <SimularityBitMap>
#1237: FILE: ./hal/HalPhyRf_8723B.c:1237:
+	u32 i, j, diff, SimularityBitMap, bound = 0;

CHECK: Blank lines aren't necessary after an open brace '{'
#1246: FILE: ./hal/HalPhyRf_8723B.c:1246:
+	for (i = 0; i < bound; i++) {
+

CHECK: Unnecessary parentheses around 'i == 1'
#1247: FILE: ./hal/HalPhyRf_8723B.c:1247:
+		if ((i == 1) || (i == 3) || (i == 5) || (i == 7)) {

CHECK: Unnecessary parentheses around 'i == 3'
#1247: FILE: ./hal/HalPhyRf_8723B.c:1247:
+		if ((i == 1) || (i == 3) || (i == 5) || (i == 7)) {

CHECK: Unnecessary parentheses around 'i == 5'
#1247: FILE: ./hal/HalPhyRf_8723B.c:1247:
+		if ((i == 1) || (i == 3) || (i == 5) || (i == 7)) {

CHECK: Unnecessary parentheses around 'i == 7'
#1247: FILE: ./hal/HalPhyRf_8723B.c:1247:
+		if ((i == 1) || (i == 3) || (i == 5) || (i == 7)) {

CHECK: braces {} should be used on all arms of this statement
#1265: FILE: ./hal/HalPhyRf_8723B.c:1265:
+			if ((i == 2 || i == 6) && !SimularityBitMap) {
[...]
+			} else
[...]

CHECK: spaces preferred around that '+' (ctx:VxV)
#1266: FILE: ./hal/HalPhyRf_8723B.c:1266:
+				if (result[c1][i]+result[c1][i+1] == 0)
 				                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1266: FILE: ./hal/HalPhyRf_8723B.c:1266:
+				if (result[c1][i]+result[c1][i+1] == 0)
 				                              ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1267: FILE: ./hal/HalPhyRf_8723B.c:1267:
+					final_candidate[(i/4)] = c2;
 					                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1268: FILE: ./hal/HalPhyRf_8723B.c:1268:
+				else if (result[c2][i]+result[c2][i+1] == 0)
 				                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1268: FILE: ./hal/HalPhyRf_8723B.c:1268:
+				else if (result[c2][i]+result[c2][i+1] == 0)
 				                                   ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1269: FILE: ./hal/HalPhyRf_8723B.c:1269:
+					final_candidate[(i/4)] = c1;
 					                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1271: FILE: ./hal/HalPhyRf_8723B.c:1271:
+					SimularityBitMap = SimularityBitMap|(1<<i);
 					                                   ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#1271: FILE: ./hal/HalPhyRf_8723B.c:1271:
+					SimularityBitMap = SimularityBitMap|(1<<i);
 					                                      ^

CHECK: Unbalanced braces around else statement
#1272: FILE: ./hal/HalPhyRf_8723B.c:1272:
+			} else

CHECK: spaces preferred around that '|' (ctx:VxV)
#1273: FILE: ./hal/HalPhyRf_8723B.c:1273:
+				SimularityBitMap = SimularityBitMap|(1<<i);
 				                                   ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#1273: FILE: ./hal/HalPhyRf_8723B.c:1273:
+				SimularityBitMap = SimularityBitMap|(1<<i);
 				                                      ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1278: FILE: ./hal/HalPhyRf_8723B.c:1278:
+		for (i = 0; i < (bound/4); i++) {
 		                      ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#1280: FILE: ./hal/HalPhyRf_8723B.c:1280:
+				for (j = i*4; j < (i+1)*4-2; j++)
 				          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1280: FILE: ./hal/HalPhyRf_8723B.c:1280:
+				for (j = i*4; j < (i+1)*4-2; j++)
 				                    ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#1280: FILE: ./hal/HalPhyRf_8723B.c:1280:
+				for (j = i*4; j < (i+1)*4-2; j++)
 				                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1280: FILE: ./hal/HalPhyRf_8723B.c:1280:
+				for (j = i*4; j < (i+1)*4-2; j++)
 				                         ^

WARNING: else is not generally useful after a break or return
#1286: FILE: ./hal/HalPhyRf_8723B.c:1286:
+		return bResult;
+	} else {

CHECK: Blank lines aren't necessary after an open brace '{'
#1287: FILE: ./hal/HalPhyRf_8723B.c:1287:
+	} else {
+

CHECK: Please don't use multiple blank lines
#1311: FILE: ./hal/HalPhyRf_8723B.c:1311:
+
+

CHECK: Lines should not end with a '('
#1313: FILE: ./hal/HalPhyRf_8723B.c:1313:
+static void phy_IQCalibrate_8723B(

CHECK: Avoid CamelCase: <phy_IQCalibrate_8723B>
#1313: FILE: ./hal/HalPhyRf_8723B.c:1313:
+static void phy_IQCalibrate_8723B(

CHECK: Avoid CamelCase: <PathAOK>
#1325: FILE: ./hal/HalPhyRf_8723B.c:1325:
+	u8 PathAOK, PathBOK;

CHECK: Avoid CamelCase: <PathBOK>
#1325: FILE: ./hal/HalPhyRf_8723B.c:1325:
+	u8 PathAOK, PathBOK;

CHECK: Avoid CamelCase: <bMaskByte0>
#1326: FILE: ./hal/HalPhyRf_8723B.c:1326:
+	u8 tmp0xc50 = (u8)PHY_QueryBBReg(pDM_Odm->Adapter, 0xC50, bMaskByte0);

CHECK: Avoid CamelCase: <rFPGA0_XCD_SwitchControl>
#1329: FILE: ./hal/HalPhyRf_8723B.c:1329:
+		rFPGA0_XCD_SwitchControl,

CHECK: Avoid CamelCase: <rBlue_Tooth>
#1330: FILE: ./hal/HalPhyRf_8723B.c:1330:
+		rBlue_Tooth,

CHECK: Avoid CamelCase: <rRx_Wait_CCA>
#1331: FILE: ./hal/HalPhyRf_8723B.c:1331:
+		rRx_Wait_CCA,

CHECK: Avoid CamelCase: <rTx_CCK_RFON>
#1332: FILE: ./hal/HalPhyRf_8723B.c:1332:
+		rTx_CCK_RFON,

CHECK: Avoid CamelCase: <rTx_CCK_BBON>
#1333: FILE: ./hal/HalPhyRf_8723B.c:1333:
+		rTx_CCK_BBON,

CHECK: Avoid CamelCase: <rTx_OFDM_RFON>
#1334: FILE: ./hal/HalPhyRf_8723B.c:1334:
+		rTx_OFDM_RFON,

CHECK: Avoid CamelCase: <rTx_OFDM_BBON>
#1335: FILE: ./hal/HalPhyRf_8723B.c:1335:
+		rTx_OFDM_BBON,

CHECK: Avoid CamelCase: <rTx_To_Rx>
#1336: FILE: ./hal/HalPhyRf_8723B.c:1336:
+		rTx_To_Rx,

CHECK: Avoid CamelCase: <rTx_To_Tx>
#1337: FILE: ./hal/HalPhyRf_8723B.c:1337:
+		rTx_To_Tx,

CHECK: Avoid CamelCase: <rRx_CCK>
#1338: FILE: ./hal/HalPhyRf_8723B.c:1338:
+		rRx_CCK,

CHECK: Avoid CamelCase: <rRx_OFDM>
#1339: FILE: ./hal/HalPhyRf_8723B.c:1339:
+		rRx_OFDM,

CHECK: Avoid CamelCase: <rRx_Wait_RIFS>
#1340: FILE: ./hal/HalPhyRf_8723B.c:1340:
+		rRx_Wait_RIFS,

CHECK: Avoid CamelCase: <rRx_TO_Rx>
#1341: FILE: ./hal/HalPhyRf_8723B.c:1341:
+		rRx_TO_Rx,

CHECK: Avoid CamelCase: <rStandby>
#1342: FILE: ./hal/HalPhyRf_8723B.c:1342:
+		rStandby,

CHECK: Avoid CamelCase: <rSleep>
#1343: FILE: ./hal/HalPhyRf_8723B.c:1343:
+		rSleep,

CHECK: Avoid CamelCase: <rPMPD_ANAEN>
#1344: FILE: ./hal/HalPhyRf_8723B.c:1344:
+		rPMPD_ANAEN

CHECK: Avoid CamelCase: <rOFDM0_TRxPathEnable>
#1355: FILE: ./hal/HalPhyRf_8723B.c:1355:
+		rOFDM0_TRxPathEnable,

CHECK: Avoid CamelCase: <rOFDM0_TRMuxPar>
#1356: FILE: ./hal/HalPhyRf_8723B.c:1356:
+		rOFDM0_TRMuxPar,

CHECK: Avoid CamelCase: <rFPGA0_XCD_RFInterfaceSW>
#1357: FILE: ./hal/HalPhyRf_8723B.c:1357:
+		rFPGA0_XCD_RFInterfaceSW,

CHECK: Avoid CamelCase: <rConfig_AntA>
#1358: FILE: ./hal/HalPhyRf_8723B.c:1358:
+		rConfig_AntA,

CHECK: Avoid CamelCase: <rConfig_AntB>
#1359: FILE: ./hal/HalPhyRf_8723B.c:1359:
+		rConfig_AntB,

CHECK: Avoid CamelCase: <rFPGA0_XAB_RFInterfaceSW>
#1360: FILE: ./hal/HalPhyRf_8723B.c:1360:
+		rFPGA0_XAB_RFInterfaceSW,

CHECK: Avoid CamelCase: <rFPGA0_XA_RFInterfaceOE>
#1361: FILE: ./hal/HalPhyRf_8723B.c:1361:
+		rFPGA0_XA_RFInterfaceOE,

CHECK: Avoid CamelCase: <rFPGA0_XB_RFInterfaceOE>
#1362: FILE: ./hal/HalPhyRf_8723B.c:1362:
+		rFPGA0_XB_RFInterfaceOE,

CHECK: Avoid CamelCase: <rCCK0_AFESetting>
#1363: FILE: ./hal/HalPhyRf_8723B.c:1363:
+		rCCK0_AFESetting

WARNING: please, no space before tabs
#1368: FILE: ./hal/HalPhyRf_8723B.c:1368:
+^I/* ^I^IPHY_REG.txt , and radio_a, radio_b.txt */$

CHECK: Blank lines aren't necessary after an open brace '{'
#1373: FILE: ./hal/HalPhyRf_8723B.c:1373:
+	if (t == 0) {
+

CHECK: line length of 120 exceeds 100 columns
#1375: FILE: ./hal/HalPhyRf_8723B.c:1375:
+		_PHY_SaveADDARegisters8723B(padapter, ADDA_REG, pDM_Odm->RFCalibrateInfo.ADDA_backup, IQK_ADDA_REG_NUM);

CHECK: line length of 107 exceeds 100 columns
#1376: FILE: ./hal/HalPhyRf_8723B.c:1376:
+		_PHY_SaveMACRegisters8723B(padapter, IQK_MAC_REG, pDM_Odm->RFCalibrateInfo.IQK_MAC_backup);

CHECK: line length of 126 exceeds 100 columns
#1377: FILE: ./hal/HalPhyRf_8723B.c:1377:
+		_PHY_SaveADDARegisters8723B(padapter, IQK_BB_REG_92C, pDM_Odm->RFCalibrateInfo.IQK_BB_backup, IQK_BB_REG_NUM);

WARNING: please, no space before tabs
#1385: FILE: ./hal/HalPhyRf_8723B.c:1385:
+/* ^IPath_SEL_BB = PHY_QueryBBReg(pDM_Odm->Adapter, 0x948, bMaskDWord); */$

WARNING: please, no space before tabs
#1386: FILE: ./hal/HalPhyRf_8723B.c:1386:
+/* ^IPath_SEL_RF = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, 0xfffff); */$

CHECK: line length of 104 exceeds 100 columns
#1389: FILE: ./hal/HalPhyRf_8723B.c:1389:
+	_PHY_MACSettingCalibration8723B(padapter, IQK_MAC_REG, pDM_Odm->RFCalibrateInfo.IQK_MAC_backup);

CHECK: Please don't use multiple blank lines
#1398: FILE: ./hal/HalPhyRf_8723B.c:1398:
+
+

WARNING: please, no space before tabs
#1399: FILE: ./hal/HalPhyRf_8723B.c:1399:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_XAB_RFInterfaceSW, BIT10, 0x01); */$

WARNING: please, no space before tabs
#1400: FILE: ./hal/HalPhyRf_8723B.c:1400:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_XAB_RFInterfaceSW, BIT26, 0x01); */$

WARNING: please, no space before tabs
#1401: FILE: ./hal/HalPhyRf_8723B.c:1401:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_XA_RFInterfaceOE, BIT10, 0x00); */$

WARNING: please, no space before tabs
#1402: FILE: ./hal/HalPhyRf_8723B.c:1402:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, rFPGA0_XB_RFInterfaceOE, BIT10, 0x00); */$

CHECK: Please don't use multiple blank lines
#1404: FILE: ./hal/HalPhyRf_8723B.c:1404:
+
+

WARNING: please, no space before tabs
#1418: FILE: ./hal/HalPhyRf_8723B.c:1418:
+/* ^I^Iif (PathAOK == 0x03) { */$

CHECK: line length of 135 exceeds 100 columns
#1422: FILE: ./hal/HalPhyRf_8723B.c:1422:
+			pDM_Odm->RFCalibrateInfo.TxLOK[RF_PATH_A] = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_A, 0x8, bRFRegOffsetMask);

CHECK: Avoid CamelCase: <TxLOK>
#1422: FILE: ./hal/HalPhyRf_8723B.c:1422:
+			pDM_Odm->RFCalibrateInfo.TxLOK[RF_PATH_A] = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_A, 0x8, bRFRegOffsetMask);

CHECK: line length of 132 exceeds 100 columns
#1424: FILE: ./hal/HalPhyRf_8723B.c:1424:
+				result[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1424: FILE: ./hal/HalPhyRf_8723B.c:1424:
+				result[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                    ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1424: FILE: ./hal/HalPhyRf_8723B.c:1424:
+				result[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                               ^

CHECK: line length of 131 exceeds 100 columns
#1425: FILE: ./hal/HalPhyRf_8723B.c:1425:
+				result[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1425: FILE: ./hal/HalPhyRf_8723B.c:1425:
+				result[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                   ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1425: FILE: ./hal/HalPhyRf_8723B.c:1425:
+				result[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                              ^

WARNING: suspect code indent for conditional statements (16, 32)
#1433: FILE: ./hal/HalPhyRf_8723B.c:1433:
+		if (PathAOK == 0x03) {
[...]
+				result[t][2] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;

CHECK: line length of 135 exceeds 100 columns
#1434: FILE: ./hal/HalPhyRf_8723B.c:1434:
+/* 				result[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16; */

WARNING: please, no space before tabs
#1434: FILE: ./hal/HalPhyRf_8723B.c:1434:
+/* ^I^I^I^Iresult[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16; */$

CHECK: line length of 134 exceeds 100 columns
#1435: FILE: ./hal/HalPhyRf_8723B.c:1435:
+/* 				result[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16; */

WARNING: please, no space before tabs
#1435: FILE: ./hal/HalPhyRf_8723B.c:1435:
+/* ^I^I^I^Iresult[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16; */$

CHECK: line length of 134 exceeds 100 columns
#1436: FILE: ./hal/HalPhyRf_8723B.c:1436:
+				result[t][2] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1436: FILE: ./hal/HalPhyRf_8723B.c:1436:
+				result[t][2] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                      ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1436: FILE: ./hal/HalPhyRf_8723B.c:1436:
+				result[t][2] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                                 ^

CHECK: line length of 133 exceeds 100 columns
#1437: FILE: ./hal/HalPhyRf_8723B.c:1437:
+				result[t][3] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1437: FILE: ./hal/HalPhyRf_8723B.c:1437:
+				result[t][3] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                     ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1437: FILE: ./hal/HalPhyRf_8723B.c:1437:
+				result[t][3] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                                ^

WARNING: Comparisons should place the constant on the right side of the test
#1442: FILE: ./hal/HalPhyRf_8723B.c:1442:
+	if (0x00 == PathAOK) {

WARNING: braces {} are not necessary for single statement blocks
#1442: FILE: ./hal/HalPhyRf_8723B.c:1442:
+	if (0x00 == PathAOK) {
+	}

CHECK: Blank lines aren't necessary after an open brace '{'
#1447: FILE: ./hal/HalPhyRf_8723B.c:1447:
+	if (is2T) {
+

CHECK: line length of 143 exceeds 100 columns
#1454: FILE: ./hal/HalPhyRf_8723B.c:1454:
+				pDM_Odm->RFCalibrateInfo.TxLOK[RF_PATH_B] = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_B, 0x8, bRFRegOffsetMask);

CHECK: line length of 132 exceeds 100 columns
#1456: FILE: ./hal/HalPhyRf_8723B.c:1456:
+				result[t][4] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1456: FILE: ./hal/HalPhyRf_8723B.c:1456:
+				result[t][4] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                    ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1456: FILE: ./hal/HalPhyRf_8723B.c:1456:
+				result[t][4] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                               ^

CHECK: line length of 131 exceeds 100 columns
#1457: FILE: ./hal/HalPhyRf_8723B.c:1457:
+				result[t][5] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1457: FILE: ./hal/HalPhyRf_8723B.c:1457:
+				result[t][5] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                   ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1457: FILE: ./hal/HalPhyRf_8723B.c:1457:
+				result[t][5] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                              ^

CHECK: line length of 135 exceeds 100 columns
#1466: FILE: ./hal/HalPhyRf_8723B.c:1466:
+/* 				result[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16; */

WARNING: please, no space before tabs
#1466: FILE: ./hal/HalPhyRf_8723B.c:1466:
+/* ^I^I^I^Iresult[t][0] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_Before_IQK_A, bMaskDWord)&0x3FF0000)>>16; */$

CHECK: line length of 134 exceeds 100 columns
#1467: FILE: ./hal/HalPhyRf_8723B.c:1467:
+/* 				result[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16; */

WARNING: please, no space before tabs
#1467: FILE: ./hal/HalPhyRf_8723B.c:1467:
+/* ^I^I^I^Iresult[t][1] = (PHY_QueryBBReg(pDM_Odm->Adapter, rTx_Power_After_IQK_A, bMaskDWord)&0x3FF0000)>>16; */$

CHECK: line length of 134 exceeds 100 columns
#1468: FILE: ./hal/HalPhyRf_8723B.c:1468:
+				result[t][6] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1468: FILE: ./hal/HalPhyRf_8723B.c:1468:
+				result[t][6] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                      ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1468: FILE: ./hal/HalPhyRf_8723B.c:1468:
+				result[t][6] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_Before_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                                 ^

CHECK: line length of 133 exceeds 100 columns
#1469: FILE: ./hal/HalPhyRf_8723B.c:1469:
+				result[t][7] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1469: FILE: ./hal/HalPhyRf_8723B.c:1469:
+				result[t][7] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                     ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1469: FILE: ./hal/HalPhyRf_8723B.c:1469:
+				result[t][7] = (PHY_QueryBBReg(pDM_Odm->Adapter, rRx_Power_After_IQK_A_2, bMaskDWord)&0x3FF0000)>>16;
 				                                                                                                ^

CHECK: line length of 122 exceeds 100 columns
#1482: FILE: ./hal/HalPhyRf_8723B.c:1482:
+		_PHY_ReloadADDARegisters8723B(padapter, ADDA_REG, pDM_Odm->RFCalibrateInfo.ADDA_backup, IQK_ADDA_REG_NUM);

CHECK: line length of 109 exceeds 100 columns
#1485: FILE: ./hal/HalPhyRf_8723B.c:1485:
+		_PHY_ReloadMACRegisters8723B(padapter, IQK_MAC_REG, pDM_Odm->RFCalibrateInfo.IQK_MAC_backup);

CHECK: line length of 128 exceeds 100 columns
#1487: FILE: ./hal/HalPhyRf_8723B.c:1487:
+		_PHY_ReloadADDARegisters8723B(padapter, IQK_BB_REG_92C, pDM_Odm->RFCalibrateInfo.IQK_BB_backup, IQK_BB_REG_NUM);

WARNING: please, no space before tabs
#1490: FILE: ./hal/HalPhyRf_8723B.c:1490:
+/* ^I^IPHY_SetBBReg(pDM_Odm->Adapter, 0x948, bMaskDWord, Path_SEL_BB); */$

WARNING: please, no space before tabs
#1491: FILE: ./hal/HalPhyRf_8723B.c:1491:
+/* ^I^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, 0xfffff, Path_SEL_RF); */$

CHECK: Blank lines aren't necessary before a close brace '}'
#1506: FILE: ./hal/HalPhyRf_8723B.c:1506:
+
+	}

CHECK: Blank lines aren't necessary before a close brace '}'
#1508: FILE: ./hal/HalPhyRf_8723B.c:1508:
+
+}

CHECK: Please don't use multiple blank lines
#1510: FILE: ./hal/HalPhyRf_8723B.c:1510:
+
+

CHECK: Avoid CamelCase: <phy_LCCalibrate_8723B>
#1511: FILE: ./hal/HalPhyRf_8723B.c:1511:
+static void phy_LCCalibrate_8723B(struct dm_odm_t *pDM_Odm, bool is2T)

CHECK: Avoid CamelCase: <tmpReg>
#1513: FILE: ./hal/HalPhyRf_8723B.c:1513:
+	u8 tmpReg;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1520: FILE: ./hal/HalPhyRf_8723B.c:1520:
+	if ((tmpReg&0x70) != 0)			/* Deal with contisuous TX case */
 	           ^

CHECK: line length of 103 exceeds 100 columns
#1521: FILE: ./hal/HalPhyRf_8723B.c:1521:
+		rtw_write8(pDM_Odm->Adapter, 0xd03, tmpReg&0x8F);	/* disable all continuous TX */

CHECK: spaces preferred around that '&' (ctx:VxV)
#1521: FILE: ./hal/HalPhyRf_8723B.c:1521:
+		rtw_write8(pDM_Odm->Adapter, 0xd03, tmpReg&0x8F);	/* disable all continuous TX */
 		                                          ^

CHECK: line length of 103 exceeds 100 columns
#1523: FILE: ./hal/HalPhyRf_8723B.c:1523:
+		rtw_write8(pDM_Odm->Adapter, REG_TXPAUSE, 0xFF);		/*  block all queues */

CHECK: spaces preferred around that '&' (ctx:VxV)
#1525: FILE: ./hal/HalPhyRf_8723B.c:1525:
+	if ((tmpReg&0x70) != 0) {
 	           ^

CHECK: Avoid CamelCase: <bMask12Bits>
#1528: FILE: ./hal/HalPhyRf_8723B.c:1528:
+		RF_Amode = PHY_QueryRFReg(padapter, RF_PATH_A, RF_AC, bMask12Bits);

CHECK: line length of 106 exceeds 100 columns
#1536: FILE: ./hal/HalPhyRf_8723B.c:1536:
+		PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_AC, bMask12Bits, (RF_Amode&0x8FFFF)|0x10000);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1536: FILE: ./hal/HalPhyRf_8723B.c:1536:
+		PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_AC, bMask12Bits, (RF_Amode&0x8FFFF)|0x10000);
 		                                                                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1536: FILE: ./hal/HalPhyRf_8723B.c:1536:
+		PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_AC, bMask12Bits, (RF_Amode&0x8FFFF)|0x10000);
 		                                                                                ^

CHECK: line length of 114 exceeds 100 columns
#1540: FILE: ./hal/HalPhyRf_8723B.c:1540:
+			PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_B, RF_AC, bMask12Bits, (RF_Bmode&0x8FFFF)|0x10000);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1540: FILE: ./hal/HalPhyRf_8723B.c:1540:
+			PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_B, RF_AC, bMask12Bits, (RF_Bmode&0x8FFFF)|0x10000);
 			                                                                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1540: FILE: ./hal/HalPhyRf_8723B.c:1540:
+			PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_B, RF_AC, bMask12Bits, (RF_Bmode&0x8FFFF)|0x10000);
 			                                                                                ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1548: FILE: ./hal/HalPhyRf_8723B.c:1548:
+	PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_CHNLBW, bMask12Bits, LC_Cal|0x08000);
 	                                                                        ^

WARNING: braces {} are not necessary for single statement blocks
#1555: FILE: ./hal/HalPhyRf_8723B.c:1555:
+	if (pDM_Odm->SupportInterface == ODM_ITRF_SDIO && pDM_Odm->PackageType >= 0x2) {
+		PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_CHNLBW, bMask12Bits, LC_Cal);
+	}

CHECK: spaces preferred around that '&' (ctx:VxV)
#1560: FILE: ./hal/HalPhyRf_8723B.c:1560:
+	if ((tmpReg&0x70) != 0) { /* Deal with contisuous TX case */
 	           ^

CHECK: Unbalanced braces around else statement
#1568: FILE: ./hal/HalPhyRf_8723B.c:1568:
+	} else /*  Deal with Packet TX case */

CHECK: Lines should not end with a '('
#1574: FILE: ./hal/HalPhyRf_8723B.c:1574:
+void PHY_IQCalibrate_8723B(

CHECK: Avoid CamelCase: <bReCovery>
#1576: FILE: ./hal/HalPhyRf_8723B.c:1576:
+	bool bReCovery,

CHECK: Avoid CamelCase: <bRestore>
#1577: FILE: ./hal/HalPhyRf_8723B.c:1577:
+	bool bRestore,

CHECK: Avoid CamelCase: <Is2ant>
#1578: FILE: ./hal/HalPhyRf_8723B.c:1578:
+	bool Is2ant,	/* false:1ant, true:2-ant */

WARNING: Missing a blank line after declarations
#1579: FILE: ./hal/HalPhyRf_8723B.c:1579:
+	bool Is2ant,	/* false:1ant, true:2-ant */
+	u8 RF_Path	/* 0:S1, 1:S0 */

CHECK: Avoid CamelCase: <bPathAOK>
#1588: FILE: ./hal/HalPhyRf_8723B.c:1588:
+	bool bPathAOK, bPathBOK;

CHECK: Avoid CamelCase: <bPathBOK>
#1588: FILE: ./hal/HalPhyRf_8723B.c:1588:
+	bool bPathAOK, bPathBOK;

CHECK: Avoid CamelCase: <RegE94>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegE9C>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegEA4>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegEB4>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegEBC>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegEC4>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <RegTmp>
#1589: FILE: ./hal/HalPhyRf_8723B.c:1589:
+	s32 RegE94, RegE9C, RegEA4, RegEB4, RegEBC, RegEC4, RegTmp = 0;

CHECK: Avoid CamelCase: <bSingleTone>
#1591: FILE: ./hal/HalPhyRf_8723B.c:1591:
+	bool bSingleTone = false, bCarrierSuppression = false;

CHECK: Avoid CamelCase: <bCarrierSuppression>
#1591: FILE: ./hal/HalPhyRf_8723B.c:1591:
+	bool bSingleTone = false, bCarrierSuppression = false;

CHECK: Avoid CamelCase: <rOFDM0_AGCRSSITable>
#1596: FILE: ./hal/HalPhyRf_8723B.c:1596:
+		rOFDM0_AGCRSSITable,

WARNING: please, no space before tabs
#1603: FILE: ./hal/HalPhyRf_8723B.c:1603:
+/* ^Iu32 ^I^IPath_SEL_BB = 0; */$

WARNING: please, no space before tabs
#1604: FILE: ./hal/HalPhyRf_8723B.c:1604:
+^Iu32 ^I^IGNT_BT_default;$

CHECK: Avoid CamelCase: <bIQKInProgress>
#1616: FILE: ./hal/HalPhyRf_8723B.c:1616:
+	if (pDM_Odm->RFCalibrateInfo.bIQKInProgress)

CHECK: Please don't use multiple blank lines
#1619: FILE: ./hal/HalPhyRf_8723B.c:1619:
+
+

CHECK: line length of 120 exceeds 100 columns
#1627: FILE: ./hal/HalPhyRf_8723B.c:1627:
+		path = (PHY_QueryBBReg(pDM_Odm->Adapter, rS0S1_PathSwitch, bMaskByte0) == 0x00) ? RF_PATH_A : RF_PATH_B;

CHECK: Avoid CamelCase: <rS0S1_PathSwitch>
#1627: FILE: ./hal/HalPhyRf_8723B.c:1627:
+		path = (PHY_QueryBBReg(pDM_Odm->Adapter, rS0S1_PathSwitch, bMaskByte0) == 0x00) ? RF_PATH_A : RF_PATH_B;

CHECK: Unnecessary parentheses around 'offset == 0'
#1633: FILE: ./hal/HalPhyRf_8723B.c:1633:
+			if ((offset == 0) || (data == 0)) {

CHECK: Unnecessary parentheses around 'data == 0'
#1633: FILE: ./hal/HalPhyRf_8723B.c:1633:
+			if ((offset == 0) || (data == 0)) {

CHECK: Unnecessary parentheses around 'offset == 0'
#1644: FILE: ./hal/HalPhyRf_8723B.c:1644:
+			if ((offset == 0) || (data == 0)) {

CHECK: Unnecessary parentheses around 'data == 0'
#1644: FILE: ./hal/HalPhyRf_8723B.c:1644:
+			if ((offset == 0) || (data == 0)) {

CHECK: line length of 140 exceeds 100 columns
#1654: FILE: ./hal/HalPhyRf_8723B.c:1654:
+			PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, RF_TXM_IDAC, bRFRegOffsetMask, pDM_Odm->RFCalibrateInfo.TxLOK[RF_PATH_A]);

CHECK: line length of 140 exceeds 100 columns
#1655: FILE: ./hal/HalPhyRf_8723B.c:1655:
+			PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_B, RF_TXM_IDAC, bRFRegOffsetMask, pDM_Odm->RFCalibrateInfo.TxLOK[RF_PATH_B]);

CHECK: line length of 123 exceeds 100 columns
#1663: FILE: ./hal/HalPhyRf_8723B.c:1663:
+		_PHY_ReloadADDARegisters8723B(padapter, IQK_BB_REG_92C, pDM_Odm->RFCalibrateInfo.IQK_BB_backup_recover, 9);

WARNING: please, no space before tabs
#1670: FILE: ./hal/HalPhyRf_8723B.c:1670:
+/* ^IPath_SEL_BB = PHY_QueryBBReg(pDM_Odm->Adapter, 0x948, bMaskDWord); */$

WARNING: please, no space before tabs
#1671: FILE: ./hal/HalPhyRf_8723B.c:1671:
+/* ^IPath_SEL_RF = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, 0xfffff); */$

WARNING: please, no space before tabs
#1674: FILE: ./hal/HalPhyRf_8723B.c:1674:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, 0x764, BIT12, 0x0); */$

WARNING: please, no space before tabs
#1675: FILE: ./hal/HalPhyRf_8723B.c:1675:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, 0x764, BIT11, 0x1); */$

CHECK: Please don't use multiple blank lines
#1677: FILE: ./hal/HalPhyRf_8723B.c:1677:
+
+

CHECK: Please don't use multiple blank lines
#1692: FILE: ./hal/HalPhyRf_8723B.c:1692:
+
+

CHECK: multiple assignments should be avoided
#1737: FILE: ./hal/HalPhyRf_8723B.c:1737:
+		pDM_Odm->RFCalibrateInfo.RegE94 = RegE94 = result[final_candidate][0];

CHECK: multiple assignments should be avoided
#1738: FILE: ./hal/HalPhyRf_8723B.c:1738:
+		pDM_Odm->RFCalibrateInfo.RegE9C = RegE9C = result[final_candidate][1];

CHECK: multiple assignments should be avoided
#1740: FILE: ./hal/HalPhyRf_8723B.c:1740:
+		pDM_Odm->RFCalibrateInfo.RegEB4 = RegEB4 = result[final_candidate][4];

CHECK: multiple assignments should be avoided
#1741: FILE: ./hal/HalPhyRf_8723B.c:1741:
+		pDM_Odm->RFCalibrateInfo.RegEBC = RegEBC = result[final_candidate][5];

CHECK: multiple assignments should be avoided
#1743: FILE: ./hal/HalPhyRf_8723B.c:1743:
+		bPathAOK = bPathBOK = true;

CHECK: line length of 117 exceeds 100 columns
#1745: FILE: ./hal/HalPhyRf_8723B.c:1745:
+		pDM_Odm->RFCalibrateInfo.RegE94 = pDM_Odm->RFCalibrateInfo.RegEB4 = 0x100;	/* X default value */

CHECK: multiple assignments should be avoided
#1745: FILE: ./hal/HalPhyRf_8723B.c:1745:
+		pDM_Odm->RFCalibrateInfo.RegE94 = pDM_Odm->RFCalibrateInfo.RegEB4 = 0x100;	/* X default value */

CHECK: line length of 125 exceeds 100 columns
#1746: FILE: ./hal/HalPhyRf_8723B.c:1746:
+		pDM_Odm->RFCalibrateInfo.RegE9C = pDM_Odm->RFCalibrateInfo.RegEBC = 0x0;		/* Y default value */

CHECK: multiple assignments should be avoided
#1746: FILE: ./hal/HalPhyRf_8723B.c:1746:
+		pDM_Odm->RFCalibrateInfo.RegE9C = pDM_Odm->RFCalibrateInfo.RegEBC = 0x0;		/* Y default value */

CHECK: line length of 113 exceeds 100 columns
#1751: FILE: ./hal/HalPhyRf_8723B.c:1751:
+			_PHY_PathAFillIQKMatrix8723B(padapter, bPathAOK, result, final_candidate, (RegEA4 == 0));

CHECK: line length of 113 exceeds 100 columns
#1755: FILE: ./hal/HalPhyRf_8723B.c:1755:
+			_PHY_PathBFillIQKMatrix8723B(padapter, bPathBOK, result, final_candidate, (RegEC4 == 0));

CHECK: line length of 114 exceeds 100 columns
#1762: FILE: ./hal/HalPhyRf_8723B.c:1762:
+			pDM_Odm->RFCalibrateInfo.iqk_matrix_regs_setting_value[0][i] = result[final_candidate][i];

CHECK: line length of 113 exceeds 100 columns
#1765: FILE: ./hal/HalPhyRf_8723B.c:1765:
+	_PHY_SaveADDARegisters8723B(padapter, IQK_BB_REG_92C, pDM_Odm->RFCalibrateInfo.IQK_BB_backup_recover, 9);

WARNING: please, no space before tabs
#1770: FILE: ./hal/HalPhyRf_8723B.c:1770:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, 0x948, bMaskDWord, Path_SEL_BB); */$

WARNING: please, no space before tabs
#1771: FILE: ./hal/HalPhyRf_8723B.c:1771:
+/* ^IPHY_SetRFReg(pDM_Odm->Adapter, RF_PATH_A, 0xb0, 0xfffff, Path_SEL_RF); */$

WARNING: please, no space before tabs
#1782: FILE: ./hal/HalPhyRf_8723B.c:1782:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, 0x764, BIT12, 0x0); */$

WARNING: please, no space before tabs
#1783: FILE: ./hal/HalPhyRf_8723B.c:1783:
+/* ^IPHY_SetBBReg(pDM_Odm->Adapter, 0x764, BIT11, 0x0); */$

CHECK: Please don't use multiple blank lines
#1795: FILE: ./hal/HalPhyRf_8723B.c:1795:
+
+

WARNING: please, no space before tabs
#1799: FILE: ./hal/HalPhyRf_8723B.c:1799:
+^Iu32 ^I^Itimeout = 2000, timecount = 0;$

CHECK: Unnecessary parentheses around pDM_Odm->pbScanInProcess
#1808: FILE: ./hal/HalPhyRf_8723B.c:1808:
+	while (*(pDM_Odm->pbScanInProcess) && timecount < timeout) {

CHECK: Avoid CamelCase: <pbScanInProcess>
#1808: FILE: ./hal/HalPhyRf_8723B.c:1808:
+	while (*(pDM_Odm->pbScanInProcess) && timecount < timeout) {

CHECK: Avoid CamelCase: <bLCKInProgress>
#1813: FILE: ./hal/HalPhyRf_8723B.c:1813:
+	pDM_Odm->RFCalibrateInfo.bLCKInProgress = true;

CHECK: Please don't use multiple blank lines
#1815: FILE: ./hal/HalPhyRf_8723B.c:1815:
+
+

CHECK: Please don't use multiple blank lines
#1818: FILE: ./hal/HalPhyRf_8723B.c:1818:
+
+

total: 0 errors, 73 warnings, 484 checks, 1820 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf_8723B.c has style problems, please review.
----------------------
./hal/HalPhyRf_8723B.h
----------------------
CHECK: Please don't use multiple blank lines
#18: FILE: ./hal/HalPhyRf_8723B.h:18:
+
+

CHECK: Lines should not end with a '('
#21: FILE: ./hal/HalPhyRf_8723B.h:21:
+void DoIQK_8723B(

CHECK: Lines should not end with a '('
#28: FILE: ./hal/HalPhyRf_8723B.h:28:
+void ODM_TxPwrTrackSetPwr_8723B(

CHECK: Lines should not end with a '('
#36: FILE: ./hal/HalPhyRf_8723B.h:36:
+void PHY_IQCalibrate_8723B(

CHECK: Please don't use multiple blank lines
#56: FILE: ./hal/HalPhyRf_8723B.h:56:
+
+

CHECK: Lines should not end with a '('
#57: FILE: ./hal/HalPhyRf_8723B.h:57:
+void _PHY_SaveADDARegisters_8723B(

CHECK: Avoid CamelCase: <_PHY_SaveADDARegisters_8723B>
#57: FILE: ./hal/HalPhyRf_8723B.h:57:
+void _PHY_SaveADDARegisters_8723B(

CHECK: Lines should not end with a '('
#64: FILE: ./hal/HalPhyRf_8723B.h:64:
+void _PHY_PathADDAOn_8723B(

CHECK: Avoid CamelCase: <_PHY_PathADDAOn_8723B>
#64: FILE: ./hal/HalPhyRf_8723B.h:64:
+void _PHY_PathADDAOn_8723B(

CHECK: Avoid CamelCase: <isPathAOn>
#67: FILE: ./hal/HalPhyRf_8723B.h:67:
+	bool isPathAOn,

CHECK: Lines should not end with a '('
#71: FILE: ./hal/HalPhyRf_8723B.h:71:
+void _PHY_MACSettingCalibration_8723B(

CHECK: Avoid CamelCase: <_PHY_MACSettingCalibration_8723B>
#71: FILE: ./hal/HalPhyRf_8723B.h:71:
+void _PHY_MACSettingCalibration_8723B(

total: 0 errors, 0 warnings, 12 checks, 75 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf_8723B.h has style problems, please review.
----------------------
./hal/HalPhyRf_8723B.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf_8723B.o has style problems, please review.
----------------
./hal/HalPhyRf.c
----------------
CHECK: Avoid CamelCase: <ConfigureTxpowerTrack>
#11: FILE: ./hal/HalPhyRf.c:11:
+void ConfigureTxpowerTrack(struct dm_odm_t *pDM_Odm, struct txpwrtrack_cfg *pConfig)

CHECK: Avoid CamelCase: <BbSwingIdxCckBase>
#29: FILE: ./hal/HalPhyRf.c:29:
+	pDM_Odm->BbSwingIdxCckBase = pDM_Odm->DefaultCckIndex;

CHECK: Avoid CamelCase: <BbSwingIdxOfdmBase>
#34: FILE: ./hal/HalPhyRf.c:34:
+		pDM_Odm->BbSwingIdxOfdmBase[p] = pDM_Odm->DefaultOfdmIndex;

CHECK: Avoid CamelCase: <BbSwingIdxOfdm>
#35: FILE: ./hal/HalPhyRf.c:35:
+		pDM_Odm->BbSwingIdxOfdm[p] = pDM_Odm->DefaultOfdmIndex;

CHECK: Avoid CamelCase: <PowerIndexOffset>
#38: FILE: ./hal/HalPhyRf.c:38:
+		pDM_Odm->RFCalibrateInfo.PowerIndexOffset[p] = 0;

CHECK: Avoid CamelCase: <DeltaPowerIndex>
#39: FILE: ./hal/HalPhyRf.c:39:
+		pDM_Odm->RFCalibrateInfo.DeltaPowerIndex[p] = 0;

CHECK: Avoid CamelCase: <DeltaPowerIndexLast>
#40: FILE: ./hal/HalPhyRf.c:40:
+		pDM_Odm->RFCalibrateInfo.DeltaPowerIndexLast[p] = 0;

CHECK: Avoid CamelCase: <Modify_TxAGC_Flag_PathB>
#51: FILE: ./hal/HalPhyRf.c:51:
+	pDM_Odm->Modify_TxAGC_Flag_PathB = false;

CHECK: Avoid CamelCase: <EEPROMThermalMeter>
#53: FILE: ./hal/HalPhyRf.c:53:
+	pDM_Odm->RFCalibrateInfo.ThermalValue = pHalData->EEPROMThermalMeter;

CHECK: Avoid CamelCase: <ThermalValue_IQK>
#54: FILE: ./hal/HalPhyRf.c:54:
+	pDM_Odm->RFCalibrateInfo.ThermalValue_IQK = pHalData->EEPROMThermalMeter;

CHECK: Avoid CamelCase: <ThermalValue_LCK>
#55: FILE: ./hal/HalPhyRf.c:55:
+	pDM_Odm->RFCalibrateInfo.ThermalValue_LCK = pHalData->EEPROMThermalMeter;

CHECK: Blank lines aren't necessary after an open brace '{'
#60: FILE: ./hal/HalPhyRf.c:60:
+{
+

CHECK: Avoid CamelCase: <ThermalValue_AVG_count>
#65: FILE: ./hal/HalPhyRf.c:65:
+	u8 ThermalValue_AVG_count = 0;

CHECK: Avoid CamelCase: <ThermalValue_AVG>
#66: FILE: ./hal/HalPhyRf.c:66:
+	u32 ThermalValue_AVG = 0;

CHECK: line length of 108 exceeds 100 columns
#68: FILE: ./hal/HalPhyRf.c:68:
+	u8 OFDM_min_index = 0;  /*  OFDM BB Swing should be less than +3.0dB, which is required by Arthur */

CHECK: Avoid CamelCase: <Indexforchannel>
#69: FILE: ./hal/HalPhyRf.c:69:
+	u8 Indexforchannel = 0; /*  GetRightChnlPlaceforIQK(pHalData->CurrentChannel) */

CHECK: Please don't use multiple blank lines
#73: FILE: ./hal/HalPhyRf.c:73:
+
+

CHECK: Avoid CamelCase: <deltaSwingTableIdx_TUP_A>
#75: FILE: ./hal/HalPhyRf.c:75:
+	u8 *deltaSwingTableIdx_TUP_A;

CHECK: Avoid CamelCase: <deltaSwingTableIdx_TDOWN_A>
#76: FILE: ./hal/HalPhyRf.c:76:
+	u8 *deltaSwingTableIdx_TDOWN_A;

CHECK: Avoid CamelCase: <deltaSwingTableIdx_TUP_B>
#77: FILE: ./hal/HalPhyRf.c:77:
+	u8 *deltaSwingTableIdx_TUP_B;

CHECK: Avoid CamelCase: <deltaSwingTableIdx_TDOWN_B>
#78: FILE: ./hal/HalPhyRf.c:78:
+	u8 *deltaSwingTableIdx_TDOWN_B;

CHECK: Lines should not end with a '('
#84: FILE: ./hal/HalPhyRf.c:84:
+	(*c.GetDeltaSwingTable)(

CHECK: Avoid CamelCase: <TXPowerTrackingCallbackCnt>
#93: FILE: ./hal/HalPhyRf.c:93:
+	pDM_Odm->RFCalibrateInfo.TXPowerTrackingCallbackCnt++;

CHECK: Avoid CamelCase: <bTXPowerTrackingInit>
#94: FILE: ./hal/HalPhyRf.c:94:
+	pDM_Odm->RFCalibrateInfo.bTXPowerTrackingInit = true;

CHECK: line length of 133 exceeds 100 columns
#96: FILE: ./hal/HalPhyRf.c:96:
+	ThermalValue = (u8)PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH_A, c.ThermalRegAddr, 0xfc00);	/* 0x42: RF Reg[15:10] 88E */

CHECK: Lines should not end with a '('
#97: FILE: ./hal/HalPhyRf.c:97:
+	if (

CHECK: line length of 114 exceeds 100 columns
#108: FILE: ./hal/HalPhyRf.c:108:
+	pDM_Odm->RFCalibrateInfo.ThermalValue_AVG[pDM_Odm->RFCalibrateInfo.ThermalValue_AVG_index] = ThermalValue;

CHECK: Avoid CamelCase: <ThermalValue_AVG_index>
#108: FILE: ./hal/HalPhyRf.c:108:
+	pDM_Odm->RFCalibrateInfo.ThermalValue_AVG[pDM_Odm->RFCalibrateInfo.ThermalValue_AVG_index] = ThermalValue;

CHECK: line length of 128 exceeds 100 columns
#110: FILE: ./hal/HalPhyRf.c:110:
+	if (pDM_Odm->RFCalibrateInfo.ThermalValue_AVG_index == c.AverageThermalNum)   /* Average times =  c.AverageThermalNum */

WARNING: braces {} are not necessary for single statement blocks
#121: FILE: ./hal/HalPhyRf.c:121:
+	if (ThermalValue_AVG_count) {
+		ThermalValue = (u8)(ThermalValue_AVG / ThermalValue_AVG_count);
+	}

CHECK: Lines should not end with a '('
#200: FILE: ./hal/HalPhyRf.c:200:
+			if (

CHECK: line length of 233 exceeds 100 columns
#206: FILE: ./hal/HalPhyRf.c:206:
+				pDM_Odm->RFCalibrateInfo.PowerIndexOffset[p] = pDM_Odm->RFCalibrateInfo.DeltaPowerIndex[p] - pDM_Odm->RFCalibrateInfo.DeltaPowerIndexLast[p];      /*  Power Index Diff between 2 times Power Tracking */

CHECK: spaces preferred around that '-' (ctx:VxV)
#223: FILE: ./hal/HalPhyRf.c:223:
+			if (pDM_Odm->RFCalibrateInfo.OFDM_index[p] > c.SwingTableSize_OFDM-1)
 			                                                                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#224: FILE: ./hal/HalPhyRf.c:224:
+				pDM_Odm->RFCalibrateInfo.OFDM_index[p] = c.SwingTableSize_OFDM-1;
 				                                                              ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#228: FILE: ./hal/HalPhyRf.c:228:
+		if (pDM_Odm->RFCalibrateInfo.CCK_index > c.SwingTableSize_CCK-1)
 		                                                             ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#229: FILE: ./hal/HalPhyRf.c:229:
+			pDM_Odm->RFCalibrateInfo.CCK_index = c.SwingTableSize_CCK-1;
 			                                                         ^

WARNING: suspect code indent for conditional statements (8, 24)
#232: FILE: ./hal/HalPhyRf.c:232:
+	} else {
+			for (p = RF_PATH_A; p < c.RfPathCount; p++)

WARNING: braces {} are not necessary for single statement blocks
#238: FILE: ./hal/HalPhyRf.c:238:
+	for (p = RF_PATH_A; p < c.RfPathCount; p++) {
+	}

CHECK: Lines should not end with a '('
#241: FILE: ./hal/HalPhyRf.c:241:
+	if (

CHECK: line length of 129 exceeds 100 columns
#248: FILE: ./hal/HalPhyRf.c:248:
+		pDM_Odm->RFCalibrateInfo.bTxPowerChanged = true; /*  Always true after Tx Power is adjusted by power tracking. */

CHECK: Avoid CamelCase: <bTxPowerChanged>
#248: FILE: ./hal/HalPhyRf.c:248:
+		pDM_Odm->RFCalibrateInfo.bTxPowerChanged = true; /*  Always true after Tx Power is adjusted by power tracking. */

WARNING: suspect code indent for conditional statements (24, 40)
#256: FILE: ./hal/HalPhyRf.c:256:
+			for (p = RF_PATH_A; p < c.RfPathCount; p++)
+					(*c.ODM_TxPwrTrackSetPwr)(pDM_Odm, MIX_MODE, p, 0);

CHECK: Avoid CamelCase: <TXPowercount>
#272: FILE: ./hal/HalPhyRf.c:272:
+	pDM_Odm->RFCalibrateInfo.TXPowercount = 0;

total: 0 errors, 4 warnings, 39 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf.c has style problems, please review.
----------------
./hal/HalPhyRf.h
----------------
CHECK: Avoid CamelCase: <FuncSetPwr>
#17: FILE: ./hal/HalPhyRf.h:17:
+typedef void (*FuncSetPwr)(struct dm_odm_t *, enum pwrtrack_method, u8, u8);

CHECK: Avoid CamelCase: <FuncIQK>
#18: FILE: ./hal/HalPhyRf.h:18:
+typedef void (*FuncIQK)(struct dm_odm_t *, u8, u8, u8);

CHECK: Avoid CamelCase: <FuncLCK>
#19: FILE: ./hal/HalPhyRf.h:19:
+typedef void (*FuncLCK)(struct dm_odm_t *);

CHECK: Avoid CamelCase: <FuncSwing>
#20: FILE: ./hal/HalPhyRf.h:20:
+typedef void (*FuncSwing)(struct dm_odm_t *, u8 **, u8 **, u8 **, u8 **);

CHECK: Please don't use multiple blank lines
#37: FILE: ./hal/HalPhyRf.h:37:
+
+

total: 0 errors, 0 warnings, 5 checks, 42 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf.h has style problems, please review.
----------------
./hal/HalPhyRf.o
----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPhyRf.o has style problems, please review.
-------------------
./hal/hal_pwr_seq.c
-------------------
WARNING: Block comments should align the * on each line
#9: FILE: ./hal/hal_pwr_seq.c:9:
+/*
+*

CHECK: Lines should not end with a '['
#24: FILE: ./hal/hal_pwr_seq.c:24:
+struct wlan_pwr_cfg rtl8723B_power_on_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#25: FILE: ./hal/hal_pwr_seq.c:25:
+	RTL8723B_TRANS_CARDEMU_TO_ACT_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#33: FILE: ./hal/hal_pwr_seq.c:33:
+struct wlan_pwr_cfg rtl8723B_radio_off_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#34: FILE: ./hal/hal_pwr_seq.c:34:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#42: FILE: ./hal/hal_pwr_seq.c:42:
+struct wlan_pwr_cfg rtl8723B_card_disable_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#43: FILE: ./hal/hal_pwr_seq.c:43:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: space preferred before that '+' (ctx:VxE)
#44: FILE: ./hal/hal_pwr_seq.c:44:
+	RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#53: FILE: ./hal/hal_pwr_seq.c:53:
+struct wlan_pwr_cfg rtl8723B_card_enable_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#54: FILE: ./hal/hal_pwr_seq.c:54:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: space preferred before that '+' (ctx:VxE)
#55: FILE: ./hal/hal_pwr_seq.c:55:
+	RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#64: FILE: ./hal/hal_pwr_seq.c:64:
+struct wlan_pwr_cfg rtl8723B_suspend_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#65: FILE: ./hal/hal_pwr_seq.c:65:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: space preferred before that '+' (ctx:VxE)
#66: FILE: ./hal/hal_pwr_seq.c:66:
+	RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#75: FILE: ./hal/hal_pwr_seq.c:75:
+struct wlan_pwr_cfg rtl8723B_resume_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#76: FILE: ./hal/hal_pwr_seq.c:76:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: space preferred before that '+' (ctx:VxE)
#77: FILE: ./hal/hal_pwr_seq.c:77:
+	RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#86: FILE: ./hal/hal_pwr_seq.c:86:
+struct wlan_pwr_cfg rtl8723B_hwpdn_flow[

CHECK: space preferred before that '+' (ctx:VxE)
#87: FILE: ./hal/hal_pwr_seq.c:87:
+	RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+
 	                                   ^

CHECK: space preferred before that '+' (ctx:VxE)
#88: FILE: ./hal/hal_pwr_seq.c:88:
+	RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+
 	                                   ^

CHECK: Lines should not end with a '['
#97: FILE: ./hal/hal_pwr_seq.c:97:
+struct wlan_pwr_cfg rtl8723B_enter_lps_flow[

CHECK: spaces preferred around that '+' (ctx:VxV)
#98: FILE: ./hal/hal_pwr_seq.c:98:
+	RTL8723B_TRANS_ACT_TO_LPS_STEPS+RTL8723B_TRANS_END_STEPS
 	                               ^

CHECK: Lines should not end with a '['
#106: FILE: ./hal/hal_pwr_seq.c:106:
+struct wlan_pwr_cfg rtl8723B_leave_lps_flow[

CHECK: spaces preferred around that '+' (ctx:VxV)
#107: FILE: ./hal/hal_pwr_seq.c:107:
+	RTL8723B_TRANS_LPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS
 	                               ^

CHECK: Lines should not end with a '['
#115: FILE: ./hal/hal_pwr_seq.c:115:
+struct wlan_pwr_cfg rtl8723B_enter_swlps_flow[

CHECK: spaces preferred around that '+' (ctx:VxV)
#116: FILE: ./hal/hal_pwr_seq.c:116:
+	RTL8723B_TRANS_ACT_TO_SWLPS_STEPS+RTL8723B_TRANS_END_STEPS
 	                                 ^

CHECK: Lines should not end with a '['
#124: FILE: ./hal/hal_pwr_seq.c:124:
+struct wlan_pwr_cfg rtl8723B_leave_swlps_flow[

CHECK: spaces preferred around that '+' (ctx:VxV)
#125: FILE: ./hal/hal_pwr_seq.c:125:
+	RTL8723B_TRANS_SWLPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS
 	                                 ^

total: 0 errors, 1 warnings, 27 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_pwr_seq.c has style problems, please review.
--------------------
./hal/HalPwrSeqCmd.c
--------------------
WARNING: Block comments use * on subsequent lines
#8: FILE: ./hal/HalPwrSeqCmd.c:8:
+/*++
+Copyright (c) Realtek Semiconductor Corp. All rights reserved.

WARNING: Block comments use a trailing */ on a separate line
#22: FILE: ./hal/HalPwrSeqCmd.c:22:
+--*/

CHECK: Please don't use multiple blank lines
#26: FILE: ./hal/HalPwrSeqCmd.c:26:
+
+

CHECK: Lines should not end with a '('
#36: FILE: ./hal/HalPwrSeqCmd.c:36:
+u8 HalPwrSeqCmdParsing(

CHECK: Avoid CamelCase: <HalPwrSeqCmdParsing>
#36: FILE: ./hal/HalPwrSeqCmd.c:36:
+u8 HalPwrSeqCmdParsing(

CHECK: Avoid CamelCase: <FabVersion>
#39: FILE: ./hal/HalPwrSeqCmd.c:39:
+	u8 FabVersion,

CHECK: Avoid CamelCase: <InterfaceType>
#40: FILE: ./hal/HalPwrSeqCmd.c:40:
+	u8 InterfaceType,

CHECK: Avoid CamelCase: <PwrSeqCmd>
#41: FILE: ./hal/HalPwrSeqCmd.c:41:
+	struct wlan_pwr_cfg PwrSeqCmd[]

CHECK: Avoid CamelCase: <PwrCfgCmd>
#44: FILE: ./hal/HalPwrSeqCmd.c:44:
+	struct wlan_pwr_cfg PwrCfgCmd;

CHECK: Avoid CamelCase: <bPollingBit>
#45: FILE: ./hal/HalPwrSeqCmd.c:45:
+	u8 bPollingBit = false;

CHECK: Avoid CamelCase: <AryIdx>
#46: FILE: ./hal/HalPwrSeqCmd.c:46:
+	u32 AryIdx = 0;

CHECK: Avoid CamelCase: <pollingCount>
#49: FILE: ./hal/HalPwrSeqCmd.c:49:
+	u32 pollingCount = 0; /*  polling autoload done. */

CHECK: Avoid CamelCase: <maxPollingCnt>
#50: FILE: ./hal/HalPwrSeqCmd.c:50:
+	u32 maxPollingCnt = 5000;

CHECK: Lines should not end with a '('
#56: FILE: ./hal/HalPwrSeqCmd.c:56:
+		if (

CHECK: line length of 149 exceeds 100 columns
#69: FILE: ./hal/HalPwrSeqCmd.c:69:
+				/*  <Roger_Notes> We should deal with interface specific address mapping for some interfaces, e.g., SDIO interface */

CHECK: Avoid CamelCase: <SdioLocalCmd52Read1Byte>
#74: FILE: ./hal/HalPwrSeqCmd.c:74:
+					value = SdioLocalCmd52Read1Byte(padapter, offset);

CHECK: Lines should not end with a '('
#77: FILE: ./hal/HalPwrSeqCmd.c:77:
+					value |= (

CHECK: Avoid CamelCase: <SdioLocalCmd52Write1Byte>
#83: FILE: ./hal/HalPwrSeqCmd.c:83:
+					SdioLocalCmd52Write1Byte(padapter, offset, value);

CHECK: Lines should not end with a '('
#89: FILE: ./hal/HalPwrSeqCmd.c:89:
+					value |= (

CHECK: spaces preferred around that '&' (ctx:ExV)
#91: FILE: ./hal/HalPwrSeqCmd.c:91:
+						&GET_PWR_CFG_MASK(PwrCfgCmd)
 						^

CHECK: spaces preferred around that '&' (ctx:VxV)
#109: FILE: ./hal/HalPwrSeqCmd.c:109:
+					value = value&GET_PWR_CFG_MASK(PwrCfgCmd);
 					             ^

CHECK: Lines should not end with a '('
#110: FILE: ./hal/HalPwrSeqCmd.c:110:
+					if (

CHECK: usleep_range is preferred over udelay; see function description of usleep_range() and udelay().
#116: FILE: ./hal/HalPwrSeqCmd.c:116:
+						udelay(10);

CHECK: spaces preferred around that '*' (ctx:VxV)
#129: FILE: ./hal/HalPwrSeqCmd.c:129:
+					udelay(GET_PWR_CFG_OFFSET(PwrCfgCmd)*1000);
 					                                    ^

total: 0 errors, 2 warnings, 22 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPwrSeqCmd.c has style problems, please review.
--------------------
./hal/HalPwrSeqCmd.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/HalPwrSeqCmd.o has style problems, please review.
-------------------
./hal/hal_pwr_seq.o
-------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_pwr_seq.o has style problems, please review.
----------------
./hal/hal_sdio.c
----------------
CHECK: Avoid CamelCase: <SdioTxOQTMaxFreeSpace>
#15: FILE: ./hal/hal_sdio.c:15:
+	if (pHalData->SdioTxOQTMaxFreeSpace < 8)

CHECK: Lines should not end with a '('
#21: FILE: ./hal/hal_sdio.c:21:
+u8 rtw_hal_sdio_query_tx_freepage(

CHECK: Avoid CamelCase: <RequiredPageNum>
#22: FILE: ./hal/hal_sdio.c:22:
+	struct adapter *padapter, u8 PageIdx, u8 RequiredPageNum

CHECK: line length of 120 exceeds 100 columns
#27: FILE: ./hal/hal_sdio.c:27:
+	if ((pHalData->SdioTxFIFOFreePage[PageIdx]+pHalData->SdioTxFIFOFreePage[PUBLIC_QUEUE_IDX]) >= (RequiredPageNum))

CHECK: spaces preferred around that '+' (ctx:VxV)
#27: FILE: ./hal/hal_sdio.c:27:
+	if ((pHalData->SdioTxFIFOFreePage[PageIdx]+pHalData->SdioTxFIFOFreePage[PUBLIC_QUEUE_IDX]) >= (RequiredPageNum))
 	                                          ^

CHECK: Avoid CamelCase: <SdioTxFIFOFreePage>
#27: FILE: ./hal/hal_sdio.c:27:
+	if ((pHalData->SdioTxFIFOFreePage[PageIdx]+pHalData->SdioTxFIFOFreePage[PUBLIC_QUEUE_IDX]) >= (RequiredPageNum))

CHECK: Avoid CamelCase: <PageIdx>
#27: FILE: ./hal/hal_sdio.c:27:
+	if ((pHalData->SdioTxFIFOFreePage[PageIdx]+pHalData->SdioTxFIFOFreePage[PUBLIC_QUEUE_IDX]) >= (RequiredPageNum))

CHECK: Lines should not end with a '('
#33: FILE: ./hal/hal_sdio.c:33:
+void rtw_hal_sdio_update_tx_freepage(

CHECK: Avoid CamelCase: <DedicatedPgNum>
#38: FILE: ./hal/hal_sdio.c:38:
+	u8 DedicatedPgNum = 0;

CHECK: Avoid CamelCase: <RequiredPublicFreePgNum>
#39: FILE: ./hal/hal_sdio.c:39:
+	u8 RequiredPublicFreePgNum = 0;

CHECK: Lines should not end with a '('
#56: FILE: ./hal/hal_sdio.c:56:
+void rtw_hal_set_sdio_tx_max_length(

CHECK: Avoid CamelCase: <numHQ>
#57: FILE: ./hal/hal_sdio.c:57:
+	struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ

CHECK: Avoid CamelCase: <numNQ>
#57: FILE: ./hal/hal_sdio.c:57:
+	struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ

CHECK: Avoid CamelCase: <numLQ>
#57: FILE: ./hal/hal_sdio.c:57:
+	struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ

CHECK: Avoid CamelCase: <numPubQ>
#57: FILE: ./hal/hal_sdio.c:57:
+	struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ

CHECK: Avoid CamelCase: <lenHQ>
#62: FILE: ./hal/hal_sdio.c:62:
+	u32 lenHQ, lenNQ, lenLQ;

CHECK: Avoid CamelCase: <lenNQ>
#62: FILE: ./hal/hal_sdio.c:62:
+	u32 lenHQ, lenNQ, lenLQ;

CHECK: Avoid CamelCase: <lenLQ>
#62: FILE: ./hal/hal_sdio.c:62:
+	u32 lenHQ, lenNQ, lenLQ;

CHECK: Avoid CamelCase: <deviceId>
#82: FILE: ./hal/hal_sdio.c:82:
+	u32 deviceId, max_len;

CHECK: Please don't use multiple blank lines
#84: FILE: ./hal/hal_sdio.c:84:
+
+

CHECK: Avoid CamelCase: <ffaddr2deviceId>
#85: FILE: ./hal/hal_sdio.c:85:
+	deviceId = ffaddr2deviceId(pdvobjpriv, queue_idx);

total: 0 errors, 0 warnings, 21 checks, 105 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_sdio.c has style problems, please review.
----------------
./hal/hal_sdio.o
----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/hal_sdio.o has style problems, please review.
------------------
./hal/Mp_Precomp.h
------------------
total: 0 errors, 0 warnings, 0 checks, 23 lines checked

./hal/Mp_Precomp.h has no obvious style problems and is ready for submission.
-----------
./hal/odm.c
-----------
CHECK: Avoid CamelCase: <OFDMSwingTable>
#12: FILE: ./hal/odm.c:12:
+u32 OFDMSwingTable[OFDM_TABLE_SIZE] = {

CHECK: Avoid CamelCase: <CCKSwingTable_Ch1_Ch13>
#52: FILE: ./hal/odm.c:52:
+u8 CCKSwingTable_Ch1_Ch13[CCK_TABLE_SIZE][8] = {

CHECK: Avoid CamelCase: <CCKSwingTable_Ch14>
#88: FILE: ./hal/odm.c:88:
+u8 CCKSwingTable_Ch14[CCK_TABLE_SIZE][8] = {

CHECK: Avoid CamelCase: <TxScalingTable_Jaguar>
#242: FILE: ./hal/odm.c:242:
+u32 TxScalingTable_Jaguar[TXSCALE_TABLE_SIZE] = {

CHECK: Avoid CamelCase: <odm_CommonInfoSelfInit>
#284: FILE: ./hal/odm.c:284:
+static void odm_CommonInfoSelfInit(struct dm_odm_t *pDM_Odm)

CHECK: line length of 141 exceeds 100 columns
#286: FILE: ./hal/odm.c:286:
+	pDM_Odm->bCckHighPower = (bool) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(CCK_RPT_FORMAT, pDM_Odm), ODM_BIT(CCK_RPT_FORMAT, pDM_Odm));

CHECK: No space is necessary after a cast
#286: FILE: ./hal/odm.c:286:
+	pDM_Odm->bCckHighPower = (bool) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(CCK_RPT_FORMAT, pDM_Odm), ODM_BIT(CCK_RPT_FORMAT, pDM_Odm));

CHECK: Avoid CamelCase: <bCckHighPower>
#286: FILE: ./hal/odm.c:286:
+	pDM_Odm->bCckHighPower = (bool) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(CCK_RPT_FORMAT, pDM_Odm), ODM_BIT(CCK_RPT_FORMAT, pDM_Odm));

CHECK: line length of 132 exceeds 100 columns
#287: FILE: ./hal/odm.c:287:
+	pDM_Odm->RFPathRxEnable = (u8) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(BB_RX_PATH, pDM_Odm), ODM_BIT(BB_RX_PATH, pDM_Odm));

CHECK: No space is necessary after a cast
#287: FILE: ./hal/odm.c:287:
+	pDM_Odm->RFPathRxEnable = (u8) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(BB_RX_PATH, pDM_Odm), ODM_BIT(BB_RX_PATH, pDM_Odm));

CHECK: Avoid CamelCase: <RFPathRxEnable>
#287: FILE: ./hal/odm.c:287:
+	pDM_Odm->RFPathRxEnable = (u8) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(BB_RX_PATH, pDM_Odm), ODM_BIT(BB_RX_PATH, pDM_Odm));

CHECK: Avoid CamelCase: <odm_CommonInfoSelfUpdate>
#292: FILE: ./hal/odm.c:292:
+static void odm_CommonInfoSelfUpdate(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <EntryCnt>
#294: FILE: ./hal/odm.c:294:
+	u8 EntryCnt = 0;

CHECK: Avoid CamelCase: <pEntry>
#296: FILE: ./hal/odm.c:296:
+	PSTA_INFO_T	pEntry;

CHECK: Unnecessary parentheses around pDM_Odm->pBandWidth
#298: FILE: ./hal/odm.c:298:
+	if (*(pDM_Odm->pBandWidth) == ODM_BW40M) {

CHECK: Unnecessary parentheses around 'pDM_Odm->pBandWidth'
#298: FILE: ./hal/odm.c:298:
+	if (*(pDM_Odm->pBandWidth) == ODM_BW40M) {

CHECK: Avoid CamelCase: <pBandWidth>
#298: FILE: ./hal/odm.c:298:
+	if (*(pDM_Odm->pBandWidth) == ODM_BW40M) {

CHECK: braces {} should be used on all arms of this statement
#298: FILE: ./hal/odm.c:298:
+	if (*(pDM_Odm->pBandWidth) == ODM_BW40M) {
[...]
+	} else
[...]

CHECK: Unnecessary parentheses around pDM_Odm->pSecChOffset
#299: FILE: ./hal/odm.c:299:
+		if (*(pDM_Odm->pSecChOffset) == 1)

CHECK: Unnecessary parentheses around 'pDM_Odm->pSecChOffset'
#299: FILE: ./hal/odm.c:299:
+		if (*(pDM_Odm->pSecChOffset) == 1)

CHECK: Avoid CamelCase: <pSecChOffset>
#299: FILE: ./hal/odm.c:299:
+		if (*(pDM_Odm->pSecChOffset) == 1)

CHECK: spaces preferred around that '-' (ctx:VxV)
#300: FILE: ./hal/odm.c:300:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)-2;
 			                                              ^

CHECK: Unnecessary parentheses around pDM_Odm->pChannel
#300: FILE: ./hal/odm.c:300:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)-2;

CHECK: Avoid CamelCase: <ControlChannel>
#300: FILE: ./hal/odm.c:300:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)-2;

CHECK: Avoid CamelCase: <pChannel>
#300: FILE: ./hal/odm.c:300:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)-2;

CHECK: Unnecessary parentheses around pDM_Odm->pSecChOffset
#301: FILE: ./hal/odm.c:301:
+		else if (*(pDM_Odm->pSecChOffset) == 2)

CHECK: spaces preferred around that '+' (ctx:VxV)
#302: FILE: ./hal/odm.c:302:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)+2;
 			                                              ^

CHECK: Unnecessary parentheses around pDM_Odm->pChannel
#302: FILE: ./hal/odm.c:302:
+			pDM_Odm->ControlChannel = *(pDM_Odm->pChannel)+2;

CHECK: Unbalanced braces around else statement
#303: FILE: ./hal/odm.c:303:
+	} else

CHECK: Unnecessary parentheses around pDM_Odm->pChannel
#304: FILE: ./hal/odm.c:304:
+		pDM_Odm->ControlChannel = *(pDM_Odm->pChannel);

CHECK: Avoid CamelCase: <pODM_StaInfo>
#307: FILE: ./hal/odm.c:307:
+		pEntry = pDM_Odm->pODM_StaInfo[i];

CHECK: Avoid CamelCase: <bOneEntryOnly>
#313: FILE: ./hal/odm.c:313:
+		pDM_Odm->bOneEntryOnly = true;

CHECK: Avoid CamelCase: <odm_CmnInfoInit_Debug>
#318: FILE: ./hal/odm.c:318:
+static void odm_CmnInfoInit_Debug(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <odm_BasicDbgMessage>
#322: FILE: ./hal/odm.c:322:
+static void odm_BasicDbgMessage(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <odm_RateAdaptiveMaskInit>
#333: FILE: ./hal/odm.c:333:
+static void odm_RateAdaptiveMaskInit(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <pOdmRA>
#335: FILE: ./hal/odm.c:335:
+	struct odm_rate_adaptive *pOdmRA = &pDM_Odm->RateAdaptive;

CHECK: Avoid CamelCase: <RateAdaptive>
#335: FILE: ./hal/odm.c:335:
+	struct odm_rate_adaptive *pOdmRA = &pDM_Odm->RateAdaptive;

CHECK: Avoid CamelCase: <bUseRAMask>
#339: FILE: ./hal/odm.c:339:
+		pDM_Odm->bUseRAMask = true;

CHECK: Avoid CamelCase: <RATRState>
#343: FILE: ./hal/odm.c:343:
+	pOdmRA->RATRState = DM_RATR_STA_INIT;

CHECK: Avoid CamelCase: <LdpcThres>
#344: FILE: ./hal/odm.c:344:
+	pOdmRA->LdpcThres = 35;

CHECK: Avoid CamelCase: <bUseLdpc>
#345: FILE: ./hal/odm.c:345:
+	pOdmRA->bUseLdpc = false;

CHECK: Avoid CamelCase: <HighRSSIThresh>
#346: FILE: ./hal/odm.c:346:
+	pOdmRA->HighRSSIThresh = 50;

CHECK: Avoid CamelCase: <LowRSSIThresh>
#347: FILE: ./hal/odm.c:347:
+	pOdmRA->LowRSSIThresh = 20;

CHECK: Lines should not end with a '('
#350: FILE: ./hal/odm.c:350:
+u32 ODM_Get_Rate_Bitmap(

CHECK: Avoid CamelCase: <WirelessMode>
#359: FILE: ./hal/odm.c:359:
+	u8 WirelessMode;

CHECK: spaces preferred around that '|' (ctx:VxV)
#382: FILE: ./hal/odm.c:382:
+	case (ODM_WM_B|ODM_WM_G):
 	              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#391: FILE: ./hal/odm.c:391:
+	case (ODM_WM_B|ODM_WM_G|ODM_WM_N24G):
 	              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#391: FILE: ./hal/odm.c:391:
+	case (ODM_WM_B|ODM_WM_G|ODM_WM_N24G):
 	                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#392: FILE: ./hal/odm.c:392:
+	case (ODM_WM_B|ODM_WM_N24G):
 	              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#393: FILE: ./hal/odm.c:393:
+	case (ODM_WM_G|ODM_WM_N24G):
 	              ^

CHECK: braces {} should be used on all arms of this statement
#394: FILE: ./hal/odm.c:394:
+		if (rssi_level == DM_RATR_STA_HIGH)
[...]
+		else if (rssi_level == DM_RATR_STA_MIDDLE)
[...]
+		else {
[...]

CHECK: Unbalanced braces around else statement
#398: FILE: ./hal/odm.c:398:
+		else {

CHECK: Unnecessary parentheses around pDM_Odm->pBandWidth
#399: FILE: ./hal/odm.c:399:
+			if (*(pDM_Odm->pBandWidth) == ODM_BW40M)

CHECK: Unnecessary parentheses around 'pDM_Odm->pBandWidth'
#399: FILE: ./hal/odm.c:399:
+			if (*(pDM_Odm->pBandWidth) == ODM_BW40M)

CHECK: Blank lines aren't necessary before a close brace '}'
#413: FILE: ./hal/odm.c:413:
+
+}

CHECK: Avoid CamelCase: <odm_RefreshRateAdaptiveMaskCE>
#415: FILE: ./hal/odm.c:415:
+static void odm_RefreshRateAdaptiveMaskCE(struct dm_odm_t *pDM_Odm)

CHECK: line length of 133 exceeds 100 columns
#433: FILE: ./hal/odm.c:433:
+			if (true == ODM_RAStateCheck(pDM_Odm, pstat->rssi_stat.UndecoratedSmoothedPWDB, false, &pstat->rssi_level)) {

WARNING: braces {} are not necessary for single statement blocks
#433: FILE: ./hal/odm.c:433:
+			if (true == ODM_RAStateCheck(pDM_Odm, pstat->rssi_stat.UndecoratedSmoothedPWDB, false, &pstat->rssi_level)) {
+				rtw_hal_update_ra_mask(pstat, pstat->rssi_level);
+			}

CHECK: Using comparison to true is error prone
#433: FILE: ./hal/odm.c:433:
+			if (true == ODM_RAStateCheck(pDM_Odm, pstat->rssi_stat.UndecoratedSmoothedPWDB, false, &pstat->rssi_level)) {

CHECK: Blank lines aren't necessary before a close brace '}'
#437: FILE: ./hal/odm.c:437:
+
+		}

WARNING: Block comments should align the * on each line
#442: FILE: ./hal/odm.c:442:
+/*-----------------------------------------------------------------------------
+* Function:	odm_RefreshRateAdaptiveMask()

CHECK: Avoid CamelCase: <odm_RefreshRateAdaptiveMask>
#458: FILE: ./hal/odm.c:458:
+static void odm_RefreshRateAdaptiveMask(struct dm_odm_t *pDM_Odm)

CHECK: Blank lines aren't necessary after an open brace '{'
#460: FILE: ./hal/odm.c:460:
+{
+

CHECK: Lines should not end with a '('
#469: FILE: ./hal/odm.c:469:
+bool ODM_RAStateCheck(

CHECK: Avoid CamelCase: <bForceUpdate>
#472: FILE: ./hal/odm.c:472:
+	bool bForceUpdate,

CHECK: Avoid CamelCase: <pRATRState>
#473: FILE: ./hal/odm.c:473:
+	u8 *pRATRState

CHECK: Avoid CamelCase: <pRA>
#476: FILE: ./hal/odm.c:476:
+	struct odm_rate_adaptive *pRA = &pDM_Odm->RateAdaptive;

CHECK: Avoid CamelCase: <GoUpGap>
#477: FILE: ./hal/odm.c:477:
+	const u8 GoUpGap = 5;

CHECK: Avoid CamelCase: <HighRSSIThreshForRA>
#478: FILE: ./hal/odm.c:478:
+	u8 HighRSSIThreshForRA = pRA->HighRSSIThresh;

CHECK: Avoid CamelCase: <LowRSSIThreshForRA>
#479: FILE: ./hal/odm.c:479:
+	u8 LowRSSIThreshForRA = pRA->LowRSSIThresh;

WARNING: Comparisons should place the constant on the right side of the test
#506: FILE: ./hal/odm.c:506:
+	if (RSSI > HighRSSIThreshForRA)

WARNING: Comparisons should place the constant on the right side of the test
#508: FILE: ./hal/odm.c:508:
+	else if (RSSI > LowRSSIThreshForRA)

CHECK: Avoid CamelCase: <odm_RSSIMonitorInit>
#527: FILE: ./hal/odm.c:527:
+static void odm_RSSIMonitorInit(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <pRA_Table>
#529: FILE: ./hal/odm.c:529:
+	struct ra_t *pRA_Table = &pDM_Odm->DM_RA_Table;

CHECK: Avoid CamelCase: <DM_RA_Table>
#529: FILE: ./hal/odm.c:529:
+	struct ra_t *pRA_Table = &pDM_Odm->DM_RA_Table;

CHECK: Blank lines aren't necessary before a close brace '}'
#533: FILE: ./hal/odm.c:533:
+
+}

CHECK: Avoid CamelCase: <FindMinimumRSSI>
#535: FILE: ./hal/odm.c:535:
+static void FindMinimumRSSI(struct adapter *padapter)

CHECK: Lines should not end with a '('
#543: FILE: ./hal/odm.c:543:
+	if (

CHECK: Unnecessary parentheses around 'pDM_Odm->bLinked != true'
#543: FILE: ./hal/odm.c:543:
+	if (
+		(pDM_Odm->bLinked != true) &&
+		(pdmpriv->EntryMinUndecoratedSmoothedPWDB == 0)
+	) {

CHECK: Unnecessary parentheses around 'pdmpriv->EntryMinUndecoratedSmoothedPWDB == 0'
#543: FILE: ./hal/odm.c:543:
+	if (
+		(pDM_Odm->bLinked != true) &&
+		(pdmpriv->EntryMinUndecoratedSmoothedPWDB == 0)
+	) {

CHECK: braces {} should be used on all arms of this statement
#543: FILE: ./hal/odm.c:543:
+	if (
[...]
+	} else
[...]

CHECK: Avoid CamelCase: <bLinked>
#544: FILE: ./hal/odm.c:544:
+		(pDM_Odm->bLinked != true) &&

CHECK: Using comparison to true is error prone
#544: FILE: ./hal/odm.c:544:
+		(pDM_Odm->bLinked != true) &&

CHECK: Avoid CamelCase: <MinUndecoratedPWDBForDM>
#547: FILE: ./hal/odm.c:547:
+		pdmpriv->MinUndecoratedPWDBForDM = 0;

CHECK: Unbalanced braces around else statement
#548: FILE: ./hal/odm.c:548:
+	} else

CHECK: Avoid CamelCase: <odm_RSSIMonitorCheckCE>
#552: FILE: ./hal/odm.c:552:
+static void odm_RSSIMonitorCheckCE(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <tmpEntryMaxPWDB>
#558: FILE: ./hal/odm.c:558:
+	int tmpEntryMaxPWDB = 0, tmpEntryMinPWDB = 0xff;

CHECK: Avoid CamelCase: <tmpEntryMinPWDB>
#558: FILE: ./hal/odm.c:558:
+	int tmpEntryMaxPWDB = 0, tmpEntryMinPWDB = 0xff;

CHECK: Using comparison to true is error prone
#563: FILE: ./hal/odm.c:563:
+	if (pDM_Odm->bLinked != true)

CHECK: line length of 116 exceeds 100 columns
#568: FILE: ./hal/odm.c:568:
+	/* if (check_fwstate(&Adapter->mlmepriv, WIFI_AP_STATE|WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE) == true) */

CHECK: line length of 104 exceeds 100 columns
#575: FILE: ./hal/odm.c:575:
+				if (is_multicast_ether_addr(psta->hwaddr))  /* if (psta->mac_id == 1) */

CHECK: line length of 126 exceeds 100 columns
#588: FILE: ./hal/odm.c:588:
+					PWDB_rssi[sta_cnt++] = (psta->mac_id | (psta->rssi_stat.UndecoratedSmoothedPWDB<<16));

CHECK: spaces preferred around that '<<' (ctx:VxV)
#588: FILE: ./hal/odm.c:588:
+					PWDB_rssi[sta_cnt++] = (psta->mac_id | (psta->rssi_stat.UndecoratedSmoothedPWDB<<16));
 					                                                                               ^

CHECK: Using comparison to true is error prone
#594: FILE: ./hal/odm.c:594:
+				if (pHalData->fw_ractrl == true)/*  Report every sta's RSSI to FW */

CHECK: Please don't use multiple blank lines
#600: FILE: ./hal/odm.c:600:
+
+

CHECK: Avoid CamelCase: <EntryMaxUndecoratedSmoothedPWDB>
#603: FILE: ./hal/odm.c:603:
+		pdmpriv->EntryMaxUndecoratedSmoothedPWDB = tmpEntryMaxPWDB;

CHECK: Avoid CamelCase: <RSSI_Min>
#614: FILE: ./hal/odm.c:614:
+	pDM_Odm->RSSI_Min = pdmpriv->MinUndecoratedPWDBForDM;

CHECK: line length of 109 exceeds 100 columns
#615: FILE: ./hal/odm.c:615:
+	/* ODM_CmnInfoUpdate(&pHalData->odmpriv , ODM_CMNINFO_RSSI_MIN, pdmpriv->MinUndecoratedPWDBForDM); */

CHECK: Avoid CamelCase: <odm_RSSIMonitorCheck>
#618: FILE: ./hal/odm.c:618:
+static void odm_RSSIMonitorCheck(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <odm_SwAntDetectInit>
#630: FILE: ./hal/odm.c:630:
+static void odm_SwAntDetectInit(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <pDM_SWAT_Table>
#632: FILE: ./hal/odm.c:632:
+	struct swat_t *pDM_SWAT_Table = &pDM_Odm->DM_SWAT_Table;

CHECK: Avoid CamelCase: <DM_SWAT_Table>
#632: FILE: ./hal/odm.c:632:
+	struct swat_t *pDM_SWAT_Table = &pDM_Odm->DM_SWAT_Table;

CHECK: Avoid CamelCase: <SWAS_NoLink_BK_Reg92c>
#634: FILE: ./hal/odm.c:634:
+	pDM_SWAT_Table->SWAS_NoLink_BK_Reg92c = rtw_read32(pDM_Odm->Adapter, rDPDT_control);

CHECK: Avoid CamelCase: <rDPDT_control>
#634: FILE: ./hal/odm.c:634:
+	pDM_SWAT_Table->SWAS_NoLink_BK_Reg92c = rtw_read32(pDM_Odm->Adapter, rDPDT_control);

CHECK: Avoid CamelCase: <PreAntenna>
#635: FILE: ./hal/odm.c:635:
+	pDM_SWAT_Table->PreAntenna = MAIN_ANT;

CHECK: Avoid CamelCase: <CurAntenna>
#636: FILE: ./hal/odm.c:636:
+	pDM_SWAT_Table->CurAntenna = MAIN_ANT;

CHECK: Avoid CamelCase: <SWAS_NoLink_State>
#637: FILE: ./hal/odm.c:637:
+	pDM_SWAT_Table->SWAS_NoLink_State = 0;

CHECK: Avoid CamelCase: <getSwingIndex>
#644: FILE: ./hal/odm.c:644:
+static u8 getSwingIndex(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <bbSwing>
#648: FILE: ./hal/odm.c:648:
+	u32 bbSwing;

CHECK: Avoid CamelCase: <swingTableSize>
#649: FILE: ./hal/odm.c:649:
+	u32 swingTableSize;

CHECK: Avoid CamelCase: <pSwingTable>
#650: FILE: ./hal/odm.c:650:
+	u32 *pSwingTable;

CHECK: Avoid CamelCase: <tableValue>
#658: FILE: ./hal/odm.c:658:
+		u32 tableValue = pSwingTable[i];

CHECK: Avoid CamelCase: <odm_TXPowerTrackingInit>
#668: FILE: ./hal/odm.c:668:
+void odm_TXPowerTrackingInit(struct dm_odm_t *pDM_Odm)

CHECK: Avoid CamelCase: <defaultSwingIndex>
#670: FILE: ./hal/odm.c:670:
+	u8 defaultSwingIndex = getSwingIndex(pDM_Odm);

CHECK: Please don't use multiple blank lines
#675: FILE: ./hal/odm.c:675:
+
+

CHECK: Avoid CamelCase: <bTXPowerTracking>
#678: FILE: ./hal/odm.c:678:
+	pdmpriv->bTXPowerTracking = true;

CHECK: Unnecessary parentheses around pDM_Odm->mp_mode
#682: FILE: ./hal/odm.c:682:
+	if (*(pDM_Odm->mp_mode) != 1)

CHECK: Unnecessary parentheses around 'pDM_Odm->mp_mode'
#682: FILE: ./hal/odm.c:682:
+	if (*(pDM_Odm->mp_mode) != 1)

CHECK: Blank lines aren't necessary before a close brace '}'
#707: FILE: ./hal/odm.c:707:
+
+}

CHECK: Avoid CamelCase: <TM_Trigger>
#716: FILE: ./hal/odm.c:716:
+	if (!pDM_Odm->RFCalibrateInfo.TM_Trigger) { /* at least delay 1 sec */

WARNING: else is not generally useful after a break or return
#721: FILE: ./hal/odm.c:721:
+		return;
+	} else {

CHECK: Blank lines aren't necessary after an open brace '{'
#736: FILE: ./hal/odm.c:736:
+{
+

CHECK: Avoid CamelCase: <odm_DIGInit>
#739: FILE: ./hal/odm.c:739:
+	odm_DIGInit(pDM_Odm);

CHECK: Avoid CamelCase: <odm_NHMCounterStatisticsInit>
#740: FILE: ./hal/odm.c:740:
+	odm_NHMCounterStatisticsInit(pDM_Odm);

CHECK: Avoid CamelCase: <odm_AdaptivityInit>
#741: FILE: ./hal/odm.c:741:
+	odm_AdaptivityInit(pDM_Odm);

CHECK: Avoid CamelCase: <odm_DynamicBBPowerSavingInit>
#750: FILE: ./hal/odm.c:750:
+	odm_DynamicBBPowerSavingInit(pDM_Odm);

CHECK: Avoid CamelCase: <odm_DynamicTxPowerInit>
#751: FILE: ./hal/odm.c:751:
+	odm_DynamicTxPowerInit(pDM_Odm);

CHECK: Avoid CamelCase: <odm_FalseAlarmCounterStatistics>
#765: FILE: ./hal/odm.c:765:
+	odm_FalseAlarmCounterStatistics(pDM_Odm);

CHECK: Avoid CamelCase: <odm_NHMCounterStatistics>
#766: FILE: ./hal/odm.c:766:
+	odm_NHMCounterStatistics(pDM_Odm);

WARNING: suspect code indent for conditional statements (8, 24)
#774: FILE: ./hal/odm.c:774:
+	if ((adapter_to_pwrctl(pDM_Odm->Adapter)->pwr_mode != PS_MODE_ACTIVE) /*  in LPS mode */
[...]
+			odm_DIGbyRSSI_LPS(pDM_Odm);

CHECK: braces {} should be used on all arms of this statement
#774: FILE: ./hal/odm.c:774:
+	if ((adapter_to_pwrctl(pDM_Odm->Adapter)->pwr_mode != PS_MODE_ACTIVE) /*  in LPS mode */
[...]
+	} else
[...]

CHECK: line length of 117 exceeds 100 columns
#777: FILE: ./hal/odm.c:777:
+		/* (pDM_Odm->SupportICType & (ODM_RTL8188E) &&(&&(((pDM_Odm->SupportInterface  == ODM_ITRF_SDIO))) */

CHECK: Avoid CamelCase: <odm_DIGbyRSSI_LPS>
#780: FILE: ./hal/odm.c:780:
+			odm_DIGbyRSSI_LPS(pDM_Odm);

CHECK: Unbalanced braces around else statement
#781: FILE: ./hal/odm.c:781:
+	} else

CHECK: Avoid CamelCase: <pDM_DigTable>
#785: FILE: ./hal/odm.c:785:
+		struct dig_t *pDM_DigTable = &pDM_Odm->DM_DigTable;

CHECK: Avoid CamelCase: <odm_Adaptivity>
#787: FILE: ./hal/odm.c:787:
+		odm_Adaptivity(pDM_Odm, pDM_DigTable->CurIGValue);

CHECK: Avoid CamelCase: <odm_CCKPacketDetectionThresh>
#789: FILE: ./hal/odm.c:789:
+	odm_CCKPacketDetectionThresh(pDM_Odm);

CHECK: Unnecessary parentheses around pDM_Odm->pbPowerSaving
#791: FILE: ./hal/odm.c:791:
+	if (*(pDM_Odm->pbPowerSaving) == true)

CHECK: Unnecessary parentheses around 'pDM_Odm->pbPowerSaving'
#791: FILE: ./hal/odm.c:791:
+	if (*(pDM_Odm->pbPowerSaving) == true)

CHECK: Avoid CamelCase: <pbPowerSaving>
#791: FILE: ./hal/odm.c:791:
+	if (*(pDM_Odm->pbPowerSaving) == true)

CHECK: Please don't use multiple blank lines
#794: FILE: ./hal/odm.c:794:
+
+

CHECK: Avoid CamelCase: <odm_EdcaTurboCheck>
#796: FILE: ./hal/odm.c:796:
+	odm_EdcaTurboCheck(pDM_Odm);

CHECK: line length of 109 exceeds 100 columns
#803: FILE: ./hal/odm.c:803:
+	/* 2010.05.30 LukeLee: For CE platform, files in IC subfolders may not be included to be compiled, */

CHECK: Avoid CamelCase: <PhyDbgInfo>
#805: FILE: ./hal/odm.c:805:
+	pDM_Odm->PhyDbgInfo.NumQryBeaconPkt = 0;

CHECK: Avoid CamelCase: <NumQryBeaconPkt>
#805: FILE: ./hal/odm.c:805:
+	pDM_Odm->PhyDbgInfo.NumQryBeaconPkt = 0;

CHECK: Please don't use multiple blank lines
#808: FILE: ./hal/odm.c:808:
+
+

CHECK: Avoid CamelCase: <CmnInfo>
#812: FILE: ./hal/odm.c:812:
+void ODM_CmnInfoInit(struct dm_odm_t *pDM_Odm, enum odm_cmninfo_e CmnInfo, u32 Value)

CHECK: Avoid CamelCase: <SupportICType>
#834: FILE: ./hal/odm.c:834:
+		pDM_Odm->SupportICType = Value;

CHECK: Avoid CamelCase: <RFEType>
#846: FILE: ./hal/odm.c:846:
+		pDM_Odm->RFEType = (u8)Value;

CHECK: Avoid CamelCase: <AntDivType>
#850: FILE: ./hal/odm.c:850:
+		pDM_Odm->AntDivType = (u8)Value;

CHECK: Avoid CamelCase: <ExtLNA>
#858: FILE: ./hal/odm.c:858:
+		pDM_Odm->ExtLNA = (u8)Value;

CHECK: Avoid CamelCase: <ExtPA>
#862: FILE: ./hal/odm.c:862:
+		pDM_Odm->ExtPA = (u8)Value;

CHECK: Avoid CamelCase: <ExtTRSW>
#879: FILE: ./hal/odm.c:879:
+		pDM_Odm->ExtTRSW = (u8)Value;

CHECK: Avoid CamelCase: <PatchID>
#882: FILE: ./hal/odm.c:882:
+		pDM_Odm->PatchID = (u8)Value;

CHECK: Avoid CamelCase: <bInHctTest>
#885: FILE: ./hal/odm.c:885:
+		pDM_Odm->bInHctTest = (bool)Value;

CHECK: Avoid CamelCase: <bWIFITest>
#888: FILE: ./hal/odm.c:888:
+		pDM_Odm->bWIFITest = (bool)Value;

CHECK: Avoid CamelCase: <bDualMacSmartConcurrent>
#892: FILE: ./hal/odm.c:892:
+		pDM_Odm->bDualMacSmartConcurrent = (bool)Value;

CHECK: line length of 109 exceeds 100 columns
#895: FILE: ./hal/odm.c:895:
+	/* To remove the compiler warning, must add an empty default statement to handle the other values. */

CHECK: Blank lines aren't necessary before a close brace '}'
#901: FILE: ./hal/odm.c:901:
+
+}

CHECK: Please don't use multiple blank lines
#903: FILE: ./hal/odm.c:903:
+
+

CHECK: Avoid CamelCase: <pMacPhyMode>
#914: FILE: ./hal/odm.c:914:
+		pDM_Odm->pMacPhyMode = pValue;

CHECK: Avoid CamelCase: <pNumTxBytesUnicast>
#918: FILE: ./hal/odm.c:918:
+		pDM_Odm->pNumTxBytesUnicast = pValue;

CHECK: Avoid CamelCase: <pNumRxBytesUnicast>
#922: FILE: ./hal/odm.c:922:
+		pDM_Odm->pNumRxBytesUnicast = pValue;

CHECK: Avoid CamelCase: <pSecurity>
#934: FILE: ./hal/odm.c:934:
+		pDM_Odm->pSecurity = pValue;

CHECK: Avoid CamelCase: <pbGetValueFromOtherMac>
#946: FILE: ./hal/odm.c:946:
+		pDM_Odm->pbGetValueFromOtherMac = pValue;

CHECK: Avoid CamelCase: <pBuddyAdapter>
#950: FILE: ./hal/odm.c:950:
+		pDM_Odm->pBuddyAdapter = pValue;

CHECK: Avoid CamelCase: <pbMasterOfDMSP>
#954: FILE: ./hal/odm.c:954:
+		pDM_Odm->pbMasterOfDMSP = pValue;

CHECK: Avoid CamelCase: <pOnePathCCA>
#966: FILE: ./hal/odm.c:966:
+		pDM_Odm->pOnePathCCA = pValue;

CHECK: Avoid CamelCase: <pbDriverStopped>
#970: FILE: ./hal/odm.c:970:
+		pDM_Odm->pbDriverStopped =  pValue;

CHECK: Avoid CamelCase: <pbDriverIsGoingToPnpSetPowerSleep>
#974: FILE: ./hal/odm.c:974:
+		pDM_Odm->pbDriverIsGoingToPnpSetPowerSleep =  pValue;

CHECK: Avoid CamelCase: <pAntennaTest>
#982: FILE: ./hal/odm.c:982:
+		pDM_Odm->pAntennaTest =  pValue;

CHECK: Avoid CamelCase: <pbNet_closed>
#986: FILE: ./hal/odm.c:986:
+		pDM_Odm->pbNet_closed = pValue;

CHECK: Avoid CamelCase: <pu1ForcedIgiLb>
#994: FILE: ./hal/odm.c:994:
+		pDM_Odm->pu1ForcedIgiLb = pValue;

CHECK: line length of 109 exceeds 100 columns
#1019: FILE: ./hal/odm.c:1019:
+	/* To remove the compiler warning, must add an empty default statement to handle the other values. */

CHECK: Blank lines aren't necessary before a close brace '}'
#1025: FILE: ./hal/odm.c:1025:
+
+}

CHECK: Please don't use multiple blank lines
#1027: FILE: ./hal/odm.c:1027:
+
+

CHECK: Lines should not end with a '('
#1028: FILE: ./hal/odm.c:1028:
+void ODM_CmnInfoPtrArrayHook(

CHECK: Avoid CamelCase: <Index>
#1031: FILE: ./hal/odm.c:1031:
+	u16 Index,

CHECK: line length of 109 exceeds 100 columns
#1045: FILE: ./hal/odm.c:1045:
+	/* To remove the compiler warning, must add an empty default statement to handle the other values. */

CHECK: Blank lines aren't necessary before a close brace '}'
#1051: FILE: ./hal/odm.c:1051:
+
+}

CHECK: Please don't use multiple blank lines
#1053: FILE: ./hal/odm.c:1053:
+
+

CHECK: Avoid CamelCase: <bLinkInProcess>
#1064: FILE: ./hal/odm.c:1064:
+		pDM_Odm->bLinkInProcess = (bool)Value;

CHECK: Avoid CamelCase: <bWIFI_Direct>
#1072: FILE: ./hal/odm.c:1072:
+		pDM_Odm->bWIFI_Direct = (bool)Value;

CHECK: Avoid CamelCase: <bWIFI_Display>
#1076: FILE: ./hal/odm.c:1076:
+		pDM_Odm->bWIFI_Display = (bool)Value;

CHECK: Avoid CamelCase: <bBtEnabled>
#1100: FILE: ./hal/odm.c:1100:
+		pDM_Odm->bBtEnabled = (bool)Value;

CHECK: Avoid CamelCase: <bBtConnectProcess>
#1104: FILE: ./hal/odm.c:1104:
+		pDM_Odm->bBtConnectProcess = (bool)Value;

CHECK: Avoid CamelCase: <btHsRssi>
#1108: FILE: ./hal/odm.c:1108:
+		pDM_Odm->btHsRssi = (u8)Value;

CHECK: Avoid CamelCase: <bBtHsOperation>
#1112: FILE: ./hal/odm.c:1112:
+		pDM_Odm->bBtHsOperation = (bool)Value;

CHECK: Avoid CamelCase: <bBtLimitedDig>
#1116: FILE: ./hal/odm.c:1116:
+		pDM_Odm->bBtLimitedDig = (bool)Value;

CHECK: Avoid CamelCase: <bBtDisableEdcaTurbo>
#1120: FILE: ./hal/odm.c:1120:
+		pDM_Odm->bBtDisableEdcaTurbo = (bool)Value;

WARNING: Block comments use * on subsequent lines
#1124: FILE: ./hal/odm.c:1124:
+/*
+	case	ODM_CMNINFO_OP_MODE:

CHECK: Please don't use multiple blank lines
#1153: FILE: ./hal/odm.c:1153:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#1154: FILE: ./hal/odm.c:1154:
+
+}

total: 0 errors, 7 warnings, 186 checks, 1191 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm.c has style problems, please review.
-----------------------
./hal/odm_CfoTracking.c
-----------------------
CHECK: Avoid CamelCase: <odm_SetCrystalCap>
#10: FILE: ./hal/odm_CfoTracking.c:10:
+static void odm_SetCrystalCap(void *pDM_VOID, u8 CrystalCap)

CHECK: Avoid CamelCase: <pDM_VOID>
#10: FILE: ./hal/odm_CfoTracking.c:10:
+static void odm_SetCrystalCap(void *pDM_VOID, u8 CrystalCap)

CHECK: Avoid CamelCase: <CrystalCap>
#10: FILE: ./hal/odm_CfoTracking.c:10:
+static void odm_SetCrystalCap(void *pDM_VOID, u8 CrystalCap)

CHECK: Avoid CamelCase: <pCfoTrack>
#13: FILE: ./hal/odm_CfoTracking.c:13:
+	struct cfo_tracking *pCfoTrack = &pDM_Odm->DM_CfoTrack;

CHECK: Avoid CamelCase: <DM_CfoTrack>
#13: FILE: ./hal/odm_CfoTracking.c:13:
+	struct cfo_tracking *pCfoTrack = &pDM_Odm->DM_CfoTrack;

CHECK: Lines should not end with a '('
#22: FILE: ./hal/odm_CfoTracking.c:22:
+	PHY_SetBBReg(

CHECK: Avoid CamelCase: <odm_GetDefaultCrytaltalCap>
#30: FILE: ./hal/odm_CfoTracking.c:30:
+static u8 odm_GetDefaultCrytaltalCap(void *pDM_VOID)

CHECK: Avoid CamelCase: <odm_SetATCStatus>
#40: FILE: ./hal/odm_CfoTracking.c:40:
+static void odm_SetATCStatus(void *pDM_VOID, bool ATCStatus)

CHECK: Avoid CamelCase: <ATCStatus>
#40: FILE: ./hal/odm_CfoTracking.c:40:
+static void odm_SetATCStatus(void *pDM_VOID, bool ATCStatus)

CHECK: Avoid CamelCase: <bATCStatus>
#45: FILE: ./hal/odm_CfoTracking.c:45:
+	if (pCfoTrack->bATCStatus == ATCStatus)

CHECK: Lines should not end with a '('
#48: FILE: ./hal/odm_CfoTracking.c:48:
+	PHY_SetBBReg(

CHECK: Avoid CamelCase: <odm_GetATCStatus>
#57: FILE: ./hal/odm_CfoTracking.c:57:
+static bool odm_GetATCStatus(void *pDM_VOID)

CHECK: Lines should not end with a '('
#62: FILE: ./hal/odm_CfoTracking.c:62:
+	ATCStatus = (bool)PHY_QueryBBReg(

CHECK: Avoid CamelCase: <DefXCap>
#75: FILE: ./hal/odm_CfoTracking.c:75:
+	pCfoTrack->DefXCap = odm_GetDefaultCrytaltalCap(pDM_Odm);

CHECK: Avoid CamelCase: <bAdjust>
#76: FILE: ./hal/odm_CfoTracking.c:76:
+	pCfoTrack->bAdjust = true;

CHECK: Avoid CamelCase: <CFO_kHz_A>
#97: FILE: ./hal/odm_CfoTracking.c:97:
+	int CFO_kHz_A, CFO_ave = 0;

CHECK: Avoid CamelCase: <Adjust_Xtal>
#100: FILE: ./hal/odm_CfoTracking.c:100:
+	u8 Adjust_Xtal = 1;

WARNING: braces {} are not necessary for single statement blocks
#103: FILE: ./hal/odm_CfoTracking.c:103:
+	if (!(pDM_Odm->SupportAbility & ODM_BB_CFO_TRACKING)) {
+		return;
+	}

CHECK: Avoid CamelCase: <packetCount>
#113: FILE: ./hal/odm_CfoTracking.c:113:
+		if (pCfoTrack->packetCount == pCfoTrack->packetCount_pre) {

CHECK: Avoid CamelCase: <packetCount_pre>
#113: FILE: ./hal/odm_CfoTracking.c:113:
+		if (pCfoTrack->packetCount == pCfoTrack->packetCount_pre) {

WARNING: braces {} are not necessary for single statement blocks
#113: FILE: ./hal/odm_CfoTracking.c:113:
+		if (pCfoTrack->packetCount == pCfoTrack->packetCount_pre) {
+			return;
+		}

CHECK: spaces preferred around that '-' (ctx:VxV)
#126: FILE: ./hal/odm_CfoTracking.c:126:
+			(pCfoTrack->CFO_ave_pre-CFO_ave) :
 			                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#127: FILE: ./hal/odm_CfoTracking.c:127:
+			(CFO_ave-pCfoTrack->CFO_ave_pre);
 			        ^

CHECK: Lines should not end with a '('
#129: FILE: ./hal/odm_CfoTracking.c:129:
+		if (

CHECK: braces {} should be used on all arms of this statement
#129: FILE: ./hal/odm_CfoTracking.c:129:
+		if (
[...]
+		} else
[...]

CHECK: Avoid CamelCase: <largeCFOHit>
#131: FILE: ./hal/odm_CfoTracking.c:131:
+			pCfoTrack->largeCFOHit == 0 &&

WARNING: else is not generally useful after a break or return
#136: FILE: ./hal/odm_CfoTracking.c:136:
+			return;
+		} else

CHECK: Unbalanced braces around else statement
#136: FILE: ./hal/odm_CfoTracking.c:136:
+		} else

CHECK: Using comparison to false is error prone
#141: FILE: ./hal/odm_CfoTracking.c:141:
+		if (pCfoTrack->bAdjust == false) {

WARNING: braces {} are not necessary for any arm of this statement
#179: FILE: ./hal/odm_CfoTracking.c:179:
+		if (CFO_ave < CFO_TH_ATC && CFO_ave > -CFO_TH_ATC) {
[...]
+		} else {
[...]

total: 0 errors, 4 warnings, 26 checks, 211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_CfoTracking.c has style problems, please review.
-----------------------
./hal/odm_CfoTracking.h
-----------------------
CHECK: Avoid CamelCase: <bForceXtalCap>
#26: FILE: ./hal/odm_CfoTracking.h:26:
+	bool bForceXtalCap;

CHECK: Avoid CamelCase: <bReset>
#27: FILE: ./hal/odm_CfoTracking.h:27:
+	bool bReset;

CHECK: Avoid CamelCase: <pPktinfo_VOID>
#37: FILE: ./hal/odm_CfoTracking.h:37:
+void odm_parsing_cfo(void *pDM_VOID, void *pPktinfo_VOID, s8 *pcfotail);

total: 0 errors, 0 warnings, 3 checks, 39 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_CfoTracking.h has style problems, please review.
-----------------------
./hal/odm_CfoTracking.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_CfoTracking.o has style problems, please review.
---------------
./hal/odm_DIG.c
---------------
CHECK: line length of 144 exceeds 100 columns
#15: FILE: ./hal/odm_DIG.c:15:
+	rtw_write16(pDM_Odm->Adapter, ODM_REG_NHM_TIMER_11N+2, 0x2710);	/* 0x894[31:16]= 0x2710	Time duration for NHM unit: 4us, 0x2710 =40ms */

CHECK: spaces preferred around that '+' (ctx:VxV)
#15: FILE: ./hal/odm_DIG.c:15:
+	rtw_write16(pDM_Odm->Adapter, ODM_REG_NHM_TIMER_11N+2, 0x2710);	/* 0x894[31:16]= 0x2710	Time duration for NHM unit: 4us, 0x2710 =40ms */
 	                                                   ^

CHECK: line length of 152 exceeds 100 columns
#16: FILE: ./hal/odm_DIG.c:16:
+	/* rtw_write16(pDM_Odm->Adapter, ODM_REG_NHM_TIMER_11N+2, 0x4e20);	0x894[31:16]= 0x4e20	Time duration for NHM unit: 4us, 0x4e20 =80ms */

CHECK: line length of 118 exceeds 100 columns
#17: FILE: ./hal/odm_DIG.c:17:
+	rtw_write16(pDM_Odm->Adapter, ODM_REG_NHM_TH9_TH10_11N+2, 0xffff);	/* 0x890[31:16]= 0xffff	th_9, th_10 */

CHECK: spaces preferred around that '+' (ctx:VxV)
#17: FILE: ./hal/odm_DIG.c:17:
+	rtw_write16(pDM_Odm->Adapter, ODM_REG_NHM_TH9_TH10_11N+2, 0xffff);	/* 0x890[31:16]= 0xffff	th_9, th_10 */
 	                                                      ^

CHECK: line length of 145 exceeds 100 columns
#18: FILE: ./hal/odm_DIG.c:18:
+	/* rtw_write32(pDM_Odm->Adapter, ODM_REG_NHM_TH3_TO_TH0_11N, 0xffffff5c);	0x898 = 0xffffff5c		th_3, th_2, th_1, th_0 */

CHECK: line length of 137 exceeds 100 columns
#19: FILE: ./hal/odm_DIG.c:19:
+	rtw_write32(pDM_Odm->Adapter, ODM_REG_NHM_TH3_TO_TH0_11N, 0xffffff52);	/* 0x898 = 0xffffff52		th_3, th_2, th_1, th_0 */

CHECK: line length of 137 exceeds 100 columns
#20: FILE: ./hal/odm_DIG.c:20:
+	rtw_write32(pDM_Odm->Adapter, ODM_REG_NHM_TH7_TO_TH4_11N, 0xffffffff);	/* 0x89c = 0xffffffff		th_7, th_6, th_5, th_4 */

CHECK: line length of 135 exceeds 100 columns
#21: FILE: ./hal/odm_DIG.c:21:
+	PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG_FPGA0_IQK_11N, bMaskByte0, 0xff);		/* 0xe28[7:0]= 0xff		th_8 */

CHECK: line length of 133 exceeds 100 columns
#22: FILE: ./hal/odm_DIG.c:22:
+	PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG_NHM_TH9_TH10_11N, BIT10|BIT9|BIT8, 0x7);	/* 0x890[9:8]=3			enable CCX */

CHECK: spaces preferred around that '|' (ctx:VxV)
#22: FILE: ./hal/odm_DIG.c:22:
+	PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG_NHM_TH9_TH10_11N, BIT10|BIT9|BIT8, 0x7);	/* 0x890[9:8]=3			enable CCX */
 	                                                              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#22: FILE: ./hal/odm_DIG.c:22:
+	PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG_NHM_TH9_TH10_11N, BIT10|BIT9|BIT8, 0x7);	/* 0x890[9:8]=3			enable CCX */
 	                                                                   ^

CHECK: line length of 150 exceeds 100 columns
#23: FILE: ./hal/odm_DIG.c:23:
+	PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG_OFDM_FA_RSTC_11N, BIT7, 0x1);		/* 0xc0c[7]= 1			max power among all RX ants */

CHECK: Avoid CamelCase: <odm_GetNHMCounterStatistics>
#31: FILE: ./hal/odm_DIG.c:31:
+	odm_GetNHMCounterStatistics(pDM_Odm);

CHECK: Avoid CamelCase: <odm_NHMCounterStatisticsReset>
#34: FILE: ./hal/odm_DIG.c:34:
+	odm_NHMCounterStatisticsReset(pDM_Odm);

CHECK: Avoid CamelCase: <odm_NHMBBInit>
#55: FILE: ./hal/odm_DIG.c:55:
+void odm_NHMBBInit(void *pDM_VOID)

CHECK: Avoid CamelCase: <NHMLastTxOkcnt>
#61: FILE: ./hal/odm_DIG.c:61:
+	pDM_Odm->NHMLastTxOkcnt = 0;

CHECK: Avoid CamelCase: <NHMLastRxOkcnt>
#62: FILE: ./hal/odm_DIG.c:62:
+	pDM_Odm->NHMLastRxOkcnt = 0;

CHECK: Avoid CamelCase: <NHMCurTxOkcnt>
#63: FILE: ./hal/odm_DIG.c:63:
+	pDM_Odm->NHMCurTxOkcnt = 0;

CHECK: Avoid CamelCase: <NHMCurRxOkcnt>
#64: FILE: ./hal/odm_DIG.c:64:
+	pDM_Odm->NHMCurRxOkcnt = 0;

CHECK: spaces preferred around that '-' (ctx:VxV)
#75: FILE: ./hal/odm_DIG.c:75:
+		*(pDM_Odm->pNumTxBytesUnicast)-pDM_Odm->NHMLastTxOkcnt;
 		                              ^

CHECK: Unnecessary parentheses around pDM_Odm->pNumTxBytesUnicast
#75: FILE: ./hal/odm_DIG.c:75:
+		*(pDM_Odm->pNumTxBytesUnicast)-pDM_Odm->NHMLastTxOkcnt;

CHECK: spaces preferred around that '-' (ctx:VxV)
#77: FILE: ./hal/odm_DIG.c:77:
+		*(pDM_Odm->pNumRxBytesUnicast)-pDM_Odm->NHMLastRxOkcnt;
 		                              ^

CHECK: Unnecessary parentheses around pDM_Odm->pNumRxBytesUnicast
#77: FILE: ./hal/odm_DIG.c:77:
+		*(pDM_Odm->pNumRxBytesUnicast)-pDM_Odm->NHMLastRxOkcnt;

CHECK: Unnecessary parentheses around pDM_Odm->pNumTxBytesUnicast
#79: FILE: ./hal/odm_DIG.c:79:
+		*(pDM_Odm->pNumTxBytesUnicast);

CHECK: Unnecessary parentheses around pDM_Odm->pNumRxBytesUnicast
#81: FILE: ./hal/odm_DIG.c:81:
+		*(pDM_Odm->pNumRxBytesUnicast);

CHECK: Please don't use multiple blank lines
#83: FILE: ./hal/odm_DIG.c:83:
+
+

CHECK: line length of 127 exceeds 100 columns
#84: FILE: ./hal/odm_DIG.c:84:
+	if ((pDM_Odm->NHMCurTxOkcnt) + 1 > (u64)(pDM_Odm->NHMCurRxOkcnt<<2) + 1) { /* Tx > 4*Rx possible for adaptivity test */

CHECK: spaces preferred around that '<<' (ctx:VxV)
#84: FILE: ./hal/odm_DIG.c:84:
+	if ((pDM_Odm->NHMCurTxOkcnt) + 1 > (u64)(pDM_Odm->NHMCurRxOkcnt<<2) + 1) { /* Tx > 4*Rx possible for adaptivity test */
 	                                                               ^

CHECK: Unnecessary parentheses around 'pDM_Odm->NHMCurTxOkcnt'
#84: FILE: ./hal/odm_DIG.c:84:
+	if ((pDM_Odm->NHMCurTxOkcnt) + 1 > (u64)(pDM_Odm->NHMCurRxOkcnt<<2) + 1) { /* Tx > 4*Rx possible for adaptivity test */

CHECK: Using comparison to true is error prone
#85: FILE: ./hal/odm_DIG.c:85:
+		if (pDM_Odm->NHM_cnt_0 >= 190 || pDM_Odm->adaptivity_flag == true) {

CHECK: Using comparison to true is error prone
#102: FILE: ./hal/odm_DIG.c:102:
+		if (pDM_Odm->adaptivity_flag == true && pDM_Odm->NHM_cnt_0 <= 200) {

CHECK: Avoid CamelCase: <odm_SearchPwdBLowerBound>
#119: FILE: ./hal/odm_DIG.c:119:
+void odm_SearchPwdBLowerBound(void *pDM_VOID, u8 IGI_target)

CHECK: Avoid CamelCase: <Diff>
#126: FILE: ./hal/odm_DIG.c:126:
+	s8 Diff;

CHECK: Please don't use multiple blank lines
#131: FILE: ./hal/odm_DIG.c:131:
+
+

CHECK: spaces preferred around that '-' (ctx:VxV)
#132: FILE: ./hal/odm_DIG.c:132:
+	Diff = IGI_target-(s8)IGI;
 	                 ^

CHECK: Avoid CamelCase: <bMaskByte2>
#138: FILE: ./hal/odm_DIG.c:138:
+	PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, bMaskByte2, (u8)TH_H2L_dmc);

CHECK: Avoid CamelCase: <txEdcca1>
#147: FILE: ./hal/odm_DIG.c:147:
+				pDM_Odm->txEdcca1 = pDM_Odm->txEdcca1 + 1;

CHECK: Avoid CamelCase: <txEdcca0>
#151: FILE: ./hal/odm_DIG.c:151:
+				pDM_Odm->txEdcca0 = pDM_Odm->txEdcca0 + 1;

CHECK: spaces preferred around that '-' (ctx:VxV)
#155: FILE: ./hal/odm_DIG.c:155:
+			IGI = IGI-1;
 			         ^

CHECK: line length of 105 exceeds 100 columns
#160: FILE: ./hal/odm_DIG.c:160:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, bMaskByte0, (u8)TH_L2H_dmc);

CHECK: line length of 105 exceeds 100 columns
#161: FILE: ./hal/odm_DIG.c:161:
+			PHY_SetBBReg(pDM_Odm->Adapter, rOFDM0_ECCAThreshold, bMaskByte2, (u8)TH_H2L_dmc);

CHECK: Avoid CamelCase: <TxHangFlg>
#163: FILE: ./hal/odm_DIG.c:163:
+			pDM_Odm->TxHangFlg = true;

CHECK: Avoid CamelCase: <Adaptivity_IGI_upper>
#174: FILE: ./hal/odm_DIG.c:174:
+				pDM_Odm->Adaptivity_IGI_upper = IGI;

CHECK: Avoid CamelCase: <Carrier_Sense_enable>
#192: FILE: ./hal/odm_DIG.c:192:
+	if (pDM_Odm->Carrier_Sense_enable == false)

CHECK: Using comparison to false is error prone
#192: FILE: ./hal/odm_DIG.c:192:
+	if (pDM_Odm->Carrier_Sense_enable == false)

CHECK: Avoid CamelCase: <AdapEn_RSSI>
#197: FILE: ./hal/odm_DIG.c:197:
+	pDM_Odm->AdapEn_RSSI = 20;

CHECK: Avoid CamelCase: <IGI_Base>
#200: FILE: ./hal/odm_DIG.c:200:
+	pDM_Odm->IGI_Base = 0x32;

CHECK: Avoid CamelCase: <ForceEDCCA>
#202: FILE: ./hal/odm_DIG.c:202:
+	pDM_Odm->ForceEDCCA = 0;

CHECK: line length of 104 exceeds 100 columns
#212: FILE: ./hal/odm_DIG.c:212:
+	PHY_SetBBReg(pDM_Odm->Adapter, REG_RD_CTRL, BIT11, 1); /*  stop counting if EDCCA is asserted */

CHECK: Please don't use multiple blank lines
#215: FILE: ./hal/odm_DIG.c:215:
+
+

WARNING: braces {} are not necessary for single statement blocks
#223: FILE: ./hal/odm_DIG.c:223:
+	if (!(pDM_Odm->SupportAbility & ODM_BB_ADAPTIVITY)) {
+		return;
+	}

CHECK: No space is necessary after a cast
#233: FILE: ./hal/odm_DIG.c:233:
+	pDM_Odm->IGI_target = (u8) IGI_target;

CHECK: Using comparison to true is error prone
#236: FILE: ./hal/odm_DIG.c:236:
+	if (pDM_Odm->TxHangFlg == true) {

CHECK: line length of 101 exceeds 100 columns
#241: FILE: ./hal/odm_DIG.c:241:
+	if ((!pDM_Odm->bLinked) || (*pDM_Odm->pChannel > 149)) { /*  Band4 doesn't need adaptivity */

CHECK: Unnecessary parentheses around '!pDM_Odm->bLinked'
#241: FILE: ./hal/odm_DIG.c:241:
+	if ((!pDM_Odm->bLinked) || (*pDM_Odm->pChannel > 149)) { /*  Band4 doesn't need adaptivity */

CHECK: braces {} should be used on all arms of this statement
#247: FILE: ./hal/odm_DIG.c:247:
+	if (!pDM_Odm->ForceEDCCA) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#252: FILE: ./hal/odm_DIG.c:252:
+	} else

CHECK: Lines should not end with a '('
#255: FILE: ./hal/odm_DIG.c:255:
+	if (

CHECK: Using comparison to false is error prone
#257: FILE: ./hal/odm_DIG.c:257:
+		pDM_Odm->Carrier_Sense_enable == false &&

CHECK: Using comparison to false is error prone
#258: FILE: ./hal/odm_DIG.c:258:
+		pDM_Odm->NHM_disable == false &&

CHECK: Using comparison to false is error prone
#259: FILE: ./hal/odm_DIG.c:259:
+		pDM_Odm->TxHangFlg == false

CHECK: spaces preferred around that '-' (ctx:VxV)
#264: FILE: ./hal/odm_DIG.c:264:
+		Diff = IGI_target-(s8)IGI;
 		                 ^

CHECK: Avoid CamelCase: <CurrentIGI>
#284: FILE: ./hal/odm_DIG.c:284:
+void ODM_Write_DIG(void *pDM_VOID, u8 CurrentIGI)

CHECK: Avoid CamelCase: <bStopDIG>
#289: FILE: ./hal/odm_DIG.c:289:
+	if (pDM_DigTable->bStopDIG) {

WARNING: braces {} are not necessary for single statement blocks
#289: FILE: ./hal/odm_DIG.c:289:
+	if (pDM_DigTable->bStopDIG) {
+		return;
+	}

CHECK: Avoid CamelCase: <bPSDInProgress>
#295: FILE: ./hal/odm_DIG.c:295:
+		if (!pDM_DigTable->bPSDInProgress) {

WARNING: braces {} are not necessary for single statement blocks
#296: FILE: ./hal/odm_DIG.c:296:
+			if (CurrentIGI > pDM_DigTable->rx_gain_range_max) {
+				CurrentIGI = pDM_DigTable->rx_gain_range_max;
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#300: FILE: ./hal/odm_DIG.c:300:
+
+		}

CHECK: line length of 107 exceeds 100 columns
#303: FILE: ./hal/odm_DIG.c:303:
+		PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG(IGI_A, pDM_Odm), ODM_BIT(IGI, pDM_Odm), CurrentIGI);

CHECK: line length of 107 exceeds 100 columns
#305: FILE: ./hal/odm_DIG.c:305:
+		PHY_SetBBReg(pDM_Odm->Adapter, ODM_REG(IGI_B, pDM_Odm), ODM_BIT(IGI, pDM_Odm), CurrentIGI);

CHECK: Blank lines aren't necessary before a close brace '}'
#310: FILE: ./hal/odm_DIG.c:310:
+
+}

CHECK: Avoid CamelCase: <odm_DigAbort>
#312: FILE: ./hal/odm_DIG.c:312:
+bool odm_DigAbort(void *pDM_VOID)

WARNING: braces {} are not necessary for single statement blocks
#317: FILE: ./hal/odm_DIG.c:317:
+	if (!(pDM_Odm->SupportAbility & ODM_BB_FA_CNT)) {
+		return	true;
+	}

WARNING: braces {} are not necessary for single statement blocks
#322: FILE: ./hal/odm_DIG.c:322:
+	if (!(pDM_Odm->SupportAbility & ODM_BB_DIG)) {
+		return	true;
+	}

CHECK: Unnecessary parentheses around pDM_Odm->pbScanInProcess
#327: FILE: ./hal/odm_DIG.c:327:
+	if (*(pDM_Odm->pbScanInProcess)) {

CHECK: Unnecessary parentheses around 'pDM_Odm->pbScanInProcess'
#327: FILE: ./hal/odm_DIG.c:327:
+	if (*(pDM_Odm->pbScanInProcess)) {

WARNING: braces {} are not necessary for single statement blocks
#327: FILE: ./hal/odm_DIG.c:327:
+	if (*(pDM_Odm->pbScanInProcess)) {
+		return	true;
+	}

CHECK: Avoid CamelCase: <bDMInitialGainEnable>
#332: FILE: ./hal/odm_DIG.c:332:
+	if (pDM_Odm->bDMInitialGainEnable == false) {

WARNING: braces {} are not necessary for single statement blocks
#332: FILE: ./hal/odm_DIG.c:332:
+	if (pDM_Odm->bDMInitialGainEnable == false) {
+		return	true;
+	}

CHECK: Using comparison to false is error prone
#332: FILE: ./hal/odm_DIG.c:332:
+	if (pDM_Odm->bDMInitialGainEnable == false) {

CHECK: line length of 121 exceeds 100 columns
#346: FILE: ./hal/odm_DIG.c:346:
+	pDM_DigTable->CurIGValue = (u8) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(IGI_A, pDM_Odm), ODM_BIT(IGI, pDM_Odm));

CHECK: No space is necessary after a cast
#346: FILE: ./hal/odm_DIG.c:346:
+	pDM_DigTable->CurIGValue = (u8) PHY_QueryBBReg(pDM_Odm->Adapter, ODM_REG(IGI_A, pDM_Odm), ODM_BIT(IGI, pDM_Odm));

CHECK: Avoid CamelCase: <RssiLowThresh>
#347: FILE: ./hal/odm_DIG.c:347:
+	pDM_DigTable->RssiLowThresh	= DM_DIG_THRESH_LOW;

CHECK: Avoid CamelCase: <RssiHighThresh>
#348: FILE: ./hal/odm_DIG.c:348:
+	pDM_DigTable->RssiHighThresh	= DM_DIG_THRESH_HIGH;

CHECK: Avoid CamelCase: <FALowThresh>
#349: FILE: ./hal/odm_DIG.c:349:
+	pDM_DigTable->FALowThresh	= DMfalseALARM_THRESH_LOW;

CHECK: Avoid CamelCase: <DMfalseALARM_THRESH_LOW>
#349: FILE: ./hal/odm_DIG.c:349:
+	pDM_DigTable->FALowThresh	= DMfalseALARM_THRESH_LOW;

CHECK: Avoid CamelCase: <FAHighThresh>
#350: FILE: ./hal/odm_DIG.c:350:
+	pDM_DigTable->FAHighThresh	= DMfalseALARM_THRESH_HIGH;

CHECK: Avoid CamelCase: <DMfalseALARM_THRESH_HIGH>
#350: FILE: ./hal/odm_DIG.c:350:
+	pDM_DigTable->FAHighThresh	= DMfalseALARM_THRESH_HIGH;

CHECK: Avoid CamelCase: <BackoffVal>
#351: FILE: ./hal/odm_DIG.c:351:
+	pDM_DigTable->BackoffVal = DM_DIG_BACKOFF_DEFAULT;

CHECK: Avoid CamelCase: <BackoffVal_range_max>
#352: FILE: ./hal/odm_DIG.c:352:
+	pDM_DigTable->BackoffVal_range_max = DM_DIG_BACKOFF_MAX;

CHECK: Avoid CamelCase: <BackoffVal_range_min>
#353: FILE: ./hal/odm_DIG.c:353:
+	pDM_DigTable->BackoffVal_range_min = DM_DIG_BACKOFF_MIN;

CHECK: Avoid CamelCase: <PreCCK_CCAThres>
#354: FILE: ./hal/odm_DIG.c:354:
+	pDM_DigTable->PreCCK_CCAThres = 0xFF;

CHECK: Avoid CamelCase: <CurCCK_CCAThres>
#355: FILE: ./hal/odm_DIG.c:355:
+	pDM_DigTable->CurCCK_CCAThres = 0x83;

CHECK: Avoid CamelCase: <ForbiddenIGI>
#356: FILE: ./hal/odm_DIG.c:356:
+	pDM_DigTable->ForbiddenIGI = DM_DIG_MIN_NIC;

CHECK: Avoid CamelCase: <LargeFAHit>
#357: FILE: ./hal/odm_DIG.c:357:
+	pDM_DigTable->LargeFAHit = 0;

CHECK: Avoid CamelCase: <Recover_cnt>
#358: FILE: ./hal/odm_DIG.c:358:
+	pDM_DigTable->Recover_cnt = 0;

CHECK: Avoid CamelCase: <bMediaConnect_0>
#359: FILE: ./hal/odm_DIG.c:359:
+	pDM_DigTable->bMediaConnect_0 = false;

CHECK: Avoid CamelCase: <bMediaConnect_1>
#360: FILE: ./hal/odm_DIG.c:360:
+	pDM_DigTable->bMediaConnect_1 = false;

CHECK: Avoid CamelCase: <DIG_Dynamic_MIN_0>
#365: FILE: ./hal/odm_DIG.c:365:
+	pDM_DigTable->DIG_Dynamic_MIN_0 = DM_DIG_MIN_NIC;

CHECK: Avoid CamelCase: <DIG_Dynamic_MIN_1>
#366: FILE: ./hal/odm_DIG.c:366:
+	pDM_DigTable->DIG_Dynamic_MIN_1 = DM_DIG_MIN_NIC;

CHECK: Avoid CamelCase: <BT30_CurIGI>
#369: FILE: ./hal/odm_DIG.c:369:
+	pDM_DigTable->BT30_CurIGI = 0x32;

CHECK: Blank lines aren't necessary before a close brace '}'
#374: FILE: ./hal/odm_DIG.c:374:
+
+}

CHECK: Please don't use multiple blank lines
#376: FILE: ./hal/odm_DIG.c:376:
+
+

CHECK: Avoid CamelCase: <pFalseAlmCnt>
#383: FILE: ./hal/odm_DIG.c:383:
+	struct false_ALARM_STATISTICS *pFalseAlmCnt = &pDM_Odm->FalseAlmCnt;

CHECK: Avoid CamelCase: <FalseAlmCnt>
#383: FILE: ./hal/odm_DIG.c:383:
+	struct false_ALARM_STATISTICS *pFalseAlmCnt = &pDM_Odm->FalseAlmCnt;

CHECK: Avoid CamelCase: <FirstConnect>
#384: FILE: ./hal/odm_DIG.c:384:
+	bool FirstConnect, FirstDisConnect;

CHECK: Avoid CamelCase: <FirstDisConnect>
#384: FILE: ./hal/odm_DIG.c:384:
+	bool FirstConnect, FirstDisConnect;

CHECK: Avoid CamelCase: <Adap_IGI_Upper>
#390: FILE: ./hal/odm_DIG.c:390:
+	u8 Adap_IGI_Upper = 0;

CHECK: Avoid CamelCase: <TxTp>
#391: FILE: ./hal/odm_DIG.c:391:
+	u32 TxTp = 0, RxTp = 0;

CHECK: Avoid CamelCase: <RxTp>
#391: FILE: ./hal/odm_DIG.c:391:
+	u32 TxTp = 0, RxTp = 0;

CHECK: Avoid CamelCase: <bDFSBand>
#392: FILE: ./hal/odm_DIG.c:392:
+	bool bDFSBand = false;

CHECK: Avoid CamelCase: <bPerformance>
#393: FILE: ./hal/odm_DIG.c:393:
+	bool bPerformance = true, bFirstTpTarget = false, bFirstCoverage = false;

CHECK: Avoid CamelCase: <bFirstTpTarget>
#393: FILE: ./hal/odm_DIG.c:393:
+	bool bPerformance = true, bFirstTpTarget = false, bFirstCoverage = false;

CHECK: Avoid CamelCase: <bFirstCoverage>
#393: FILE: ./hal/odm_DIG.c:393:
+	bool bPerformance = true, bFirstTpTarget = false, bFirstCoverage = false;

CHECK: Using comparison to true is error prone
#398: FILE: ./hal/odm_DIG.c:398:
+	if (pDM_Odm->adaptivity_flag == true)

CHECK: Please don't use multiple blank lines
#401: FILE: ./hal/odm_DIG.c:401:
+
+

CHECK: Using comparison to false is error prone
#404: FILE: ./hal/odm_DIG.c:404:
+	FirstConnect = (pDM_Odm->bLinked) && (pDM_DigTable->bMediaConnect_0 == false);

CHECK: Using comparison to true is error prone
#405: FILE: ./hal/odm_DIG.c:405:
+	FirstDisConnect = (!pDM_Odm->bLinked) && (pDM_DigTable->bMediaConnect_0 == true);

WARNING: braces {} are not necessary for any arm of this statement
#417: FILE: ./hal/odm_DIG.c:417:
+		if (pDM_Odm->bBtLimitedDig == 1) {
[...]
+		} else
[...]

CHECK: Unbalanced braces around else statement
#419: FILE: ./hal/odm_DIG.c:419:
+		} else

CHECK: Lines should not end with a '('
#447: FILE: ./hal/odm_DIG.c:447:
+			if (

CHECK: Avoid CamelCase: <AntDiv_RSSI_max>
#452: FILE: ./hal/odm_DIG.c:452:
+				if (pDM_DigTable->AntDiv_RSSI_max > DIG_MaxOfMin)

CHECK: No space is necessary after a cast
#455: FILE: ./hal/odm_DIG.c:455:
+					DIG_Dynamic_MIN = (u8) pDM_DigTable->AntDiv_RSSI_max;

CHECK: Unbalanced braces around else statement
#465: FILE: ./hal/odm_DIG.c:465:
+	} else

CHECK: Avoid CamelCase: <odm_ForbiddenIGICheck>
#467: FILE: ./hal/odm_DIG.c:467:
+			odm_ForbiddenIGICheck(pDM_Odm, DIG_Dynamic_MIN, CurrentIGI);

CHECK: Lines should not end with a '('
#470: FILE: ./hal/odm_DIG.c:470:
+		if (

CHECK: Unnecessary parentheses around 'pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5'
#470: FILE: ./hal/odm_DIG.c:470:
+		if (
+			(pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5) &&
+			pDM_Odm->bsta_state
+		) {

WARNING: braces {} are not necessary for single statement blocks
#479: FILE: ./hal/odm_DIG.c:479:
+	if (pDM_DigTable->rx_gain_range_min > pDM_DigTable->rx_gain_range_max) {
+		pDM_DigTable->rx_gain_range_min = pDM_DigTable->rx_gain_range_max;
+	}

CHECK: Please don't use multiple blank lines
#483: FILE: ./hal/odm_DIG.c:483:
+
+

CHECK: Avoid CamelCase: <odm_FAThresholdCheck>
#485: FILE: ./hal/odm_DIG.c:485:
+	odm_FAThresholdCheck(pDM_Odm, bDFSBand, bPerformance, RxTp, TxTp, dm_FA_thres);

CHECK: Blank lines aren't necessary after an open brace '{'
#489: FILE: ./hal/odm_DIG.c:489:
+	if (pDM_Odm->bLinked && bPerformance) {
+

CHECK: Avoid CamelCase: <Cnt_all>
#502: FILE: ./hal/odm_DIG.c:502:
+			if (pFalseAlmCnt->Cnt_all > dm_FA_thres[2])

CHECK: Lines should not end with a '('
#509: FILE: ./hal/odm_DIG.c:509:
+			if (

CHECK: Unnecessary parentheses around 'pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5'
#509: FILE: ./hal/odm_DIG.c:509:
+			if (
+				(pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5) &&
+				(pFalseAlmCnt->Cnt_all < DM_DIG_FA_TH1) &&
+				(pDM_Odm->bsta_state)
+			) {

CHECK: Unnecessary parentheses around 'pFalseAlmCnt->Cnt_all < DM_DIG_FA_TH1'
#509: FILE: ./hal/odm_DIG.c:509:
+			if (
+				(pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5) &&
+				(pFalseAlmCnt->Cnt_all < DM_DIG_FA_TH1) &&
+				(pDM_Odm->bsta_state)
+			) {

CHECK: Unnecessary parentheses around 'pDM_Odm->bsta_state'
#509: FILE: ./hal/odm_DIG.c:509:
+			if (
+				(pDM_Odm->PhyDbgInfo.NumQryBeaconPkt < 5) &&
+				(pFalseAlmCnt->Cnt_all < DM_DIG_FA_TH1) &&
+				(pDM_Odm->bsta_state)
+			) {

CHECK: Blank lines aren't necessary after an open brace '{'
#518: FILE: ./hal/odm_DIG.c:518:
+	} else {
+

CHECK: Lines should not end with a '('
#539: FILE: ./hal/odm_DIG.c:539:
+	if (

CHECK: Using comparison to true is error prone
#541: FILE: ./hal/odm_DIG.c:541:
+		pDM_Odm->adaptivity_flag == true

CHECK: Avoid CamelCase: <IGI_LowerBound>
#546: FILE: ./hal/odm_DIG.c:546:
+		if (pDM_Odm->IGI_LowerBound != 0) {

CHECK: Please don't use multiple blank lines
#552: FILE: ./hal/odm_DIG.c:552:
+
+

CHECK: line length of 137 exceeds 100 columns
#569: FILE: ./hal/odm_DIG.c:569:
+				ODM_Write_DIG(pDM_Odm, pDM_DigTable->BT30_CurIGI);/* ODM_Write_DIG(pDM_Odm, pDM_DigTable->CurIGValue); */

CHECK: line length of 106 exceeds 100 columns
#572: FILE: ./hal/odm_DIG.c:572:
+		ODM_Write_DIG(pDM_Odm, CurrentIGI);/* ODM_Write_DIG(pDM_Odm, pDM_DigTable->CurIGValue); */

CHECK: spaces preferred around that '+' (ctx:VxV)
#586: FILE: ./hal/odm_DIG.c:586:
+	CurrentIGI = CurrentIGI+RSSI_OFFSET_DIG;
 	                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#591: FILE: ./hal/odm_DIG.c:591:
+		CurrentIGI = CurrentIGI+4;
 		                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#593: FILE: ./hal/odm_DIG.c:593:
+		CurrentIGI = CurrentIGI+2;
 		                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#595: FILE: ./hal/odm_DIG.c:595:
+		CurrentIGI = CurrentIGI-2;
 		                       ^

CHECK: Please don't use multiple blank lines
#597: FILE: ./hal/odm_DIG.c:597:
+
+

CHECK: Lines should not end with a '('
#632: FILE: ./hal/odm_DIG.c:632:
+	ret_value = PHY_QueryBBReg(

CHECK: spaces preferred around that '&' (ctx:VxV)
#635: FILE: ./hal/odm_DIG.c:635:
+	FalseAlmCnt->Cnt_Fast_Fsync = (ret_value&0xffff);
 	                                        ^

CHECK: Avoid CamelCase: <Cnt_Fast_Fsync>
#635: FILE: ./hal/odm_DIG.c:635:
+	FalseAlmCnt->Cnt_Fast_Fsync = (ret_value&0xffff);

CHECK: spaces preferred around that '&' (ctx:VxV)
#636: FILE: ./hal/odm_DIG.c:636:
+	FalseAlmCnt->Cnt_SB_Search_fail = ((ret_value&0xffff0000)>>16);
 	                                             ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#636: FILE: ./hal/odm_DIG.c:636:
+	FalseAlmCnt->Cnt_SB_Search_fail = ((ret_value&0xffff0000)>>16);
 	                                                         ^

CHECK: Avoid CamelCase: <Cnt_SB_Search_fail>
#636: FILE: ./hal/odm_DIG.c:636:
+	FalseAlmCnt->Cnt_SB_Search_fail = ((ret_value&0xffff0000)>>16);

CHECK: Lines should not end with a '('
#638: FILE: ./hal/odm_DIG.c:638:
+	ret_value = PHY_QueryBBReg(

CHECK: spaces preferred around that '&' (ctx:VxV)
#641: FILE: ./hal/odm_DIG.c:641:
+	FalseAlmCnt->Cnt_OFDM_CCA = (ret_value&0xffff);
 	                                      ^

CHECK: Avoid CamelCase: <Cnt_OFDM_CCA>
#641: FILE: ./hal/odm_DIG.c:641:
+	FalseAlmCnt->Cnt_OFDM_CCA = (ret_value&0xffff);

CHECK: spaces preferred around that '&' (ctx:VxV)
#642: FILE: ./hal/odm_DIG.c:642:
+	FalseAlmCnt->Cnt_Parity_Fail = ((ret_value&0xffff0000)>>16);
 	                                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#642: FILE: ./hal/odm_DIG.c:642:
+	FalseAlmCnt->Cnt_Parity_Fail = ((ret_value&0xffff0000)>>16);
 	                                                      ^

CHECK: Avoid CamelCase: <Cnt_Parity_Fail>
#642: FILE: ./hal/odm_DIG.c:642:
+	FalseAlmCnt->Cnt_Parity_Fail = ((ret_value&0xffff0000)>>16);

CHECK: Lines should not end with a '('
#644: FILE: ./hal/odm_DIG.c:644:
+	ret_value = PHY_QueryBBReg(

CHECK: spaces preferred around that '&' (ctx:VxV)
#647: FILE: ./hal/odm_DIG.c:647:
+	FalseAlmCnt->Cnt_Rate_Illegal = (ret_value&0xffff);
 	                                          ^

CHECK: Avoid CamelCase: <Cnt_Rate_Illegal>
#647: FILE: ./hal/odm_DIG.c:647:
+	FalseAlmCnt->Cnt_Rate_Illegal = (ret_value&0xffff);

CHECK: spaces preferred around that '&' (ctx:VxV)
#648: FILE: ./hal/odm_DIG.c:648:
+	FalseAlmCnt->Cnt_Crc8_fail = ((ret_value&0xffff0000)>>16);
 	                                        ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#648: FILE: ./hal/odm_DIG.c:648:
+	FalseAlmCnt->Cnt_Crc8_fail = ((ret_value&0xffff0000)>>16);
 	                                                    ^

CHECK: Avoid CamelCase: <Cnt_Crc8_fail>
#648: FILE: ./hal/odm_DIG.c:648:
+	FalseAlmCnt->Cnt_Crc8_fail = ((ret_value&0xffff0000)>>16);

CHECK: Lines should not end with a '('
#650: FILE: ./hal/odm_DIG.c:650:
+	ret_value = PHY_QueryBBReg(

CHECK: spaces preferred around that '&' (ctx:VxV)
#653: FILE: ./hal/odm_DIG.c:653:
+	FalseAlmCnt->Cnt_Mcs_fail = (ret_value&0xffff);
 	                                      ^

CHECK: Avoid CamelCase: <Cnt_Mcs_fail>
#653: FILE: ./hal/odm_DIG.c:653:
+	FalseAlmCnt->Cnt_Mcs_fail = (ret_value&0xffff);

CHECK: Avoid CamelCase: <Cnt_Ofdm_fail>
#655: FILE: ./hal/odm_DIG.c:655:
+	FalseAlmCnt->Cnt_Ofdm_fail =

CHECK: Lines should not end with a '('
#668: FILE: ./hal/odm_DIG.c:668:
+		ret_value = PHY_QueryBBReg(

CHECK: Avoid CamelCase: <Cnt_Cck_fail>
#671: FILE: ./hal/odm_DIG.c:671:
+		FalseAlmCnt->Cnt_Cck_fail = ret_value;

CHECK: Lines should not end with a '('
#673: FILE: ./hal/odm_DIG.c:673:
+		ret_value = PHY_QueryBBReg(

CHECK: Avoid CamelCase: <bMaskByte3>
#674: FILE: ./hal/odm_DIG.c:674:
+			pDM_Odm->Adapter, ODM_REG_CCK_FA_MSB_11N, bMaskByte3

CHECK: spaces preferred around that '&' (ctx:VxV)
#676: FILE: ./hal/odm_DIG.c:676:
+		FalseAlmCnt->Cnt_Cck_fail += (ret_value&0xff)<<8;
 		                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#676: FILE: ./hal/odm_DIG.c:676:
+		FalseAlmCnt->Cnt_Cck_fail += (ret_value&0xff)<<8;
 		                                             ^

CHECK: Lines should not end with a '('
#678: FILE: ./hal/odm_DIG.c:678:
+		ret_value = PHY_QueryBBReg(

CHECK: Avoid CamelCase: <Cnt_CCK_CCA>
#681: FILE: ./hal/odm_DIG.c:681:
+		FalseAlmCnt->Cnt_CCK_CCA =

CHECK: spaces preferred around that '&' (ctx:VxV)
#682: FILE: ./hal/odm_DIG.c:682:
+			((ret_value&0xFF)<<8) | ((ret_value&0xFF00)>>8);
 			           ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#682: FILE: ./hal/odm_DIG.c:682:
+			((ret_value&0xFF)<<8) | ((ret_value&0xFF00)>>8);
 			                 ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#682: FILE: ./hal/odm_DIG.c:682:
+			((ret_value&0xFF)<<8) | ((ret_value&0xFF00)>>8);
 			                                   ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#682: FILE: ./hal/odm_DIG.c:682:
+			((ret_value&0xFF)<<8) | ((ret_value&0xFF00)>>8);
 			                                           ^

CHECK: Lines should not end with a '('
#685: FILE: ./hal/odm_DIG.c:685:
+	FalseAlmCnt->Cnt_all = (

CHECK: Avoid CamelCase: <Cnt_CCA_all>
#695: FILE: ./hal/odm_DIG.c:695:
+	FalseAlmCnt->Cnt_CCA_all =

CHECK: Please don't use multiple blank lines
#699: FILE: ./hal/odm_DIG.c:699:
+
+

CHECK: Lines should not end with a '('
#700: FILE: ./hal/odm_DIG.c:700:
+void odm_FAThresholdCheck(

CHECK: braces {} should be used on all arms of this statement
#752: FILE: ./hal/odm_DIG.c:752:
+			if (pDM_DigTable->LargeFAHit < 3) {
[...]
+			} else
[...]

CHECK: line length of 107 exceeds 100 columns
#753: FILE: ./hal/odm_DIG.c:753:
+				if ((pDM_DigTable->ForbiddenIGI - 2) < DIG_Dynamic_MIN) { /* DM_DIG_MIN) */

CHECK: line length of 103 exceeds 100 columns
#754: FILE: ./hal/odm_DIG.c:754:
+					pDM_DigTable->ForbiddenIGI = DIG_Dynamic_MIN; /* DM_DIG_MIN; */

CHECK: Unbalanced braces around else statement
#760: FILE: ./hal/odm_DIG.c:760:
+			} else

CHECK: Blank lines aren't necessary before a close brace '}'
#767: FILE: ./hal/odm_DIG.c:767:
+
+}

CHECK: Please don't use multiple blank lines
#779: FILE: ./hal/odm_DIG.c:779:
+
+

CHECK: Lines should not end with a '('
#780: FILE: ./hal/odm_DIG.c:780:
+	if (

CHECK: braces {} should be used on all arms of this statement
#791: FILE: ./hal/odm_DIG.c:791:
+		if (pDM_Odm->RSSI_Min > 25)
[...]
+		else if ((pDM_Odm->RSSI_Min <= 25) && (pDM_Odm->RSSI_Min > 10))
[...]
+		else {
[...]

CHECK: Unbalanced braces around else statement
#795: FILE: ./hal/odm_DIG.c:795:
+		else {

total: 0 errors, 9 warnings, 187 checks, 822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DIG.c has style problems, please review.
---------------
./hal/odm_DIG.h
---------------
CHECK: Avoid CamelCase: <Dig_Enable_Flag>
#15: FILE: ./hal/odm_DIG.h:15:
+	u8 Dig_Enable_Flag;

CHECK: Avoid CamelCase: <Dig_Ext_Port_Stage>
#16: FILE: ./hal/odm_DIG.h:16:
+	u8 Dig_Ext_Port_Stage;

CHECK: Avoid CamelCase: <CurSTAConnectState>
#24: FILE: ./hal/odm_DIG.h:24:
+	u8 CurSTAConnectState;

CHECK: Avoid CamelCase: <PreSTAConnectState>
#25: FILE: ./hal/odm_DIG.h:25:
+	u8 PreSTAConnectState;

CHECK: Avoid CamelCase: <CurMultiSTAConnectState>
#26: FILE: ./hal/odm_DIG.h:26:
+	u8 CurMultiSTAConnectState;

CHECK: Avoid CamelCase: <PreIGValue>
#28: FILE: ./hal/odm_DIG.h:28:
+	u8 PreIGValue;

CHECK: Avoid CamelCase: <BackupIGValue>
#30: FILE: ./hal/odm_DIG.h:30:
+	u8 BackupIGValue;		/* MP DIG */

CHECK: Avoid CamelCase: <IGIBackup>
#32: FILE: ./hal/odm_DIG.h:32:
+	u8 IGIBackup;

CHECK: Avoid CamelCase: <Rssi_val_min>
#39: FILE: ./hal/odm_DIG.h:39:
+	u8 Rssi_val_min;

CHECK: Avoid CamelCase: <PreCCKPDState>
#43: FILE: ./hal/odm_DIG.h:43:
+	u8 PreCCKPDState;

CHECK: Avoid CamelCase: <CurCCKPDState>
#44: FILE: ./hal/odm_DIG.h:44:
+	u8 CurCCKPDState;

CHECK: Avoid CamelCase: <CCKPDBackup>
#45: FILE: ./hal/odm_DIG.h:45:
+	u8 CCKPDBackup;

CHECK: Avoid CamelCase: <pbP2pLinkInProgress>
#59: FILE: ./hal/odm_DIG.h:59:
+	u8 *pbP2pLinkInProgress;

CHECK: Avoid CamelCase: <Cnt_Ofdm_fail_pre>
#68: FILE: ./hal/odm_DIG.h:68:
+	u32 Cnt_Ofdm_fail_pre; /* For RTL8881A */

CHECK: Avoid CamelCase: <Cnt_BW_USC>
#76: FILE: ./hal/odm_DIG.h:76:
+	u32 Cnt_BW_USC; /* Gary */

CHECK: Avoid CamelCase: <Cnt_BW_LSC>
#77: FILE: ./hal/odm_DIG.h:77:
+	u32 Cnt_BW_LSC; /* Gary */

CHECK: Lines should not end with a '('
#152: FILE: ./hal/odm_DIG.h:152:
+void odm_FAThresholdCheck(

total: 0 errors, 0 warnings, 17 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DIG.h has style problems, please review.
---------------
./hal/odm_DIG.o
---------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DIG.o has style problems, please review.
--------------------------------
./hal/odm_DynamicBBPowerSaving.c
--------------------------------
CHECK: Avoid CamelCase: <pDM_PSTable>
#13: FILE: ./hal/odm_DynamicBBPowerSaving.c:13:
+	struct ps_t *pDM_PSTable = &pDM_Odm->DM_PSTable;

CHECK: Avoid CamelCase: <DM_PSTable>
#13: FILE: ./hal/odm_DynamicBBPowerSaving.c:13:
+	struct ps_t *pDM_PSTable = &pDM_Odm->DM_PSTable;

CHECK: Avoid CamelCase: <PreCCAState>
#15: FILE: ./hal/odm_DynamicBBPowerSaving.c:15:
+	pDM_PSTable->PreCCAState = CCA_MAX;

CHECK: Avoid CamelCase: <CurCCAState>
#16: FILE: ./hal/odm_DynamicBBPowerSaving.c:16:
+	pDM_PSTable->CurCCAState = CCA_MAX;

CHECK: Avoid CamelCase: <PreRFState>
#17: FILE: ./hal/odm_DynamicBBPowerSaving.c:17:
+	pDM_PSTable->PreRFState = RF_MAX;

CHECK: Avoid CamelCase: <CurRFState>
#18: FILE: ./hal/odm_DynamicBBPowerSaving.c:18:
+	pDM_PSTable->CurRFState = RF_MAX;

CHECK: Avoid CamelCase: <bForceInNormal>
#23: FILE: ./hal/odm_DynamicBBPowerSaving.c:23:
+void ODM_RF_Saving(void *pDM_VOID, u8 bForceInNormal)

CHECK: Avoid CamelCase: <Rssi_Up_bound>
#27: FILE: ./hal/odm_DynamicBBPowerSaving.c:27:
+	u8 Rssi_Up_bound = 30;

CHECK: Avoid CamelCase: <Rssi_Low_bound>
#28: FILE: ./hal/odm_DynamicBBPowerSaving.c:28:
+	u8 Rssi_Low_bound = 25;

CHECK: Blank lines aren't necessary after an open brace '{'
#36: FILE: ./hal/odm_DynamicBBPowerSaving.c:36:
+	if (pDM_PSTable->initialize == 0) {
+

CHECK: line length of 105 exceeds 100 columns
#37: FILE: ./hal/odm_DynamicBBPowerSaving.c:37:
+		pDM_PSTable->Reg874 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x874, bMaskDWord)&0x1CC000)>>14;

CHECK: spaces preferred around that '&' (ctx:VxV)
#37: FILE: ./hal/odm_DynamicBBPowerSaving.c:37:
+		pDM_PSTable->Reg874 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x874, bMaskDWord)&0x1CC000)>>14;
 		                                                                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#37: FILE: ./hal/odm_DynamicBBPowerSaving.c:37:
+		pDM_PSTable->Reg874 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x874, bMaskDWord)&0x1CC000)>>14;
 		                                                                                    ^

CHECK: Avoid CamelCase: <Reg874>
#37: FILE: ./hal/odm_DynamicBBPowerSaving.c:37:
+		pDM_PSTable->Reg874 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x874, bMaskDWord)&0x1CC000)>>14;

CHECK: spaces preferred around that '&' (ctx:VxV)
#38: FILE: ./hal/odm_DynamicBBPowerSaving.c:38:
+		pDM_PSTable->RegC70 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xc70, bMaskDWord)&BIT3)>>3;
 		                                                                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#38: FILE: ./hal/odm_DynamicBBPowerSaving.c:38:
+		pDM_PSTable->RegC70 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xc70, bMaskDWord)&BIT3)>>3;
 		                                                                                ^

CHECK: Avoid CamelCase: <RegC70>
#38: FILE: ./hal/odm_DynamicBBPowerSaving.c:38:
+		pDM_PSTable->RegC70 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xc70, bMaskDWord)&BIT3)>>3;

CHECK: line length of 107 exceeds 100 columns
#39: FILE: ./hal/odm_DynamicBBPowerSaving.c:39:
+		pDM_PSTable->Reg85C = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x85c, bMaskDWord)&0xFF000000)>>24;

CHECK: spaces preferred around that '&' (ctx:VxV)
#39: FILE: ./hal/odm_DynamicBBPowerSaving.c:39:
+		pDM_PSTable->Reg85C = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x85c, bMaskDWord)&0xFF000000)>>24;
 		                                                                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#39: FILE: ./hal/odm_DynamicBBPowerSaving.c:39:
+		pDM_PSTable->Reg85C = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x85c, bMaskDWord)&0xFF000000)>>24;
 		                                                                                      ^

CHECK: Avoid CamelCase: <Reg85C>
#39: FILE: ./hal/odm_DynamicBBPowerSaving.c:39:
+		pDM_PSTable->Reg85C = (PHY_QueryBBReg(pDM_Odm->Adapter, 0x85c, bMaskDWord)&0xFF000000)>>24;

CHECK: line length of 103 exceeds 100 columns
#40: FILE: ./hal/odm_DynamicBBPowerSaving.c:40:
+		pDM_PSTable->RegA74 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xa74, bMaskDWord)&0xF000)>>12;

CHECK: spaces preferred around that '&' (ctx:VxV)
#40: FILE: ./hal/odm_DynamicBBPowerSaving.c:40:
+		pDM_PSTable->RegA74 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xa74, bMaskDWord)&0xF000)>>12;
 		                                                                          ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#40: FILE: ./hal/odm_DynamicBBPowerSaving.c:40:
+		pDM_PSTable->RegA74 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xa74, bMaskDWord)&0xF000)>>12;
 		                                                                                  ^

CHECK: Avoid CamelCase: <RegA74>
#40: FILE: ./hal/odm_DynamicBBPowerSaving.c:40:
+		pDM_PSTable->RegA74 = (PHY_QueryBBReg(pDM_Odm->Adapter, 0xa74, bMaskDWord)&0xF000)>>12;

CHECK: braces {} should be used on all arms of this statement
#45: FILE: ./hal/odm_DynamicBBPowerSaving.c:45:
+	if (!bForceInNormal) {
[...]
+	} else
[...]

CHECK: braces {} should be used on all arms of this statement
#46: FILE: ./hal/odm_DynamicBBPowerSaving.c:46:
+		if (pDM_Odm->RSSI_Min != 0xFF) {
[...]
+		} else
[...]

CHECK: Unbalanced braces around else statement
#58: FILE: ./hal/odm_DynamicBBPowerSaving.c:58:
+		} else

CHECK: Unbalanced braces around else statement
#60: FILE: ./hal/odm_DynamicBBPowerSaving.c:60:
+	} else

CHECK: line length of 104 exceeds 100 columns
#65: FILE: ./hal/odm_DynamicBBPowerSaving.c:65:
+			PHY_SetBBReg(pDM_Odm->Adapter, 0x874, 0x1C0000, 0x2); /* Reg874[20:18]=3'b010 */

CHECK: line length of 106 exceeds 100 columns
#67: FILE: ./hal/odm_DynamicBBPowerSaving.c:67:
+			PHY_SetBBReg(pDM_Odm->Adapter, 0x85c, 0xFF000000, 0x63); /* Reg85C[31:24]= 0x63 */

CHECK: line length of 101 exceeds 100 columns
#68: FILE: ./hal/odm_DynamicBBPowerSaving.c:68:
+			PHY_SetBBReg(pDM_Odm->Adapter, 0x874, 0xC000, 0x2); /* Reg874[15:14]=2'b10 */

total: 0 errors, 0 warnings, 32 checks, 81 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicBBPowerSaving.c has style problems, please review.
--------------------------------
./hal/odm_DynamicBBPowerSaving.h
--------------------------------
CHECK: Avoid CamelCase: <dm_RF_Saving>
#25: FILE: ./hal/odm_DynamicBBPowerSaving.h:25:
+#define dm_RF_Saving ODM_RF_Saving

total: 0 errors, 0 warnings, 1 checks, 31 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicBBPowerSaving.h has style problems, please review.
--------------------------------
./hal/odm_DynamicBBPowerSaving.o
--------------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicBBPowerSaving.o has style problems, please review.
--------------------------
./hal/odm_DynamicTxPower.c
--------------------------
CHECK: Avoid CamelCase: <bDynamicTxPowerEnable>
#18: FILE: ./hal/odm_DynamicTxPower.c:18:
+	pdmpriv->bDynamicTxPowerEnable = false;

CHECK: Avoid CamelCase: <LastDTPLvl>
#20: FILE: ./hal/odm_DynamicTxPower.c:20:
+	pdmpriv->LastDTPLvl = TxHighPwrLevel_Normal;

CHECK: Avoid CamelCase: <TxHighPwrLevel_Normal>
#20: FILE: ./hal/odm_DynamicTxPower.c:20:
+	pdmpriv->LastDTPLvl = TxHighPwrLevel_Normal;

CHECK: Avoid CamelCase: <DynamicTxHighPowerLvl>
#21: FILE: ./hal/odm_DynamicTxPower.c:21:
+	pdmpriv->DynamicTxHighPowerLvl = TxHighPwrLevel_Normal;

total: 0 errors, 0 warnings, 4 checks, 22 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicTxPower.c has style problems, please review.
--------------------------
./hal/odm_DynamicTxPower.h
--------------------------
CHECK: Avoid CamelCase: <TxHighPwrLevel_Level1>
#17: FILE: ./hal/odm_DynamicTxPower.h:17:
+#define		TxHighPwrLevel_Level1		1

CHECK: Avoid CamelCase: <TxHighPwrLevel_Level2>
#18: FILE: ./hal/odm_DynamicTxPower.h:18:
+#define		TxHighPwrLevel_Level2		2

CHECK: Avoid CamelCase: <TxHighPwrLevel_BT1>
#19: FILE: ./hal/odm_DynamicTxPower.h:19:
+#define		TxHighPwrLevel_BT1			3

CHECK: Avoid CamelCase: <TxHighPwrLevel_BT2>
#20: FILE: ./hal/odm_DynamicTxPower.h:20:
+#define		TxHighPwrLevel_BT2			4

CHECK: Avoid CamelCase: <TxHighPwrLevel_15>
#21: FILE: ./hal/odm_DynamicTxPower.h:21:
+#define		TxHighPwrLevel_15			5

CHECK: Avoid CamelCase: <TxHighPwrLevel_35>
#22: FILE: ./hal/odm_DynamicTxPower.h:22:
+#define		TxHighPwrLevel_35			6

CHECK: Avoid CamelCase: <TxHighPwrLevel_50>
#23: FILE: ./hal/odm_DynamicTxPower.h:23:
+#define		TxHighPwrLevel_50			7

CHECK: Avoid CamelCase: <TxHighPwrLevel_70>
#24: FILE: ./hal/odm_DynamicTxPower.h:24:
+#define		TxHighPwrLevel_70			8

CHECK: Avoid CamelCase: <TxHighPwrLevel_100>
#25: FILE: ./hal/odm_DynamicTxPower.h:25:
+#define		TxHighPwrLevel_100			9

total: 0 errors, 0 warnings, 9 checks, 29 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicTxPower.h has style problems, please review.
--------------------------
./hal/odm_DynamicTxPower.o
--------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_DynamicTxPower.o has style problems, please review.
--------------------------
./hal/odm_EdcaTurboCheck.c
--------------------------
CHECK: Avoid CamelCase: <edca_setting_DL_GMode>
#10: FILE: ./hal/odm_EdcaTurboCheck.c:10:
+static u32 edca_setting_DL_GMode[HT_IOT_PEER_MAX] = {

CHECK: Avoid CamelCase: <DM_EDCA_Table>
#37: FILE: ./hal/odm_EdcaTurboCheck.c:37:
+	pDM_Odm->DM_EDCA_Table.bCurrentTurboEDCA = false;

CHECK: Avoid CamelCase: <bCurrentTurboEDCA>
#37: FILE: ./hal/odm_EdcaTurboCheck.c:37:
+	pDM_Odm->DM_EDCA_Table.bCurrentTurboEDCA = false;

CHECK: Avoid CamelCase: <bIsCurRDLState>
#38: FILE: ./hal/odm_EdcaTurboCheck.c:38:
+	pDM_Odm->DM_EDCA_Table.bIsCurRDLState = false;

CHECK: Avoid CamelCase: <odm_EdcaTurboCheckCE>
#53: FILE: ./hal/odm_EdcaTurboCheck.c:53:
+	odm_EdcaTurboCheckCE(pDM_Odm);

CHECK: Unnecessary parentheses around Adapter->recvpriv
#61: FILE: ./hal/odm_EdcaTurboCheck.c:61:
+	struct recv_priv *precvpriv = &(Adapter->recvpriv);

CHECK: Unnecessary parentheses around Adapter->mlmeextpriv
#63: FILE: ./hal/odm_EdcaTurboCheck.c:63:
+	struct mlme_ext_priv *pmlmeext = &(Adapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#64: FILE: ./hal/odm_EdcaTurboCheck.c:64:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <trafficIndex>
#69: FILE: ./hal/odm_EdcaTurboCheck.c:69:
+	u32 trafficIndex;

CHECK: Unnecessary parentheses around pDM_Odm->pwirelessmode
#88: FILE: ./hal/odm_EdcaTurboCheck.c:88:
+		wirelessmode = *(pDM_Odm->pwirelessmode);

CHECK: Unnecessary parentheses around '!precvpriv->bIsAnyNonBEPkts'
#98: FILE: ./hal/odm_EdcaTurboCheck.c:98:
+	if ((bbtchange) || (!precvpriv->bIsAnyNonBEPkts)) {

CHECK: Unnecessary parentheses around 'iot_peer == HT_IOT_PEER_CISCO'
#120: FILE: ./hal/odm_EdcaTurboCheck.c:120:
+		if ((iot_peer == HT_IOT_PEER_CISCO) &&
+		    (wirelessmode == ODM_WM_N24G)) {

CHECK: Unnecessary parentheses around 'wirelessmode == ODM_WM_N24G'
#120: FILE: ./hal/odm_EdcaTurboCheck.c:120:
+		if ((iot_peer == HT_IOT_PEER_CISCO) &&
+		    (wirelessmode == ODM_WM_N24G)) {

WARNING: suspect code indent for conditional statements (8, 17)
#150: FILE: ./hal/odm_EdcaTurboCheck.c:150:
+	} else {
[...]
+		 if (pDM_Odm->DM_EDCA_Table.bCurrentTurboEDCA) {

WARNING: Statements should start on a tabstop
#153: FILE: ./hal/odm_EdcaTurboCheck.c:153:
+		 if (pDM_Odm->DM_EDCA_Table.bCurrentTurboEDCA) {

CHECK: Avoid CamelCase: <AcParam_BE>
#154: FILE: ./hal/odm_EdcaTurboCheck.c:154:
+			rtw_write32(Adapter, REG_EDCA_BE_PARAM, pHalData->AcParam_BE);

total: 0 errors, 2 warnings, 14 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_EdcaTurboCheck.c has style problems, please review.
--------------------------
./hal/odm_EdcaTurboCheck.h
--------------------------
total: 0 errors, 0 warnings, 0 checks, 23 lines checked

./hal/odm_EdcaTurboCheck.h has no obvious style problems and is ready for submission.
--------------------------
./hal/odm_EdcaTurboCheck.o
--------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_EdcaTurboCheck.o has style problems, please review.
-----------
./hal/odm.h
-----------
CHECK: Please don't use multiple blank lines
#8: FILE: ./hal/odm.h:8:
+
+

CHECK: Avoid CamelCase: <Smooth_Size_1>
#43: FILE: ./hal/odm.h:43:
+#define   Smooth_Size_1		5

CHECK: Avoid CamelCase: <Smooth_TH_1>
#44: FILE: ./hal/odm.h:44:
+#define	Smooth_TH_1	3

CHECK: Avoid CamelCase: <Smooth_Size_2>
#45: FILE: ./hal/odm.h:45:
+#define   Smooth_Size_2		10

CHECK: Avoid CamelCase: <Smooth_TH_2>
#46: FILE: ./hal/odm.h:46:
+#define	Smooth_TH_2	4

CHECK: Avoid CamelCase: <Smooth_Size_3>
#47: FILE: ./hal/odm.h:47:
+#define   Smooth_Size_3		20

CHECK: Avoid CamelCase: <Smooth_TH_3>
#48: FILE: ./hal/odm.h:48:
+#define	Smooth_TH_3	4

CHECK: Avoid CamelCase: <Smooth_Step_Size>
#49: FILE: ./hal/odm.h:49:
+#define   Smooth_Step_Size 5

CHECK: Avoid CamelCase: <Adaptive_SIR>
#50: FILE: ./hal/odm.h:50:
+#define	Adaptive_SIR	1

CHECK: Avoid CamelCase: <PriCCA_flag>
#84: FILE: ./hal/odm.h:84:
+	u8 PriCCA_flag;

CHECK: Avoid CamelCase: <DupRTS_flag>
#87: FILE: ./hal/odm.h:87:
+	u8 DupRTS_flag;

CHECK: Avoid CamelCase: <Monitor_flag>
#88: FILE: ./hal/odm.h:88:
+	u8 Monitor_flag;

CHECK: Avoid CamelCase: <Pre_IGI>
#101: FILE: ./hal/odm.h:101:
+	u8 Pre_IGI;

CHECK: Avoid CamelCase: <Cur_IGI>
#102: FILE: ./hal/odm.h:102:
+	u8 Cur_IGI;

CHECK: Avoid CamelCase: <Pre_pw_th>
#103: FILE: ./hal/odm.h:103:
+	u8 Pre_pw_th;

CHECK: Avoid CamelCase: <Cur_pw_th>
#104: FILE: ./hal/odm.h:104:
+	u8 Cur_pw_th;

CHECK: Avoid CamelCase: <First_time_enter>
#105: FILE: ./hal/odm.h:105:
+	bool First_time_enter;

CHECK: Avoid CamelCase: <PSDTimer>
#108: FILE: ./hal/odm.h:108:
+	struct timer_list PSDTimer;

CHECK: Avoid CamelCase: <Double_chk_flag>
#128: FILE: ./hal/odm.h:128:
+	u8 Double_chk_flag;

CHECK: Avoid CamelCase: <PreRSSI>
#130: FILE: ./hal/odm.h:130:
+	s32 PreRSSI;

CHECK: Avoid CamelCase: <TestMode>
#134: FILE: ./hal/odm.h:134:
+	u8 TestMode;

CHECK: Avoid CamelCase: <bTriggerAntennaSwitch>
#135: FILE: ./hal/odm.h:135:
+	u8 bTriggerAntennaSwitch;

CHECK: Avoid CamelCase: <SelectAntennaMap>
#136: FILE: ./hal/odm.h:136:
+	u8 SelectAntennaMap;

CHECK: Avoid CamelCase: <Single_Ant_Counter>
#139: FILE: ./hal/odm.h:139:
+	u16 Single_Ant_Counter;

CHECK: Avoid CamelCase: <Dual_Ant_Counter>
#140: FILE: ./hal/odm.h:140:
+	u16 Dual_Ant_Counter;

CHECK: Avoid CamelCase: <Aux_FailDetec_Counter>
#141: FILE: ./hal/odm.h:141:
+	u16 Aux_FailDetec_Counter;

CHECK: Avoid CamelCase: <Retry_Counter>
#142: FILE: ./hal/odm.h:142:
+	u16 Retry_Counter;

CHECK: Avoid CamelCase: <Pre_Aux_FailDetec>
#151: FILE: ./hal/odm.h:151:
+	bool Pre_Aux_FailDetec;

CHECK: Avoid CamelCase: <Ant2G>
#153: FILE: ./hal/odm.h:153:
+	u8 Ant2G;

CHECK: Avoid CamelCase: <lastTxOkCnt>
#160: FILE: ./hal/odm.h:160:
+	u64 lastTxOkCnt;

CHECK: Avoid CamelCase: <lastRxOkCnt>
#161: FILE: ./hal/odm.h:161:
+	u64 lastRxOkCnt;

CHECK: Avoid CamelCase: <TXByteCnt_A>
#162: FILE: ./hal/odm.h:162:
+	u64 TXByteCnt_A;

CHECK: Avoid CamelCase: <TXByteCnt_B>
#163: FILE: ./hal/odm.h:163:
+	u64 TXByteCnt_B;

CHECK: Avoid CamelCase: <RXByteCnt_A>
#164: FILE: ./hal/odm.h:164:
+	u64 RXByteCnt_A;

CHECK: Avoid CamelCase: <RXByteCnt_B>
#165: FILE: ./hal/odm.h:165:
+	u64 RXByteCnt_B;

CHECK: Avoid CamelCase: <TrafficLoad>
#166: FILE: ./hal/odm.h:166:
+	u8 TrafficLoad;

CHECK: Avoid CamelCase: <Train_time>
#167: FILE: ./hal/odm.h:167:
+	u8 Train_time;

CHECK: Avoid CamelCase: <Train_time_flag>
#168: FILE: ./hal/odm.h:168:
+	u8 Train_time_flag;

CHECK: Avoid CamelCase: <SwAntennaSwitchTimer>
#169: FILE: ./hal/odm.h:169:
+	struct timer_list SwAntennaSwitchTimer;

CHECK: Avoid CamelCase: <SwAntennaSwitchTimer_8723B>
#170: FILE: ./hal/odm.h:170:
+	struct timer_list SwAntennaSwitchTimer_8723B;

CHECK: Avoid CamelCase: <PktCnt_SWAntDivByCtrlFrame>
#171: FILE: ./hal/odm.h:171:
+	u32 PktCnt_SWAntDivByCtrlFrame;

CHECK: Avoid CamelCase: <bSWAntDivByCtrlFrame>
#172: FILE: ./hal/odm.h:172:
+	bool bSWAntDivByCtrlFrame;

CHECK: Please don't use multiple blank lines
#177: FILE: ./hal/odm.h:177:
+
+

CHECK: Avoid CamelCase: <bLowerRtsRate>
#182: FILE: ./hal/odm.h:182:
+	bool bLowerRtsRate;

CHECK: line length of 107 exceeds 100 columns
#183: FILE: ./hal/odm.h:183:
+	u8 HighRSSIThresh;		/*  if RSSI > HighRSSIThresh	=> RATRState is DM_RATR_STA_HIGH */

CHECK: line length of 106 exceeds 100 columns
#184: FILE: ./hal/odm.h:184:
+	u8 LowRSSIThresh;		/*  if RSSI <= LowRSSIThresh	=> RATRState is DM_RATR_STA_LOW */

CHECK: line length of 118 exceeds 100 columns
#185: FILE: ./hal/odm.h:185:
+	u8 RATRState;			/*  Current RSSI level, DM_RATR_STA_HIGH/DM_RATR_STA_MIDDLE/DM_RATR_STA_LOW */

CHECK: Avoid CamelCase: <RxSNRdB>
#260: FILE: ./hal/odm.h:260:
+	s8 RxSNRdB[4];

CHECK: Avoid CamelCase: <NumQryPhyStatus>
#261: FILE: ./hal/odm.h:261:
+	u32 NumQryPhyStatus;

CHECK: Avoid CamelCase: <NumQryPhyStatusCCK>
#262: FILE: ./hal/odm.h:262:
+	u32 NumQryPhyStatusCCK;

CHECK: Avoid CamelCase: <NumQryPhyStatusOFDM>
#263: FILE: ./hal/odm.h:263:
+	u32 NumQryPhyStatusOFDM;

CHECK: Avoid CamelCase: <RxEVM>
#266: FILE: ./hal/odm.h:266:
+	s32 RxEVM[4];

WARNING: please, no space before tabs
#391: FILE: ./hal/odm.h:391:
+/* ^IODM_CMNINFO_INTERFACE */$

CHECK: spaces preferred around that '|' (ctx:VxV)
#460: FILE: ./hal/odm.h:460:
+	TYPE_GPA1 = BIT(1)|BIT(0)
 	                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#465: FILE: ./hal/odm.h:465:
+	TYPE_APA1 = BIT(1)|BIT(0)
 	                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#470: FILE: ./hal/odm.h:470:
+	TYPE_GLNA1 = BIT(2)|BIT(0),
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#471: FILE: ./hal/odm.h:471:
+	TYPE_GLNA2 = BIT(3)|BIT(1),
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#472: FILE: ./hal/odm.h:472:
+	TYPE_GLNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#472: FILE: ./hal/odm.h:472:
+	TYPE_GLNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#472: FILE: ./hal/odm.h:472:
+	TYPE_GLNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                                 ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#477: FILE: ./hal/odm.h:477:
+	TYPE_ALNA1 = BIT(2)|BIT(0),
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#478: FILE: ./hal/odm.h:478:
+	TYPE_ALNA2 = BIT(3)|BIT(1),
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#479: FILE: ./hal/odm.h:479:
+	TYPE_ALNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#479: FILE: ./hal/odm.h:479:
+	TYPE_ALNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                          ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#479: FILE: ./hal/odm.h:479:
+	TYPE_ALNA3 = BIT(3)|BIT(2)|BIT(1)|BIT(0)
 	                                 ^

CHECK: Avoid CamelCase: <RegA24>
#487: FILE: ./hal/odm.h:487:
+	u32 RegA24; /*  for TempCCK */

CHECK: Avoid CamelCase: <ThermalMeter>
#499: FILE: ./hal/odm.h:499:
+	u8 ThermalMeter[2];    /*  ThermalMeter, index 0 for RFIC0, and 1 for RFIC1 */

CHECK: Avoid CamelCase: <ThermalValue_DPK>
#503: FILE: ./hal/odm.h:503:
+	u8 ThermalValue_DPK;

CHECK: Avoid CamelCase: <ThermalValue_RxGain>
#506: FILE: ./hal/odm.h:506:
+	u8 ThermalValue_RxGain;

CHECK: Avoid CamelCase: <ThermalValue_Crystal>
#507: FILE: ./hal/odm.h:507:
+	u8 ThermalValue_Crystal;

CHECK: Avoid CamelCase: <ThermalValue_DPKstore>
#508: FILE: ./hal/odm.h:508:
+	u8 ThermalValue_DPKstore;

CHECK: Avoid CamelCase: <ThermalValue_DPKtrack>
#509: FILE: ./hal/odm.h:509:
+	u8 ThermalValue_DPKtrack;

CHECK: Avoid CamelCase: <TxPowerTrackingInProgress>
#510: FILE: ./hal/odm.h:510:
+	bool TxPowerTrackingInProgress;

CHECK: Avoid CamelCase: <bReloadtxpowerindex>
#512: FILE: ./hal/odm.h:512:
+	bool bReloadtxpowerindex;

CHECK: Avoid CamelCase: <bRfPiEnable>
#513: FILE: ./hal/odm.h:513:
+	u8 bRfPiEnable;

CHECK: Avoid CamelCase: <ThermalValue_HP>
#525: FILE: ./hal/odm.h:525:
+	u8 ThermalValue_HP[HP_THERMAL_NUM];

CHECK: Avoid CamelCase: <ThermalValue_HP_index>
#526: FILE: ./hal/odm.h:526:
+	u8 ThermalValue_HP_index;

CHECK: Avoid CamelCase: <bNeedIQK>
#528: FILE: ./hal/odm.h:528:
+	bool bNeedIQK;

CHECK: Avoid CamelCase: <Delta_IQK>
#530: FILE: ./hal/odm.h:530:
+	u8 Delta_IQK;

CHECK: Avoid CamelCase: <Delta_LCK>
#531: FILE: ./hal/odm.h:531:
+	u8 Delta_LCK;

CHECK: Avoid CamelCase: <BBSwingDiff2G>
#532: FILE: ./hal/odm.h:532:
+	s8 BBSwingDiff2G; /*  Unit: dB */

CHECK: Avoid CamelCase: <RegC04>
#547: FILE: ./hal/odm.h:547:
+	u32 RegC04;

CHECK: Avoid CamelCase: <RegC08>
#549: FILE: ./hal/odm.h:549:
+	u32 RegC08;

CHECK: Avoid CamelCase: <RegB68>
#550: FILE: ./hal/odm.h:550:
+	u32 RegB68;

CHECK: Avoid CamelCase: <RegB6C>
#551: FILE: ./hal/odm.h:551:
+	u32 RegB6C;

CHECK: Avoid CamelCase: <Reg870>
#552: FILE: ./hal/odm.h:552:
+	u32 Reg870;

CHECK: Avoid CamelCase: <Reg860>
#553: FILE: ./hal/odm.h:553:
+	u32 Reg860;

CHECK: Avoid CamelCase: <Reg864>
#554: FILE: ./hal/odm.h:554:
+	u32 Reg864;

CHECK: Avoid CamelCase: <bIQKInitialized>
#556: FILE: ./hal/odm.h:556:
+	bool bIQKInitialized;

CHECK: Avoid CamelCase: <bAntennaDetected>
#558: FILE: ./hal/odm.h:558:
+	bool bAntennaDetected;

CHECK: Avoid CamelCase: <APKoutput>
#567: FILE: ./hal/odm.h:567:
+	u32 APKoutput[2][2]; /* path A/B; output1_1a/output1_2a */

CHECK: Avoid CamelCase: <bAPKdone>
#568: FILE: ./hal/odm.h:568:
+	u8 bAPKdone;

CHECK: Avoid CamelCase: <bAPKThermalMeterIgnore>
#569: FILE: ./hal/odm.h:569:
+	u8 bAPKThermalMeterIgnore;

CHECK: Avoid CamelCase: <bDPKFail>
#572: FILE: ./hal/odm.h:572:
+	bool bDPKFail;

CHECK: Avoid CamelCase: <bDPdone>
#573: FILE: ./hal/odm.h:573:
+	u8 bDPdone;

CHECK: Avoid CamelCase: <bDPPathAOK>
#574: FILE: ./hal/odm.h:574:
+	u8 bDPPathAOK;

CHECK: Avoid CamelCase: <bDPPathBOK>
#575: FILE: ./hal/odm.h:575:
+	u8 bDPPathBOK;

CHECK: Please use a blank line after function/struct/union/enum declarations
#580: FILE: ./hal/odm.h:580:
+};
+/*  */

CHECK: Avoid CamelCase: <antSumRSSI>
#590: FILE: ./hal/odm.h:590:
+	u32 antSumRSSI[7];

CHECK: Avoid CamelCase: <antRSSIcnt>
#591: FILE: ./hal/odm.h:591:
+	u32 antRSSIcnt[7];

CHECK: Avoid CamelCase: <antAveRSSI>
#592: FILE: ./hal/odm.h:592:
+	u32 antAveRSSI[7];

CHECK: Avoid CamelCase: <TrainIdx>
#594: FILE: ./hal/odm.h:594:
+	u32 TrainIdx;

CHECK: Avoid CamelCase: <MainAnt_Sum>
#598: FILE: ./hal/odm.h:598:
+	u32 MainAnt_Sum[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <AuxAnt_Sum>
#599: FILE: ./hal/odm.h:599:
+	u32 AuxAnt_Sum[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <MainAnt_Cnt>
#600: FILE: ./hal/odm.h:600:
+	u32 MainAnt_Cnt[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <AuxAnt_Cnt>
#601: FILE: ./hal/odm.h:601:
+	u32 AuxAnt_Cnt[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <RxIdleAnt>
#602: FILE: ./hal/odm.h:602:
+	u8 RxIdleAnt;

CHECK: Avoid CamelCase: <bBecomeLinked>
#603: FILE: ./hal/odm.h:603:
+	bool	bBecomeLinked;

CHECK: Avoid CamelCase: <MinMaxRSSI>
#604: FILE: ./hal/odm.h:604:
+	u32 MinMaxRSSI;

CHECK: Avoid CamelCase: <idx_AntDiv_counter_2G>
#605: FILE: ./hal/odm.h:605:
+	u8 idx_AntDiv_counter_2G;

CHECK: Avoid CamelCase: <MainAnt_CtrlFrame_Sum>
#615: FILE: ./hal/odm.h:615:
+	u32 MainAnt_CtrlFrame_Sum;

CHECK: Avoid CamelCase: <AuxAnt_CtrlFrame_Sum>
#616: FILE: ./hal/odm.h:616:
+	u32 AuxAnt_CtrlFrame_Sum;

CHECK: Avoid CamelCase: <MainAnt_CtrlFrame_Cnt>
#617: FILE: ./hal/odm.h:617:
+	u32 MainAnt_CtrlFrame_Cnt;

CHECK: Avoid CamelCase: <AuxAnt_CtrlFrame_Cnt>
#618: FILE: ./hal/odm.h:618:
+	u32 AuxAnt_CtrlFrame_Cnt;

CHECK: Avoid CamelCase: <RespTxPath>
#633: FILE: ./hal/odm.h:633:
+	u8 RespTxPath;

CHECK: Avoid CamelCase: <PathSel>
#634: FILE: ./hal/odm.h:634:
+	u8 PathSel[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <PathA_Sum>
#635: FILE: ./hal/odm.h:635:
+	u32 PathA_Sum[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <PathB_Sum>
#636: FILE: ./hal/odm.h:636:
+	u32 PathB_Sum[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <PathA_Cnt>
#637: FILE: ./hal/odm.h:637:
+	u32 PathA_Cnt[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <PathB_Cnt>
#638: FILE: ./hal/odm.h:638:
+	u32 PathB_Cnt[ODM_ASSOCIATE_ENTRY_NUM];

CHECK: Avoid CamelCase: <bAntDetected>
#650: FILE: ./hal/odm.h:650:
+	bool bAntDetected;

CHECK: Avoid CamelCase: <dBForAntA>
#651: FILE: ./hal/odm.h:651:
+	u32 dBForAntA;

CHECK: Avoid CamelCase: <dBForAntB>
#652: FILE: ./hal/odm.h:652:
+	u32 dBForAntB;

CHECK: Avoid CamelCase: <dBForAntO>
#653: FILE: ./hal/odm.h:653:
+	u32 dBForAntO;

WARNING: please, no space before tabs
#662: FILE: ./hal/odm.h:662:
+^I/* ^IAdd for different team use temporarily */$

CHECK: Avoid CamelCase: <NumQryPhyStatusAll>
#671: FILE: ./hal/odm.h:671:
+	u32 NumQryPhyStatusAll;	/* CCK + OFDM */

CHECK: Avoid CamelCase: <LastNumQryPhyStatusAll>
#672: FILE: ./hal/odm.h:672:
+	u32 LastNumQryPhyStatusAll;

CHECK: Avoid CamelCase: <RxPWDBAve>
#673: FILE: ./hal/odm.h:673:
+	u32 RxPWDBAve;

CHECK: Avoid CamelCase: <Times_2G>
#675: FILE: ./hal/odm.h:675:
+	u8 Times_2G;

WARNING: please, no space before tabs
#684: FILE: ./hal/odm.h:684:
+^I/* u8 ^I^IPseudoMacPhyMode; */$

WARNING: please, no space before tabs
#687: FILE: ./hal/odm.h:687:
+^I/* u8 ^I^IOPMode; */$

CHECK: line length of 102 exceeds 100 columns
#706: FILE: ./hal/odm.h:706:
+	/*  ODM composite or independent. Bit oriented/ 92C+92D+ .... or any other type = 1/2/3/... */

WARNING: please, no space before tabs
#776: FILE: ./hal/odm.h:776:
+^I/* u8 ^I*pAidMap; */$

CHECK: Avoid CamelCase: <pIs1Antenna>
#779: FILE: ./hal/odm.h:779:
+	bool *pIs1Antenna;

CHECK: Avoid CamelCase: <pRFDefaultPath>
#780: FILE: ./hal/odm.h:780:
+	u8 *pRFDefaultPath;

CHECK: Avoid CamelCase: <InterfaceIndex>
#793: FILE: ./hal/odm.h:793:
+	u8 InterfaceIndex; /*  Add for 92D  dual MAC: 0--Mac0 1--Mac1 */

CHECK: Avoid CamelCase: <RxRate>
#810: FILE: ./hal/odm.h:810:
+	u8 RxRate;

CHECK: Avoid CamelCase: <bNoisyState>
#811: FILE: ./hal/odm.h:811:
+	bool bNoisyState;

CHECK: Avoid CamelCase: <LinkedInterval>
#813: FILE: ./hal/odm.h:813:
+	u8 LinkedInterval;

CHECK: Avoid CamelCase: <preChannel>
#814: FILE: ./hal/odm.h:814:
+	u8 preChannel;

CHECK: Avoid CamelCase: <TxagcOffsetValueA>
#815: FILE: ./hal/odm.h:815:
+	u32 TxagcOffsetValueA;

CHECK: Avoid CamelCase: <IsTxagcOffsetPositiveA>
#816: FILE: ./hal/odm.h:816:
+	bool IsTxagcOffsetPositiveA;

CHECK: Avoid CamelCase: <TxagcOffsetValueB>
#817: FILE: ./hal/odm.h:817:
+	u32 TxagcOffsetValueB;

CHECK: Avoid CamelCase: <IsTxagcOffsetPositiveB>
#818: FILE: ./hal/odm.h:818:
+	bool IsTxagcOffsetPositiveB;

CHECK: Avoid CamelCase: <BbSwingOffsetA>
#821: FILE: ./hal/odm.h:821:
+	u32 BbSwingOffsetA;

CHECK: Avoid CamelCase: <IsBbSwingOffsetPositiveA>
#822: FILE: ./hal/odm.h:822:
+	bool IsBbSwingOffsetPositiveA;

CHECK: Avoid CamelCase: <BbSwingOffsetB>
#823: FILE: ./hal/odm.h:823:
+	u32 BbSwingOffsetB;

CHECK: Avoid CamelCase: <IsBbSwingOffsetPositiveB>
#824: FILE: ./hal/odm.h:824:
+	bool IsBbSwingOffsetPositiveB;

CHECK: Avoid CamelCase: <Force_TH_H>
#831: FILE: ./hal/odm.h:831:
+	s8 Force_TH_H;

CHECK: Avoid CamelCase: <Force_TH_L>
#832: FILE: ./hal/odm.h:832:
+	s8 Force_TH_L;

CHECK: Avoid CamelCase: <AntType>
#835: FILE: ./hal/odm.h:835:
+	u8 AntType;

CHECK: Avoid CamelCase: <pre_AntType>
#836: FILE: ./hal/odm.h:836:
+	u8 pre_AntType;

CHECK: Avoid CamelCase: <NdpaPeriod>
#839: FILE: ./hal/odm.h:839:
+	u8 NdpaPeriod;

CHECK: Avoid CamelCase: <H2C_RARpt_connect>
#840: FILE: ./hal/odm.h:840:
+	bool H2C_RARpt_connect;

CHECK: Avoid CamelCase: <RaSupport88E>
#869: FILE: ./hal/odm.h:869:
+	bool RaSupport88E;

CHECK: Avoid CamelCase: <pMacInfo>
#878: FILE: ./hal/odm.h:878:
+	struct odm_mac_status_info *pMacInfo;

CHECK: Avoid CamelCase: <dM_RXHP_Table>
#895: FILE: ./hal/odm.h:895:
+	struct rxhp_t dM_RXHP_Table;

CHECK: Avoid CamelCase: <FlaseAlmCntBuddyAdapter>
#898: FILE: ./hal/odm.h:898:
+	struct false_ALARM_STATISTICS FlaseAlmCntBuddyAdapter;

CHECK: Avoid CamelCase: <bUserAssignLevel>
#927: FILE: ./hal/odm.h:927:
+	bool bUserAssignLevel;

CHECK: Avoid CamelCase: <bPSDinProcess>
#930: FILE: ./hal/odm.h:930:
+	bool bPSDinProcess;

CHECK: Avoid CamelCase: <bPSDactive>
#931: FILE: ./hal/odm.h:931:
+	bool bPSDactive;

CHECK: Avoid CamelCase: <MPT_DIGTimer>
#935: FILE: ./hal/odm.h:935:
+	struct timer_list MPT_DIGTimer;

CHECK: Avoid CamelCase: <AntDetectedInfo>
#942: FILE: ./hal/odm.h:942:
+	struct ant_detected_info AntDetectedInfo; /*  Antenna detected information for RSSI tool */

CHECK: Avoid CamelCase: <BbSwingIdxOfdmCurrent>
#950: FILE: ./hal/odm.h:950:
+	u8 BbSwingIdxOfdmCurrent;

CHECK: Avoid CamelCase: <BbSwingFlagOfdm>
#952: FILE: ./hal/odm.h:952:
+	bool BbSwingFlagOfdm;

CHECK: Avoid CamelCase: <BbSwingIdxCckCurrent>
#954: FILE: ./hal/odm.h:954:
+	u8 BbSwingIdxCckCurrent;

CHECK: Avoid CamelCase: <BbSwingFlagCck>
#958: FILE: ./hal/odm.h:958:
+	bool BbSwingFlagCck;

CHECK: Avoid CamelCase: <Modify_TxAGC_Value>
#963: FILE: ./hal/odm.h:963:
+	s8 Modify_TxAGC_Value;       /* Remnat compensate value at TxAGC */

CHECK: Avoid CamelCase: <Modify_TxAGC_Flag_PathC>
#966: FILE: ./hal/odm.h:966:
+	bool Modify_TxAGC_Flag_PathC;

CHECK: Avoid CamelCase: <Modify_TxAGC_Flag_PathD>
#967: FILE: ./hal/odm.h:967:
+	bool Modify_TxAGC_Flag_PathD;

CHECK: Avoid CamelCase: <KfreeOffset>
#970: FILE: ./hal/odm.h:970:
+	s8 KfreeOffset[MAX_RF_PATH];

CHECK: Avoid CamelCase: <PathDivSwitchTimer>
#976: FILE: ./hal/odm.h:976:
+	struct timer_list PathDivSwitchTimer;

CHECK: Avoid CamelCase: <CCKPathDiversityTimer>
#978: FILE: ./hal/odm.h:978:
+	struct timer_list CCKPathDiversityTimer;

CHECK: Avoid CamelCase: <FastAntTrainingTimer>
#979: FILE: ./hal/odm.h:979:
+	struct timer_list FastAntTrainingTimer;

CHECK: Avoid CamelCase: <BeamformingInfo>
#984: FILE: ./hal/odm.h:984:
+	RT_BEAMFORMING_INFO BeamformingInfo;

WARNING: please, no spaces at the start of a line
#988: FILE: ./hal/odm.h:988:
+ enum odm_rf_content {$

CHECK: Avoid CamelCase: <pSta>
#1096: FILE: ./hal/odm.h:1096:
+#define IS_STA_VALID(pSta)		(pSta)

CHECK: Avoid CamelCase: <dm_CheckTXPowerTracking>
#1107: FILE: ./hal/odm.h:1107:
+#define dm_CheckTXPowerTracking ODM_TXPowerTrackingCheck

CHECK: Lines should not end with a '('
#1110: FILE: ./hal/odm.h:1110:
+bool ODM_RAStateCheck(

CHECK: Avoid CamelCase: <dm_SWAW_RSSI_Check>
#1117: FILE: ./hal/odm.h:1117:
+#define dm_SWAW_RSSI_Check	ODM_SwAntDivChkPerPktRssi

CHECK: Lines should not end with a '('
#1118: FILE: ./hal/odm.h:1118:
+void ODM_SwAntDivChkPerPktRssi(

CHECK: Avoid CamelCase: <StationID>
#1120: FILE: ./hal/odm.h:1120:
+	u8 StationID,

CHECK: Avoid CamelCase: <pPhyInfo>
#1121: FILE: ./hal/odm.h:1121:
+	struct odm_phy_info *pPhyInfo

CHECK: Lines should not end with a '('
#1124: FILE: ./hal/odm.h:1124:
+u32 ODM_Get_Rate_Bitmap(

CHECK: Avoid CamelCase: <Beamforming_GetEntryBeamCapByMacId>
#1132: FILE: ./hal/odm.h:1132:
+BEAMFORMING_CAP Beamforming_GetEntryBeamCapByMacId(PMGNT_INFO pMgntInfo, u8 MacId);

CHECK: Avoid CamelCase: <pMgntInfo>
#1132: FILE: ./hal/odm.h:1132:
+BEAMFORMING_CAP Beamforming_GetEntryBeamCapByMacId(PMGNT_INFO pMgntInfo, u8 MacId);

CHECK: Avoid CamelCase: <MacId>
#1132: FILE: ./hal/odm.h:1132:
+BEAMFORMING_CAP Beamforming_GetEntryBeamCapByMacId(PMGNT_INFO pMgntInfo, u8 MacId);

CHECK: Lines should not end with a '('
#1145: FILE: ./hal/odm.h:1145:
+void ODM_CmnInfoPtrArrayHook(

CHECK: Lines should not end with a '('
#1160: FILE: ./hal/odm.h:1160:
+void ODM_AntselStatistics_88C(

CHECK: Avoid CamelCase: <PWDBAll>
#1163: FILE: ./hal/odm.h:1163:
+	u32 PWDBAll,

CHECK: Avoid CamelCase: <isCCKrate>
#1164: FILE: ./hal/odm.h:1164:
+	bool isCCKrate

CHECK: Avoid CamelCase: <Collision_State>
#1167: FILE: ./hal/odm.h:1167:
+void ODM_DynamicARFBSelect(struct dm_odm_t *pDM_Odm, u8 rate, bool Collision_State);

total: 0 errors, 6 warnings, 186 checks, 1169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm.h has style problems, please review.
--------------------
./hal/odm_HWConfig.c
--------------------
CHECK: Unnecessary parentheses around 'ant_power >= 20'
#15: FILE: ./hal/odm_HWConfig.c:15:
+	if ((ant_power <= -100) || (ant_power >= 20))

CHECK: Blank lines aren't necessary before a close brace '}'
#22: FILE: ./hal/odm_HWConfig.c:22:
+
+}

CHECK: spaces preferred around that '*' (ctx:VxV)
#32: FILE: ./hal/odm_HWConfig.c:32:
+			ret_sig = 80 + ((curr_sig - 40)*2);
 			                               ^

CHECK: Please don't use multiple blank lines
#119: FILE: ./hal/odm_HWConfig.c:119:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#137: FILE: ./hal/odm_HWConfig.c:137:
+		lna_idx = ((cck_agc_rpt & 0xE0)>>5);
 		                               ^

CHECK: braces {} should be used on all arms of this statement
#154: FILE: ./hal/odm_HWConfig.c:154:
+			if (phy_info->rx_pwd_ba11 > 40 && !dm_odm->bInHctTest)
[...]
+			else {
[...]

CHECK: Unbalanced braces around else statement
#156: FILE: ./hal/odm_HWConfig.c:156:
+			else {

CHECK: spaces preferred around that '-' (ctx:VxV)
#164: FILE: ./hal/odm_HWConfig.c:164:
+					sq = ((64-sq_rpt) * 100) / 44;
 					         ^

CHECK: Blank lines aren't necessary before a close brace '}'
#166: FILE: ./hal/odm_HWConfig.c:166:
+
+			}

CHECK: line length of 114 exceeds 100 columns
#197: FILE: ./hal/odm_HWConfig.c:197:
+			phy_info->rx_snr[i] = dm_odm->PhyDbgInfo.RxSNRdB[i] = (s32)(phy_sta_rpt->path_rxsnr[i]/2);

CHECK: spaces preferred around that '/' (ctx:VxV)
#197: FILE: ./hal/odm_HWConfig.c:197:
+			phy_info->rx_snr[i] = dm_odm->PhyDbgInfo.RxSNRdB[i] = (s32)(phy_sta_rpt->path_rxsnr[i]/2);
 			                                                                                      ^

CHECK: multiple assignments should be avoided
#197: FILE: ./hal/odm_HWConfig.c:197:
+			phy_info->rx_snr[i] = dm_odm->PhyDbgInfo.RxSNRdB[i] = (s32)(phy_sta_rpt->path_rxsnr[i]/2);

CHECK: multiple assignments should be avoided
#205: FILE: ./hal/odm_HWConfig.c:205:
+		pwdb_all_bt = pwdb_all = odm_query_rx_pwr_percentage(rx_pwr_all);

WARNING: braces {} are not necessary for single statement blocks
#243: FILE: ./hal/odm_HWConfig.c:243:
+		if (rf_rx_num != 0) {
+			phy_info->signal_strength = (u8)(odm_signal_scale_mapping(dm_odm, total_rssi /= rf_rx_num));
+		}

CHECK: line length of 116 exceeds 100 columns
#244: FILE: ./hal/odm_HWConfig.c:244:
+			phy_info->signal_strength = (u8)(odm_signal_scale_mapping(dm_odm, total_rssi /= rf_rx_num));

CHECK: Lines should not end with a '('
#249: FILE: ./hal/odm_HWConfig.c:249:
+static void odm_Process_RSSIForDM(

CHECK: Avoid CamelCase: <odm_Process_RSSIForDM>
#249: FILE: ./hal/odm_HWConfig.c:249:
+static void odm_Process_RSSIForDM(

CHECK: Avoid CamelCase: <pPktinfo>
#250: FILE: ./hal/odm_HWConfig.c:250:
+	struct dm_odm_t *pDM_Odm, struct odm_phy_info *pPhyInfo, struct odm_packet_info *pPktinfo

CHECK: Blank lines aren't necessary after an open brace '{'
#253: FILE: ./hal/odm_HWConfig.c:253:
+{
+

CHECK: Avoid CamelCase: <UndecoratedSmoothedOFDM>
#254: FILE: ./hal/odm_HWConfig.c:254:
+	s32 UndecoratedSmoothedPWDB, UndecoratedSmoothedCCK, UndecoratedSmoothedOFDM, RSSI_Ave;

CHECK: Avoid CamelCase: <Weighting>
#258: FILE: ./hal/odm_HWConfig.c:258:
+	u32 Weighting = 0;

CHECK: Please don't use multiple blank lines
#261: FILE: ./hal/odm_HWConfig.c:261:
+
+

CHECK: Unnecessary parentheses around '!pPktinfo->bssid_match'
#270: FILE: ./hal/odm_HWConfig.c:270:
+	if ((!pPktinfo->bssid_match))

WARNING: braces {} are not necessary for single statement blocks
#280: FILE: ./hal/odm_HWConfig.c:280:
+	if (pDM_Odm->SupportAbility & ODM_BB_ANT_DIV) {
+
+	}

CHECK: Blank lines aren't necessary after an open brace '{'
#281: FILE: ./hal/odm_HWConfig.c:281:
+	if (pDM_Odm->SupportAbility & ODM_BB_ANT_DIV) {
+

CHECK: Blank lines aren't necessary before a close brace '}'
#282: FILE: ./hal/odm_HWConfig.c:282:
+
+	}

CHECK: Blank lines aren't necessary after an open brace '{'
#291: FILE: ./hal/odm_HWConfig.c:291:
+	if (pPktinfo->to_self || pPktinfo->is_beacon) {
+

CHECK: Lines should not end with a '('
#301: FILE: ./hal/odm_HWConfig.c:301:
+				if (

CHECK: spaces preferred around that '-' (ctx:VxV)
#312: FILE: ./hal/odm_HWConfig.c:312:
+				if ((RSSI_max-RSSI_min) < 3)
 				             ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#314: FILE: ./hal/odm_HWConfig.c:314:
+				else if ((RSSI_max-RSSI_min) < 6)
 				                  ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#316: FILE: ./hal/odm_HWConfig.c:316:
+				else if ((RSSI_max-RSSI_min) < 10)
 				                  ^

CHECK: Unbalanced braces around else statement
#325: FILE: ./hal/odm_HWConfig.c:325:
+			else {

CHECK: line length of 105 exceeds 100 columns
#328: FILE: ./hal/odm_HWConfig.c:328:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +

CHECK: spaces preferred around that '*' (ctx:VxV)
#328: FILE: ./hal/odm_HWConfig.c:328:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +
 							                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#328: FILE: ./hal/odm_HWConfig.c:328:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +
 							                                           ^

CHECK: Avoid CamelCase: <Rx_Smooth_Factor>
#328: FILE: ./hal/odm_HWConfig.c:328:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +

CHECK: spaces preferred around that '/' (ctx:VxV)
#329: FILE: ./hal/odm_HWConfig.c:329:
+							RSSI_Ave)/Rx_Smooth_Factor;
 							         ^

CHECK: line length of 105 exceeds 100 columns
#333: FILE: ./hal/odm_HWConfig.c:333:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +

CHECK: spaces preferred around that '*' (ctx:VxV)
#333: FILE: ./hal/odm_HWConfig.c:333:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +
 							                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#333: FILE: ./hal/odm_HWConfig.c:333:
+							((UndecoratedSmoothedOFDM*(Rx_Smooth_Factor-1)) +
 							                                           ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#334: FILE: ./hal/odm_HWConfig.c:334:
+							RSSI_Ave)/Rx_Smooth_Factor;
 							         ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#338: FILE: ./hal/odm_HWConfig.c:338:
+			pEntry->rssi_stat.PacketMap = (pEntry->rssi_stat.PacketMap<<1) | BIT0;
 			                                                          ^

CHECK: Avoid CamelCase: <PacketMap>
#338: FILE: ./hal/odm_HWConfig.c:338:
+			pEntry->rssi_stat.PacketMap = (pEntry->rssi_stat.PacketMap<<1) | BIT0;

CHECK: No space is necessary after a cast
#342: FILE: ./hal/odm_HWConfig.c:342:
+			pDM_Odm->RSSI_A = (u8) pPhyInfo->rx_pwd_ba11;

CHECK: Unbalanced braces around else statement
#348: FILE: ./hal/odm_HWConfig.c:348:
+			else {

CHECK: line length of 104 exceeds 100 columns
#351: FILE: ./hal/odm_HWConfig.c:351:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +

CHECK: spaces preferred around that '*' (ctx:VxV)
#351: FILE: ./hal/odm_HWConfig.c:351:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +
 							                        ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#351: FILE: ./hal/odm_HWConfig.c:351:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +
 							                                          ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#352: FILE: ./hal/odm_HWConfig.c:352:
+							pPhyInfo->rx_pwd_ba11)/Rx_Smooth_Factor;
 							                      ^

CHECK: line length of 104 exceeds 100 columns
#356: FILE: ./hal/odm_HWConfig.c:356:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +

CHECK: spaces preferred around that '*' (ctx:VxV)
#356: FILE: ./hal/odm_HWConfig.c:356:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +
 							                        ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#356: FILE: ./hal/odm_HWConfig.c:356:
+							((UndecoratedSmoothedCCK*(Rx_Smooth_Factor-1)) +
 							                                          ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#357: FILE: ./hal/odm_HWConfig.c:357:
+							pPhyInfo->rx_pwd_ba11)/Rx_Smooth_Factor;
 							                      ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#360: FILE: ./hal/odm_HWConfig.c:360:
+			pEntry->rssi_stat.PacketMap = pEntry->rssi_stat.PacketMap<<1;
 			                                                         ^

CHECK: Avoid CamelCase: <ValidBit>
#366: FILE: ./hal/odm_HWConfig.c:366:
+			if (pEntry->rssi_stat.ValidBit >= 64)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#372: FILE: ./hal/odm_HWConfig.c:372:
+				OFDM_pkt += (u8)(pEntry->rssi_stat.PacketMap>>i)&BIT0;
 				                                            ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#372: FILE: ./hal/odm_HWConfig.c:372:
+				OFDM_pkt += (u8)(pEntry->rssi_stat.PacketMap>>i)&BIT0;
 				                                                ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#375: FILE: ./hal/odm_HWConfig.c:375:
+				Weighting = ((OFDM_pkt<<4) > 64)?64:(OFDM_pkt<<4);
 				                      ^

CHECK: spaces required around that '?' (ctx:VxV)
#375: FILE: ./hal/odm_HWConfig.c:375:
+				Weighting = ((OFDM_pkt<<4) > 64)?64:(OFDM_pkt<<4);
 				                                ^

CHECK: spaces required around that ':' (ctx:VxV)
#375: FILE: ./hal/odm_HWConfig.c:375:
+				Weighting = ((OFDM_pkt<<4) > 64)?64:(OFDM_pkt<<4);
 				                                   ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#375: FILE: ./hal/odm_HWConfig.c:375:
+				Weighting = ((OFDM_pkt<<4) > 64)?64:(OFDM_pkt<<4);
 				                                             ^

CHECK: line length of 135 exceeds 100 columns
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;

CHECK: spaces preferred around that '*' (ctx:VxV)
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;
 				                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;
 				                                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;
 				                                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;
 				                                                                           ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#376: FILE: ./hal/odm_HWConfig.c:376:
+				UndecoratedSmoothedPWDB = (Weighting*UndecoratedSmoothedOFDM+(64-Weighting)*UndecoratedSmoothedCCK)>>6;
 				                                                                                                   ^

CHECK: line length of 189 exceeds 100 columns
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;

CHECK: spaces preferred around that '*' (ctx:VxV)
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;
 					                                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;
 					                                                           ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;
 					                                                                                       ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;
 					                                                                                                 ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#379: FILE: ./hal/odm_HWConfig.c:379:
+					UndecoratedSmoothedPWDB = (OFDM_pkt*UndecoratedSmoothedOFDM+(pEntry->rssi_stat.ValidBit-OFDM_pkt)*UndecoratedSmoothedCCK)/pEntry->rssi_stat.ValidBit;
 					                                                                                                                         ^

CHECK: Blank lines aren't necessary before a close brace '}'
#389: FILE: ./hal/odm_HWConfig.c:389:
+
+	}

CHECK: Please don't use multiple blank lines
#392: FILE: ./hal/odm_HWConfig.c:392:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#399: FILE: ./hal/odm_HWConfig.c:399:
+{
+

CHECK: Lines should not end with a '('
#411: FILE: ./hal/odm_HWConfig.c:411:
+enum hal_status ODM_ConfigRFWithHeaderFile(

CHECK: Avoid CamelCase: <ConfigType>
#413: FILE: ./hal/odm_HWConfig.c:413:
+	enum ODM_RF_Config_Type ConfigType,

CHECK: Avoid CamelCase: <_RadioA>
#418: FILE: ./hal/odm_HWConfig.c:418:
+		READ_AND_CONFIG(8723B, _RadioA);

CHECK: Avoid CamelCase: <_TxPowerTrack_SDIO>
#428: FILE: ./hal/odm_HWConfig.c:428:
+		READ_AND_CONFIG(8723B, _TxPowerTrack_SDIO);

CHECK: Lines should not end with a '('
#433: FILE: ./hal/odm_HWConfig.c:433:
+enum hal_status ODM_ConfigBBWithHeaderFile(

total: 0 errors, 2 warnings, 79 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_HWConfig.c has style problems, please review.
--------------------
./hal/odm_HWConfig.h
--------------------
CHECK: Please don't use multiple blank lines
#8: FILE: ./hal/odm_HWConfig.h:8:
+
+

CHECK: Lines should not end with a '('
#67: FILE: ./hal/odm_HWConfig.h:67:
+enum hal_status ODM_ConfigRFWithHeaderFile(

CHECK: Lines should not end with a '('
#73: FILE: ./hal/odm_HWConfig.h:73:
+enum hal_status ODM_ConfigBBWithHeaderFile(

CHECK: Lines should not end with a '('
#77: FILE: ./hal/odm_HWConfig.h:77:
+enum hal_status ODM_ConfigFWWithHeaderFile(

CHECK: Avoid CamelCase: <pFirmware>
#80: FILE: ./hal/odm_HWConfig.h:80:
+	u8 *pFirmware,

CHECK: Avoid CamelCase: <pSize>
#81: FILE: ./hal/odm_HWConfig.h:81:
+	u32 *pSize

CHECK: Avoid CamelCase: <CurrSig>
#84: FILE: ./hal/odm_HWConfig.h:84:
+s32 odm_signal_scale_mapping(struct dm_odm_t *pDM_Odm, s32 CurrSig);

total: 0 errors, 0 warnings, 7 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_HWConfig.h has style problems, please review.
--------------------
./hal/odm_HWConfig.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_HWConfig.o has style problems, please review.
---------------------
./hal/odm_interface.h
---------------------
CHECK: Please don't use multiple blank lines
#8: FILE: ./hal/odm_interface.h:8:
+
+

CHECK: Please don't use multiple blank lines
#12: FILE: ./hal/odm_interface.h:12:
+
+

WARNING: Block comments use * on subsequent lines
#22: FILE: ./hal/odm_interface.h:22:
+/*===================================
+

WARNING: Block comments use a trailing */ on a separate line
#27: FILE: ./hal/odm_interface.h:27:
+=====================================*/

WARNING: Argument '_ic_type' is not used in function-like macro
#32: FILE: ./hal/odm_interface.h:32:
+#define _cat(_name, _ic_type, _func) _func##_11N(_name)

CHECK: Avoid CamelCase: <_pDM_Odm>
#37: FILE: ./hal/odm_interface.h:37:
+#define ODM_REG(_name, _pDM_Odm)	_cat(_name, _pDM_Odm->SupportICType, _reg)

CHECK: Macro argument '_pDM_Odm' may be better as '(_pDM_Odm)' to avoid precedence issues
#37: FILE: ./hal/odm_interface.h:37:
+#define ODM_REG(_name, _pDM_Odm)	_cat(_name, _pDM_Odm->SupportICType, _reg)

CHECK: Macro argument '_pDM_Odm' may be better as '(_pDM_Odm)' to avoid precedence issues
#38: FILE: ./hal/odm_interface.h:38:
+#define ODM_BIT(_name, _pDM_Odm)	_cat(_name, _pDM_Odm->SupportICType, _bit)

total: 0 errors, 3 warnings, 5 checks, 40 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_interface.h has style problems, please review.
-----------
./hal/odm.o
-----------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm.o has style problems, please review.
-------------------
./hal/odm_precomp.h
-------------------
total: 0 errors, 0 warnings, 0 checks, 47 lines checked

./hal/odm_precomp.h has no obvious style problems and is ready for submission.
--------------------------
./hal/odm_RegConfig8723B.c
--------------------------
CHECK: Lines should not end with a '('
#10: FILE: ./hal/odm_RegConfig8723B.c:10:
+void odm_ConfigRFReg_8723B(

CHECK: Avoid CamelCase: <odm_ConfigRFReg_8723B>
#10: FILE: ./hal/odm_RegConfig8723B.c:10:
+void odm_ConfigRFReg_8723B(

CHECK: Avoid CamelCase: <Addr>
#12: FILE: ./hal/odm_RegConfig8723B.c:12:
+	u32 Addr,

CHECK: braces {} should be used on all arms of this statement
#18: FILE: ./hal/odm_RegConfig8723B.c:18:
+	if (Addr == 0xfe || Addr == 0xffe)
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#20: FILE: ./hal/odm_RegConfig8723B.c:20:
+	else {

CHECK: line length of 136 exceeds 100 columns
#25: FILE: ./hal/odm_RegConfig8723B.c:25:
+		/* For disable/enable test in high temperature, the B6 value will fail to fill. Suggestion by BB Stanley, 2013.06.25. */

CHECK: Lines should not end with a '('
#30: FILE: ./hal/odm_RegConfig8723B.c:30:
+			getvalue = PHY_QueryRFReg(

CHECK: spaces preferred around that '>>' (ctx:VxV)
#36: FILE: ./hal/odm_RegConfig8723B.c:36:
+			while ((getvalue>>8) != (Data>>8)) {
 			                ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#36: FILE: ./hal/odm_RegConfig8723B.c:36:
+			while ((getvalue>>8) != (Data>>8)) {
 			                             ^

CHECK: line length of 105 exceeds 100 columns
#38: FILE: ./hal/odm_RegConfig8723B.c:38:
+				PHY_SetRFReg(pDM_Odm->Adapter, RF_PATH, RegAddr, bRFRegOffsetMask, Data);

CHECK: line length of 103 exceeds 100 columns
#40: FILE: ./hal/odm_RegConfig8723B.c:40:
+				getvalue = PHY_QueryRFReg(pDM_Odm->Adapter, RF_PATH, Addr, bMaskDWord);

CHECK: Lines should not end with a '('
#50: FILE: ./hal/odm_RegConfig8723B.c:50:
+			getvalue = PHY_QueryRFReg(

CHECK: Lines should not end with a '('
#58: FILE: ./hal/odm_RegConfig8723B.c:58:
+				PHY_SetRFReg(

CHECK: Lines should not end with a '('
#67: FILE: ./hal/odm_RegConfig8723B.c:67:
+				PHY_SetRFReg(

CHECK: Lines should not end with a '('
#75: FILE: ./hal/odm_RegConfig8723B.c:75:
+				getvalue = PHY_QueryRFReg(

CHECK: Please don't use multiple blank lines
#86: FILE: ./hal/odm_RegConfig8723B.c:86:
+
+

CHECK: spaces preferred around that '&' (ctx:VxV)
#90: FILE: ./hal/odm_RegConfig8723B.c:90:
+	u32 maskforPhySet = (u32)(content&0xE000);
 	                                 ^

CHECK: Avoid CamelCase: <maskforPhySet>
#90: FILE: ./hal/odm_RegConfig8723B.c:90:
+	u32 maskforPhySet = (u32)(content&0xE000);

CHECK: Lines should not end with a '('
#92: FILE: ./hal/odm_RegConfig8723B.c:92:
+	odm_ConfigRFReg_8723B(

CHECK: spaces preferred around that '|' (ctx:VxV)
#97: FILE: ./hal/odm_RegConfig8723B.c:97:
+		Addr|maskforPhySet
 		    ^

CHECK: Lines should not end with a '('
#106: FILE: ./hal/odm_RegConfig8723B.c:106:
+void odm_ConfigBB_AGC_8723B(

CHECK: Avoid CamelCase: <Bitmask>
#109: FILE: ./hal/odm_RegConfig8723B.c:109:
+	u32 Bitmask,

CHECK: Lines should not end with a '('
#118: FILE: ./hal/odm_RegConfig8723B.c:118:
+void odm_ConfigBB_PHY_REG_PG_8723B(

WARNING: braces {} are not necessary for any arm of this statement
#126: FILE: ./hal/odm_RegConfig8723B.c:126:
+	if (Addr == 0xfe || Addr == 0xffe)
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#128: FILE: ./hal/odm_RegConfig8723B.c:128:
+	else {

CHECK: Lines should not end with a '('
#133: FILE: ./hal/odm_RegConfig8723B.c:133:
+void odm_ConfigBB_PHY_8723B(

WARNING: braces {} are not necessary for any arm of this statement
#140: FILE: ./hal/odm_RegConfig8723B.c:140:
+	if (Addr == 0xfe)
[...]
+	else if (Addr == 0xfd)
[...]
+	else if (Addr == 0xfc)
[...]
+	else if (Addr == 0xfb)
[...]
+	else if (Addr == 0xfa)
[...]
+	else if (Addr == 0xf9)
[...]
+	else {
[...]

CHECK: usleep_range is preferred over udelay; see function description of usleep_range() and udelay().
#147: FILE: ./hal/odm_RegConfig8723B.c:147:
+		udelay(50);

CHECK: Unbalanced braces around else statement
#152: FILE: ./hal/odm_RegConfig8723B.c:152:
+	else {

CHECK: Lines should not end with a '('
#160: FILE: ./hal/odm_RegConfig8723B.c:160:
+void odm_ConfigBB_TXPWR_LMT_8723B(

CHECK: Lines should not end with a '('
#170: FILE: ./hal/odm_RegConfig8723B.c:170:
+	PHY_SetTxPowerLimit(

total: 0 errors, 2 warnings, 29 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_RegConfig8723B.c has style problems, please review.
--------------------------
./hal/odm_RegConfig8723B.h
--------------------------
total: 0 errors, 0 warnings, 0 checks, 45 lines checked

./hal/odm_RegConfig8723B.h has no obvious style problems and is ready for submission.
--------------------------
./hal/odm_RegConfig8723B.o
--------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_RegConfig8723B.o has style problems, please review.
------------------------
./hal/odm_RegDefine11N.h
------------------------
CHECK: Please don't use multiple blank lines
#11: FILE: ./hal/odm_RegDefine11N.h:11:
+
+

CHECK: Please don't use multiple blank lines
#155: FILE: ./hal/odm_RegDefine11N.h:155:
+
+

total: 0 errors, 0 warnings, 2 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_RegDefine11N.h has style problems, please review.
---------------
./hal/odm_reg.h
---------------
total: 0 errors, 0 warnings, 0 checks, 91 lines checked

./hal/odm_reg.h has no obvious style problems and is ready for submission.
-----------------
./hal/odm_types.h
-----------------
WARNING: Block comments use * on subsequent lines
#22: FILE: ./hal/odm_types.h:22:
+	/*RT_STATUS_PENDING,
+	RT_STATUS_RESOURCE,

WARNING: Block comments use a trailing */ on a separate line
#26: FILE: ./hal/odm_types.h:26:
+	RT_STATUS_OS_API_FAILED,*/

CHECK: Please don't use multiple blank lines
#29: FILE: ./hal/odm_types.h:29:
+
+

CHECK: line length of 110 exceeds 100 columns
#39: FILE: ./hal/odm_types.h:39:
+	#define SET_TX_DESC_ANTSEL_A_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#39: FILE: ./hal/odm_types.h:39:
+	#define SET_TX_DESC_ANTSEL_A_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 1, __Value)
 	                                                                                   ^

CHECK: Avoid CamelCase: <__pTxDesc>
#39: FILE: ./hal/odm_types.h:39:
+	#define SET_TX_DESC_ANTSEL_A_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 1, __Value)

CHECK: Avoid CamelCase: <__Value>
#39: FILE: ./hal/odm_types.h:39:
+	#define SET_TX_DESC_ANTSEL_A_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 1, __Value)

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#39: FILE: ./hal/odm_types.h:39:
+	#define SET_TX_DESC_ANTSEL_A_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 1, __Value)

CHECK: line length of 110 exceeds 100 columns
#40: FILE: ./hal/odm_types.h:40:
+	#define SET_TX_DESC_ANTSEL_B_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 25, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#40: FILE: ./hal/odm_types.h:40:
+	#define SET_TX_DESC_ANTSEL_B_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 25, 1, __Value)
 	                                                                                   ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#40: FILE: ./hal/odm_types.h:40:
+	#define SET_TX_DESC_ANTSEL_B_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 25, 1, __Value)

CHECK: line length of 111 exceeds 100 columns
#41: FILE: ./hal/odm_types.h:41:
+	#define SET_TX_DESC_ANTSEL_C_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 29, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#41: FILE: ./hal/odm_types.h:41:
+	#define SET_TX_DESC_ANTSEL_C_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 29, 1, __Value)
 	                                                                                   ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#41: FILE: ./hal/odm_types.h:41:
+	#define SET_TX_DESC_ANTSEL_C_88E(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 29, 1, __Value)

CHECK: line length of 118 exceeds 100 columns
#47: FILE: ./hal/odm_types.h:47:
+#define READ_NEXT_PAIR(v1, v2, i) do { if (i+2 >= ArrayLen) break; i += 2; v1 = Array[i]; v2 = Array[i+1]; } while (0)

CHECK: spaces preferred around that '+' (ctx:VxV)
#47: FILE: ./hal/odm_types.h:47:
+#define READ_NEXT_PAIR(v1, v2, i) do { if (i+2 >= ArrayLen) break; i += 2; v1 = Array[i]; v2 = Array[i+1]; } while (0)
                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#47: FILE: ./hal/odm_types.h:47:
+#define READ_NEXT_PAIR(v1, v2, i) do { if (i+2 >= ArrayLen) break; i += 2; v1 = Array[i]; v2 = Array[i+1]; } while (0)
                                                                                                       ^

CHECK: Macro argument reuse 'i' - possible side-effects?
#47: FILE: ./hal/odm_types.h:47:
+#define READ_NEXT_PAIR(v1, v2, i) do { if (i+2 >= ArrayLen) break; i += 2; v1 = Array[i]; v2 = Array[i+1]; } while (0)

CHECK: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#47: FILE: ./hal/odm_types.h:47:
+#define READ_NEXT_PAIR(v1, v2, i) do { if (i+2 >= ArrayLen) break; i += 2; v1 = Array[i]; v2 = Array[i+1]; } while (0)

total: 0 errors, 2 warnings, 17 checks, 51 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/odm_types.h has style problems, please review.
--------------------
./hal/rtl8723b_cmd.c
--------------------
WARNING: Comparisons should place the constant on the right side of the test
#27: FILE: ./hal/rtl8723b_cmd.c:27:
+		if (0 == valid) {

WARNING: braces {} are not necessary for single statement blocks
#27: FILE: ./hal/rtl8723b_cmd.c:27:
+		if (0 == valid) {
+			read_down = true;
+		}

CHECK: Blank lines aren't necessary before a close brace '}'
#34: FILE: ./hal/rtl8723b_cmd.c:34:
+
+}

CHECK: Please don't use multiple blank lines
#36: FILE: ./hal/rtl8723b_cmd.c:36:
+
+

WARNING: Block comments should align the * on each line
#38: FILE: ./hal/rtl8723b_cmd.c:38:
+/*****************************************
+* H2C Msg format :

CHECK: Avoid CamelCase: <FillH2CCmd8723B>
#45: FILE: ./hal/rtl8723b_cmd.c:45:
+s32 FillH2CCmd8723B(struct adapter *padapter, u8 ElementID, u32 CmdLen, u8 *pCmdBuffer)

WARNING: braces {} are not necessary for single statement blocks
#60: FILE: ./hal/rtl8723b_cmd.c:60:
+	if (!pCmdBuffer) {
+		goto exit;
+	}

WARNING: braces {} are not necessary for single statement blocks
#64: FILE: ./hal/rtl8723b_cmd.c:64:
+	if (CmdLen > RTL8723B_MAX_CMD_LEN) {
+		goto exit;
+	}

CHECK: Avoid CamelCase: <LastHMEBoxNum>
#73: FILE: ./hal/rtl8723b_cmd.c:73:
+		h2c_box_num = pHalData->LastHMEBoxNum;

CHECK: braces {} should be used on all arms of this statement
#78: FILE: ./hal/rtl8723b_cmd.c:78:
+		if (CmdLen <= 3)
[...]
+		else {
[...]

CHECK: spaces preferred around that '+' (ctx:VxV)
#79: FILE: ./hal/rtl8723b_cmd.c:79:
+			memcpy((u8 *)(&h2c_cmd)+1, pCmdBuffer, CmdLen);
 			                       ^

CHECK: Unbalanced braces around else statement
#80: FILE: ./hal/rtl8723b_cmd.c:80:
+		else {

CHECK: spaces preferred around that '+' (ctx:VxV)
#81: FILE: ./hal/rtl8723b_cmd.c:81:
+			memcpy((u8 *)(&h2c_cmd)+1, pCmdBuffer, 3);
 			                       ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#82: FILE: ./hal/rtl8723b_cmd.c:82:
+			memcpy((u8 *)(&h2c_cmd_ex), pCmdBuffer+3, CmdLen-3);
 			                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#82: FILE: ./hal/rtl8723b_cmd.c:82:
+			memcpy((u8 *)(&h2c_cmd_ex), pCmdBuffer+3, CmdLen-3);
 			                                                ^

WARNING: please, no space before tabs
#83: FILE: ./hal/rtl8723b_cmd.c:83:
+/* ^I^I^I*(u8 *)(&h2c_cmd) |= BIT(7); */$

CHECK: line length of 108 exceeds 100 columns
#89: FILE: ./hal/rtl8723b_cmd.c:89:
+			msgbox_ex_addr = REG_HMEBOX_EXT0_8723B + (h2c_box_num*RTL8723B_EX_MESSAGE_BOX_SIZE);

CHECK: spaces preferred around that '*' (ctx:VxV)
#89: FILE: ./hal/rtl8723b_cmd.c:89:
+			msgbox_ex_addr = REG_HMEBOX_EXT0_8723B + (h2c_box_num*RTL8723B_EX_MESSAGE_BOX_SIZE);
 			                                                     ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#92: FILE: ./hal/rtl8723b_cmd.c:92:
+		msgbox_addr = REG_HMEBOX_0 + (h2c_box_num*MESSAGE_BOX_SIZE);
 		                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#95: FILE: ./hal/rtl8723b_cmd.c:95:
+		pHalData->LastHMEBoxNum = (h2c_box_num+1) % MAX_H2C_BOX_NUMS;
 		                                      ^

CHECK: Avoid CamelCase: <ConstructBeacon>
#107: FILE: ./hal/rtl8723b_cmd.c:107:
+static void ConstructBeacon(struct adapter *padapter, u8 *pframe, u32 *pLength)

CHECK: Avoid CamelCase: <pLength>
#107: FILE: ./hal/rtl8723b_cmd.c:107:
+static void ConstructBeacon(struct adapter *padapter, u8 *pframe, u32 *pLength)

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#112: FILE: ./hal/rtl8723b_cmd.c:112:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#113: FILE: ./hal/rtl8723b_cmd.c:113:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#114: FILE: ./hal/rtl8723b_cmd.c:114:
+	struct wlan_bssid_ex *cur_network = &(pmlmeinfo->network);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#118: FILE: ./hal/rtl8723b_cmd.c:118:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#122: FILE: ./hal/rtl8723b_cmd.c:122:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: spaces preferred around that '&' (ctx:VxV)
#148: FILE: ./hal/rtl8723b_cmd.c:148:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE) {
 	                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#150: FILE: ./hal/rtl8723b_cmd.c:150:
+		memcpy(pframe, cur_network->ies+sizeof(struct ndis_802_11_fix_ie), pktlen);
 		                               ^

CHECK: Avoid CamelCase: <_ConstructBeacon>
#152: FILE: ./hal/rtl8723b_cmd.c:152:
+		goto _ConstructBeacon;

CHECK: line length of 115 exceeds 100 columns
#158: FILE: ./hal/rtl8723b_cmd.c:158:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SSID, cur_network->ssid.ssid_length, cur_network->ssid.ssid, &pktlen);

CHECK: line length of 129 exceeds 100 columns
#162: FILE: ./hal/rtl8723b_cmd.c:162:
+	pframe = rtw_set_ie(pframe, WLAN_EID_SUPP_RATES, ((rate_len > 8) ? 8 : rate_len), cur_network->supported_rates, &pktlen);

CHECK: line length of 126 exceeds 100 columns
#165: FILE: ./hal/rtl8723b_cmd.c:165:
+	pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pktlen);

CHECK: Unnecessary parentheses around cur_network->configuration.ds_config
#165: FILE: ./hal/rtl8723b_cmd.c:165:
+	pframe = rtw_set_ie(pframe, WLAN_EID_DS_PARAMS, 1, (unsigned char *)&(cur_network->configuration.ds_config), &pktlen);

CHECK: spaces preferred around that '&' (ctx:VxV)
#167: FILE: ./hal/rtl8723b_cmd.c:167:
+	if ((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) {
 	                     ^

CHECK: line length of 110 exceeds 100 columns
#172: FILE: ./hal/rtl8723b_cmd.c:172:
+		pframe = rtw_set_ie(pframe, WLAN_EID_IBSS_PARAMS, 2, (unsigned char *)(&ATIMWindow), &pktlen);

CHECK: Please don't use multiple blank lines
#175: FILE: ./hal/rtl8723b_cmd.c:175:
+
+

CHECK: Please don't use multiple blank lines
#178: FILE: ./hal/rtl8723b_cmd.c:178:
+
+

CHECK: line length of 130 exceeds 100 columns
#181: FILE: ./hal/rtl8723b_cmd.c:181:
+		pframe = rtw_set_ie(pframe, WLAN_EID_EXT_SUPP_RATES, (rate_len - 8), (cur_network->supported_rates + 8), &pktlen);

CHECK: Please don't use multiple blank lines
#183: FILE: ./hal/rtl8723b_cmd.c:183:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#193: FILE: ./hal/rtl8723b_cmd.c:193:
+
+}

CHECK: Avoid CamelCase: <ConstructPSPoll>
#195: FILE: ./hal/rtl8723b_cmd.c:195:
+static void ConstructPSPoll(struct adapter *padapter, u8 *pframe, u32 *pLength)

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#199: FILE: ./hal/rtl8723b_cmd.c:199:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#200: FILE: ./hal/rtl8723b_cmd.c:200:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#205: FILE: ./hal/rtl8723b_cmd.c:205:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Avoid CamelCase: <SetDuration>
#211: FILE: ./hal/rtl8723b_cmd.c:211:
+	SetDuration(pframe, (pmlmeinfo->aid | 0xc000));

CHECK: Unnecessary parentheses around pmlmeinfo->network
#214: FILE: ./hal/rtl8723b_cmd.c:214:
+	memcpy(pwlanhdr->addr1, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#217: FILE: ./hal/rtl8723b_cmd.c:217:
+	memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Lines should not end with a '('
#222: FILE: ./hal/rtl8723b_cmd.c:222:
+static void ConstructNullFunctionData(

CHECK: Avoid CamelCase: <ConstructNullFunctionData>
#222: FILE: ./hal/rtl8723b_cmd.c:222:
+static void ConstructNullFunctionData(

CHECK: Avoid CamelCase: <StaAddr>
#226: FILE: ./hal/rtl8723b_cmd.c:226:
+	u8 *StaAddr,

CHECK: Avoid CamelCase: <bQoS>
#227: FILE: ./hal/rtl8723b_cmd.c:227:
+	u8 bQoS,

CHECK: Avoid CamelCase: <bEosp>
#229: FILE: ./hal/rtl8723b_cmd.c:229:
+	u8 bEosp,

CHECK: Avoid CamelCase: <bForcePowerSave>
#230: FILE: ./hal/rtl8723b_cmd.c:230:
+	u8 bForcePowerSave

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#238: FILE: ./hal/rtl8723b_cmd.c:238:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#239: FILE: ./hal/rtl8723b_cmd.c:239:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#251: FILE: ./hal/rtl8723b_cmd.c:251:
+		memcpy(pwlanhdr->addr1, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#252: FILE: ./hal/rtl8723b_cmd.c:252:
+		memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#258: FILE: ./hal/rtl8723b_cmd.c:258:
+		memcpy(pwlanhdr->addr2, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#259: FILE: ./hal/rtl8723b_cmd.c:259:
+		memcpy(pwlanhdr->addr3, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#264: FILE: ./hal/rtl8723b_cmd.c:264:
+		memcpy(pwlanhdr->addr2, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around pmlmeinfo->network
#265: FILE: ./hal/rtl8723b_cmd.c:265:
+		memcpy(pwlanhdr->addr3, get_my_bssid(&(pmlmeinfo->network)), ETH_ALEN);

CHECK: Avoid CamelCase: <CheckFwRsvdPageContent>
#295: FILE: ./hal/rtl8723b_cmd.c:295:
+void CheckFwRsvdPageContent(struct adapter *Adapter)

CHECK: Avoid CamelCase: <rtl8723b_set_FwRsvdPage_cmd>
#299: FILE: ./hal/rtl8723b_cmd.c:299:
+static void rtl8723b_set_FwRsvdPage_cmd(struct adapter *padapter, struct rsvdpage_loc *rsvdpageloc)

CHECK: Avoid CamelCase: <u1H2CRsvdPageParm>
#301: FILE: ./hal/rtl8723b_cmd.c:301:
+	u8 u1H2CRsvdPageParm[H2C_RSVDPAGE_LOC_LEN] = {0};

CHECK: Avoid CamelCase: <LocProbeRsp>
#303: FILE: ./hal/rtl8723b_cmd.c:303:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_PROBE_RSP(u1H2CRsvdPageParm, rsvdpageloc->LocProbeRsp);

CHECK: Avoid CamelCase: <LocPsPoll>
#304: FILE: ./hal/rtl8723b_cmd.c:304:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_PSPOLL(u1H2CRsvdPageParm, rsvdpageloc->LocPsPoll);

CHECK: Avoid CamelCase: <LocNullData>
#305: FILE: ./hal/rtl8723b_cmd.c:305:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_NULL_DATA(u1H2CRsvdPageParm, rsvdpageloc->LocNullData);

CHECK: Avoid CamelCase: <LocQosNull>
#306: FILE: ./hal/rtl8723b_cmd.c:306:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_QOS_NULL_DATA(u1H2CRsvdPageParm, rsvdpageloc->LocQosNull);

CHECK: line length of 101 exceeds 100 columns
#307: FILE: ./hal/rtl8723b_cmd.c:307:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_BT_QOS_NULL_DATA(u1H2CRsvdPageParm, rsvdpageloc->LocBTQosNull);

CHECK: Avoid CamelCase: <LocBTQosNull>
#307: FILE: ./hal/rtl8723b_cmd.c:307:
+	SET_8723B_H2CCMD_RSVDPAGE_LOC_BT_QOS_NULL_DATA(u1H2CRsvdPageParm, rsvdpageloc->LocBTQosNull);

CHECK: line length of 103 exceeds 100 columns
#312: FILE: ./hal/rtl8723b_cmd.c:312:
+static void rtl8723b_set_FwAoacRsvdPage_cmd(struct adapter *padapter, struct rsvdpage_loc *rsvdpageloc)

CHECK: Avoid CamelCase: <rtl8723b_set_FwAoacRsvdPage_cmd>
#312: FILE: ./hal/rtl8723b_cmd.c:312:
+static void rtl8723b_set_FwAoacRsvdPage_cmd(struct adapter *padapter, struct rsvdpage_loc *rsvdpageloc)

CHECK: Avoid CamelCase: <rtl8723b_set_FwMediaStatusRpt_cmd>
#316: FILE: ./hal/rtl8723b_cmd.c:316:
+void rtl8723b_set_FwMediaStatusRpt_cmd(struct adapter *padapter, u8 mstatus, u8 macid)

CHECK: Avoid CamelCase: <u1H2CMediaStatusRptParm>
#318: FILE: ./hal/rtl8723b_cmd.c:318:
+	u8 u1H2CMediaStatusRptParm[H2C_MEDIA_STATUS_RPT_LEN] = {0};

CHECK: line length of 113 exceeds 100 columns
#326: FILE: ./hal/rtl8723b_cmd.c:326:
+	FillH2CCmd8723B(padapter, H2C_8723B_MEDIA_STATUS_RPT, H2C_MEDIA_STATUS_RPT_LEN, u1H2CMediaStatusRptParm);

CHECK: line length of 106 exceeds 100 columns
#329: FILE: ./hal/rtl8723b_cmd.c:329:
+void rtl8723b_set_FwMacIdConfig_cmd(struct adapter *padapter, u8 mac_id, u8 raid, u8 bw, u8 sgi, u32 mask)

CHECK: Avoid CamelCase: <rtl8723b_set_FwMacIdConfig_cmd>
#329: FILE: ./hal/rtl8723b_cmd.c:329:
+void rtl8723b_set_FwMacIdConfig_cmd(struct adapter *padapter, u8 mac_id, u8 raid, u8 bw, u8 sgi, u32 mask)

CHECK: Avoid CamelCase: <u1H2CMacIdConfigParm>
#331: FILE: ./hal/rtl8723b_cmd.c:331:
+	u8 u1H2CMacIdConfigParm[H2C_MACID_CFG_LEN] = {0};

CHECK: line length of 101 exceeds 100 columns
#339: FILE: ./hal/rtl8723b_cmd.c:339:
+	SET_8723B_H2CCMD_MACID_CFG_RATE_MASK2(u1H2CMacIdConfigParm, (u8)((mask & 0x00ff0000) >> 16));

CHECK: line length of 101 exceeds 100 columns
#340: FILE: ./hal/rtl8723b_cmd.c:340:
+	SET_8723B_H2CCMD_MACID_CFG_RATE_MASK3(u1H2CMacIdConfigParm, (u8)((mask & 0xff000000) >> 24));

CHECK: Avoid CamelCase: <u1H2CRssiSettingParm>
#347: FILE: ./hal/rtl8723b_cmd.c:347:
+	u8 u1H2CRssiSettingParm[H2C_RSSI_SETTING_LEN] = {0};

CHECK: spaces preferred around that '+' (ctx:VxV)
#349: FILE: ./hal/rtl8723b_cmd.c:349:
+	u8 rssi = *(param+2);
 	                 ^

CHECK: line length of 102 exceeds 100 columns
#356: FILE: ./hal/rtl8723b_cmd.c:356:
+	FillH2CCmd8723B(padapter, H2C_8723B_RSSI_SETTING, H2C_RSSI_SETTING_LEN, u1H2CRssiSettingParm);

CHECK: Avoid CamelCase: <rtl8723b_set_FwPwrMode_cmd>
#359: FILE: ./hal/rtl8723b_cmd.c:359:
+void rtl8723b_set_FwPwrMode_cmd(struct adapter *padapter, u8 psmode)

CHECK: Avoid CamelCase: <u1H2CPwrModeParm>
#364: FILE: ./hal/rtl8723b_cmd.c:364:
+	u8 u1H2CPwrModeParm[H2C_PWRMODE_LEN] = {0};

CHECK: Avoid CamelCase: <PowerState>
#365: FILE: ./hal/rtl8723b_cmd.c:365:
+	u8 PowerState = 0, awake_intvl = 1, byte5 = 0, rlbm = 0;

CHECK: spaces preferred around that '+' (ctx:VxV)
#368: FILE: ./hal/rtl8723b_cmd.c:368:
+		awake_intvl = pwrpriv->dtim+1;/* DTIM = (awake_intvl - 1) */
 		                           ^

CHECK: Unnecessary parentheses around 'rlbm == 2'
#384: FILE: ./hal/rtl8723b_cmd.c:384:
+			if ((rlbm == 2) && (byte5 & BIT(4))) {

CHECK: line length of 109 exceeds 100 columns
#403: FILE: ./hal/rtl8723b_cmd.c:403:
+	SET_8723B_H2CCMD_PWRMODE_PARM_ALL_QUEUE_UAPSD(u1H2CPwrModeParm, padapter->registrypriv.uapsd_enable);

CHECK: line length of 114 exceeds 100 columns
#419: FILE: ./hal/rtl8723b_cmd.c:419:
+				pmlmeext->bcn_delay_ratio[i] = (pmlmeext->bcn_delay_cnt[i]*100)/pmlmeext->bcn_cnt;

CHECK: spaces preferred around that '*' (ctx:VxV)
#419: FILE: ./hal/rtl8723b_cmd.c:419:
+				pmlmeext->bcn_delay_ratio[i] = (pmlmeext->bcn_delay_cnt[i]*100)/pmlmeext->bcn_cnt;
 				                                                          ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#419: FILE: ./hal/rtl8723b_cmd.c:419:
+				pmlmeext->bcn_delay_ratio[i] = (pmlmeext->bcn_delay_cnt[i]*100)/pmlmeext->bcn_cnt;
 				                                                               ^

CHECK: Blank lines aren't necessary before a close brace '}'
#434: FILE: ./hal/rtl8723b_cmd.c:434:
+
+			}

CHECK: Blank lines aren't necessary before a close brace '}'
#439: FILE: ./hal/rtl8723b_cmd.c:439:
+
+		}

WARNING: Block comments use * on subsequent lines
#442: FILE: ./hal/rtl8723b_cmd.c:442:
+/* offload to FW if fw version > v15.10
+		pmlmeext->DrvBcnEarly = 0;

CHECK: line length of 143 exceeds 100 columns
#446: FILE: ./hal/rtl8723b_cmd.c:446:
+			u1H2CPwrModeParm[H2C_PWRMODE_LEN-1] = BIT(0) | ((pmlmeext->DrvBcnEarly<<1)&0x0E) |((pmlmeext->DrvBcnTimeOut<<4)&0xf0) ;

CHECK: Blank lines aren't necessary before a close brace '}'
#449: FILE: ./hal/rtl8723b_cmd.c:449:
+
+	}

CHECK: Avoid CamelCase: <rtl8723b_set_FwPsTuneParam_cmd>
#456: FILE: ./hal/rtl8723b_cmd.c:456:
+void rtl8723b_set_FwPsTuneParam_cmd(struct adapter *padapter)

CHECK: Avoid CamelCase: <u1H2CPsTuneParm>
#458: FILE: ./hal/rtl8723b_cmd.c:458:
+	u8 u1H2CPsTuneParm[H2C_PSTUNEPARAM_LEN] = {0};

CHECK: Avoid CamelCase: <rtl8723b_set_FwPwrModeInIPS_cmd>
#473: FILE: ./hal/rtl8723b_cmd.c:473:
+void rtl8723b_set_FwPwrModeInIPS_cmd(struct adapter *padapter, u8 cmd_param)

CHECK: Blank lines aren't necessary after an open brace '{'
#475: FILE: ./hal/rtl8723b_cmd.c:475:
+{
+

CHECK: Lines should not end with a '('
#493: FILE: ./hal/rtl8723b_cmd.c:493:
+static void rtl8723b_set_FwRsvdPagePkt(

CHECK: Avoid CamelCase: <rtl8723b_set_FwRsvdPagePkt>
#493: FILE: ./hal/rtl8723b_cmd.c:493:
+static void rtl8723b_set_FwRsvdPagePkt(

CHECK: Avoid CamelCase: <bDLFinished>
#494: FILE: ./hal/rtl8723b_cmd.c:494:
+	struct adapter *padapter, bool bDLFinished

CHECK: Avoid CamelCase: <BeaconLength>
#503: FILE: ./hal/rtl8723b_cmd.c:503:
+	u32 BeaconLength = 0, PSPollLength = 0;

CHECK: Avoid CamelCase: <PSPollLength>
#503: FILE: ./hal/rtl8723b_cmd.c:503:
+	u32 BeaconLength = 0, PSPollLength = 0;

CHECK: Avoid CamelCase: <NullDataLength>
#504: FILE: ./hal/rtl8723b_cmd.c:504:
+	u32 NullDataLength = 0, QosNullLength = 0, BTQosNullLength = 0;

CHECK: Avoid CamelCase: <QosNullLength>
#504: FILE: ./hal/rtl8723b_cmd.c:504:
+	u32 NullDataLength = 0, QosNullLength = 0, BTQosNullLength = 0;

CHECK: Avoid CamelCase: <BTQosNullLength>
#504: FILE: ./hal/rtl8723b_cmd.c:504:
+	u32 NullDataLength = 0, QosNullLength = 0, BTQosNullLength = 0;

CHECK: Avoid CamelCase: <ReservedPagePacket>
#505: FILE: ./hal/rtl8723b_cmd.c:505:
+	u8 *ReservedPagePacket;

CHECK: Avoid CamelCase: <TxDescLen>
#506: FILE: ./hal/rtl8723b_cmd.c:506:
+	u8 TxDescLen = TXDESC_SIZE, TxDescOffset = TXDESC_OFFSET;

CHECK: Avoid CamelCase: <TxDescOffset>
#506: FILE: ./hal/rtl8723b_cmd.c:506:
+	u8 TxDescLen = TXDESC_SIZE, TxDescOffset = TXDESC_OFFSET;

CHECK: Avoid CamelCase: <TotalPageNum>
#507: FILE: ./hal/rtl8723b_cmd.c:507:
+	u8 TotalPageNum = 0, CurtPktPageNum = 0, RsvdPageNum = 0;

CHECK: Avoid CamelCase: <CurtPktPageNum>
#507: FILE: ./hal/rtl8723b_cmd.c:507:
+	u8 TotalPageNum = 0, CurtPktPageNum = 0, RsvdPageNum = 0;

CHECK: Avoid CamelCase: <RsvdPageNum>
#507: FILE: ./hal/rtl8723b_cmd.c:507:
+	u8 TotalPageNum = 0, CurtPktPageNum = 0, RsvdPageNum = 0;

CHECK: Avoid CamelCase: <BufIndex>
#508: FILE: ./hal/rtl8723b_cmd.c:508:
+	u16 BufIndex, PageSize = 128;

CHECK: Avoid CamelCase: <TotalPacketLen>
#509: FILE: ./hal/rtl8723b_cmd.c:509:
+	u32 TotalPacketLen, MaxRsvdPageBufSize = 0;

CHECK: Avoid CamelCase: <MaxRsvdPageBufSize>
#509: FILE: ./hal/rtl8723b_cmd.c:509:
+	u32 TotalPacketLen, MaxRsvdPageBufSize = 0;

CHECK: Avoid CamelCase: <RsvdPageLoc>
#511: FILE: ./hal/rtl8723b_cmd.c:511:
+	struct rsvdpage_loc RsvdPageLoc;

CHECK: spaces preferred around that '*' (ctx:VxV)
#518: FILE: ./hal/rtl8723b_cmd.c:518:
+	MaxRsvdPageBufSize = RsvdPageNum*PageSize;
 	                                ^

CHECK: line length of 113 exceeds 100 columns
#534: FILE: ./hal/rtl8723b_cmd.c:534:
+	/* If we don't add 1 more page, the WOWLAN function has a problem. Baron thinks it's a bug of firmware */

CHECK: spaces preferred around that '*' (ctx:VxV)
#540: FILE: ./hal/rtl8723b_cmd.c:540:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: line length of 119 exceeds 100 columns
#545: FILE: ./hal/rtl8723b_cmd.c:545:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], PSPollLength, true, false, false);

CHECK: spaces preferred around that '-' (ctx:VxV)
#545: FILE: ./hal/rtl8723b_cmd.c:545:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], PSPollLength, true, false, false);
 	                                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#551: FILE: ./hal/rtl8723b_cmd.c:551:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: Lines should not end with a '('
#555: FILE: ./hal/rtl8723b_cmd.c:555:
+	ConstructNullFunctionData(

CHECK: line length of 122 exceeds 100 columns
#562: FILE: ./hal/rtl8723b_cmd.c:562:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], NullDataLength, false, false, false);

CHECK: spaces preferred around that '-' (ctx:VxV)
#562: FILE: ./hal/rtl8723b_cmd.c:562:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], NullDataLength, false, false, false);
 	                                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#568: FILE: ./hal/rtl8723b_cmd.c:568:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: Lines should not end with a '('
#572: FILE: ./hal/rtl8723b_cmd.c:572:
+	ConstructNullFunctionData(

CHECK: line length of 121 exceeds 100 columns
#579: FILE: ./hal/rtl8723b_cmd.c:579:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], QosNullLength, false, false, false);

CHECK: spaces preferred around that '-' (ctx:VxV)
#579: FILE: ./hal/rtl8723b_cmd.c:579:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], QosNullLength, false, false, false);
 	                                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#585: FILE: ./hal/rtl8723b_cmd.c:585:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: Lines should not end with a '('
#589: FILE: ./hal/rtl8723b_cmd.c:589:
+	ConstructNullFunctionData(

CHECK: line length of 122 exceeds 100 columns
#596: FILE: ./hal/rtl8723b_cmd.c:596:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], BTQosNullLength, false, true, false);

CHECK: spaces preferred around that '-' (ctx:VxV)
#596: FILE: ./hal/rtl8723b_cmd.c:596:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], BTQosNullLength, false, true, false);
 	                                                                ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#602: FILE: ./hal/rtl8723b_cmd.c:602:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: multiple assignments should be avoided
#613: FILE: ./hal/rtl8723b_cmd.c:613:
+		pattrib->pktlen = pattrib->last_txcmdsz = TotalPacketLen - TxDescOffset;

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#633: FILE: ./hal/rtl8723b_cmd.c:633:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#634: FILE: ./hal/rtl8723b_cmd.c:634:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <DLBcnCount>
#636: FILE: ./hal/rtl8723b_cmd.c:636:
+	u8 DLBcnCount = 0;

CHECK: Avoid CamelCase: <bRecover>
#641: FILE: ./hal/rtl8723b_cmd.c:641:
+		bool bRecover = false;

CHECK: line length of 110 exceeds 100 columns
#644: FILE: ./hal/rtl8723b_cmd.c:644:
+		/*  We should set AID, correct TSF, HW seq enable before set JoinBssReport to Fw in 88/92C. */

CHECK: spaces preferred around that '|' (ctx:VxV)
#646: FILE: ./hal/rtl8723b_cmd.c:646:
+		rtw_write16(padapter, REG_BCN_PSR_RPT, (0xC000|pmlmeinfo->aid));
 		                                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#649: FILE: ./hal/rtl8723b_cmd.c:649:
+		v8 = rtw_read8(padapter, REG_CR+1);
 		                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#651: FILE: ./hal/rtl8723b_cmd.c:651:
+		rtw_write8(padapter, REG_CR+1, v8);
 		                           ^

CHECK: line length of 109 exceeds 100 columns
#654: FILE: ./hal/rtl8723b_cmd.c:654:
+		/*  Fix download reserved page packet fail that access collision with the protection time. */

CHECK: line length of 102 exceeds 100 columns
#661: FILE: ./hal/rtl8723b_cmd.c:661:
+		/*  Set FWHW_TXQ_CTRL 0x422[6]= 0 to tell Hw the packet is not a real beacon frame. */

CHECK: Avoid CamelCase: <RegFwHwTxQCtrl>
#662: FILE: ./hal/rtl8723b_cmd.c:662:
+		if (pHalData->RegFwHwTxQCtrl & BIT(6))

CHECK: spaces preferred around that '+' (ctx:VxV)
#666: FILE: ./hal/rtl8723b_cmd.c:666:
+		rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl & ~BIT(6));
 		                                      ^

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#680: FILE: ./hal/rtl8723b_cmd.c:680:
+				yield();

CHECK: line length of 123 exceeds 100 columns
#685: FILE: ./hal/rtl8723b_cmd.c:685:
+			} while (!bcn_valid && (poll%10) != 0 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

CHECK: spaces preferred around that '%' (ctx:VxV)
#685: FILE: ./hal/rtl8723b_cmd.c:685:
+			} while (!bcn_valid && (poll%10) != 0 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);
 			                            ^

CHECK: line length of 118 exceeds 100 columns
#687: FILE: ./hal/rtl8723b_cmd.c:687:
+		} while (!bcn_valid && DLBcnCount <= 100 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

WARNING: Missing a blank line after declarations
#692: FILE: ./hal/rtl8723b_cmd.c:692:
+			struct pwrctrl_priv *pwrctl = adapter_to_pwrctl(padapter);
+			pwrctl->fw_psmode_iface_id = padapter->iface_id;

CHECK: line length of 104 exceeds 100 columns
#703: FILE: ./hal/rtl8723b_cmd.c:703:
+		/*  prevent from setting 0x422[6] to 0 after download reserved page, or it will cause */

CHECK: line length of 101 exceeds 100 columns
#707: FILE: ./hal/rtl8723b_cmd.c:707:
+			rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl | BIT(6));

CHECK: spaces preferred around that '+' (ctx:VxV)
#707: FILE: ./hal/rtl8723b_cmd.c:707:
+			rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl | BIT(6));
 			                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#712: FILE: ./hal/rtl8723b_cmd.c:712:
+		v8 = rtw_read8(padapter, REG_CR+1);
 		                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#714: FILE: ./hal/rtl8723b_cmd.c:714:
+		rtw_write8(padapter, REG_CR+1, v8);
 		                           ^

CHECK: Avoid CamelCase: <rtl8723b_set_FwJoinBssRpt_cmd>
#718: FILE: ./hal/rtl8723b_cmd.c:718:
+void rtl8723b_set_FwJoinBssRpt_cmd(struct adapter *padapter, u8 mstatus)

CHECK: Lines should not end with a '('
#728: FILE: ./hal/rtl8723b_cmd.c:728:
+void rtl8723b_Add_RateATid(

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#737: FILE: ./hal/rtl8723b_cmd.c:737:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Avoid CamelCase: <shortGI>
#741: FILE: ./hal/rtl8723b_cmd.c:741:
+	u8 shortGI = arg[2];

CHECK: spaces preferred around that '&' (ctx:VxV)
#743: FILE: ./hal/rtl8723b_cmd.c:743:
+	u32 mask = bitmap&0x0FFFFFFF;
 	                 ^

CHECK: Lines should not end with a '('
#757: FILE: ./hal/rtl8723b_cmd.c:757:
+static void ConstructBtNullFunctionData(

CHECK: Avoid CamelCase: <ConstructBtNullFunctionData>
#757: FILE: ./hal/rtl8723b_cmd.c:757:
+static void ConstructBtNullFunctionData(

CHECK: Avoid CamelCase: <SetFwRsvdPagePkt_BTCoex>
#812: FILE: ./hal/rtl8723b_cmd.c:812:
+static void SetFwRsvdPagePkt_BTCoex(struct adapter *padapter)

CHECK: spaces preferred around that '*' (ctx:VxV)
#832: FILE: ./hal/rtl8723b_cmd.c:832:
+	MaxRsvdPageBufSize = RsvdPageNum*PageSize;
 	                                ^

CHECK: line length of 113 exceeds 100 columns
#848: FILE: ./hal/rtl8723b_cmd.c:848:
+	/* If we don't add 1 more page, the WOWLAN function has a problem. Baron thinks it's a bug of firmware */

CHECK: spaces preferred around that '*' (ctx:VxV)
#853: FILE: ./hal/rtl8723b_cmd.c:853:
+	BufIndex += (CurtPktPageNum*PageSize);
 	                           ^

CHECK: Lines should not end with a '('
#863: FILE: ./hal/rtl8723b_cmd.c:863:
+	ConstructBtNullFunctionData(

CHECK: line length of 122 exceeds 100 columns
#870: FILE: ./hal/rtl8723b_cmd.c:870:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], BTQosNullLength, false, true, false);

CHECK: spaces preferred around that '-' (ctx:VxV)
#870: FILE: ./hal/rtl8723b_cmd.c:870:
+	rtl8723b_fill_fake_txdesc(padapter, &ReservedPagePacket[BufIndex-TxDescLen], BTQosNullLength, false, true, false);
 	                                                                ^

CHECK: multiple assignments should be avoided
#884: FILE: ./hal/rtl8723b_cmd.c:884:
+	pattrib->pktlen = pattrib->last_txcmdsz = TotalPacketLen - TxDescOffset;

CHECK: Avoid CamelCase: <rtl8723b_download_BTCoex_AP_mode_rsvd_page>
#896: FILE: ./hal/rtl8723b_cmd.c:896:
+void rtl8723b_download_BTCoex_AP_mode_rsvd_page(struct adapter *padapter)

CHECK: line length of 102 exceeds 100 columns
#911: FILE: ./hal/rtl8723b_cmd.c:911:
+	/*  We should set AID, correct TSF, HW seq enable before set JoinBssReport to Fw in 88/92C. */

CHECK: spaces preferred around that '|' (ctx:VxV)
#913: FILE: ./hal/rtl8723b_cmd.c:913:
+	rtw_write16(padapter, REG_BCN_PSR_RPT, (0xC000|pmlmeinfo->aid));
 	                                              ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#916: FILE: ./hal/rtl8723b_cmd.c:916:
+	val8 = rtw_read8(padapter, REG_CR+1);
 	                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#918: FILE: ./hal/rtl8723b_cmd.c:918:
+	rtw_write8(padapter,  REG_CR+1, val8);
 	                            ^

CHECK: line length of 101 exceeds 100 columns
#921: FILE: ./hal/rtl8723b_cmd.c:921:
+	/*  Fix download reserved page packet fail that access collision with the protection time. */

CHECK: spaces preferred around that '+' (ctx:VxV)
#934: FILE: ./hal/rtl8723b_cmd.c:934:
+	rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl);
 	                                      ^

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#946: FILE: ./hal/rtl8723b_cmd.c:946:
+			yield();

WARNING: please, no space before tabs
#947: FILE: ./hal/rtl8723b_cmd.c:947:
+/* ^I^I^Imdelay(10); */$

CHECK: line length of 115 exceeds 100 columns
#951: FILE: ./hal/rtl8723b_cmd.c:951:
+		} while (!bcn_valid && (poll%10) != 0 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

CHECK: spaces preferred around that '%' (ctx:VxV)
#951: FILE: ./hal/rtl8723b_cmd.c:951:
+		} while (!bcn_valid && (poll%10) != 0 && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);
 		                            ^

CHECK: line length of 112 exceeds 100 columns
#952: FILE: ./hal/rtl8723b_cmd.c:952:
+	} while (!bcn_valid && (DLBcnCount <= 100) && !padapter->bSurpriseRemoved && !padapter->bDriverStopped);

WARNING: Missing a blank line after declarations
#956: FILE: ./hal/rtl8723b_cmd.c:956:
+		struct pwrctrl_priv *pwrctl = adapter_to_pwrctl(padapter);
+		pwrctl->fw_psmode_iface_id = padapter->iface_id;

CHECK: spaces preferred around that '+' (ctx:VxV)
#972: FILE: ./hal/rtl8723b_cmd.c:972:
+		rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl);
 		                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#976: FILE: ./hal/rtl8723b_cmd.c:976:
+	val8 = rtw_read8(padapter, REG_CR+1);
 	                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#978: FILE: ./hal/rtl8723b_cmd.c:978:
+	rtw_write8(padapter, REG_CR+1, val8);
 	                           ^

total: 0 errors, 12 warnings, 180 checks, 979 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_cmd.c has style problems, please review.
--------------------
./hal/rtl8723b_cmd.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_cmd.o has style problems, please review.
-------------------
./hal/rtl8723b_dm.c
-------------------
CHECK: Avoid CamelCase: <dm_CheckStatistics>
#15: FILE: ./hal/rtl8723b_dm.c:15:
+static void dm_CheckStatistics(struct adapter *Adapter)

CHECK: Please use a blank line after function/struct/union/enum declarations
#18: FILE: ./hal/rtl8723b_dm.c:18:
+}
+/*  */

CHECK: Avoid CamelCase: <Init_ODM_ComInfo_8723b>
#21: FILE: ./hal/rtl8723b_dm.c:21:
+static void Init_ODM_ComInfo_8723b(struct adapter *Adapter)

CHECK: Blank lines aren't necessary after an open brace '{'
#23: FILE: ./hal/rtl8723b_dm.c:23:
+{
+

CHECK: Avoid CamelCase: <CustomerID>
#47: FILE: ./hal/rtl8723b_dm.c:47:
+	ODM_CmnInfoInit(pDM_Odm, ODM_CMNINFO_PATCH_ID, pHalData->CustomerID);

WARNING: please, no space before tabs
#48: FILE: ./hal/rtl8723b_dm.c:48:
+^I/* ^IODM_CMNINFO_BINHCT_TEST only for MP Team */$

CHECK: spaces preferred around that '|' (ctx:VxV)
#51: FILE: ./hal/rtl8723b_dm.c:51:
+	pdmpriv->InitODMFlag = ODM_RF_CALIBRATION|ODM_RF_TX_PWR_TRACK;
 	                                         ^

CHECK: Avoid CamelCase: <Update_ODM_ComInfo_8723b>
#56: FILE: ./hal/rtl8723b_dm.c:56:
+static void Update_ODM_ComInfo_8723b(struct adapter *Adapter)

WARNING: please, no space before tabs
#86: FILE: ./hal/rtl8723b_dm.c:86:
+^I/* ^IODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_MAC_PHY_MODE,&(pDM_Odm->u8_temp)); */$

CHECK: Unnecessary parentheses around dvobj->traffic_stat.tx_bytes
#90: FILE: ./hal/rtl8723b_dm.c:90:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_TX_UNI, &(dvobj->traffic_stat.tx_bytes));

CHECK: Unnecessary parentheses around dvobj->traffic_stat.rx_bytes
#91: FILE: ./hal/rtl8723b_dm.c:91:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_RX_UNI, &(dvobj->traffic_stat.rx_bytes));

CHECK: Unnecessary parentheses around pmlmeext->cur_wireless_mode
#92: FILE: ./hal/rtl8723b_dm.c:92:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_WM_MODE, &(pmlmeext->cur_wireless_mode));

CHECK: Unnecessary parentheses around pHalData->nCur40MhzPrimeSC
#93: FILE: ./hal/rtl8723b_dm.c:93:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SEC_CHNL_OFFSET, &(pHalData->nCur40MhzPrimeSC));

CHECK: Avoid CamelCase: <nCur40MhzPrimeSC>
#93: FILE: ./hal/rtl8723b_dm.c:93:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SEC_CHNL_OFFSET, &(pHalData->nCur40MhzPrimeSC));

CHECK: line length of 101 exceeds 100 columns
#94: FILE: ./hal/rtl8723b_dm.c:94:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SEC_MODE, &(Adapter->securitypriv.dot11PrivacyAlgrthm));

CHECK: Unnecessary parentheses around Adapter->securitypriv.dot11PrivacyAlgrthm
#94: FILE: ./hal/rtl8723b_dm.c:94:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SEC_MODE, &(Adapter->securitypriv.dot11PrivacyAlgrthm));

CHECK: Unnecessary parentheses around pHalData->CurrentChannelBW
#95: FILE: ./hal/rtl8723b_dm.c:95:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_BW, &(pHalData->CurrentChannelBW));

CHECK: Unnecessary parentheses around pHalData->CurrentChannel
#96: FILE: ./hal/rtl8723b_dm.c:96:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_CHNL, &(pHalData->CurrentChannel));

CHECK: Unnecessary parentheses around Adapter->net_closed
#97: FILE: ./hal/rtl8723b_dm.c:97:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_NET_CLOSED, &(Adapter->net_closed));

CHECK: Unnecessary parentheses around pHalData->u1ForcedIgiLb
#99: FILE: ./hal/rtl8723b_dm.c:99:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_FORCED_IGI_LB, &(pHalData->u1ForcedIgiLb));

CHECK: Avoid CamelCase: <u1ForcedIgiLb>
#99: FILE: ./hal/rtl8723b_dm.c:99:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_FORCED_IGI_LB, &(pHalData->u1ForcedIgiLb));

CHECK: Unnecessary parentheses around pHalData->ForcedDataRate
#100: FILE: ./hal/rtl8723b_dm.c:100:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_FORCED_RATE, &(pHalData->ForcedDataRate));

CHECK: Avoid CamelCase: <ForcedDataRate>
#100: FILE: ./hal/rtl8723b_dm.c:100:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_FORCED_RATE, &(pHalData->ForcedDataRate));

CHECK: Unnecessary parentheses around pmlmepriv->bScanInProcess
#102: FILE: ./hal/rtl8723b_dm.c:102:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SCAN, &(pmlmepriv->bScanInProcess));

CHECK: Avoid CamelCase: <bScanInProcess>
#102: FILE: ./hal/rtl8723b_dm.c:102:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_SCAN, &(pmlmepriv->bScanInProcess));

CHECK: Unnecessary parentheses around pwrctrlpriv->bpower_saving
#103: FILE: ./hal/rtl8723b_dm.c:103:
+	ODM_CmnInfoHook(pDM_Odm, ODM_CMNINFO_POWER_SAVING, &(pwrctrlpriv->bpower_saving));

CHECK: Please don't use multiple blank lines
#105: FILE: ./hal/rtl8723b_dm.c:105:
+
+

CHECK: Avoid CamelCase: <rtl8723b_InitHalDm>
#110: FILE: ./hal/rtl8723b_dm.c:110:
+void rtl8723b_InitHalDm(struct adapter *Adapter)

CHECK: Avoid CamelCase: <DM_Type>
#116: FILE: ./hal/rtl8723b_dm.c:116:
+	pdmpriv->DM_Type = DM_Type_ByDriver;

CHECK: Avoid CamelCase: <bFwPSAwake>
#131: FILE: ./hal/rtl8723b_dm.c:131:
+	bool bFwPSAwake = true;

CHECK: Using comparison to false is error prone
#137: FILE: ./hal/rtl8723b_dm.c:137:
+	if (hw_init_completed == false)

CHECK: Lines should not end with a '('
#143: FILE: ./hal/rtl8723b_dm.c:143:
+	if (

CHECK: Unnecessary parentheses around 'hw_init_completed == true'
#143: FILE: ./hal/rtl8723b_dm.c:143:
+	if (
+		(hw_init_completed == true) &&
+		((!fw_current_in_ps_mode) && bFwPSAwake)
+	) {

CHECK: Unnecessary parentheses around '!fw_current_in_ps_mode'
#143: FILE: ./hal/rtl8723b_dm.c:143:
+	if (
+		(hw_init_completed == true) &&
+		((!fw_current_in_ps_mode) && bFwPSAwake)
+	) {

CHECK: Using comparison to true is error prone
#144: FILE: ./hal/rtl8723b_dm.c:144:
+		(hw_init_completed == true) &&

CHECK: Using comparison to true is error prone
#155: FILE: ./hal/rtl8723b_dm.c:155:
+	if (hw_init_completed == true) {

CHECK: line length of 117 exceeds 100 columns
#169: FILE: ./hal/rtl8723b_dm.c:169:
+		/* ODM_CmnInfoUpdate(&pHalData->odmpriv , ODM_CMNINFO_RSSI_MIN, pdmpriv->MinUndecoratedPWDBForDM); */

CHECK: Please don't use multiple blank lines
#195: FILE: ./hal/rtl8723b_dm.c:195:
+
+

CHECK: Unnecessary parentheses around 'psta->rssi_stat.UndecoratedSmoothedPWDB > 0'
#198: FILE: ./hal/rtl8723b_dm.c:198:
+	if (psta && (psta->rssi_stat.UndecoratedSmoothedPWDB > 0)) {

CHECK: spaces preferred around that '<<' (ctx:VxV)
#199: FILE: ./hal/rtl8723b_dm.c:199:
+		PWDB_rssi = (psta->mac_id | (psta->rssi_stat.UndecoratedSmoothedPWDB<<16));
 		                                                                    ^

CHECK: Blank lines aren't necessary before a close brace '}'
#204: FILE: ./hal/rtl8723b_dm.c:204:
+
+}

CHECK: Using comparison to false is error prone
#217: FILE: ./hal/rtl8723b_dm.c:217:
+	if (Adapter->hw_init_completed == false)

CHECK: Please don't use multiple blank lines
#220: FILE: ./hal/rtl8723b_dm.c:220:
+
+

CHECK: Using comparison to false is error prone
#226: FILE: ./hal/rtl8723b_dm.c:226:
+	if (bLinked == false)

CHECK: Please don't use multiple blank lines
#232: FILE: ./hal/rtl8723b_dm.c:232:
+
+

CHECK: Lines should not end with a '('
#251: FILE: ./hal/rtl8723b_dm.c:251:
+	if (

CHECK: Please don't use multiple blank lines
#257: FILE: ./hal/rtl8723b_dm.c:257:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#262: FILE: ./hal/rtl8723b_dm.c:262:
+
+}

total: 0 errors, 2 warnings, 46 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_dm.c has style problems, please review.
-------------------
./hal/rtl8723b_dm.o
-------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_dm.o has style problems, please review.
-------------------------
./hal/rtl8723b_hal_init.c
-------------------------
CHECK: Avoid CamelCase: <_FWDownloadEnable>
#14: FILE: ./hal/rtl8723b_hal_init.c:14:
+static void _FWDownloadEnable(struct adapter *padapter, bool enable)

CHECK: spaces preferred around that '+' (ctx:VxV)
#20: FILE: ./hal/rtl8723b_hal_init.c:20:
+		tmp = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 		                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#21: FILE: ./hal/rtl8723b_hal_init.c:21:
+		rtw_write8(padapter, REG_SYS_FUNC_EN+1, tmp|0x04);
 		                                    ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#21: FILE: ./hal/rtl8723b_hal_init.c:21:
+		rtw_write8(padapter, REG_SYS_FUNC_EN+1, tmp|0x04);
 		                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#24: FILE: ./hal/rtl8723b_hal_init.c:24:
+		rtw_write8(padapter, REG_MCUFWDL, tmp|0x01);
 		                                     ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#30: FILE: ./hal/rtl8723b_hal_init.c:30:
+			rtw_write8(padapter, REG_MCUFWDL, tmp|0x01);
 			                                     ^

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#31: FILE: ./hal/rtl8723b_hal_init.c:31:
+			msleep(1);

CHECK: spaces preferred around that '+' (ctx:VxV)
#35: FILE: ./hal/rtl8723b_hal_init.c:35:
+		tmp = rtw_read8(padapter, REG_MCUFWDL+2);
 		                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#36: FILE: ./hal/rtl8723b_hal_init.c:36:
+		rtw_write8(padapter, REG_MCUFWDL+2, tmp&0xf7);
 		                                ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#36: FILE: ./hal/rtl8723b_hal_init.c:36:
+		rtw_write8(padapter, REG_MCUFWDL+2, tmp&0xf7);
 		                                       ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#40: FILE: ./hal/rtl8723b_hal_init.c:40:
+		rtw_write8(padapter, REG_MCUFWDL, tmp&0xfe);
 		                                     ^

CHECK: Avoid CamelCase: <_BlockWrite>
#44: FILE: ./hal/rtl8723b_hal_init.c:44:
+static int _BlockWrite(struct adapter *padapter, void *buffer, u32 buffSize)

CHECK: Avoid CamelCase: <buffSize>
#44: FILE: ./hal/rtl8723b_hal_init.c:44:
+static int _BlockWrite(struct adapter *padapter, void *buffer, u32 buffSize)

CHECK: Avoid CamelCase: <blockSize_p1>
#48: FILE: ./hal/rtl8723b_hal_init.c:48:
+	u32 blockSize_p1 = 4; /*  (Default) Phase #1 : PCI muse use 4-byte write to download FW */

CHECK: Avoid CamelCase: <blockSize_p2>
#49: FILE: ./hal/rtl8723b_hal_init.c:49:
+	u32 blockSize_p2 = 8; /*  Phase #2 : Use 8-byte, if Phase#1 use big size to write FW. */

CHECK: Avoid CamelCase: <blockSize_p3>
#50: FILE: ./hal/rtl8723b_hal_init.c:50:
+	u32 blockSize_p3 = 1; /*  Phase #3 : Use 1-byte, the remnant of FW image. */

CHECK: Avoid CamelCase: <blockCount_p1>
#51: FILE: ./hal/rtl8723b_hal_init.c:51:
+	u32 blockCount_p1 = 0, blockCount_p2 = 0, blockCount_p3 = 0;

CHECK: Avoid CamelCase: <blockCount_p2>
#51: FILE: ./hal/rtl8723b_hal_init.c:51:
+	u32 blockCount_p1 = 0, blockCount_p2 = 0, blockCount_p3 = 0;

CHECK: Avoid CamelCase: <blockCount_p3>
#51: FILE: ./hal/rtl8723b_hal_init.c:51:
+	u32 blockCount_p1 = 0, blockCount_p2 = 0, blockCount_p3 = 0;

CHECK: Avoid CamelCase: <remainSize_p1>
#52: FILE: ./hal/rtl8723b_hal_init.c:52:
+	u32 remainSize_p1 = 0, remainSize_p2 = 0;

CHECK: Avoid CamelCase: <remainSize_p2>
#52: FILE: ./hal/rtl8723b_hal_init.c:52:
+	u32 remainSize_p1 = 0, remainSize_p2 = 0;

CHECK: Avoid CamelCase: <bufferPtr>
#53: FILE: ./hal/rtl8723b_hal_init.c:53:
+	u8 *bufferPtr = buffer;

CHECK: line length of 131 exceeds 100 columns
#61: FILE: ./hal/rtl8723b_hal_init.c:61:
+		ret = rtw_write32(padapter, (FW_8723B_START_ADDRESS + i * blockSize_p1), *((u32 *)(bufferPtr + i * blockSize_p1)));

CHECK: spaces preferred around that '/' (ctx:VxV)
#73: FILE: ./hal/rtl8723b_hal_init.c:73:
+		blockCount_p2 = remainSize_p1/blockSize_p2;
 		                             ^

CHECK: spaces preferred around that '%' (ctx:VxV)
#74: FILE: ./hal/rtl8723b_hal_init.c:74:
+		remainSize_p2 = remainSize_p1%blockSize_p2;
 		                             ^

CHECK: line length of 117 exceeds 100 columns
#84: FILE: ./hal/rtl8723b_hal_init.c:84:
+			ret = rtw_write8(padapter, (FW_8723B_START_ADDRESS + offset + i), *(bufferPtr + offset + i));

CHECK: Lines should not end with a '('
#97: FILE: ./hal/rtl8723b_hal_init.c:97:
+static int _PageWrite(

CHECK: Avoid CamelCase: <_PageWrite>
#97: FILE: ./hal/rtl8723b_hal_init.c:97:
+static int _PageWrite(

CHECK: No space is necessary after a cast
#105: FILE: ./hal/rtl8723b_hal_init.c:105:
+	u8 u8Page = (u8) (page & 0x07);

CHECK: Avoid CamelCase: <u8Page>
#105: FILE: ./hal/rtl8723b_hal_init.c:105:
+	u8 u8Page = (u8) (page & 0x07);

CHECK: spaces preferred around that '+' (ctx:VxV)
#107: FILE: ./hal/rtl8723b_hal_init.c:107:
+	value8 = (rtw_read8(padapter, REG_MCUFWDL+2) & 0xF8) | u8Page;
 	                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#108: FILE: ./hal/rtl8723b_hal_init.c:108:
+	rtw_write8(padapter, REG_MCUFWDL+2, value8);
 	                                ^

CHECK: Avoid CamelCase: <_WriteFW>
#113: FILE: ./hal/rtl8723b_hal_init.c:113:
+static int _WriteFW(struct adapter *padapter, void *buffer, u32 size)

CHECK: line length of 112 exceeds 100 columns
#115: FILE: ./hal/rtl8723b_hal_init.c:115:
+	/*  Since we need dynamic decide method of dwonload fw, so we call this function to get chip version. */

CHECK: Avoid CamelCase: <pageNums>
#118: FILE: ./hal/rtl8723b_hal_init.c:118:
+	u32 pageNums, remainSize;

CHECK: Avoid CamelCase: <remainSize>
#118: FILE: ./hal/rtl8723b_hal_init.c:118:
+	u32 pageNums, remainSize;

CHECK: spaces preferred around that '+' (ctx:VxV)
#127: FILE: ./hal/rtl8723b_hal_init.c:127:
+		ret = _PageWrite(padapter, page, bufferPtr+offset, MAX_DLFW_PAGE_SIZE);
 		                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#139: FILE: ./hal/rtl8723b_hal_init.c:139:
+		ret = _PageWrite(padapter, page, bufferPtr+offset, remainSize);
 		                                          ^

CHECK: Avoid CamelCase: <_8051Reset8723>
#152: FILE: ./hal/rtl8723b_hal_init.c:152:
+void _8051Reset8723(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#157: FILE: ./hal/rtl8723b_hal_init.c:157:
+
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#161: FILE: ./hal/rtl8723b_hal_init.c:161:
+	io_rst = rtw_read8(padapter, REG_RSV_CTRL+1);
 	                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#163: FILE: ./hal/rtl8723b_hal_init.c:163:
+	rtw_write8(padapter, REG_RSV_CTRL+1, io_rst);
 	                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#165: FILE: ./hal/rtl8723b_hal_init.c:165:
+	cpu_rst = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 	                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#167: FILE: ./hal/rtl8723b_hal_init.c:167:
+	rtw_write8(padapter, REG_SYS_FUNC_EN+1, cpu_rst);
 	                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#171: FILE: ./hal/rtl8723b_hal_init.c:171:
+	io_rst = rtw_read8(padapter, REG_RSV_CTRL+1);
 	                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#173: FILE: ./hal/rtl8723b_hal_init.c:173:
+	rtw_write8(padapter, REG_RSV_CTRL+1, io_rst);
 	                                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#175: FILE: ./hal/rtl8723b_hal_init.c:175:
+	cpu_rst = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 	                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#177: FILE: ./hal/rtl8723b_hal_init.c:177:
+	rtw_write8(padapter, REG_SYS_FUNC_EN+1, cpu_rst);
 	                                    ^

CHECK: Lines should not end with a '('
#182: FILE: ./hal/rtl8723b_hal_init.c:182:
+static s32 polling_fwdl_chksum(

CHECK: line length of 102 exceeds 100 columns
#195: FILE: ./hal/rtl8723b_hal_init.c:195:
+		if (value32 & FWDL_ChkSum_rpt || adapter->bSurpriseRemoved || adapter->bDriverStopped)

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#197: FILE: ./hal/rtl8723b_hal_init.c:197:
+		yield();

CHECK: spaces preferred around that '-' (ctx:VxV)
#198: FILE: ./hal/rtl8723b_hal_init.c:198:
+	} while (jiffies_to_msecs(jiffies-start) < timeout_ms || cnt < min_cnt);
 	                                 ^

WARNING: braces {} are not necessary for single statement blocks
#200: FILE: ./hal/rtl8723b_hal_init.c:200:
+	if (!(value32 & FWDL_ChkSum_rpt)) {
+		goto exit;
+	}

CHECK: Avoid CamelCase: <_FWFreeToGo>
#218: FILE: ./hal/rtl8723b_hal_init.c:218:
+static s32 _FWFreeToGo(struct adapter *adapter, u32 min_cnt, u32 timeout_ms)

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#238: FILE: ./hal/rtl8723b_hal_init.c:238:
+		yield();

WARNING: braces {} are not necessary for single statement blocks
#241: FILE: ./hal/rtl8723b_hal_init.c:241:
+	if (!(value32 & WINTINI_RDY)) {
+		goto exit;
+	}

CHECK: Avoid CamelCase: <IS_FW_81xxC>
#257: FILE: ./hal/rtl8723b_hal_init.c:257:
+#define IS_FW_81xxC(padapter)	(((GET_HAL_DATA(padapter))->FirmwareSignature & 0xFFF0) == 0x88C0)

CHECK: Avoid CamelCase: <FirmwareSignature>
#257: FILE: ./hal/rtl8723b_hal_init.c:257:
+#define IS_FW_81xxC(padapter)	(((GET_HAL_DATA(padapter))->FirmwareSignature & 0xFFF0) == 0x88C0)

CHECK: Avoid CamelCase: <rtl8723b_FirmwareSelfReset>
#259: FILE: ./hal/rtl8723b_hal_init.c:259:
+void rtl8723b_FirmwareSelfReset(struct adapter *padapter)

CHECK: Avoid CamelCase: <u1bTmp>
#262: FILE: ./hal/rtl8723b_hal_init.c:262:
+	u8 u1bTmp;

CHECK: Avoid CamelCase: <Delay>
#263: FILE: ./hal/rtl8723b_hal_init.c:263:
+	u8 Delay = 100;

CHECK: Lines should not end with a '('
#265: FILE: ./hal/rtl8723b_hal_init.c:265:
+	if (

CHECK: Unnecessary parentheses around 'pHalData->FirmwareVersion < 0x21'
#265: FILE: ./hal/rtl8723b_hal_init.c:265:
+	if (
+		!(IS_FW_81xxC(padapter) && ((pHalData->FirmwareVersion < 0x21) || (pHalData->FirmwareVersion == 0x21 && pHalData->FirmwareSubVersion < 0x01)))
+	) { /*  after 88C Fw v33.1 */

CHECK: line length of 158 exceeds 100 columns
#266: FILE: ./hal/rtl8723b_hal_init.c:266:
+		!(IS_FW_81xxC(padapter) && ((pHalData->FirmwareVersion < 0x21) || (pHalData->FirmwareVersion == 0x21 && pHalData->FirmwareSubVersion < 0x01)))

CHECK: spaces preferred around that '+' (ctx:VxV)
#269: FILE: ./hal/rtl8723b_hal_init.c:269:
+		rtw_write8(padapter, REG_HMETFR+3, 0x20);
 		                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#271: FILE: ./hal/rtl8723b_hal_init.c:271:
+		u1bTmp = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 		                                            ^

CHECK: usleep_range is preferred over udelay; see function description of usleep_range() and udelay().
#276: FILE: ./hal/rtl8723b_hal_init.c:276:
+			udelay(50);

CHECK: spaces preferred around that '+' (ctx:VxV)
#277: FILE: ./hal/rtl8723b_hal_init.c:277:
+			u1bTmp = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 			                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#282: FILE: ./hal/rtl8723b_hal_init.c:282:
+			u1bTmp = rtw_read8(padapter, REG_SYS_FUNC_EN+1);
 			                                            ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#283: FILE: ./hal/rtl8723b_hal_init.c:283:
+			rtw_write8(padapter, REG_SYS_FUNC_EN+1, u1bTmp&(~BIT2));
 			                                    ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#283: FILE: ./hal/rtl8723b_hal_init.c:283:
+			rtw_write8(padapter, REG_SYS_FUNC_EN+1, u1bTmp&(~BIT2));
 			                                              ^

WARNING: please, no space before tabs
#289: FILE: ./hal/rtl8723b_hal_init.c:289:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#290: FILE: ./hal/rtl8723b_hal_init.c:290:
+/* ^I^IDownload 8192C firmware code. */$

CHECK: Avoid CamelCase: <rtl8723b_FirmwareDownload>
#293: FILE: ./hal/rtl8723b_hal_init.c:293:
+s32 rtl8723b_FirmwareDownload(struct adapter *padapter, bool  bUsedWoWLANFw)

CHECK: Avoid CamelCase: <bUsedWoWLANFw>
#293: FILE: ./hal/rtl8723b_hal_init.c:293:
+s32 rtl8723b_FirmwareDownload(struct adapter *padapter, bool  bUsedWoWLANFw)

CHECK: Avoid CamelCase: <rtStatus>
#295: FILE: ./hal/rtl8723b_hal_init.c:295:
+	s32 rtStatus = _SUCCESS;

CHECK: Avoid CamelCase: <pBTFirmware>
#300: FILE: ./hal/rtl8723b_hal_init.c:300:
+	struct rt_firmware *pBTFirmware;

CHECK: Avoid CamelCase: <pFwHdr>
#301: FILE: ./hal/rtl8723b_hal_init.c:301:
+	struct rt_firmware_hdr *pFwHdr = NULL;

CHECK: Avoid CamelCase: <pFirmwareBuf>
#302: FILE: ./hal/rtl8723b_hal_init.c:302:
+	u8 *pFirmwareBuf;

CHECK: Avoid CamelCase: <FirmwareLen>
#303: FILE: ./hal/rtl8723b_hal_init.c:303:
+	u32 FirmwareLen;

CHECK: Prefer kzalloc(sizeof(*pFirmware)...) over kzalloc(sizeof(struct rt_firmware)...)
#311: FILE: ./hal/rtl8723b_hal_init.c:311:
+	pFirmware = kzalloc(sizeof(struct rt_firmware), GFP_KERNEL);

CHECK: Prefer kzalloc(sizeof(*pBTFirmware)...) over kzalloc(sizeof(struct rt_firmware)...)
#314: FILE: ./hal/rtl8723b_hal_init.c:314:
+	pBTFirmware = kzalloc(sizeof(struct rt_firmware), GFP_KERNEL);

CHECK: line length of 110 exceeds 100 columns
#384: FILE: ./hal/rtl8723b_hal_init.c:384:
+	/*  Suggested by Filen. If 8051 is running in RAM code, driver should inform Fw to reset by itself, */

CHECK: Lines should not end with a '('
#393: FILE: ./hal/rtl8723b_hal_init.c:393:
+	while (

CHECK: spaces preferred around that '|' (ctx:VxV)
#399: FILE: ./hal/rtl8723b_hal_init.c:399:
+		rtw_write8(padapter, REG_MCUFWDL, rtw_read8(padapter, REG_MCUFWDL)|FWDL_ChkSum_rpt);
 		                                                                  ^

WARNING: Comparisons should place the constant on the right side of the test
#410: FILE: ./hal/rtl8723b_hal_init.c:410:
+	if (_SUCCESS != rtStatus)

WARNING: Comparisons should place the constant on the right side of the test
#414: FILE: ./hal/rtl8723b_hal_init.c:414:
+	if (_SUCCESS != rtStatus)

CHECK: Avoid CamelCase: <rtl8723b_InitializeFirmwareVars>
#427: FILE: ./hal/rtl8723b_hal_init.c:427:
+void rtl8723b_InitializeFirmwareVars(struct adapter *padapter)

WARNING: please, no space before tabs
#445: FILE: ./hal/rtl8723b_hal_init.c:445:
+/* ^I^I^I^IEfuse related code */$

CHECK: Lines should not end with a '('
#447: FILE: ./hal/rtl8723b_hal_init.c:447:
+static u8 hal_EfuseSwitchToBank(

CHECK: Avoid CamelCase: <hal_EfuseSwitchToBank>
#447: FILE: ./hal/rtl8723b_hal_init.c:447:
+static u8 hal_EfuseSwitchToBank(

CHECK: Avoid CamelCase: <bRet>
#451: FILE: ./hal/rtl8723b_hal_init.c:451:
+	u8 bRet = false;

CHECK: Avoid CamelCase: <pEfuseHal>
#455: FILE: ./hal/rtl8723b_hal_init.c:455:
+	struct efuse_hal *pEfuseHal = &pHalData->EfuseHal;

CHECK: Avoid CamelCase: <EfuseHal>
#455: FILE: ./hal/rtl8723b_hal_init.c:455:
+	struct efuse_hal *pEfuseHal = &pHalData->EfuseHal;

CHECK: Please don't use multiple blank lines
#458: FILE: ./hal/rtl8723b_hal_init.c:458:
+
+

CHECK: Lines should not end with a '('
#493: FILE: ./hal/rtl8723b_hal_init.c:493:
+void Hal_GetEfuseDefinition(

CHECK: Avoid CamelCase: <pMax_section>
#504: FILE: ./hal/rtl8723b_hal_init.c:504:
+			u8 *pMax_section = pOut;

CHECK: Avoid CamelCase: <pu2Tmp>
#515: FILE: ./hal/rtl8723b_hal_init.c:515:
+			u16 *pu2Tmp = pOut;

CHECK: spaces preferred around that '-' (ctx:VxV)
#529: FILE: ./hal/rtl8723b_hal_init.c:529:
+				*pu2Tmp = (EFUSE_REAL_CONTENT_LEN_8723B-EFUSE_OOB_PROTECT_BYTES);
 				                                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#531: FILE: ./hal/rtl8723b_hal_init.c:531:
+				*pu2Tmp = (EFUSE_BT_REAL_BANK_CONTENT_LEN-EFUSE_PROTECT_BYTES_BANK);
 				                                         ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#540: FILE: ./hal/rtl8723b_hal_init.c:540:
+				*pu2Tmp = (EFUSE_REAL_CONTENT_LEN_8723B-EFUSE_OOB_PROTECT_BYTES);
 				                                       ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#542: FILE: ./hal/rtl8723b_hal_init.c:542:
+				*pu2Tmp = (EFUSE_BT_REAL_CONTENT_LEN-(EFUSE_PROTECT_BYTES_BANK*3));
 				                                    ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#542: FILE: ./hal/rtl8723b_hal_init.c:542:
+				*pu2Tmp = (EFUSE_BT_REAL_CONTENT_LEN-(EFUSE_PROTECT_BYTES_BANK*3));
 				                                                              ^

CHECK: Avoid CamelCase: <pu1Tmp>
#559: FILE: ./hal/rtl8723b_hal_init.c:559:
+			u8 *pu1Tmp = pOut;

WARNING: please, no space before tabs
#591: FILE: ./hal/rtl8723b_hal_init.c:591:
+/* ^IThe following is for compile ok */$

WARNING: please, no space before tabs
#592: FILE: ./hal/rtl8723b_hal_init.c:592:
+/* ^IThat should be merged with the original in the future */$

CHECK: Lines should not end with a '('
#597: FILE: ./hal/rtl8723b_hal_init.c:597:
+void Hal_EfusePowerSwitch(

CHECK: Avoid CamelCase: <tmpV16>
#602: FILE: ./hal/rtl8723b_hal_init.c:602:
+	u16 tmpV16;

CHECK: Please don't use multiple blank lines
#604: FILE: ./hal/rtl8723b_hal_init.c:604:
+
+

CHECK: line length of 113 exceeds 100 columns
#606: FILE: ./hal/rtl8723b_hal_init.c:606:
+		/*  To avoid cannot access efuse registers after disable/enable several times during DTM test. */

CHECK: spaces preferred around that '|' (ctx:VxV)
#608: FILE: ./hal/rtl8723b_hal_init.c:608:
+		tempval = rtw_read8(padapter, SDIO_LOCAL_BASE|SDIO_REG_HSUS_CTRL);
 		                                             ^

CHECK: Please don't use multiple blank lines
#612: FILE: ./hal/rtl8723b_hal_init.c:612:
+
+

CHECK: spaces preferred around that '|' (ctx:VxV)
#614: FILE: ./hal/rtl8723b_hal_init.c:614:
+			rtw_write8(padapter, SDIO_LOCAL_BASE|SDIO_REG_HSUS_CTRL, tempval);
 			                                    ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#618: FILE: ./hal/rtl8723b_hal_init.c:618:
+				tempval = rtw_read8(padapter, SDIO_LOCAL_BASE|SDIO_REG_HSUS_CTRL);
 				                                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#649: FILE: ./hal/rtl8723b_hal_init.c:649:
+			tempval = rtw_read8(padapter, EFUSE_TEST+3);
 			                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#652: FILE: ./hal/rtl8723b_hal_init.c:652:
+			rtw_write8(padapter, EFUSE_TEST+3, (tempval | 0x80));
 			                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#661: FILE: ./hal/rtl8723b_hal_init.c:661:
+			tempval = rtw_read8(padapter, EFUSE_TEST+3);
 			                                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#662: FILE: ./hal/rtl8723b_hal_init.c:662:
+			rtw_write8(padapter, EFUSE_TEST+3, (tempval & 0x7F));
 			                               ^

CHECK: Blank lines aren't necessary before a close brace '}'
#665: FILE: ./hal/rtl8723b_hal_init.c:665:
+
+	}

CHECK: Lines should not end with a '('
#668: FILE: ./hal/rtl8723b_hal_init.c:668:
+static void hal_ReadEFuse_WiFi(

CHECK: Avoid CamelCase: <hal_ReadEFuse_WiFi>
#668: FILE: ./hal/rtl8723b_hal_init.c:668:
+static void hal_ReadEFuse_WiFi(

CHECK: Avoid CamelCase: <efuseTbl>
#680: FILE: ./hal/rtl8723b_hal_init.c:680:
+	u8 *efuseTbl = NULL;

CHECK: Avoid CamelCase: <eFuse_Addr>
#681: FILE: ./hal/rtl8723b_hal_init.c:681:
+	u16 eFuse_Addr = 0;

CHECK: Avoid CamelCase: <efuseHeader>
#683: FILE: ./hal/rtl8723b_hal_init.c:683:
+	u8 efuseHeader, efuseExtHdr, efuseData;

CHECK: Avoid CamelCase: <efuseExtHdr>
#683: FILE: ./hal/rtl8723b_hal_init.c:683:
+	u8 efuseHeader, efuseExtHdr, efuseData;

CHECK: Avoid CamelCase: <efuseData>
#683: FILE: ./hal/rtl8723b_hal_init.c:683:
+	u8 efuseHeader, efuseExtHdr, efuseData;

CHECK: spaces preferred around that '<<' (ctx:VxV)
#730: FILE: ./hal/rtl8723b_hal_init.c:730:
+				if (!(wden & (0x01<<i))) {
 				                  ^

CHECK: line length of 107 exceeds 100 columns
#731: FILE: ./hal/rtl8723b_hal_init.c:731:
+					efuse_OneByteRead(padapter, eFuse_Addr++, &efuseData, bPseudoTest);

CHECK: line length of 107 exceeds 100 columns
#734: FILE: ./hal/rtl8723b_hal_init.c:734:
+					efuse_OneByteRead(padapter, eFuse_Addr++, &efuseData, bPseudoTest);

CHECK: spaces preferred around that '+' (ctx:VxV)
#735: FILE: ./hal/rtl8723b_hal_init.c:735:
+					efuseTbl[addr+1] = efuseData;
 					             ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#740: FILE: ./hal/rtl8723b_hal_init.c:740:
+			eFuse_Addr += Efuse_CalculateWordCnts(wden)*2;
 			                                           ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#746: FILE: ./hal/rtl8723b_hal_init.c:746:
+		pbuf[i] = efuseTbl[_offset+i];
 		                          ^

CHECK: line length of 110 exceeds 100 columns
#749: FILE: ./hal/rtl8723b_hal_init.c:749:
+	EFUSE_GetEfuseDefinition(padapter, EFUSE_WIFI, TYPE_AVAILABLE_EFUSE_BYTES_TOTAL, &total, bPseudoTest);

CHECK: spaces preferred around that '*' (ctx:VxV)
#751: FILE: ./hal/rtl8723b_hal_init.c:751:
+	efuse_usage = (u8)((used*100)/total);
 	                        ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#751: FILE: ./hal/rtl8723b_hal_init.c:751:
+	efuse_usage = (u8)((used*100)/total);
 	                             ^

CHECK: Lines should not end with a '('
#766: FILE: ./hal/rtl8723b_hal_init.c:766:
+static void hal_ReadEFuse_BT(

CHECK: Avoid CamelCase: <hal_ReadEFuse_BT>
#766: FILE: ./hal/rtl8723b_hal_init.c:766:
+static void hal_ReadEFuse_BT(

CHECK: Please don't use multiple blank lines
#786: FILE: ./hal/rtl8723b_hal_init.c:786:
+
+

CHECK: line length of 107 exceeds 100 columns
#800: FILE: ./hal/rtl8723b_hal_init.c:800:
+	EFUSE_GetEfuseDefinition(padapter, EFUSE_BT, TYPE_AVAILABLE_EFUSE_BYTES_BANK, &total, bPseudoTest);

CHECK: line length of 101 exceeds 100 columns
#817: FILE: ./hal/rtl8723b_hal_init.c:817:
+				efuse_OneByteRead(padapter, eFuse_Addr++, &efuseExtHdr, bPseudoTest);

CHECK: Please don't use multiple blank lines
#821: FILE: ./hal/rtl8723b_hal_init.c:821:
+
+

CHECK: spaces preferred around that '<<' (ctx:VxV)
#834: FILE: ./hal/rtl8723b_hal_init.c:834:
+					if (!(wden & (0x01<<i))) {
 					                  ^

CHECK: line length of 115 exceeds 100 columns
#835: FILE: ./hal/rtl8723b_hal_init.c:835:
+						efuse_OneByteRead(padapter, eFuse_Addr++, &efuseData, bPseudoTest);

CHECK: line length of 115 exceeds 100 columns
#838: FILE: ./hal/rtl8723b_hal_init.c:838:
+						efuse_OneByteRead(padapter, eFuse_Addr++, &efuseData, bPseudoTest);

CHECK: spaces preferred around that '+' (ctx:VxV)
#839: FILE: ./hal/rtl8723b_hal_init.c:839:
+						efuseTbl[addr+1] = efuseData;
 						             ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#844: FILE: ./hal/rtl8723b_hal_init.c:844:
+				eFuse_Addr += Efuse_CalculateWordCnts(wden)*2;
 				                                           ^

CHECK: Blank lines aren't necessary before a close brace '}'
#851: FILE: ./hal/rtl8723b_hal_init.c:851:
+
+	}

CHECK: spaces preferred around that '+' (ctx:VxV)
#858: FILE: ./hal/rtl8723b_hal_init.c:858:
+		pbuf[i] = efuseTbl[_offset+i];
 		                          ^

CHECK: line length of 108 exceeds 100 columns
#863: FILE: ./hal/rtl8723b_hal_init.c:863:
+	EFUSE_GetEfuseDefinition(padapter, EFUSE_BT, TYPE_AVAILABLE_EFUSE_BYTES_TOTAL, &total, bPseudoTest);

CHECK: spaces preferred around that '*' (ctx:VxV)
#864: FILE: ./hal/rtl8723b_hal_init.c:864:
+	used = (EFUSE_BT_REAL_BANK_CONTENT_LEN*(bank-1)) + eFuse_Addr - 1;
 	                                      ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#864: FILE: ./hal/rtl8723b_hal_init.c:864:
+	used = (EFUSE_BT_REAL_BANK_CONTENT_LEN*(bank-1)) + eFuse_Addr - 1;
 	                                            ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#865: FILE: ./hal/rtl8723b_hal_init.c:865:
+	efuse_usage = (u8)((used*100)/total);
 	                        ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#865: FILE: ./hal/rtl8723b_hal_init.c:865:
+	efuse_usage = (u8)((used*100)/total);
 	                             ^

CHECK: Lines should not end with a '('
#881: FILE: ./hal/rtl8723b_hal_init.c:881:
+void Hal_ReadEFuse(

CHECK: Lines should not end with a '('
#896: FILE: ./hal/rtl8723b_hal_init.c:896:
+static u16 hal_EfuseGetCurrentSize_WiFi(

CHECK: Avoid CamelCase: <hal_EfuseGetCurrentSize_WiFi>
#896: FILE: ./hal/rtl8723b_hal_init.c:896:
+static u16 hal_EfuseGetCurrentSize_WiFi(

CHECK: Please don't use multiple blank lines
#910: FILE: ./hal/rtl8723b_hal_init.c:910:
+
+

CHECK: Unbalanced braces around else statement
#917: FILE: ./hal/rtl8723b_hal_init.c:917:
+	} else

CHECK: Unnecessary parentheses around 'start_addr != 0'
#933: FILE: ./hal/rtl8723b_hal_init.c:933:
+		if ((start_addr != 0) && (efuse_addr == start_addr)) {

CHECK: Unnecessary parentheses around 'efuse_addr == start_addr'
#933: FILE: ./hal/rtl8723b_hal_init.c:933:
+		if ((start_addr != 0) && (efuse_addr == start_addr)) {

CHECK: spaces preferred around that '*' (ctx:VxV)
#964: FILE: ./hal/rtl8723b_hal_init.c:964:
+		efuse_addr += (word_cnts*2)+1;
 		                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#964: FILE: ./hal/rtl8723b_hal_init.c:964:
+		efuse_addr += (word_cnts*2)+1;
 		                           ^

CHECK: Unbalanced braces around else statement
#973: FILE: ./hal/rtl8723b_hal_init.c:973:
+	} else

CHECK: line length of 115 exceeds 100 columns
#980: FILE: ./hal/rtl8723b_hal_init.c:980:
+	EFUSE_GetEfuseDefinition(padapter, EFUSE_WIFI, TYPE_AVAILABLE_EFUSE_BYTES_TOTAL, &efuse_addr, bPseudoTest);

CHECK: Avoid CamelCase: <hal_EfuseGetCurrentSize_BT>
#987: FILE: ./hal/rtl8723b_hal_init.c:987:
+static u16 hal_EfuseGetCurrentSize_BT(struct adapter *padapter, u8 bPseudoTest)

CHECK: Avoid CamelCase: <startBank>
#995: FILE: ./hal/rtl8723b_hal_init.c:995:
+	u8 bank, startBank;

CHECK: Avoid CamelCase: <retU2>
#998: FILE: ./hal/rtl8723b_hal_init.c:998:
+	u16 retU2 = 0;

CHECK: Unbalanced braces around else statement
#1006: FILE: ./hal/rtl8723b_hal_init.c:1006:
+	} else

CHECK: spaces preferred around that '%' (ctx:VxV)
#1009: FILE: ./hal/rtl8723b_hal_init.c:1009:
+	efuse_addr = (u16)((btusedbytes%EFUSE_BT_REAL_BANK_CONTENT_LEN));
 	                               ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1010: FILE: ./hal/rtl8723b_hal_init.c:1010:
+	startBank = (u8)(1+(btusedbytes/EFUSE_BT_REAL_BANK_CONTENT_LEN));
 	                  ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#1010: FILE: ./hal/rtl8723b_hal_init.c:1010:
+	startBank = (u8)(1+(btusedbytes/EFUSE_BT_REAL_BANK_CONTENT_LEN));
 	                               ^

CHECK: line length of 107 exceeds 100 columns
#1012: FILE: ./hal/rtl8723b_hal_init.c:1012:
+	EFUSE_GetEfuseDefinition(padapter, EFUSE_BT, TYPE_AVAILABLE_EFUSE_BYTES_BANK, &retU2, bPseudoTest);

CHECK: spaces preferred around that '*' (ctx:VxV)
#1048: FILE: ./hal/rtl8723b_hal_init.c:1048:
+			efuse_addr += (word_cnts*2)+1;
 			                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1048: FILE: ./hal/rtl8723b_hal_init.c:1048:
+			efuse_addr += (word_cnts*2)+1;
 			                           ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#1056: FILE: ./hal/rtl8723b_hal_init.c:1056:
+	retU2 = ((bank-1)*EFUSE_BT_REAL_BANK_CONTENT_LEN)+efuse_addr;
 	              ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#1056: FILE: ./hal/rtl8723b_hal_init.c:1056:
+	retU2 = ((bank-1)*EFUSE_BT_REAL_BANK_CONTENT_LEN)+efuse_addr;
 	                 ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1056: FILE: ./hal/rtl8723b_hal_init.c:1056:
+	retU2 = ((bank-1)*EFUSE_BT_REAL_BANK_CONTENT_LEN)+efuse_addr;
 	                                                 ^

WARNING: braces {} are not necessary for any arm of this statement
#1057: FILE: ./hal/rtl8723b_hal_init.c:1057:
+	if (bPseudoTest) {
[...]
+	} else {
[...]

CHECK: Lines should not end with a '('
#1066: FILE: ./hal/rtl8723b_hal_init.c:1066:
+u16 Hal_EfuseGetCurrentSize(

CHECK: Avoid CamelCase: <Hal_EfuseGetCurrentSize>
#1066: FILE: ./hal/rtl8723b_hal_init.c:1066:
+u16 Hal_EfuseGetCurrentSize(

CHECK: Lines should not end with a '('
#1080: FILE: ./hal/rtl8723b_hal_init.c:1080:
+static u8 Hal_EfuseWordEnableDataWrite(

CHECK: Avoid CamelCase: <Hal_EfuseWordEnableDataWrite>
#1080: FILE: ./hal/rtl8723b_hal_init.c:1080:
+static u8 Hal_EfuseWordEnableDataWrite(

CHECK: spaces preferred around that '+' (ctx:VxV)
#1101: FILE: ./hal/rtl8723b_hal_init.c:1101:
+		efuse_OneByteRead(padapter, tmpaddr+1, &tmpdata[1], bPseudoTest);
 		                                   ^

CHECK: Unnecessary parentheses around 'data[0] != tmpdata[0]'
#1102: FILE: ./hal/rtl8723b_hal_init.c:1102:
+		if ((data[0] != tmpdata[0]) || (data[1] != tmpdata[1])) {

CHECK: Unnecessary parentheses around 'data[1] != tmpdata[1]'
#1102: FILE: ./hal/rtl8723b_hal_init.c:1102:
+		if ((data[0] != tmpdata[0]) || (data[1] != tmpdata[1])) {

WARNING: braces {} are not necessary for single statement blocks
#1102: FILE: ./hal/rtl8723b_hal_init.c:1102:
+		if ((data[0] != tmpdata[0]) || (data[1] != tmpdata[1])) {
+			badworden &= (~BIT(0));
+		}

CHECK: spaces preferred around that '+' (ctx:VxV)
#1112: FILE: ./hal/rtl8723b_hal_init.c:1112:
+		efuse_OneByteRead(padapter, tmpaddr+1, &tmpdata[3], bPseudoTest);
 		                                   ^

CHECK: Unnecessary parentheses around 'data[2] != tmpdata[2]'
#1113: FILE: ./hal/rtl8723b_hal_init.c:1113:
+		if ((data[2] != tmpdata[2]) || (data[3] != tmpdata[3])) {

CHECK: Unnecessary parentheses around 'data[3] != tmpdata[3]'
#1113: FILE: ./hal/rtl8723b_hal_init.c:1113:
+		if ((data[2] != tmpdata[2]) || (data[3] != tmpdata[3])) {

WARNING: braces {} are not necessary for single statement blocks
#1113: FILE: ./hal/rtl8723b_hal_init.c:1113:
+		if ((data[2] != tmpdata[2]) || (data[3] != tmpdata[3])) {
+			badworden &= (~BIT(1));
+		}

CHECK: spaces preferred around that '+' (ctx:VxV)
#1124: FILE: ./hal/rtl8723b_hal_init.c:1124:
+		efuse_OneByteRead(padapter, tmpaddr+1, &tmpdata[5], bPseudoTest);
 		                                   ^

CHECK: Unnecessary parentheses around 'data[4] != tmpdata[4]'
#1125: FILE: ./hal/rtl8723b_hal_init.c:1125:
+		if ((data[4] != tmpdata[4]) || (data[5] != tmpdata[5])) {

CHECK: Unnecessary parentheses around 'data[5] != tmpdata[5]'
#1125: FILE: ./hal/rtl8723b_hal_init.c:1125:
+		if ((data[4] != tmpdata[4]) || (data[5] != tmpdata[5])) {

WARNING: braces {} are not necessary for single statement blocks
#1125: FILE: ./hal/rtl8723b_hal_init.c:1125:
+		if ((data[4] != tmpdata[4]) || (data[5] != tmpdata[5])) {
+			badworden &= (~BIT(2));
+		}

CHECK: spaces preferred around that '+' (ctx:VxV)
#1136: FILE: ./hal/rtl8723b_hal_init.c:1136:
+		efuse_OneByteRead(padapter, tmpaddr+1, &tmpdata[7], bPseudoTest);
 		                                   ^

CHECK: Unnecessary parentheses around 'data[6] != tmpdata[6]'
#1137: FILE: ./hal/rtl8723b_hal_init.c:1137:
+		if ((data[6] != tmpdata[6]) || (data[7] != tmpdata[7])) {

CHECK: Unnecessary parentheses around 'data[7] != tmpdata[7]'
#1137: FILE: ./hal/rtl8723b_hal_init.c:1137:
+		if ((data[6] != tmpdata[6]) || (data[7] != tmpdata[7])) {

WARNING: braces {} are not necessary for single statement blocks
#1137: FILE: ./hal/rtl8723b_hal_init.c:1137:
+		if ((data[6] != tmpdata[6]) || (data[7] != tmpdata[7])) {
+			badworden &= (~BIT(3));
+		}

CHECK: Avoid CamelCase: <ReadChipVersion8723B>
#1145: FILE: ./hal/rtl8723b_hal_init.c:1145:
+static struct hal_version ReadChipVersion8723B(struct adapter *padapter)

CHECK: Avoid CamelCase: <ICType>
#1155: FILE: ./hal/rtl8723b_hal_init.c:1155:
+	ChipVersion.ICType = CHIP_8723B;

CHECK: Avoid CamelCase: <ChipType>
#1156: FILE: ./hal/rtl8723b_hal_init.c:1156:
+	ChipVersion.ChipType = ((value32 & RTL_ID) ? TEST_CHIP : NORMAL_CHIP);

CHECK: Avoid CamelCase: <VendorType>
#1157: FILE: ./hal/rtl8723b_hal_init.c:1157:
+	ChipVersion.VendorType = ((value32 & VENDOR_ID) ? CHIP_VENDOR_UMC : CHIP_VENDOR_TSMC);

CHECK: line length of 107 exceeds 100 columns
#1158: FILE: ./hal/rtl8723b_hal_init.c:1158:
+	ChipVersion.CUTVersion = (value32 & CHIP_VER_RTL_MASK)>>CHIP_VER_RTL_SHIFT; /*  IC version (CUT) */

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1158: FILE: ./hal/rtl8723b_hal_init.c:1158:
+	ChipVersion.CUTVersion = (value32 & CHIP_VER_RTL_MASK)>>CHIP_VER_RTL_SHIFT; /*  IC version (CUT) */
 	                                                      ^

CHECK: Avoid CamelCase: <RegulatorMode>
#1161: FILE: ./hal/rtl8723b_hal_init.c:1161:
+	pHalData->RegulatorMode = ((value32 & SPS_SEL) ? RT_LDO_REGULATOR : RT_SWITCHING_REGULATOR);

CHECK: Avoid CamelCase: <MultiFunc>
#1167: FILE: ./hal/rtl8723b_hal_init.c:1167:
+	pHalData->MultiFunc = RT_MULTI_FUNC_NONE;

CHECK: line length of 103 exceeds 100 columns
#1172: FILE: ./hal/rtl8723b_hal_init.c:1172:
+	pHalData->PolarityCtl = ((value32 & WL_HWPDN_SL) ? RT_POLARITY_HIGH_ACT : RT_POLARITY_LOW_ACT);

CHECK: Avoid CamelCase: <PolarityCtl>
#1172: FILE: ./hal/rtl8723b_hal_init.c:1172:
+	pHalData->PolarityCtl = ((value32 & WL_HWPDN_SL) ? RT_POLARITY_HIGH_ACT : RT_POLARITY_LOW_ACT);

CHECK: Avoid CamelCase: <VersionID>
#1176: FILE: ./hal/rtl8723b_hal_init.c:1176:
+	pHalData->VersionID = ChipVersion;

CHECK: Avoid CamelCase: <rtl8723b_InitBeaconParameters>
#1186: FILE: ./hal/rtl8723b_hal_init.c:1186:
+void rtl8723b_InitBeaconParameters(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#1192: FILE: ./hal/rtl8723b_hal_init.c:1192:
+
+

CHECK: Avoid CamelCase: <RegBcnCtrlVal>
#1212: FILE: ./hal/rtl8723b_hal_init.c:1212:
+	pHalData->RegBcnCtrlVal = rtw_read8(padapter, REG_BCN_CTRL);

CHECK: Avoid CamelCase: <RegTxPause>
#1213: FILE: ./hal/rtl8723b_hal_init.c:1213:
+	pHalData->RegTxPause = rtw_read8(padapter, REG_TXPAUSE);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1214: FILE: ./hal/rtl8723b_hal_init.c:1214:
+	pHalData->RegFwHwTxQCtrl = rtw_read8(padapter, REG_FWHW_TXQ_CTRL+2);
 	                                                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1215: FILE: ./hal/rtl8723b_hal_init.c:1215:
+	pHalData->RegReg542 = rtw_read8(padapter, REG_TBTT_PROHIBIT+2);
 	                                                           ^

CHECK: Avoid CamelCase: <RegReg542>
#1215: FILE: ./hal/rtl8723b_hal_init.c:1215:
+	pHalData->RegReg542 = rtw_read8(padapter, REG_TBTT_PROHIBIT+2);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1216: FILE: ./hal/rtl8723b_hal_init.c:1216:
+	pHalData->RegCR_1 = rtw_read8(padapter, REG_CR+1);
 	                                              ^

CHECK: Avoid CamelCase: <RegCR_1>
#1216: FILE: ./hal/rtl8723b_hal_init.c:1216:
+	pHalData->RegCR_1 = rtw_read8(padapter, REG_CR+1);

CHECK: Avoid CamelCase: <_InitBurstPktLen_8723BS>
#1219: FILE: ./hal/rtl8723b_hal_init.c:1219:
+void _InitBurstPktLen_8723BS(struct adapter *Adapter)

CHECK: spaces preferred around that '|' (ctx:VxV)
#1223: FILE: ./hal/rtl8723b_hal_init.c:1223:
+	rtw_write8(Adapter, 0x4c7, rtw_read8(Adapter, 0x4c7)|BIT(7)); /* enable single pkt ampdu */
 	                                                    ^

CHECK: line length of 103 exceeds 100 columns
#1224: FILE: ./hal/rtl8723b_hal_init.c:1224:
+	rtw_write8(Adapter, REG_RX_PKT_LIMIT_8723B, 0x18);		/* for VHT packet length 11K */

CHECK: line length of 102 exceeds 100 columns
#1227: FILE: ./hal/rtl8723b_hal_init.c:1227:
+	rtw_write8(Adapter, REG_FWHW_TXQ_CTRL_8723B, rtw_read8(Adapter, REG_FWHW_TXQ_CTRL)&(~BIT(7)));

CHECK: spaces preferred around that '&' (ctx:VxV)
#1227: FILE: ./hal/rtl8723b_hal_init.c:1227:
+	rtw_write8(Adapter, REG_FWHW_TXQ_CTRL_8723B, rtw_read8(Adapter, REG_FWHW_TXQ_CTRL)&(~BIT(7)));
 	                                                                                  ^

CHECK: Avoid CamelCase: <AMPDUBurstMode>
#1228: FILE: ./hal/rtl8723b_hal_init.c:1228:
+	if (pHalData->AMPDUBurstMode)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: ./hal/rtl8723b_hal_init.c:1235:
+		rtw_write32(Adapter, REG_ARFR0_8723B+4, 0xfffff000);
 		                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1237: FILE: ./hal/rtl8723b_hal_init.c:1237:
+		rtw_write32(Adapter, REG_ARFR0_8723B+4, 0x3e0ff000);
 		                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1241: FILE: ./hal/rtl8723b_hal_init.c:1241:
+	rtw_write32(Adapter, REG_ARFR1_8723B+4, 0x003ff000);
 	                                    ^

CHECK: Avoid CamelCase: <ResumeTxBeacon>
#1244: FILE: ./hal/rtl8723b_hal_init.c:1244:
+static void ResumeTxBeacon(struct adapter *padapter)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1249: FILE: ./hal/rtl8723b_hal_init.c:1249:
+	rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl);
 	                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1250: FILE: ./hal/rtl8723b_hal_init.c:1250:
+	rtw_write8(padapter, REG_TBTT_PROHIBIT+1, 0xff);
 	                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1252: FILE: ./hal/rtl8723b_hal_init.c:1252:
+	rtw_write8(padapter, REG_TBTT_PROHIBIT+2, pHalData->RegReg542);
 	                                      ^

CHECK: Avoid CamelCase: <StopTxBeacon>
#1255: FILE: ./hal/rtl8723b_hal_init.c:1255:
+static void StopTxBeacon(struct adapter *padapter)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1260: FILE: ./hal/rtl8723b_hal_init.c:1260:
+	rtw_write8(padapter, REG_FWHW_TXQ_CTRL+2, pHalData->RegFwHwTxQCtrl);
 	                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: ./hal/rtl8723b_hal_init.c:1261:
+	rtw_write8(padapter, REG_TBTT_PROHIBIT+1, 0x64);
 	                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1263: FILE: ./hal/rtl8723b_hal_init.c:1263:
+	rtw_write8(padapter, REG_TBTT_PROHIBIT+2, pHalData->RegReg542);
 	                                      ^

CHECK: Avoid CamelCase: <_BeaconFunctionEnable>
#1268: FILE: ./hal/rtl8723b_hal_init.c:1268:
+static void _BeaconFunctionEnable(struct adapter *padapter, u8 Enable, u8 Linked)

CHECK: Avoid CamelCase: <Enable>
#1268: FILE: ./hal/rtl8723b_hal_init.c:1268:
+static void _BeaconFunctionEnable(struct adapter *padapter, u8 Enable, u8 Linked)

CHECK: Avoid CamelCase: <Linked>
#1268: FILE: ./hal/rtl8723b_hal_init.c:1268:
+static void _BeaconFunctionEnable(struct adapter *padapter, u8 Enable, u8 Linked)

CHECK: spaces preferred around that '+' (ctx:VxV)
#1271: FILE: ./hal/rtl8723b_hal_init.c:1271:
+	rtw_write8(padapter, REG_RD_CTRL+1, 0x6F);
 	                                ^

CHECK: Please don't use multiple blank lines
#1294: FILE: ./hal/rtl8723b_hal_init.c:1294:
+
+

CHECK: line length of 113 exceeds 100 columns
#1322: FILE: ./hal/rtl8723b_hal_init.c:1322:
+	if (check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE) == true) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#1322: FILE: ./hal/rtl8723b_hal_init.c:1322:
+	if (check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE) == true) {
 	                                                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#1322: FILE: ./hal/rtl8723b_hal_init.c:1322:
+	if (check_fwstate(&padapter->mlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE|WIFI_AP_STATE) == true) {
 	                                                                               ^

CHECK: Lines should not end with a '('
#1335: FILE: ./hal/rtl8723b_hal_init.c:1335:
+static void rtl8723b_SetHalODMVar(

CHECK: Avoid CamelCase: <rtl8723b_SetHalODMVar>
#1335: FILE: ./hal/rtl8723b_hal_init.c:1335:
+static void rtl8723b_SetHalODMVar(

CHECK: spaces preferred around that '+' (ctx:VxV)
#1348: FILE: ./hal/rtl8723b_hal_init.c:1348:
+		rtw_write8(adapter, rOFDM0_RxDSP+1, rtw_read8(adapter, rOFDM0_RxDSP+1) | BIT1);
 		                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1348: FILE: ./hal/rtl8723b_hal_init.c:1348:
+		rtw_write8(adapter, rOFDM0_RxDSP+1, rtw_read8(adapter, rOFDM0_RxDSP+1) | BIT1);
 		                                                                   ^

CHECK: Avoid CamelCase: <rOFDM0_RxDSP>
#1348: FILE: ./hal/rtl8723b_hal_init.c:1348:
+		rtw_write8(adapter, rOFDM0_RxDSP+1, rtw_read8(adapter, rOFDM0_RxDSP+1) | BIT1);

CHECK: spaces preferred around that '+' (ctx:VxV)
#1350: FILE: ./hal/rtl8723b_hal_init.c:1350:
+		rtw_write8(adapter, rOFDM0_RxDSP+1, rtw_read8(adapter, rOFDM0_RxDSP+1) & ~BIT1);
 		                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#1350: FILE: ./hal/rtl8723b_hal_init.c:1350:
+		rtw_write8(adapter, rOFDM0_RxDSP+1, rtw_read8(adapter, rOFDM0_RxDSP+1) & ~BIT1);
 		                                                                   ^

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#1361: FILE: ./hal/rtl8723b_hal_init.c:1361:
+	struct mlme_ext_info *pmlmeinfo = &(pmlmeext->mlmext_info);

WARNING: braces {} are not necessary for single statement blocks
#1382: FILE: ./hal/rtl8723b_hal_init.c:1382:
+	if (pHalData->fw_ractrl) {
+		rtl8723b_set_FwMacIdConfig_cmd(padapter, mac_id, psta->raid, psta->bw_mode, shortGIrate, mask);
+	}

CHECK: line length of 111 exceeds 100 columns
#1383: FILE: ./hal/rtl8723b_hal_init.c:1383:
+		rtl8723b_set_FwMacIdConfig_cmd(padapter, mac_id, psta->raid, psta->bw_mode, shortGIrate, mask);

CHECK: Please don't use multiple blank lines
#1390: FILE: ./hal/rtl8723b_hal_init.c:1390:
+
+

CHECK: Avoid CamelCase: <pHalFunc>
#1391: FILE: ./hal/rtl8723b_hal_init.c:1391:
+void rtl8723b_set_hal_ops(struct hal_ops *pHalFunc)

CHECK: Avoid CamelCase: <rtl8723b_InitAntenna_Selection>
#1407: FILE: ./hal/rtl8723b_hal_init.c:1407:
+void rtl8723b_InitAntenna_Selection(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#1423: FILE: ./hal/rtl8723b_hal_init.c:1423:
+
+

WARNING: please, no space before tabs
#1439: FILE: ./hal/rtl8723b_hal_init.c:1439:
+/* ^Ipdmpriv->binitialized = false; */$

WARNING: please, no space before tabs
#1440: FILE: ./hal/rtl8723b_hal_init.c:1440:
+/* ^Ipdmpriv->prv_traffic_idx = 3; */$

WARNING: please, no space before tabs
#1441: FILE: ./hal/rtl8723b_hal_init.c:1441:
+/* ^Ipdmpriv->initialize = 0; */$

CHECK: Avoid CamelCase: <EfuseUsedBytes>
#1448: FILE: ./hal/rtl8723b_hal_init.c:1448:
+	pHalData->EfuseUsedBytes = 0;

CHECK: Avoid CamelCase: <EfuseUsedPercentage>
#1449: FILE: ./hal/rtl8723b_hal_init.c:1449:
+	pHalData->EfuseUsedPercentage = 0;

CHECK: Avoid CamelCase: <BTEfuseUsedPercentage>
#1457: FILE: ./hal/rtl8723b_hal_init.c:1457:
+	pHalData->EfuseHal.BTEfuseUsedPercentage = 0;

CHECK: spaces preferred around that '*' (ctx:VxV)
#1458: FILE: ./hal/rtl8723b_hal_init.c:1458:
+	memset(pHalData->EfuseHal.BTEfuseContent, 0xFF, EFUSE_MAX_BT_BANK*EFUSE_MAX_HW_SIZE);
 	                                                                 ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#1462: FILE: ./hal/rtl8723b_hal_init.c:1462:
+	memset(pHalData->EfuseHal.fakeBTEfuseContent, 0xFF, EFUSE_MAX_BT_BANK*EFUSE_MAX_HW_SIZE);
 	                                                                     ^

CHECK: Avoid CamelCase: <GetEEPROMSize8723B>
#1468: FILE: ./hal/rtl8723b_hal_init.c:1468:
+u8 GetEEPROMSize8723B(struct adapter *padapter)

CHECK: Avoid CamelCase: <rtl8723b_InitLLTTable>
#1485: FILE: ./hal/rtl8723b_hal_init.c:1485:
+s32 rtl8723b_InitLLTTable(struct adapter *padapter)

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#1508: FILE: ./hal/rtl8723b_hal_init.c:1508:
+		msleep(1);

WARNING: Comparisons should place the constant on the right side of the test
#1516: FILE: ./hal/rtl8723b_hal_init.c:1516:
+	if (1  <= channel && channel <= 2)

WARNING: Comparisons should place the constant on the right side of the test
#1518: FILE: ./hal/rtl8723b_hal_init.c:1518:
+	else if (3  <= channel && channel <= 5)

WARNING: Comparisons should place the constant on the right side of the test
#1520: FILE: ./hal/rtl8723b_hal_init.c:1520:
+	else if (6  <= channel && channel <= 8)

WARNING: Comparisons should place the constant on the right side of the test
#1522: FILE: ./hal/rtl8723b_hal_init.c:1522:
+	else if (9  <= channel && channel <= 11)

WARNING: Comparisons should place the constant on the right side of the test
#1524: FILE: ./hal/rtl8723b_hal_init.c:1524:
+	else if (12 <= channel && channel <= 14)

CHECK: Avoid CamelCase: <Hal_InitPGData>
#1528: FILE: ./hal/rtl8723b_hal_init.c:1528:
+void Hal_InitPGData(struct adapter *padapter, u8 *PROMContent)

CHECK: Avoid CamelCase: <PROMContent>
#1528: FILE: ./hal/rtl8723b_hal_init.c:1528:
+void Hal_InitPGData(struct adapter *padapter, u8 *PROMContent)

CHECK: Avoid CamelCase: <EepromOrEfuse>
#1533: FILE: ./hal/rtl8723b_hal_init.c:1533:
+		if (!pEEPROM->EepromOrEfuse) {

CHECK: line length of 110 exceeds 100 columns
#1536: FILE: ./hal/rtl8723b_hal_init.c:1536:
+			memcpy((void *)PROMContent, (void *)pEEPROM->efuse_eeprom_data, HWSET_MAX_SIZE_8723B);

CHECK: line length of 102 exceeds 100 columns
#1541: FILE: ./hal/rtl8723b_hal_init.c:1541:
+		memcpy((void *)PROMContent, (void *)pEEPROM->efuse_eeprom_data, HWSET_MAX_SIZE_8723B);

CHECK: Avoid CamelCase: <Hal_EfuseParseIDCode>
#1545: FILE: ./hal/rtl8723b_hal_init.c:1545:
+void Hal_EfuseParseIDCode(struct adapter *padapter, u8 *hwinfo)

WARNING: please, no space before tabs
#1548: FILE: ./hal/rtl8723b_hal_init.c:1548:
+/* ^Istruct hal_com_data^I*pHalData = GET_HAL_DATA(padapter); */$

CHECK: Avoid CamelCase: <EEPROMId>
#1549: FILE: ./hal/rtl8723b_hal_init.c:1549:
+	u16 EEPROMId;

CHECK: Please don't use multiple blank lines
#1551: FILE: ./hal/rtl8723b_hal_init.c:1551:
+
+

WARNING: braces {} are not necessary for any arm of this statement
#1554: FILE: ./hal/rtl8723b_hal_init.c:1554:
+	if (EEPROMId != RTL_EEPROM_ID) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#1556: FILE: ./hal/rtl8723b_hal_init.c:1556:
+	} else

CHECK: Lines should not end with a '('
#1560: FILE: ./hal/rtl8723b_hal_init.c:1560:
+static void Hal_ReadPowerValueFromPROM_8723B(

CHECK: Avoid CamelCase: <Hal_ReadPowerValueFromPROM_8723B>
#1560: FILE: ./hal/rtl8723b_hal_init.c:1560:
+static void Hal_ReadPowerValueFromPROM_8723B(

CHECK: Avoid CamelCase: <TxPowerInfo24G>
#1562: FILE: ./hal/rtl8723b_hal_init.c:1562:
+	struct TxPowerInfo24G *pwrInfo24G,

CHECK: Avoid CamelCase: <pwrInfo24G>
#1562: FILE: ./hal/rtl8723b_hal_init.c:1562:
+	struct TxPowerInfo24G *pwrInfo24G,

CHECK: Avoid CamelCase: <eeAddr>
#1568: FILE: ./hal/rtl8723b_hal_init.c:1568:
+	u32 rfPath, eeAddr = EEPROM_TX_PWR_INX_8723B, group, TxCount = 0;

CHECK: Avoid CamelCase: <TxCount>
#1568: FILE: ./hal/rtl8723b_hal_init.c:1568:
+	u32 rfPath, eeAddr = EEPROM_TX_PWR_INX_8723B, group, TxCount = 0;

CHECK: spaces preferred around that '+' (ctx:VxV)
#1572: FILE: ./hal/rtl8723b_hal_init.c:1572:
+	if (0xFF == PROMContent[eeAddr+1])
 	                              ^

WARNING: Comparisons should place the constant on the right side of the test
#1572: FILE: ./hal/rtl8723b_hal_init.c:1572:
+	if (0xFF == PROMContent[eeAddr+1])

CHECK: Avoid CamelCase: <IndexCCK_Base>
#1579: FILE: ./hal/rtl8723b_hal_init.c:1579:
+				pwrInfo24G->IndexCCK_Base[rfPath][group] = EEPROM_DEFAULT_24G_INDEX;

CHECK: line length of 101 exceeds 100 columns
#1580: FILE: ./hal/rtl8723b_hal_init.c:1580:
+				pwrInfo24G->IndexBW40_Base[rfPath][group] = EEPROM_DEFAULT_24G_INDEX;

CHECK: Avoid CamelCase: <IndexBW40_Base>
#1580: FILE: ./hal/rtl8723b_hal_init.c:1580:
+				pwrInfo24G->IndexBW40_Base[rfPath][group] = EEPROM_DEFAULT_24G_INDEX;

CHECK: line length of 104 exceeds 100 columns
#1585: FILE: ./hal/rtl8723b_hal_init.c:1585:
+					pwrInfo24G->BW20_Diff[rfPath][0] = EEPROM_DEFAULT_24G_HT20_DIFF;

CHECK: Avoid CamelCase: <BW20_Diff>
#1585: FILE: ./hal/rtl8723b_hal_init.c:1585:
+					pwrInfo24G->BW20_Diff[rfPath][0] = EEPROM_DEFAULT_24G_HT20_DIFF;

CHECK: line length of 104 exceeds 100 columns
#1586: FILE: ./hal/rtl8723b_hal_init.c:1586:
+					pwrInfo24G->OFDM_Diff[rfPath][0] = EEPROM_DEFAULT_24G_OFDM_DIFF;

CHECK: Avoid CamelCase: <OFDM_Diff>
#1586: FILE: ./hal/rtl8723b_hal_init.c:1586:
+					pwrInfo24G->OFDM_Diff[rfPath][0] = EEPROM_DEFAULT_24G_OFDM_DIFF;

CHECK: line length of 101 exceeds 100 columns
#1588: FILE: ./hal/rtl8723b_hal_init.c:1588:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: line length of 101 exceeds 100 columns
#1589: FILE: ./hal/rtl8723b_hal_init.c:1589:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Avoid CamelCase: <BW40_Diff>
#1589: FILE: ./hal/rtl8723b_hal_init.c:1589:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Avoid CamelCase: <CCK_Diff>
#1590: FILE: ./hal/rtl8723b_hal_init.c:1590:
+					pwrInfo24G->CCK_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: line length of 101 exceeds 100 columns
#1591: FILE: ./hal/rtl8723b_hal_init.c:1591:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Avoid CamelCase: <bTXPowerDataReadFromEEPORM>
#1599: FILE: ./hal/rtl8723b_hal_init.c:1599:
+	pHalData->bTXPowerDataReadFromEEPORM = true;		/* YJ, move, 120316 */

CHECK: spaces preferred around that '-' (ctx:VxV)
#1609: FILE: ./hal/rtl8723b_hal_init.c:1609:
+		for (group = 0; group < MAX_CHNL_GROUP_24G-1; group++) {
 		                                          ^

CHECK: line length of 105 exceeds 100 columns
#1612: FILE: ./hal/rtl8723b_hal_init.c:1612:
+				pwrInfo24G->IndexBW40_Base[rfPath][group] =	EEPROM_DEFAULT_24G_INDEX;

CHECK: braces {} should be used on all arms of this statement
#1618: FILE: ./hal/rtl8723b_hal_init.c:1618:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: line length of 117 exceeds 100 columns
#1619: FILE: ./hal/rtl8723b_hal_init.c:1619:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] =	EEPROM_DEFAULT_24G_HT20_DIFF;

CHECK: Unbalanced braces around else statement
#1620: FILE: ./hal/rtl8723b_hal_init.c:1620:
+				else {

CHECK: line length of 118 exceeds 100 columns
#1621: FILE: ./hal/rtl8723b_hal_init.c:1621:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] =	(PROMContent[eeAddr]&0xf0)>>4;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1621: FILE: ./hal/rtl8723b_hal_init.c:1621:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] =	(PROMContent[eeAddr]&0xf0)>>4;
 					                                        	                    ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1621: FILE: ./hal/rtl8723b_hal_init.c:1621:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] =	(PROMContent[eeAddr]&0xf0)>>4;
 					                                        	                          ^

CHECK: line length of 147 exceeds 100 columns
#1622: FILE: ./hal/rtl8723b_hal_init.c:1622:
+					if (pwrInfo24G->BW20_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: braces {} should be used on all arms of this statement
#1626: FILE: ./hal/rtl8723b_hal_init.c:1626:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: line length of 110 exceeds 100 columns
#1627: FILE: ./hal/rtl8723b_hal_init.c:1627:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = EEPROM_DEFAULT_24G_OFDM_DIFF;

CHECK: Unbalanced braces around else statement
#1628: FILE: ./hal/rtl8723b_hal_init.c:1628:
+				else {

CHECK: line length of 108 exceeds 100 columns
#1629: FILE: ./hal/rtl8723b_hal_init.c:1629:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1629: FILE: ./hal/rtl8723b_hal_init.c:1629:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);
 					                                                             ^

CHECK: line length of 147 exceeds 100 columns
#1630: FILE: ./hal/rtl8723b_hal_init.c:1630:
+					if (pwrInfo24G->OFDM_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: braces {} should be used on all arms of this statement
#1636: FILE: ./hal/rtl8723b_hal_init.c:1636:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: line length of 101 exceeds 100 columns
#1637: FILE: ./hal/rtl8723b_hal_init.c:1637:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Unbalanced braces around else statement
#1638: FILE: ./hal/rtl8723b_hal_init.c:1638:
+				else {

CHECK: line length of 111 exceeds 100 columns
#1639: FILE: ./hal/rtl8723b_hal_init.c:1639:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1639: FILE: ./hal/rtl8723b_hal_init.c:1639:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;
 					                                                             ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1639: FILE: ./hal/rtl8723b_hal_init.c:1639:
+					pwrInfo24G->BW40_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;
 					                                                                   ^

CHECK: line length of 147 exceeds 100 columns
#1640: FILE: ./hal/rtl8723b_hal_init.c:1640:
+					if (pwrInfo24G->BW40_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: braces {} should be used on all arms of this statement
#1644: FILE: ./hal/rtl8723b_hal_init.c:1644:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: line length of 101 exceeds 100 columns
#1645: FILE: ./hal/rtl8723b_hal_init.c:1645:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Unbalanced braces around else statement
#1646: FILE: ./hal/rtl8723b_hal_init.c:1646:
+				else {

CHECK: line length of 108 exceeds 100 columns
#1647: FILE: ./hal/rtl8723b_hal_init.c:1647:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1647: FILE: ./hal/rtl8723b_hal_init.c:1647:
+					pwrInfo24G->BW20_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);
 					                                                             ^

CHECK: line length of 147 exceeds 100 columns
#1648: FILE: ./hal/rtl8723b_hal_init.c:1648:
+					if (pwrInfo24G->BW20_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: braces {} should be used on all arms of this statement
#1653: FILE: ./hal/rtl8723b_hal_init.c:1653:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: line length of 101 exceeds 100 columns
#1654: FILE: ./hal/rtl8723b_hal_init.c:1654:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = EEPROM_DEFAULT_DIFF;

CHECK: Unbalanced braces around else statement
#1655: FILE: ./hal/rtl8723b_hal_init.c:1655:
+				else {

CHECK: line length of 111 exceeds 100 columns
#1656: FILE: ./hal/rtl8723b_hal_init.c:1656:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;

CHECK: spaces preferred around that '&' (ctx:VxV)
#1656: FILE: ./hal/rtl8723b_hal_init.c:1656:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;
 					                                                             ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#1656: FILE: ./hal/rtl8723b_hal_init.c:1656:
+					pwrInfo24G->OFDM_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0xf0)>>4;
 					                                                                   ^

CHECK: line length of 147 exceeds 100 columns
#1657: FILE: ./hal/rtl8723b_hal_init.c:1657:
+					if (pwrInfo24G->OFDM_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: braces {} should be used on all arms of this statement
#1661: FILE: ./hal/rtl8723b_hal_init.c:1661:
+				if (PROMContent[eeAddr] == 0xFF)
[...]
+				else {
[...]

CHECK: Unbalanced braces around else statement
#1663: FILE: ./hal/rtl8723b_hal_init.c:1663:
+				else {

CHECK: line length of 107 exceeds 100 columns
#1664: FILE: ./hal/rtl8723b_hal_init.c:1664:
+					pwrInfo24G->CCK_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);

CHECK: spaces preferred around that '&' (ctx:VxV)
#1664: FILE: ./hal/rtl8723b_hal_init.c:1664:
+					pwrInfo24G->CCK_Diff[rfPath][TxCount] = (PROMContent[eeAddr]&0x0f);
 					                                                            ^

CHECK: line length of 147 exceeds 100 columns
#1665: FILE: ./hal/rtl8723b_hal_init.c:1665:
+					if (pwrInfo24G->CCK_Diff[rfPath][TxCount] & BIT3)		/* 4bit sign number to 8 bit sign number */

CHECK: Please don't use multiple blank lines
#1674: FILE: ./hal/rtl8723b_hal_init.c:1674:
+
+

CHECK: Lines should not end with a '('
#1675: FILE: ./hal/rtl8723b_hal_init.c:1675:
+void Hal_EfuseParseTxPowerInfo_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseTxPowerInfo_8723B>
#1675: FILE: ./hal/rtl8723b_hal_init.c:1675:
+void Hal_EfuseParseTxPowerInfo_8723B(

WARNING: please, no space before tabs
#1681: FILE: ./hal/rtl8723b_hal_init.c:1681:
+^Iu8 ^IrfPath, ch, TxCount = 1;$

CHECK: spaces preferred around that '-' (ctx:VxV)
#1690: FILE: ./hal/rtl8723b_hal_init.c:1690:
+			if (ch == 14-1) {
 			            ^

CHECK: line length of 110 exceeds 100 columns
#1691: FILE: ./hal/rtl8723b_hal_init.c:1691:
+				pHalData->Index24G_CCK_Base[rfPath][ch] = pwrInfo24G.IndexCCK_Base[rfPath][5];

CHECK: line length of 116 exceeds 100 columns
#1692: FILE: ./hal/rtl8723b_hal_init.c:1692:
+				pHalData->Index24G_BW40_Base[rfPath][ch] = pwrInfo24G.IndexBW40_Base[rfPath][group];

CHECK: line length of 114 exceeds 100 columns
#1694: FILE: ./hal/rtl8723b_hal_init.c:1694:
+				pHalData->Index24G_CCK_Base[rfPath][ch] = pwrInfo24G.IndexCCK_Base[rfPath][group];

CHECK: line length of 116 exceeds 100 columns
#1695: FILE: ./hal/rtl8723b_hal_init.c:1695:
+				pHalData->Index24G_BW40_Base[rfPath][ch] = pwrInfo24G.IndexBW40_Base[rfPath][group];

CHECK: line length of 103 exceeds 100 columns
#1700: FILE: ./hal/rtl8723b_hal_init.c:1700:
+			pHalData->CCK_24G_Diff[rfPath][TxCount] = pwrInfo24G.CCK_Diff[rfPath][TxCount];

CHECK: Avoid CamelCase: <CCK_24G_Diff>
#1700: FILE: ./hal/rtl8723b_hal_init.c:1700:
+			pHalData->CCK_24G_Diff[rfPath][TxCount] = pwrInfo24G.CCK_Diff[rfPath][TxCount];

CHECK: line length of 105 exceeds 100 columns
#1701: FILE: ./hal/rtl8723b_hal_init.c:1701:
+			pHalData->OFDM_24G_Diff[rfPath][TxCount] = pwrInfo24G.OFDM_Diff[rfPath][TxCount];

CHECK: line length of 105 exceeds 100 columns
#1702: FILE: ./hal/rtl8723b_hal_init.c:1702:
+			pHalData->BW20_24G_Diff[rfPath][TxCount] = pwrInfo24G.BW20_Diff[rfPath][TxCount];

CHECK: line length of 105 exceeds 100 columns
#1703: FILE: ./hal/rtl8723b_hal_init.c:1703:
+			pHalData->BW40_24G_Diff[rfPath][TxCount] = pwrInfo24G.BW40_Diff[rfPath][TxCount];

CHECK: braces {} should be used on all arms of this statement
#1708: FILE: ./hal/rtl8723b_hal_init.c:1708:
+	if (!AutoLoadFail) {
[...]
+	} else
[...]

CHECK: line length of 108 exceeds 100 columns
#1709: FILE: ./hal/rtl8723b_hal_init.c:1709:
+		pHalData->EEPROMRegulatory = (PROMContent[EEPROM_RF_BOARD_OPTION_8723B]&0x7);	/* bit0~2 */

CHECK: spaces preferred around that '&' (ctx:VxV)
#1709: FILE: ./hal/rtl8723b_hal_init.c:1709:
+		pHalData->EEPROMRegulatory = (PROMContent[EEPROM_RF_BOARD_OPTION_8723B]&0x7);	/* bit0~2 */
 		                                                                       ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#1711: FILE: ./hal/rtl8723b_hal_init.c:1711:
+			pHalData->EEPROMRegulatory = (EEPROM_DEFAULT_BOARD_OPTION&0x7);	/* bit0~2 */
 			                                                         ^

CHECK: Unbalanced braces around else statement
#1712: FILE: ./hal/rtl8723b_hal_init.c:1712:
+	} else

CHECK: Lines should not end with a '('
#1716: FILE: ./hal/rtl8723b_hal_init.c:1716:
+void Hal_EfuseParseBTCoexistInfo_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseBTCoexistInfo_8723B>
#1716: FILE: ./hal/rtl8723b_hal_init.c:1716:
+void Hal_EfuseParseBTCoexistInfo_8723B(

CHECK: Avoid CamelCase: <EEPROMBluetoothCoexist>
#1727: FILE: ./hal/rtl8723b_hal_init.c:1727:
+			pHalData->EEPROMBluetoothCoexist = true;

CHECK: Avoid CamelCase: <EEPROMBluetoothType>
#1731: FILE: ./hal/rtl8723b_hal_init.c:1731:
+		pHalData->EEPROMBluetoothType = BT_RTL8723B;

CHECK: Avoid CamelCase: <EEPROMBluetoothAntNum>
#1735: FILE: ./hal/rtl8723b_hal_init.c:1735:
+			pHalData->EEPROMBluetoothAntNum = tempval & BIT(0);

CHECK: Avoid CamelCase: <Ant_x1>
#1743: FILE: ./hal/rtl8723b_hal_init.c:1743:
+			pHalData->EEPROMBluetoothAntNum = Ant_x1;

CHECK: Avoid CamelCase: <Ant_x2>
#1762: FILE: ./hal/rtl8723b_hal_init.c:1762:
+			pHalData->EEPROMBluetoothAntNum = Ant_x2;

CHECK: Lines should not end with a '('
#1775: FILE: ./hal/rtl8723b_hal_init.c:1775:
+void Hal_EfuseParseEEPROMVer_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseEEPROMVer_8723B>
#1775: FILE: ./hal/rtl8723b_hal_init.c:1775:
+void Hal_EfuseParseEEPROMVer_8723B(

CHECK: Avoid CamelCase: <EEPROMVersion>
#1782: FILE: ./hal/rtl8723b_hal_init.c:1782:
+		pHalData->EEPROMVersion = hwinfo[EEPROM_VERSION_8723B];

CHECK: Please don't use multiple blank lines
#1787: FILE: ./hal/rtl8723b_hal_init.c:1787:
+
+

CHECK: Lines should not end with a '('
#1789: FILE: ./hal/rtl8723b_hal_init.c:1789:
+void Hal_EfuseParsePackageType_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParsePackageType_8723B>
#1789: FILE: ./hal/rtl8723b_hal_init.c:1789:
+void Hal_EfuseParsePackageType_8723B(

CHECK: Avoid CamelCase: <efuseContent>
#1795: FILE: ./hal/rtl8723b_hal_init.c:1795:
+	u8 efuseContent;

CHECK: Please don't use multiple blank lines
#1822: FILE: ./hal/rtl8723b_hal_init.c:1822:
+
+

CHECK: Lines should not end with a '('
#1823: FILE: ./hal/rtl8723b_hal_init.c:1823:
+void Hal_EfuseParseVoltage_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseVoltage_8723B>
#1823: FILE: ./hal/rtl8723b_hal_init.c:1823:
+void Hal_EfuseParseVoltage_8723B(

CHECK: Avoid CamelCase: <adjuseVoltageVal>
#1830: FILE: ./hal/rtl8723b_hal_init.c:1830:
+	pEEPROM->adjuseVoltageVal = (hwinfo[EEPROM_Voltage_ADDR_8723B] & 0xf0) >> 4;

CHECK: Avoid CamelCase: <EEPROM_Voltage_ADDR_8723B>
#1830: FILE: ./hal/rtl8723b_hal_init.c:1830:
+	pEEPROM->adjuseVoltageVal = (hwinfo[EEPROM_Voltage_ADDR_8723B] & 0xf0) >> 4;

CHECK: Lines should not end with a '('
#1833: FILE: ./hal/rtl8723b_hal_init.c:1833:
+void Hal_EfuseParseChnlPlan_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseChnlPlan_8723B>
#1833: FILE: ./hal/rtl8723b_hal_init.c:1833:
+void Hal_EfuseParseChnlPlan_8723B(

CHECK: Lines should not end with a '('
#1837: FILE: ./hal/rtl8723b_hal_init.c:1837:
+	padapter->mlmepriv.ChannelPlan = hal_com_config_channel_plan(

CHECK: Avoid CamelCase: <EEPROM_ChannelPlan_8723B>
#1839: FILE: ./hal/rtl8723b_hal_init.c:1839:
+		hwinfo ? hwinfo[EEPROM_ChannelPlan_8723B] : 0xFF,

CHECK: Lines should not end with a '('
#1848: FILE: ./hal/rtl8723b_hal_init.c:1848:
+void Hal_EfuseParseCustomerID_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseCustomerID_8723B>
#1848: FILE: ./hal/rtl8723b_hal_init.c:1848:
+void Hal_EfuseParseCustomerID_8723B(

CHECK: Avoid CamelCase: <EEPROMCustomerID>
#1855: FILE: ./hal/rtl8723b_hal_init.c:1855:
+		pHalData->EEPROMCustomerID = hwinfo[EEPROM_CustomID_8723B];

CHECK: Avoid CamelCase: <EEPROM_CustomID_8723B>
#1855: FILE: ./hal/rtl8723b_hal_init.c:1855:
+		pHalData->EEPROMCustomerID = hwinfo[EEPROM_CustomID_8723B];

CHECK: Lines should not end with a '('
#1860: FILE: ./hal/rtl8723b_hal_init.c:1860:
+void Hal_EfuseParseAntennaDiversity_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseAntennaDiversity_8723B>
#1860: FILE: ./hal/rtl8723b_hal_init.c:1860:
+void Hal_EfuseParseAntennaDiversity_8723B(

CHECK: Lines should not end with a '('
#1868: FILE: ./hal/rtl8723b_hal_init.c:1868:
+void Hal_EfuseParseXtal_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseXtal_8723B>
#1868: FILE: ./hal/rtl8723b_hal_init.c:1868:
+void Hal_EfuseParseXtal_8723B(

CHECK: braces {} should be used on all arms of this statement
#1874: FILE: ./hal/rtl8723b_hal_init.c:1874:
+	if (!AutoLoadFail) {
[...]
+	} else
[...]

CHECK: line length of 116 exceeds 100 columns
#1877: FILE: ./hal/rtl8723b_hal_init.c:1877:
+			pHalData->CrystalCap = EEPROM_Default_CrystalCap_8723B;	   /* what value should 8812 set? */

CHECK: Unbalanced braces around else statement
#1878: FILE: ./hal/rtl8723b_hal_init.c:1878:
+	} else

CHECK: Please don't use multiple blank lines
#1882: FILE: ./hal/rtl8723b_hal_init.c:1882:
+
+

CHECK: Lines should not end with a '('
#1883: FILE: ./hal/rtl8723b_hal_init.c:1883:
+void Hal_EfuseParseThermalMeter_8723B(

CHECK: Avoid CamelCase: <Hal_EfuseParseThermalMeter_8723B>
#1883: FILE: ./hal/rtl8723b_hal_init.c:1883:
+void Hal_EfuseParseThermalMeter_8723B(

CHECK: Unnecessary parentheses around 'pHalData->EEPROMThermalMeter == 0xff'
#1897: FILE: ./hal/rtl8723b_hal_init.c:1897:
+	if ((pHalData->EEPROMThermalMeter == 0xff) || AutoLoadFail) {

CHECK: Please don't use multiple blank lines
#1903: FILE: ./hal/rtl8723b_hal_init.c:1903:
+
+

CHECK: Lines should not end with a '('
#1904: FILE: ./hal/rtl8723b_hal_init.c:1904:
+void Hal_ReadRFGainOffset(

CHECK: Avoid CamelCase: <Hal_ReadRFGainOffset>
#1904: FILE: ./hal/rtl8723b_hal_init.c:1904:
+void Hal_ReadRFGainOffset(

CHECK: Avoid CamelCase: <AutoloadFail>
#1905: FILE: ./hal/rtl8723b_hal_init.c:1905:
+	struct adapter *Adapter, u8 *PROMContent, bool AutoloadFail

CHECK: Avoid CamelCase: <BWMapping_8723B>
#1921: FILE: ./hal/rtl8723b_hal_init.c:1921:
+u8 BWMapping_8723B(struct adapter *Adapter, struct pkt_attrib *pattrib)

CHECK: Avoid CamelCase: <BWSettingOfDesc>
#1923: FILE: ./hal/rtl8723b_hal_init.c:1923:
+	u8 BWSettingOfDesc = 0;

CHECK: braces {} should be used on all arms of this statement
#1926: FILE: ./hal/rtl8723b_hal_init.c:1926:
+	if (pHalData->CurrentChannelBW == CHANNEL_WIDTH_40) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#1931: FILE: ./hal/rtl8723b_hal_init.c:1931:
+	} else

WARNING: please, no space before tabs
#1935: FILE: ./hal/rtl8723b_hal_init.c:1935:
+^I/* ^IBWSettingOfDesc = 0; */$

CHECK: Avoid CamelCase: <SCMapping_8723B>
#1940: FILE: ./hal/rtl8723b_hal_init.c:1940:
+u8 SCMapping_8723B(struct adapter *Adapter, struct pkt_attrib *pattrib)

CHECK: Avoid CamelCase: <SCSettingOfDesc>
#1942: FILE: ./hal/rtl8723b_hal_init.c:1942:
+	u8 SCSettingOfDesc = 0;

WARNING: braces {} are not necessary for any arm of this statement
#1949: FILE: ./hal/rtl8723b_hal_init.c:1949:
+			if (pHalData->nCur40MhzPrimeSC == HAL_PRIME_CHNL_OFFSET_UPPER) {
[...]
+			} else if (pHalData->nCur40MhzPrimeSC == HAL_PRIME_CHNL_OFFSET_LOWER) {
[...]
+			} else {
[...]

CHECK: Avoid CamelCase: <usPtr>
#1966: FILE: ./hal/rtl8723b_hal_init.c:1966:
+	u16 *usPtr = (u16 *)ptxdesc;

CHECK: Please don't use multiple blank lines
#1971: FILE: ./hal/rtl8723b_hal_init.c:1971:
+
+

WARNING: braces {} are not necessary for single statement blocks
#1980: FILE: ./hal/rtl8723b_hal_init.c:1980:
+	for (index = 0; index < count; index++) {
+		checksum |= le16_to_cpu(*(__le16 *)(usPtr + index));
+	}

WARNING: Missing a blank line after declarations
#1990: FILE: ./hal/rtl8723b_hal_init.c:1990:
+	u8 sectype = 0;
+	if ((pattrib->encrypt > 0) && !pattrib->bswenc) {

CHECK: Unnecessary parentheses around 'pattrib->encrypt > 0'
#1990: FILE: ./hal/rtl8723b_hal_init.c:1990:
+	if ((pattrib->encrypt > 0) && !pattrib->bswenc) {

CHECK: line length of 117 exceeds 100 columns
#2012: FILE: ./hal/rtl8723b_hal_init.c:2012:
+static void fill_txdesc_vcs_8723b(struct adapter *padapter, struct pkt_attrib *pattrib, struct txdesc_8723b *ptxdesc)

CHECK: line length of 117 exceeds 100 columns
#2043: FILE: ./hal/rtl8723b_hal_init.c:2043:
+static void fill_txdesc_phy_8723b(struct adapter *padapter, struct pkt_attrib *pattrib, struct txdesc_8723b *ptxdesc)

CHECK: Lines should not end with a '('
#2052: FILE: ./hal/rtl8723b_hal_init.c:2052:
+static void rtl8723b_fill_default_txdesc(

CHECK: Unnecessary parentheses around pmlmeext->mlmext_info
#2069: FILE: ./hal/rtl8723b_hal_init.c:2069:
+	pmlmeinfo = &(pmlmeext->mlmext_info);

CHECK: Lines should not end with a '('
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (

CHECK: Unnecessary parentheses around 'pattrib->ether_type != 0x888e'
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (
+			(pattrib->ether_type != 0x888e) &&
+			(pattrib->ether_type != 0x0806) &&
+			(pattrib->ether_type != 0x88B4) &&
+			(pattrib->dhcp_pkt != 1) &&
+			(drv_userate != 1)
+		) {

CHECK: Unnecessary parentheses around 'pattrib->ether_type != 0x0806'
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (
+			(pattrib->ether_type != 0x888e) &&
+			(pattrib->ether_type != 0x0806) &&
+			(pattrib->ether_type != 0x88B4) &&
+			(pattrib->dhcp_pkt != 1) &&
+			(drv_userate != 1)
+		) {

CHECK: Unnecessary parentheses around 'pattrib->ether_type != 0x88B4'
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (
+			(pattrib->ether_type != 0x888e) &&
+			(pattrib->ether_type != 0x0806) &&
+			(pattrib->ether_type != 0x88B4) &&
+			(pattrib->dhcp_pkt != 1) &&
+			(drv_userate != 1)
+		) {

CHECK: Unnecessary parentheses around 'pattrib->dhcp_pkt != 1'
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (
+			(pattrib->ether_type != 0x888e) &&
+			(pattrib->ether_type != 0x0806) &&
+			(pattrib->ether_type != 0x88B4) &&
+			(pattrib->dhcp_pkt != 1) &&
+			(drv_userate != 1)
+		) {

CHECK: Unnecessary parentheses around 'drv_userate != 1'
#2090: FILE: ./hal/rtl8723b_hal_init.c:2090:
+		if (
+			(pattrib->ether_type != 0x888e) &&
+			(pattrib->ether_type != 0x0806) &&
+			(pattrib->ether_type != 0x88B4) &&
+			(pattrib->dhcp_pkt != 1) &&
+			(drv_userate != 1)
+		) {

CHECK: braces {} should be used on all arms of this statement
#2099: FILE: ./hal/rtl8723b_hal_init.c:2099:
+			if (pattrib->ampdu_en) {
[...]
+			} else
[...]

CHECK: Unbalanced braces around else statement
#2103: FILE: ./hal/rtl8723b_hal_init.c:2103:
+			} else

CHECK: line length of 106 exceeds 100 columns
#2116: FILE: ./hal/rtl8723b_hal_init.c:2116:
+				ptxdesc->datarate = pHalData->dmpriv.INIDATA_RATE[pattrib->mac_id] & 0x7F;

WARNING: braces {} are not necessary for any arm of this statement
#2155: FILE: ./hal/rtl8723b_hal_init.c:2155:
+		if (pattrib->retry_ctrl) {
[...]
+		} else {
[...]

CHECK: line length of 106 exceeds 100 columns
#2217: FILE: ./hal/rtl8723b_hal_init.c:2217:
+/* 			in FW LPS mode. The function is to fill the Tx descriptor of this packets, then */

WARNING: please, no space before tabs
#2217: FILE: ./hal/rtl8723b_hal_init.c:2217:
+/* ^I^I^Iin FW LPS mode. The function is to fill the Tx descriptor of this packets, then */$

WARNING: please, no space before tabs
#2218: FILE: ./hal/rtl8723b_hal_init.c:2218:
+/* ^I^I^IFw can tell Hw to send these packet derectly. */$

CHECK: Lines should not end with a '('
#2222: FILE: ./hal/rtl8723b_hal_init.c:2222:
+void rtl8723b_fill_fake_txdesc(

CHECK: Avoid CamelCase: <pDesc>
#2224: FILE: ./hal/rtl8723b_hal_init.c:2224:
+	u8 *pDesc,

CHECK: Avoid CamelCase: <BufferLen>
#2225: FILE: ./hal/rtl8723b_hal_init.c:2225:
+	u32 BufferLen,

CHECK: Avoid CamelCase: <IsPsPoll>
#2226: FILE: ./hal/rtl8723b_hal_init.c:2226:
+	u8 IsPsPoll,

CHECK: Avoid CamelCase: <IsBTQosNull>
#2227: FILE: ./hal/rtl8723b_hal_init.c:2227:
+	u8 IsBTQosNull,

CHECK: Avoid CamelCase: <bDataFrame>
#2228: FILE: ./hal/rtl8723b_hal_init.c:2228:
+	u8 bDataFrame

WARNING: braces {} are not necessary for single statement blocks
#2250: FILE: ./hal/rtl8723b_hal_init.c:2250:
+	if (IsBTQosNull) {
+		SET_TX_DESC_BT_INT_8723B(pDesc, 1);
+	}

CHECK: Avoid CamelCase: <EncAlg>
#2263: FILE: ./hal/rtl8723b_hal_init.c:2263:
+		u32 EncAlg = padapter->securitypriv.dot11PrivacyAlgrthm;

CHECK: line length of 123 exceeds 100 columns
#2287: FILE: ./hal/rtl8723b_hal_init.c:2287:
+	/*  Using this checksum can let hardware recovery from packet bulk out error (e.g. Cancel URC, Bulk out error.). */

CHECK: Unnecessary parentheses around 'mode == _HW_STATE_STATION_'
#2305: FILE: ./hal/rtl8723b_hal_init.c:2305:
+		if ((mode == _HW_STATE_STATION_) || (mode == _HW_STATE_NOLINK_)) {

CHECK: Unnecessary parentheses around 'mode == _HW_STATE_NOLINK_'
#2305: FILE: ./hal/rtl8723b_hal_init.c:2305:
+		if ((mode == _HW_STATE_STATION_) || (mode == _HW_STATE_NOLINK_)) {

CHECK: spaces preferred around that '|' (ctx:VxV)
#2311: FILE: ./hal/rtl8723b_hal_init.c:2311:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|EN_BCN_FUNCTION|DIS_ATIM);
 			                                              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2311: FILE: ./hal/rtl8723b_hal_init.c:2311:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|EN_BCN_FUNCTION|DIS_ATIM);
 			                                                              ^

CHECK: line length of 101 exceeds 100 columns
#2315: FILE: ./hal/rtl8723b_hal_init.c:2315:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|EN_BCN_FUNCTION|DIS_BCNQ_SUB);

CHECK: spaces preferred around that '|' (ctx:VxV)
#2315: FILE: ./hal/rtl8723b_hal_init.c:2315:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|EN_BCN_FUNCTION|DIS_BCNQ_SUB);
 			                                              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2315: FILE: ./hal/rtl8723b_hal_init.c:2315:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|EN_BCN_FUNCTION|DIS_BCNQ_SUB);
 			                                                              ^

CHECK: Blank lines aren't necessary after an open brace '{'
#2317: FILE: ./hal/rtl8723b_hal_init.c:2317:
+		} else if (mode == _HW_STATE_AP_) {
+

CHECK: spaces preferred around that '|' (ctx:VxV)
#2320: FILE: ./hal/rtl8723b_hal_init.c:2320:
+			rtw_write8(padapter, REG_BCN_CTRL, DIS_TSF_UDT|DIS_BCNQ_SUB);
 			                                              ^

CHECK: line length of 121 exceeds 100 columns
#2323: FILE: ./hal/rtl8723b_hal_init.c:2323:
+			rtw_write32(padapter, REG_RCR, 0x7000208e);/* CBSSID_DATA must set to 0, reject ICV_ERR packet */

CHECK: line length of 117 exceeds 100 columns
#2342: FILE: ./hal/rtl8723b_hal_init.c:2342:
+			/* don't enable update TSF0 for if1 (due to TSF update when beacon/probe rsp are received) */

CHECK: line length of 116 exceeds 100 columns
#2343: FILE: ./hal/rtl8723b_hal_init.c:2343:
+			rtw_write8(padapter, REG_BCN_CTRL, (DIS_TSF_UDT|EN_BCN_FUNCTION|EN_TXBCN_RPT|DIS_BCNQ_SUB));

CHECK: spaces preferred around that '|' (ctx:VxV)
#2343: FILE: ./hal/rtl8723b_hal_init.c:2343:
+			rtw_write8(padapter, REG_BCN_CTRL, (DIS_TSF_UDT|EN_BCN_FUNCTION|EN_TXBCN_RPT|DIS_BCNQ_SUB));
 			                                               ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2343: FILE: ./hal/rtl8723b_hal_init.c:2343:
+			rtw_write8(padapter, REG_BCN_CTRL, (DIS_TSF_UDT|EN_BCN_FUNCTION|EN_TXBCN_RPT|DIS_BCNQ_SUB));
 			                                                               ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2343: FILE: ./hal/rtl8723b_hal_init.c:2343:
+			rtw_write8(padapter, REG_BCN_CTRL, (DIS_TSF_UDT|EN_BCN_FUNCTION|EN_TXBCN_RPT|DIS_BCNQ_SUB));
 			                                                                            ^

CHECK: line length of 128 exceeds 100 columns
#2346: FILE: ./hal/rtl8723b_hal_init.c:2346:
+			/* rtw_write8(Adapter, REG_DWBCN1_CTRL_8192E+2, rtw_read8(Adapter, REG_DWBCN1_CTRL_8192E+2) & ~BIT4); */

CHECK: Lines should not end with a '('
#2350: FILE: ./hal/rtl8723b_hal_init.c:2350:
+			rtw_write8(

CHECK: spaces preferred around that '&' (ctx:VxO)
#2353: FILE: ./hal/rtl8723b_hal_init.c:2353:
+				(rtw_read8(padapter, REG_CCK_CHECK_8723B)&~BIT_BCN_PORT_SEL)
 				                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2370: FILE: ./hal/rtl8723b_hal_init.c:2370:
+		rtw_write8(GET_PRIMARY_ADAPTER(padapter), (reg_macid+idx), val[idx]);
 		                                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2379: FILE: ./hal/rtl8723b_hal_init.c:2379:
+		rtw_write8(padapter, (reg_bssid+idx), val[idx]);
 		                               ^

CHECK: braces {} should be used on all arms of this statement
#2386: FILE: ./hal/rtl8723b_hal_init.c:2386:
+	if (*(u8 *)val)
[...]
+	else {
[...]

CHECK: Unbalanced braces around else statement
#2388: FILE: ./hal/rtl8723b_hal_init.c:2388:
+	else {

WARNING: Missing a blank line after declarations
#2390: FILE: ./hal/rtl8723b_hal_init.c:2390:
+		u8 val8;
+		val8 = rtw_read8(padapter, bcn_ctrl_reg);

WARNING: Comparisons should place the constant on the right side of the test
#2394: FILE: ./hal/rtl8723b_hal_init.c:2394:
+		if (REG_BCN_CTRL == bcn_ctrl_reg)

CHECK: line length of 106 exceeds 100 columns
#2408: FILE: ./hal/rtl8723b_hal_init.c:2408:
+	tsf = pmlmeext->TSFValue-do_div(pmlmeext->TSFValue, (pmlmeinfo->bcn_interval*1024))-1024; /* us */

CHECK: spaces preferred around that '-' (ctx:VxV)
#2408: FILE: ./hal/rtl8723b_hal_init.c:2408:
+	tsf = pmlmeext->TSFValue-do_div(pmlmeext->TSFValue, (pmlmeinfo->bcn_interval*1024))-1024; /* us */
 	                        ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#2408: FILE: ./hal/rtl8723b_hal_init.c:2408:
+	tsf = pmlmeext->TSFValue-do_div(pmlmeext->TSFValue, (pmlmeinfo->bcn_interval*1024))-1024; /* us */
 	                                                                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#2408: FILE: ./hal/rtl8723b_hal_init.c:2408:
+	tsf = pmlmeext->TSFValue-do_div(pmlmeext->TSFValue, (pmlmeinfo->bcn_interval*1024))-1024; /* us */
 	                                                                                   ^

CHECK: Lines should not end with a '('
#2410: FILE: ./hal/rtl8723b_hal_init.c:2410:
+	if (

CHECK: spaces preferred around that '&' (ctx:VxV)
#2411: FILE: ./hal/rtl8723b_hal_init.c:2411:
+		((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) ||
 		                  ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2412: FILE: ./hal/rtl8723b_hal_init.c:2412:
+		((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)
 		                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2423: FILE: ./hal/rtl8723b_hal_init.c:2423:
+		rtw_write32(padapter, REG_TSFTR+4, tsf>>32);
 		                               ^

CHECK: spaces preferred around that '>>' (ctx:VxV)
#2423: FILE: ./hal/rtl8723b_hal_init.c:2423:
+		rtw_write32(padapter, REG_TSFTR+4, tsf>>32);
 		                                      ^

CHECK: Lines should not end with a '('
#2431: FILE: ./hal/rtl8723b_hal_init.c:2431:
+	if (

CHECK: spaces preferred around that '&' (ctx:VxV)
#2432: FILE: ./hal/rtl8723b_hal_init.c:2432:
+		((pmlmeinfo->state&0x03) == WIFI_FW_ADHOC_STATE) ||
 		                  ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2433: FILE: ./hal/rtl8723b_hal_init.c:2433:
+		((pmlmeinfo->state&0x03) == WIFI_FW_AP_STATE)
 		                  ^

CHECK: Please don't use multiple blank lines
#2464: FILE: ./hal/rtl8723b_hal_init.c:2464:
+
+

WARNING: Unnecessary parentheses - maybe == should be = ?
#2475: FILE: ./hal/rtl8723b_hal_init.c:2475:
+	if ((check_fwstate(pmlmepriv, WIFI_AP_STATE) == true))

CHECK: line length of 112 exceeds 100 columns
#2487: FILE: ./hal/rtl8723b_hal_init.c:2487:
+		if (check_fwstate(pmlmepriv, WIFI_STATION_STATE | WIFI_ADHOC_STATE | WIFI_ADHOC_MASTER_STATE)) {

CHECK: Avoid CamelCase: <RegRRSR>
#2495: FILE: ./hal/rtl8723b_hal_init.c:2495:
+		pHalData->RegRRSR = rtw_read16(padapter, REG_RRSR);

CHECK: spaces preferred around that '|' (ctx:VxV)
#2498: FILE: ./hal/rtl8723b_hal_init.c:2498:
+		if (check_fwstate(pmlmepriv, (_FW_LINKED|WIFI_AP_STATE)))
 		                                        ^

CHECK: line length of 112 exceeds 100 columns
#2502: FILE: ./hal/rtl8723b_hal_init.c:2502:
+		if (check_fwstate(pmlmepriv, WIFI_STATION_STATE | WIFI_ADHOC_STATE | WIFI_ADHOC_MASTER_STATE)) {

CHECK: Avoid CamelCase: <RetryLimit>
#2522: FILE: ./hal/rtl8723b_hal_init.c:2522:
+	u8 RetryLimit = 0x30;

CHECK: Please don't use multiple blank lines
#2527: FILE: ./hal/rtl8723b_hal_init.c:2527:
+
+

CHECK: spaces preferred around that '|' (ctx:VxV)
#2539: FILE: ./hal/rtl8723b_hal_init.c:2539:
+			val32 |= RCR_CBSSID_DATA|RCR_CBSSID_BCN;
 			                        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2554: FILE: ./hal/rtl8723b_hal_init.c:2554:
+		if (check_fwstate(pmlmepriv, WIFI_ADHOC_STATE|WIFI_ADHOC_MASTER_STATE))
 		                                             ^

CHECK: Blank lines aren't necessary after an open brace '{'
#2564: FILE: ./hal/rtl8723b_hal_init.c:2564:
+{
+

CHECK: Avoid CamelCase: <_Header>
#2565: FILE: ./hal/rtl8723b_hal_init.c:2565:
+#define	GET_8723B_C2H_TX_RPT_LIFE_TIME_OVER(_Header)	LE_BITS_TO_1BYTE((_Header + 0), 6, 1)

CHECK: Macro argument '_Header' may be better as '(_Header)' to avoid precedence issues
#2565: FILE: ./hal/rtl8723b_hal_init.c:2565:
+#define	GET_8723B_C2H_TX_RPT_LIFE_TIME_OVER(_Header)	LE_BITS_TO_1BYTE((_Header + 0), 6, 1)

CHECK: Macro argument '_Header' may be better as '(_Header)' to avoid precedence issues
#2566: FILE: ./hal/rtl8723b_hal_init.c:2566:
+#define	GET_8723B_C2H_TX_RPT_RETRY_OVER(_Header)	LE_BITS_TO_1BYTE((_Header + 0), 7, 1)

WARNING: braces {} are not necessary for single statement blocks
#2568: FILE: ./hal/rtl8723b_hal_init.c:2568:
+	if (GET_8723B_C2H_TX_RPT_RETRY_OVER(pdata) | GET_8723B_C2H_TX_RPT_LIFE_TIME_OVER(pdata)) {
+		rtw_ack_tx_done(&padapter->xmitpriv, RTW_SCTX_DONE_CCX_PKT_FAIL);
+	}

WARNING: Block comments use * on subsequent lines
#2572: FILE: ./hal/rtl8723b_hal_init.c:2572:
+/*
+	else if (seq_no != padapter->xmitpriv.seq_no) {

WARNING: Missing a blank line after declarations
#2584: FILE: ./hal/rtl8723b_hal_init.c:2584:
+	s32 ret = false;
+	if (c2h_evt->id == C2H_CCX_TX_RPT)

CHECK: Please don't use multiple blank lines
#2590: FILE: ./hal/rtl8723b_hal_init.c:2590:
+
+

CHECK: Avoid CamelCase: <pC2hEvent>
#2593: FILE: ./hal/rtl8723b_hal_init.c:2593:
+	struct c2h_evt_hdr_88xx *pC2hEvent = (struct c2h_evt_hdr_88xx *)buf;

WARNING: please, no space before tabs
#2610: FILE: ./hal/rtl8723b_hal_init.c:2610:
+/* ^I^I^ICCX_FwC2HTxRpt(padapter, QueueID, pC2hEvent->payload); */$

WARNING: please, no space before tabs
#2614: FILE: ./hal/rtl8723b_hal_init.c:2614:
+/* ^I^I^IC2HExtRaRptHandler(padapter, pC2hEvent->payload, C2hEvent.CmdLen); */$

WARNING: please, no space before tabs
#2630: FILE: ./hal/rtl8723b_hal_init.c:2630:
+^I/* ^IIf this field isn't clear, the FW won't update the next command message. */$

WARNING: please, no space before tabs
#2631: FILE: ./hal/rtl8723b_hal_init.c:2631:
+/* ^Irtw_write8(padapter, REG_C2HEVT_CLEAR, C2H_EVT_HOST_CLOSE); */$

CHECK: Avoid CamelCase: <c2hBuf>
#2636: FILE: ./hal/rtl8723b_hal_init.c:2636:
+static void process_c2h_event(struct adapter *padapter, struct c2h_evt_hdr_t *pC2hEvent, u8 *c2hBuf)

CHECK: Avoid CamelCase: <CmdID>
#2641: FILE: ./hal/rtl8723b_hal_init.c:2641:
+	switch (pC2hEvent->CmdID) {

WARNING: please, no space before tabs
#2650: FILE: ./hal/rtl8723b_hal_init.c:2650:
+/* ^I^I^ICCX_FwC2HTxRpt(padapter, QueueID, tmpBuf); */$

WARNING: please, no space before tabs
#2654: FILE: ./hal/rtl8723b_hal_init.c:2654:
+/* ^I^I^IC2HExtRaRptHandler(padapter, tmpBuf, C2hEvent.CmdLen); */$

CHECK: Avoid CamelCase: <C2HPacketHandler_8723B>
#2669: FILE: ./hal/rtl8723b_hal_init.c:2669:
+void C2HPacketHandler_8723B(struct adapter *padapter, u8 *pbuffer, u16 length)

CHECK: Avoid CamelCase: <C2hEvent>
#2671: FILE: ./hal/rtl8723b_hal_init.c:2671:
+	struct c2h_evt_hdr_t	C2hEvent;

WARNING: Missing a blank line after declarations
#2673: FILE: ./hal/rtl8723b_hal_init.c:2673:
+	u8 *tmpBuf = NULL;
+	C2hEvent.CmdID = pbuffer[0];

CHECK: Avoid CamelCase: <CmdSeq>
#2674: FILE: ./hal/rtl8723b_hal_init.c:2674:
+	C2hEvent.CmdSeq = pbuffer[1];

CHECK: spaces preferred around that '-' (ctx:VxV)
#2675: FILE: ./hal/rtl8723b_hal_init.c:2675:
+	C2hEvent.CmdLen = length-2;
 	                        ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2676: FILE: ./hal/rtl8723b_hal_init.c:2676:
+	tmpBuf = pbuffer+2;
 	                ^

CHECK: Avoid CamelCase: <SetHwReg8723B>
#2682: FILE: ./hal/rtl8723b_hal_init.c:2682:
+void SetHwReg8723B(struct adapter *padapter, u8 variable, u8 *val)

CHECK: Avoid CamelCase: <BrateCfg>
#2716: FILE: ./hal/rtl8723b_hal_init.c:2716:
+		u16 BrateCfg = 0;

CHECK: spaces preferred around that '|' (ctx:VxV)
#2717: FILE: ./hal/rtl8723b_hal_init.c:2717:
+		u16 rrsr_2g_force_mask = (RRSR_11M|RRSR_5_5M|RRSR_1M);
 		                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2717: FILE: ./hal/rtl8723b_hal_init.c:2717:
+		u16 rrsr_2g_force_mask = (RRSR_11M|RRSR_5_5M|RRSR_1M);
 		                                            ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2718: FILE: ./hal/rtl8723b_hal_init.c:2718:
+		u16 rrsr_2g_allow_mask = (RRSR_24M|RRSR_12M|RRSR_6M|RRSR_CCK_RATES);
 		                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2718: FILE: ./hal/rtl8723b_hal_init.c:2718:
+		u16 rrsr_2g_allow_mask = (RRSR_24M|RRSR_12M|RRSR_6M|RRSR_CCK_RATES);
 		                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2718: FILE: ./hal/rtl8723b_hal_init.c:2718:
+		u16 rrsr_2g_allow_mask = (RRSR_24M|RRSR_12M|RRSR_6M|RRSR_CCK_RATES);
 		                                                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2729: FILE: ./hal/rtl8723b_hal_init.c:2729:
+			if ((BrateCfg & (RRSR_24M|RRSR_12M|RRSR_6M)) == 0)
 			                         ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2729: FILE: ./hal/rtl8723b_hal_init.c:2729:
+			if ((BrateCfg & (RRSR_24M|RRSR_12M|RRSR_6M)) == 0)
 			                                  ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2737: FILE: ./hal/rtl8723b_hal_init.c:2737:
+		rtw_write8(padapter, REG_RRSR+2, rtw_read8(padapter, REG_RRSR+2)&0xf0);
 		                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2737: FILE: ./hal/rtl8723b_hal_init.c:2737:
+		rtw_write8(padapter, REG_RRSR+2, rtw_read8(padapter, REG_RRSR+2)&0xf0);
 		                                                             ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#2737: FILE: ./hal/rtl8723b_hal_init.c:2737:
+		rtw_write8(padapter, REG_RRSR+2, rtw_read8(padapter, REG_RRSR+2)&0xf0);
 		                                                                ^

WARNING: Missing a blank line after declarations
#2756: FILE: ./hal/rtl8723b_hal_init.c:2756:
+			u32 val32;
+			val32 = rtw_read32(padapter, REG_RCR);

CHECK: spaces preferred around that '|' (ctx:VxV)
#2758: FILE: ./hal/rtl8723b_hal_init.c:2758:
+				val32 |= RCR_CBSSID_DATA|RCR_CBSSID_BCN;
 				                        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2760: FILE: ./hal/rtl8723b_hal_init.c:2760:
+				val32 &= ~(RCR_CBSSID_DATA|RCR_CBSSID_BCN);
 				                          ^

CHECK: spaces required around that '?' (ctx:VxV)
#2772: FILE: ./hal/rtl8723b_hal_init.c:2772:
+		hal_btcoex_ScanNotify(padapter, *val?true:false);
 		                                    ^

CHECK: spaces required around that ':' (ctx:VxV)
#2772: FILE: ./hal/rtl8723b_hal_init.c:2772:
+		hal_btcoex_ScanNotify(padapter, *val?true:false);
 		                                         ^

WARNING: please, no space before tabs
#2789: FILE: ./hal/rtl8723b_hal_init.c:2789:
+/* ^I^I^I^Irtw_btcoex_MediaStatusNotify(padapter, RT_MEDIA_CONNECT); */$

CHECK: spaces preferred around that '+' (ctx:VxV)
#2818: FILE: ./hal/rtl8723b_hal_init.c:2818:
+		rtw_write8(padapter, REG_RESP_SIFS_CCK+1, val[1]); /* SIFS_R2T_CCK(0x08) */
 		                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2821: FILE: ./hal/rtl8723b_hal_init.c:2821:
+		rtw_write8(padapter, REG_RESP_SIFS_OFDM+1, val[3]); /* SIFS_R2T_OFDM(0x0a) */
 		                                       ^

CHECK: Avoid CamelCase: <regTmp>
#2826: FILE: ./hal/rtl8723b_hal_init.c:2826:
+			u8 regTmp = 0;

CHECK: Avoid CamelCase: <bShortPreamble>
#2827: FILE: ./hal/rtl8723b_hal_init.c:2827:
+			u8 bShortPreamble = *val;

CHECK: spaces preferred around that '+' (ctx:VxV)
#2833: FILE: ./hal/rtl8723b_hal_init.c:2833:
+			rtw_write8(padapter, REG_RRSR+2, regTmp);
 			                             ^

CHECK: Avoid CamelCase: <ucIndex>
#2839: FILE: ./hal/rtl8723b_hal_init.c:2839:
+			u8 ucIndex = *val;

CHECK: Avoid CamelCase: <ulCommand>
#2841: FILE: ./hal/rtl8723b_hal_init.c:2841:
+			u32 ulCommand = 0;

CHECK: Avoid CamelCase: <ulContent>
#2842: FILE: ./hal/rtl8723b_hal_init.c:2842:
+			u32 ulContent = 0;

CHECK: Avoid CamelCase: <ulEncAlgo>
#2843: FILE: ./hal/rtl8723b_hal_init.c:2843:
+			u32 ulEncAlgo = CAM_AES;

CHECK: braces {} should be used on all arms of this statement
#2847: FILE: ./hal/rtl8723b_hal_init.c:2847:
+				if (i == 0) {
[...]
+				} else
[...]

CHECK: spaces preferred around that '<<' (ctx:VxV)
#2848: FILE: ./hal/rtl8723b_hal_init.c:2848:
+					ulContent |= (ucIndex & 0x03) | ((u16)(ulEncAlgo)<<2);
 					                                                 ^

CHECK: Unbalanced braces around else statement
#2850: FILE: ./hal/rtl8723b_hal_init.c:2850:
+				} else

CHECK: spaces preferred around that '*' (ctx:VxV)
#2854: FILE: ./hal/rtl8723b_hal_init.c:2854:
+				ulCommand = CAM_CONTENT_COUNT*ucIndex+i;
 				                             ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#2854: FILE: ./hal/rtl8723b_hal_init.c:2854:
+				ulCommand = CAM_CONTENT_COUNT*ucIndex+i;
 				                                     ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#2864: FILE: ./hal/rtl8723b_hal_init.c:2864:
+		rtw_write32(padapter, RWCAM, BIT(31)|BIT(30));
 		                                    ^

CHECK: Avoid CamelCase: <AcmHw_HwEn>
#2902: FILE: ./hal/rtl8723b_hal_init.c:2902:
+				hwctrl |= AcmHw_HwEn;

CHECK: Avoid CamelCase: <AcmHw_BeqEn>
#2905: FILE: ./hal/rtl8723b_hal_init.c:2905:
+					hwctrl |= AcmHw_BeqEn;

CHECK: Avoid CamelCase: <AcmHw_ViqEn>
#2908: FILE: ./hal/rtl8723b_hal_init.c:2908:
+					hwctrl |= AcmHw_ViqEn;

CHECK: Avoid CamelCase: <AcmHw_VoqEn>
#2911: FILE: ./hal/rtl8723b_hal_init.c:2911:
+					hwctrl |= AcmHw_VoqEn;

CHECK: Avoid CamelCase: <AMPDULen>
#2920: FILE: ./hal/rtl8723b_hal_init.c:2920:
+			u32 AMPDULen =  (*((u8 *)val));

CHECK: spaces preferred around that '-' (ctx:VxV)
#2923: FILE: ./hal/rtl8723b_hal_init.c:2923:
+				AMPDULen = (0x2000 << (*((u8 *)val)))-1;
 				                                     ^

CHECK: line length of 112 exceeds 100 columns
#2935: FILE: ./hal/rtl8723b_hal_init.c:2935:
+			/*  Forece leave RF low power mode for 1T1R to prevent conficting setting in Fw power */

CHECK: line length of 101 exceeds 100 columns
#2936: FILE: ./hal/rtl8723b_hal_init.c:2936:
+			/*  saving sequence. 2010.06.07. Added by tynli. Suggested by SD3 yschang. */

WARNING: braces {} are not necessary for single statement blocks
#2937: FILE: ./hal/rtl8723b_hal_init.c:2937:
+			if (psmode != PS_MODE_ACTIVE) {
+				ODM_RF_Saving(&pHalData->odmpriv, true);
+			}

WARNING: please, no space before tabs
#2942: FILE: ./hal/rtl8723b_hal_init.c:2942:
+^I^I^I/* ^Irtl8723b_set_lowpwr_lps_cmd(padapter, true); */$

WARNING: please, no space before tabs
#2944: FILE: ./hal/rtl8723b_hal_init.c:2944:
+^I^I^I/* ^Irtl8723b_set_lowpwr_lps_cmd(padapter, false); */$

CHECK: Avoid CamelCase: <bMacPwrCtrlOn>
#3028: FILE: ./hal/rtl8723b_hal_init.c:3028:
+		pHalData->bMacPwrCtrlOn = *val;

CHECK: Avoid CamelCase: <usNavUpper>
#3033: FILE: ./hal/rtl8723b_hal_init.c:3033:
+			u32 usNavUpper = *((u32 *)val);

CHECK: Avoid CamelCase: <macId>
#3047: FILE: ./hal/rtl8723b_hal_init.c:3047:
+			u8 mstatus, macId;

CHECK: No space is necessary after a cast
#3049: FILE: ./hal/rtl8723b_hal_init.c:3049:
+			mstatus = (u8) (mstatus_rpt & 0xFF);

CHECK: line length of 117 exceeds 100 columns
#3056: FILE: ./hal/rtl8723b_hal_init.c:3056:
+			/*  BCN_VALID, BIT16 of REG_TDECTRL = BIT0 of REG_TDECTRL+2, write 1 to clear, Clear by sw */

CHECK: spaces preferred around that '+' (ctx:VxV)
#3057: FILE: ./hal/rtl8723b_hal_init.c:3057:
+			val8 = rtw_read8(padapter, REG_TDECTRL+2);
 			                                      ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#3059: FILE: ./hal/rtl8723b_hal_init.c:3059:
+			rtw_write8(padapter, REG_TDECTRL+2, val8);
 			                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#3066: FILE: ./hal/rtl8723b_hal_init.c:3066:
+			val8 = rtw_read8(padapter, REG_DWBCN1_CTRL_8723B+2);
 			                                                ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#3068: FILE: ./hal/rtl8723b_hal_init.c:3068:
+			rtw_write8(padapter, REG_DWBCN1_CTRL_8723B+2, val8);
 			                                          ^

CHECK: Avoid CamelCase: <GetHwReg8723B>
#3119: FILE: ./hal/rtl8723b_hal_init.c:3119:
+void GetHwReg8723B(struct adapter *padapter, u8 variable, u8 *val)

CHECK: spaces preferred around that '+' (ctx:VxV)
#3133: FILE: ./hal/rtl8723b_hal_init.c:3133:
+			val8 = rtw_read8(padapter, REG_TDECTRL+2);
 			                                      ^

CHECK: Avoid CamelCase: <valRCR>
#3141: FILE: ./hal/rtl8723b_hal_init.c:3141:
+			u32 valRCR;

CHECK: Lines should not end with a '('
#3143: FILE: ./hal/rtl8723b_hal_init.c:3143:
+			if (

CHECK: line length of 110 exceeds 100 columns
#3147: FILE: ./hal/rtl8723b_hal_init.c:3147:
+				/*  If it is in HW/SW Radio OFF or IPS state, we do not check Fw LPS Leave, */

CHECK: spaces required around that ':' (ctx:VxV)
#3188: FILE: ./hal/rtl8723b_hal_init.c:3188:
+		*val = (val16 & BIT(10)) ? true:false;
 		                               ^

CHECK: Avoid CamelCase: <SetHalDefVar8723B>
#3199: FILE: ./hal/rtl8723b_hal_init.c:3199:
+u8 SetHalDefVar8723B(struct adapter *padapter, enum hal_def_variable variable, void *pval)

CHECK: Avoid CamelCase: <GetHalDefVar8723B>
#3215: FILE: ./hal/rtl8723b_hal_init.c:3215:
+u8 GetHalDefVar8723B(struct adapter *padapter, enum hal_def_variable variable, void *pval)

CHECK: spaces preferred around that '*' (ctx:VxV)
#3225: FILE: ./hal/rtl8723b_hal_init.c:3225:
+		*((u32 *)pval) = RXDESC_SIZE + DRVINFO_SZ*8;
 		                                         ^

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#3255: FILE: ./hal/rtl8723b_hal_init.c:3255:
+			msleep(10);

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#3260: FILE: ./hal/rtl8723b_hal_init.c:3260:
+			msleep(10);

WARNING: braces {} are not necessary for any arm of this statement
#3269: FILE: ./hal/rtl8723b_hal_init.c:3269:
+		if (!padapter->registrypriv.wifi_spec) {
[...]
+		} else {
[...]

CHECK: Avoid CamelCase: <SdioXmitThread>
#3292: FILE: ./hal/rtl8723b_hal_init.c:3292:
+	xmitpriv->SdioXmitThread = kthread_run(rtl8723bs_xmit_thread, padapter, "RTWHALXT");

CHECK: Avoid CamelCase: <SdioXmitStart>
#3301: FILE: ./hal/rtl8723b_hal_init.c:3301:
+		complete(&xmitpriv->SdioXmitStart);

CHECK: Avoid CamelCase: <SdioXmitTerminate>
#3302: FILE: ./hal/rtl8723b_hal_init.c:3302:
+		wait_for_completion(&xmitpriv->SdioXmitTerminate);

total: 0 errors, 60 warnings, 522 checks, 3305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_hal_init.c has style problems, please review.
-------------------------
./hal/rtl8723b_hal_init.o
-------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_hal_init.o has style problems, please review.
-----------------------
./hal/rtl8723b_phycfg.c
-----------------------
CHECK: Avoid CamelCase: <phy_CalculateBitShift>
#17: FILE: ./hal/rtl8723b_phycfg.c:17:
+static	u32 phy_CalculateBitShift(u32 BitMask)

CHECK: spaces preferred around that '>>' (ctx:VxV)
#22: FILE: ./hal/rtl8723b_phycfg.c:22:
+		if (((BitMask>>i) &  0x1) == 1)
 		             ^

CHECK: Please don't use multiple blank lines
#28: FILE: ./hal/rtl8723b_phycfg.c:28:
+
+

CHECK: Avoid CamelCase: <OriginalValue>
#43: FILE: ./hal/rtl8723b_phycfg.c:43:
+	u32 OriginalValue, BitShift;

CHECK: Avoid CamelCase: <BitShift>
#43: FILE: ./hal/rtl8723b_phycfg.c:43:
+	u32 OriginalValue, BitShift;

CHECK: Blank lines aren't necessary before a close brace '}'
#50: FILE: ./hal/rtl8723b_phycfg.c:50:
+
+}

CHECK: Please don't use multiple blank lines
#52: FILE: ./hal/rtl8723b_phycfg.c:52:
+
+

CHECK: Lines should not end with a '('
#66: FILE: ./hal/rtl8723b_phycfg.c:66:
+void PHY_SetBBReg_8723B(

CHECK: Blank lines aren't necessary before a close brace '}'
#84: FILE: ./hal/rtl8723b_phycfg.c:84:
+
+}

CHECK: Please don't use multiple blank lines
#86: FILE: ./hal/rtl8723b_phycfg.c:86:
+
+

CHECK: Lines should not end with a '('
#91: FILE: ./hal/rtl8723b_phycfg.c:91:
+static u32 phy_RFSerialRead_8723B(

CHECK: Avoid CamelCase: <phy_RFSerialRead_8723B>
#91: FILE: ./hal/rtl8723b_phycfg.c:91:
+static u32 phy_RFSerialRead_8723B(

CHECK: Avoid CamelCase: <retValue>
#95: FILE: ./hal/rtl8723b_phycfg.c:95:
+	u32 retValue = 0;

CHECK: Avoid CamelCase: <pPhyReg>
#97: FILE: ./hal/rtl8723b_phycfg.c:97:
+	struct bb_register_def *pPhyReg = &pHalData->PHYRegDef[eRFPath];

CHECK: Avoid CamelCase: <PHYRegDef>
#97: FILE: ./hal/rtl8723b_phycfg.c:97:
+	struct bb_register_def *pPhyReg = &pHalData->PHYRegDef[eRFPath];

CHECK: Avoid CamelCase: <NewOffset>
#98: FILE: ./hal/rtl8723b_phycfg.c:98:
+	u32 NewOffset;

CHECK: Avoid CamelCase: <RfPiEnable>
#100: FILE: ./hal/rtl8723b_phycfg.c:100:
+	u8 RfPiEnable = 0;

CHECK: Avoid CamelCase: <MaskforPhySet>
#101: FILE: ./hal/rtl8723b_phycfg.c:101:
+	u32 MaskforPhySet = 0;

CHECK: line length of 103 exceeds 100 columns
#112: FILE: ./hal/rtl8723b_phycfg.c:112:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord);

CHECK: spaces preferred around that '|' (ctx:VxV)
#112: FILE: ./hal/rtl8723b_phycfg.c:112:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord);
 		                                                           ^

CHECK: Avoid CamelCase: <rFPGA0_XA_HSSIParameter2>
#112: FILE: ./hal/rtl8723b_phycfg.c:112:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord);

CHECK: line length of 108 exceeds 100 columns
#113: FILE: ./hal/rtl8723b_phycfg.c:113:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */

CHECK: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: ./hal/rtl8723b_phycfg.c:113:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */
 		                                                        ^

CHECK: Avoid CamelCase: <bLSSIReadAddress>
#113: FILE: ./hal/rtl8723b_phycfg.c:113:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */

CHECK: Avoid CamelCase: <bLSSIReadEdge>
#113: FILE: ./hal/rtl8723b_phycfg.c:113:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */

CHECK: line length of 117 exceeds 100 columns
#114: FILE: ./hal/rtl8723b_phycfg.c:114:
+		PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));

CHECK: spaces preferred around that '|' (ctx:VxV)
#114: FILE: ./hal/rtl8723b_phycfg.c:114:
+		PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));
 		                                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#114: FILE: ./hal/rtl8723b_phycfg.c:114:
+		PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));
 		                                                                                  ^

CHECK: line length of 103 exceeds 100 columns
#116: FILE: ./hal/rtl8723b_phycfg.c:116:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord);

CHECK: spaces preferred around that '|' (ctx:VxV)
#116: FILE: ./hal/rtl8723b_phycfg.c:116:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord);
 		                                                           ^

CHECK: Avoid CamelCase: <rFPGA0_XB_HSSIParameter2>
#116: FILE: ./hal/rtl8723b_phycfg.c:116:
+		tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord);

CHECK: line length of 108 exceeds 100 columns
#117: FILE: ./hal/rtl8723b_phycfg.c:117:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */

CHECK: spaces preferred around that '<<' (ctx:VxV)
#117: FILE: ./hal/rtl8723b_phycfg.c:117:
+		tmplong2 = (tmplong2 & (~bLSSIReadAddress)) | (NewOffset<<23) | bLSSIReadEdge;	/* T65 RF */
 		                                                        ^

CHECK: line length of 117 exceeds 100 columns
#118: FILE: ./hal/rtl8723b_phycfg.c:118:
+		PHY_SetBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));

CHECK: spaces preferred around that '|' (ctx:VxV)
#118: FILE: ./hal/rtl8723b_phycfg.c:118:
+		PHY_SetBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));
 		                                              ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#118: FILE: ./hal/rtl8723b_phycfg.c:118:
+		PHY_SetBBReg(Adapter, rFPGA0_XB_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2&(~bLSSIReadEdge));
 		                                                                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#121: FILE: ./hal/rtl8723b_phycfg.c:121:
+	tmplong2 = PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord);
 	                                                           ^

CHECK: line length of 111 exceeds 100 columns
#122: FILE: ./hal/rtl8723b_phycfg.c:122:
+	PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2 & (~bLSSIReadEdge));

CHECK: spaces preferred around that '|' (ctx:VxV)
#122: FILE: ./hal/rtl8723b_phycfg.c:122:
+	PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2 & (~bLSSIReadEdge));
 	                                              ^

CHECK: line length of 108 exceeds 100 columns
#123: FILE: ./hal/rtl8723b_phycfg.c:123:
+	PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2 | bLSSIReadEdge);

CHECK: spaces preferred around that '|' (ctx:VxV)
#123: FILE: ./hal/rtl8723b_phycfg.c:123:
+	PHY_SetBBReg(Adapter, rFPGA0_XA_HSSIParameter2|MaskforPhySet, bMaskDWord, tmplong2 | bLSSIReadEdge);
 	                                              ^

CHECK: usleep_range is preferred over udelay; see function description of usleep_range() and udelay().
#125: FILE: ./hal/rtl8723b_phycfg.c:125:
+	udelay(10);

CHECK: usleep_range is preferred over udelay; see function description of usleep_range() and udelay().
#129: FILE: ./hal/rtl8723b_phycfg.c:129:
+	udelay(10);

CHECK: line length of 103 exceeds 100 columns
#132: FILE: ./hal/rtl8723b_phycfg.c:132:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter1|MaskforPhySet, BIT8);

CHECK: spaces preferred around that '|' (ctx:VxV)
#132: FILE: ./hal/rtl8723b_phycfg.c:132:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter1|MaskforPhySet, BIT8);
 		                                                                 ^

CHECK: Avoid CamelCase: <rFPGA0_XA_HSSIParameter1>
#132: FILE: ./hal/rtl8723b_phycfg.c:132:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XA_HSSIParameter1|MaskforPhySet, BIT8);

CHECK: line length of 103 exceeds 100 columns
#134: FILE: ./hal/rtl8723b_phycfg.c:134:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter1|MaskforPhySet, BIT8);

CHECK: spaces preferred around that '|' (ctx:VxV)
#134: FILE: ./hal/rtl8723b_phycfg.c:134:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter1|MaskforPhySet, BIT8);
 		                                                                 ^

CHECK: Avoid CamelCase: <rFPGA0_XB_HSSIParameter1>
#134: FILE: ./hal/rtl8723b_phycfg.c:134:
+		RfPiEnable = (u8)PHY_QueryBBReg(Adapter, rFPGA0_XB_HSSIParameter1|MaskforPhySet, BIT8);

CHECK: line length of 111 exceeds 100 columns
#138: FILE: ./hal/rtl8723b_phycfg.c:138:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBackPi|MaskforPhySet, bLSSIReadBackData);

CHECK: spaces preferred around that '|' (ctx:VxV)
#138: FILE: ./hal/rtl8723b_phycfg.c:138:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBackPi|MaskforPhySet, bLSSIReadBackData);
 		                                                            ^

CHECK: Avoid CamelCase: <rfLSSIReadBackPi>
#138: FILE: ./hal/rtl8723b_phycfg.c:138:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBackPi|MaskforPhySet, bLSSIReadBackData);

CHECK: Avoid CamelCase: <bLSSIReadBackData>
#138: FILE: ./hal/rtl8723b_phycfg.c:138:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBackPi|MaskforPhySet, bLSSIReadBackData);

CHECK: line length of 109 exceeds 100 columns
#141: FILE: ./hal/rtl8723b_phycfg.c:141:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBack|MaskforPhySet, bLSSIReadBackData);

CHECK: spaces preferred around that '|' (ctx:VxV)
#141: FILE: ./hal/rtl8723b_phycfg.c:141:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBack|MaskforPhySet, bLSSIReadBackData);
 		                                                          ^

CHECK: Avoid CamelCase: <rfLSSIReadBack>
#141: FILE: ./hal/rtl8723b_phycfg.c:141:
+		retValue = PHY_QueryBBReg(Adapter, pPhyReg->rfLSSIReadBack|MaskforPhySet, bLSSIReadBackData);

CHECK: Blank lines aren't necessary before a close brace '}'
#145: FILE: ./hal/rtl8723b_phycfg.c:145:
+
+}

CHECK: line length of 132 exceeds 100 columns
#172: FILE: ./hal/rtl8723b_phycfg.c:172:
+ *		 Reg_Mode0				0				x			Reg 0 ~15(0x0 ~ 0xf)

CHECK: line length of 133 exceeds 100 columns
#174: FILE: ./hal/rtl8723b_phycfg.c:174:
+ *		 Reg_Mode1				1				0			Reg 16 ~30(0x1 ~ 0xf)

CHECK: line length of 134 exceeds 100 columns
#176: FILE: ./hal/rtl8723b_phycfg.c:176:
+ *		 Reg_Mode2				1				1			Reg 31 ~ 45(0x1 ~ 0xf)

CHECK: Lines should not end with a '('
#184: FILE: ./hal/rtl8723b_phycfg.c:184:
+static void phy_RFSerialWrite_8723B(

CHECK: Avoid CamelCase: <phy_RFSerialWrite_8723B>
#184: FILE: ./hal/rtl8723b_phycfg.c:184:
+static void phy_RFSerialWrite_8723B(

CHECK: Avoid CamelCase: <DataAndAddr>
#191: FILE: ./hal/rtl8723b_phycfg.c:191:
+	u32 DataAndAddr = 0;

CHECK: spaces preferred around that '<<' (ctx:VxV)
#206: FILE: ./hal/rtl8723b_phycfg.c:206:
+	DataAndAddr = ((NewOffset<<20) | (Data&0x000fffff)) & 0x0fffffff;	/*  T65 RF */
 	                         ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#206: FILE: ./hal/rtl8723b_phycfg.c:206:
+	DataAndAddr = ((NewOffset<<20) | (Data&0x000fffff)) & 0x0fffffff;	/*  T65 RF */
 	                                      ^

CHECK: Avoid CamelCase: <rf3wireOffset>
#210: FILE: ./hal/rtl8723b_phycfg.c:210:
+	PHY_SetBBReg(Adapter, pPhyReg->rf3wireOffset, bMaskDWord, DataAndAddr);

CHECK: Please don't use multiple blank lines
#213: FILE: ./hal/rtl8723b_phycfg.c:213:
+
+

CHECK: Lines should not end with a '('
#227: FILE: ./hal/rtl8723b_phycfg.c:227:
+u32 PHY_QueryRFReg_8723B(

CHECK: Avoid CamelCase: <Original_Value>
#234: FILE: ./hal/rtl8723b_phycfg.c:234:
+	u32 Original_Value, BitShift;

CHECK: Lines should not end with a '('
#255: FILE: ./hal/rtl8723b_phycfg.c:255:
+void PHY_SetRFReg_8723B(

CHECK: spaces preferred around that '<<' (ctx:VxV)
#269: FILE: ./hal/rtl8723b_phycfg.c:269:
+		Data = ((Original_Value & (~BitMask)) | (Data<<BitShift));
 		                                             ^

CHECK: Please don't use multiple blank lines
#275: FILE: ./hal/rtl8723b_phycfg.c:275:
+
+

CHECK: Please don't use multiple blank lines
#280: FILE: ./hal/rtl8723b_phycfg.c:280:
+
+

CHECK: Avoid CamelCase: <PHY_MACConfig8723B>
#290: FILE: ./hal/rtl8723b_phycfg.c:290:
+s32 PHY_MACConfig8723B(struct adapter *Adapter)

CHECK: Avoid CamelCase: <phy_InitBBRFRegisterDefinition>
#305: FILE: ./hal/rtl8723b_phycfg.c:305:
+static void phy_InitBBRFRegisterDefinition(struct adapter *Adapter)

CHECK: line length of 115 exceeds 100 columns
#310: FILE: ./hal/rtl8723b_phycfg.c:310:
+	pHalData->PHYRegDef[RF_PATH_A].rfintfs = rFPGA0_XAB_RFInterfaceSW; /*  16 LSBs if read 32-bit from 0x870 */

CHECK: line length of 134 exceeds 100 columns
#311: FILE: ./hal/rtl8723b_phycfg.c:311:
+	pHalData->PHYRegDef[RF_PATH_B].rfintfs = rFPGA0_XAB_RFInterfaceSW; /*  16 MSBs if read 32-bit from 0x870 (16-bit for 0x872) */

CHECK: line length of 114 exceeds 100 columns
#314: FILE: ./hal/rtl8723b_phycfg.c:314:
+	pHalData->PHYRegDef[RF_PATH_A].rfintfo = rFPGA0_XA_RFInterfaceOE; /*  16 LSBs if read 32-bit from 0x860 */

CHECK: line length of 114 exceeds 100 columns
#315: FILE: ./hal/rtl8723b_phycfg.c:315:
+	pHalData->PHYRegDef[RF_PATH_B].rfintfo = rFPGA0_XB_RFInterfaceOE; /*  16 LSBs if read 32-bit from 0x864 */

CHECK: line length of 133 exceeds 100 columns
#318: FILE: ./hal/rtl8723b_phycfg.c:318:
+	pHalData->PHYRegDef[RF_PATH_A].rfintfe = rFPGA0_XA_RFInterfaceOE; /*  16 MSBs if read 32-bit from 0x860 (16-bit for 0x862) */

CHECK: line length of 133 exceeds 100 columns
#319: FILE: ./hal/rtl8723b_phycfg.c:319:
+	pHalData->PHYRegDef[RF_PATH_B].rfintfe = rFPGA0_XB_RFInterfaceOE; /*  16 MSBs if read 32-bit from 0x864 (16-bit for 0x866) */

CHECK: Avoid CamelCase: <rFPGA0_XA_LSSIParameter>
#321: FILE: ./hal/rtl8723b_phycfg.c:321:
+	pHalData->PHYRegDef[RF_PATH_A].rf3wireOffset = rFPGA0_XA_LSSIParameter; /* LSSI Parameter */

CHECK: Avoid CamelCase: <rFPGA0_XB_LSSIParameter>
#322: FILE: ./hal/rtl8723b_phycfg.c:322:
+	pHalData->PHYRegDef[RF_PATH_B].rf3wireOffset = rFPGA0_XB_LSSIParameter;

CHECK: line length of 109 exceeds 100 columns
#324: FILE: ./hal/rtl8723b_phycfg.c:324:
+	pHalData->PHYRegDef[RF_PATH_A].rfHSSIPara2 = rFPGA0_XA_HSSIParameter2;  /* wire control parameter2 */

CHECK: Avoid CamelCase: <rfHSSIPara2>
#324: FILE: ./hal/rtl8723b_phycfg.c:324:
+	pHalData->PHYRegDef[RF_PATH_A].rfHSSIPara2 = rFPGA0_XA_HSSIParameter2;  /* wire control parameter2 */

CHECK: line length of 109 exceeds 100 columns
#325: FILE: ./hal/rtl8723b_phycfg.c:325:
+	pHalData->PHYRegDef[RF_PATH_B].rfHSSIPara2 = rFPGA0_XB_HSSIParameter2;  /* wire control parameter2 */

CHECK: Avoid CamelCase: <rFPGA0_XA_LSSIReadBack>
#328: FILE: ./hal/rtl8723b_phycfg.c:328:
+	pHalData->PHYRegDef[RF_PATH_A].rfLSSIReadBack = rFPGA0_XA_LSSIReadBack;

CHECK: Avoid CamelCase: <rFPGA0_XB_LSSIReadBack>
#329: FILE: ./hal/rtl8723b_phycfg.c:329:
+	pHalData->PHYRegDef[RF_PATH_B].rfLSSIReadBack = rFPGA0_XB_LSSIReadBack;

CHECK: Avoid CamelCase: <TransceiverA_HSPI_Readback>
#330: FILE: ./hal/rtl8723b_phycfg.c:330:
+	pHalData->PHYRegDef[RF_PATH_A].rfLSSIReadBackPi = TransceiverA_HSPI_Readback;

CHECK: Avoid CamelCase: <TransceiverB_HSPI_Readback>
#331: FILE: ./hal/rtl8723b_phycfg.c:331:
+	pHalData->PHYRegDef[RF_PATH_B].rfLSSIReadBackPi = TransceiverB_HSPI_Readback;

CHECK: Blank lines aren't necessary before a close brace '}'
#333: FILE: ./hal/rtl8723b_phycfg.c:333:
+
+}

CHECK: Avoid CamelCase: <phy_BB8723b_Config_ParaFile>
#335: FILE: ./hal/rtl8723b_phycfg.c:335:
+static int phy_BB8723b_Config_ParaFile(struct adapter *Adapter)

CHECK: Lines should not end with a '('
#341: FILE: ./hal/rtl8723b_phycfg.c:341:
+	if (

CHECK: line length of 101 exceeds 100 columns
#343: FILE: ./hal/rtl8723b_phycfg.c:343:
+		(Adapter->registrypriv.RegEnableTxPowerLimit == 2 && pHalData->EEPROMRegulatory == 1)

CHECK: Lines should not end with a '('
#356: FILE: ./hal/rtl8723b_phycfg.c:356:
+	if (

CHECK: line length of 102 exceeds 100 columns
#358: FILE: ./hal/rtl8723b_phycfg.c:358:
+		(Adapter->registrypriv.RegEnableTxPowerByRate == 2 && pHalData->EEPROMRegulatory != 2)

CHECK: Lines should not end with a '('
#366: FILE: ./hal/rtl8723b_phycfg.c:366:
+		if (

CHECK: line length of 109 exceeds 100 columns
#368: FILE: ./hal/rtl8723b_phycfg.c:368:
+			(Adapter->registrypriv.RegEnableTxPowerLimit == 2 && pHalData->EEPROMRegulatory == 1)

CHECK: Please don't use multiple blank lines
#381: FILE: ./hal/rtl8723b_phycfg.c:381:
+
+

CHECK: Avoid CamelCase: <RegVal>
#386: FILE: ./hal/rtl8723b_phycfg.c:386:
+	u32 RegVal;

CHECK: spaces preferred around that '|' (ctx:VxV)
#393: FILE: ./hal/rtl8723b_phycfg.c:393:
+	rtw_write16(Adapter, REG_SYS_FUNC_EN, (u16)(RegVal|BIT13|BIT0|BIT1));
 	                                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#393: FILE: ./hal/rtl8723b_phycfg.c:393:
+	rtw_write16(Adapter, REG_SYS_FUNC_EN, (u16)(RegVal|BIT13|BIT0|BIT1));
 	                                                        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#393: FILE: ./hal/rtl8723b_phycfg.c:393:
+	rtw_write16(Adapter, REG_SYS_FUNC_EN, (u16)(RegVal|BIT13|BIT0|BIT1));
 	                                                             ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#397: FILE: ./hal/rtl8723b_phycfg.c:397:
+	rtw_write8(Adapter, REG_RF_CTRL, RF_EN|RF_RSTB|RF_SDMRSTB);
 	                                      ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#397: FILE: ./hal/rtl8723b_phycfg.c:397:
+	rtw_write8(Adapter, REG_RF_CTRL, RF_EN|RF_RSTB|RF_SDMRSTB);
 	                                              ^

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#399: FILE: ./hal/rtl8723b_phycfg.c:399:
+	msleep(1);

CHECK: line length of 105 exceeds 100 columns
#403: FILE: ./hal/rtl8723b_phycfg.c:403:
+	rtw_write8(Adapter, REG_SYS_FUNC_EN, FEN_PPLL|FEN_PCIEA|FEN_DIO_PCIE|FEN_BB_GLB_RSTn|FEN_BBRSTB);

CHECK: spaces preferred around that '|' (ctx:VxV)
#403: FILE: ./hal/rtl8723b_phycfg.c:403:
+	rtw_write8(Adapter, REG_SYS_FUNC_EN, FEN_PPLL|FEN_PCIEA|FEN_DIO_PCIE|FEN_BB_GLB_RSTn|FEN_BBRSTB);
 	                                             ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#403: FILE: ./hal/rtl8723b_phycfg.c:403:
+	rtw_write8(Adapter, REG_SYS_FUNC_EN, FEN_PPLL|FEN_PCIEA|FEN_DIO_PCIE|FEN_BB_GLB_RSTn|FEN_BBRSTB);
 	                                                       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#403: FILE: ./hal/rtl8723b_phycfg.c:403:
+	rtw_write8(Adapter, REG_SYS_FUNC_EN, FEN_PPLL|FEN_PCIEA|FEN_DIO_PCIE|FEN_BB_GLB_RSTn|FEN_BBRSTB);
 	                                                                    ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#403: FILE: ./hal/rtl8723b_phycfg.c:403:
+	rtw_write8(Adapter, REG_SYS_FUNC_EN, FEN_PPLL|FEN_PCIEA|FEN_DIO_PCIE|FEN_BB_GLB_RSTn|FEN_BBRSTB);
 	                                                                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#405: FILE: ./hal/rtl8723b_phycfg.c:405:
+	rtw_write8(Adapter, REG_AFE_XTAL_CTRL+1, 0x80);
 	                                     ^

CHECK: Avoid CamelCase: <PHY_RF6052_Config8723B>
#434: FILE: ./hal/rtl8723b_phycfg.c:434:
+	rtStatus = PHY_RF6052_Config8723B(Adapter);

CHECK: line length of 111 exceeds 100 columns
#441: FILE: ./hal/rtl8723b_phycfg.c:441:
+/**************************************************************************************************************

CHECK: line length of 104 exceeds 100 columns
#445: FILE: ./hal/rtl8723b_phycfg.c:445:
+ *                                                                                    <20120830, Kordan>

CHECK: line length of 112 exceeds 100 columns
#446: FILE: ./hal/rtl8723b_phycfg.c:446:
+ **************************************************************************************************************/

CHECK: Lines should not end with a '('
#448: FILE: ./hal/rtl8723b_phycfg.c:448:
+void PHY_SetTxPowerIndex(

CHECK: Avoid CamelCase: <PowerIndex>
#450: FILE: ./hal/rtl8723b_phycfg.c:450:
+	u32 PowerIndex,

CHECK: Avoid CamelCase: <rTxAGC_A_CCK1_Mcs32>
#458: FILE: ./hal/rtl8723b_phycfg.c:458:
+			PHY_SetBBReg(Adapter, rTxAGC_A_CCK1_Mcs32, bMaskByte1, PowerIndex);

CHECK: Avoid CamelCase: <bMaskByte1>
#458: FILE: ./hal/rtl8723b_phycfg.c:458:
+			PHY_SetBBReg(Adapter, rTxAGC_A_CCK1_Mcs32, bMaskByte1, PowerIndex);

CHECK: Avoid CamelCase: <rTxAGC_B_CCK11_A_CCK2_11>
#461: FILE: ./hal/rtl8723b_phycfg.c:461:
+			PHY_SetBBReg(Adapter, rTxAGC_B_CCK11_A_CCK2_11, bMaskByte1, PowerIndex);

CHECK: Avoid CamelCase: <rTxAGC_A_Rate18_06>
#471: FILE: ./hal/rtl8723b_phycfg.c:471:
+			PHY_SetBBReg(Adapter, rTxAGC_A_Rate18_06, bMaskByte0, PowerIndex);

CHECK: Avoid CamelCase: <rTxAGC_A_Rate54_24>
#484: FILE: ./hal/rtl8723b_phycfg.c:484:
+			PHY_SetBBReg(Adapter, rTxAGC_A_Rate54_24, bMaskByte0, PowerIndex);

CHECK: Avoid CamelCase: <rTxAGC_A_Mcs03_Mcs00>
#497: FILE: ./hal/rtl8723b_phycfg.c:497:
+			PHY_SetBBReg(Adapter, rTxAGC_A_Mcs03_Mcs00, bMaskByte0, PowerIndex);

CHECK: Avoid CamelCase: <rTxAGC_A_Mcs07_Mcs04>
#510: FILE: ./hal/rtl8723b_phycfg.c:510:
+			PHY_SetBBReg(Adapter, rTxAGC_A_Mcs07_Mcs04, bMaskByte0, PowerIndex);

CHECK: Lines should not end with a '('
#528: FILE: ./hal/rtl8723b_phycfg.c:528:
+u8 PHY_GetTxPowerIndex(

CHECK: Avoid CamelCase: <powerDiffByRate>
#537: FILE: ./hal/rtl8723b_phycfg.c:537:
+	s8 txPower = 0, powerDiffByRate = 0, limit = 0;

CHECK: No space is necessary after a cast
#539: FILE: ./hal/rtl8723b_phycfg.c:539:
+	txPower = (s8) PHY_GetTxPowerIndexBase(padapter, RFPath, Rate, BandWidth, Channel);

CHECK: Lines should not end with a '('
#542: FILE: ./hal/rtl8723b_phycfg.c:542:
+	limit = phy_get_tx_pwr_lmt(

CHECK: No space is necessary after a cast
#559: FILE: ./hal/rtl8723b_phycfg.c:559:
+	return (u8) txPower;

CHECK: Avoid CamelCase: <pDM_FatTable>
#566: FILE: ./hal/rtl8723b_phycfg.c:566:
+	struct fat_t *pDM_FatTable = &pDM_Odm->DM_FatTable;

CHECK: Avoid CamelCase: <DM_FatTable>
#566: FILE: ./hal/rtl8723b_phycfg.c:566:
+	struct fat_t *pDM_FatTable = &pDM_Odm->DM_FatTable;

CHECK: Avoid CamelCase: <AntDivCfg>
#569: FILE: ./hal/rtl8723b_phycfg.c:569:
+	if (pHalData->AntDivCfg) {/*  antenna diversity Enable */

CHECK: Lines should not end with a '('
#578: FILE: ./hal/rtl8723b_phycfg.c:578:
+static void phy_SetRegBW_8723B(

CHECK: Avoid CamelCase: <phy_SetRegBW_8723B>
#578: FILE: ./hal/rtl8723b_phycfg.c:578:
+static void phy_SetRegBW_8723B(

CHECK: Avoid CamelCase: <CurrentBW>
#579: FILE: ./hal/rtl8723b_phycfg.c:579:
+	struct adapter *Adapter, enum channel_width CurrentBW

CHECK: Avoid CamelCase: <RegRfMod_BW>
#582: FILE: ./hal/rtl8723b_phycfg.c:582:
+	u16 RegRfMod_BW, u2tmp = 0;

WARNING: Missing a blank line after declarations
#583: FILE: ./hal/rtl8723b_phycfg.c:583:
+	u16 RegRfMod_BW, u2tmp = 0;
+	RegRfMod_BW = rtw_read16(Adapter, REG_TRXPTCL_CTL_8723B);

CHECK: line length of 112 exceeds 100 columns
#587: FILE: ./hal/rtl8723b_phycfg.c:587:
+		rtw_write16(Adapter, REG_TRXPTCL_CTL_8723B, (RegRfMod_BW & 0xFE7F)); /*  BIT 7 = 0, BIT 8 = 0 */

CHECK: line length of 106 exceeds 100 columns
#592: FILE: ./hal/rtl8723b_phycfg.c:592:
+		rtw_write16(Adapter, REG_TRXPTCL_CTL_8723B, (u2tmp & 0xFEFF)); /*  BIT 7 = 1, BIT 8 = 0 */

CHECK: Avoid CamelCase: <phy_GetSecondaryChnl_8723B>
#600: FILE: ./hal/rtl8723b_phycfg.c:600:
+static u8 phy_GetSecondaryChnl_8723B(struct adapter *Adapter)

CHECK: Avoid CamelCase: <SCSettingOf40>
#602: FILE: ./hal/rtl8723b_phycfg.c:602:
+	u8 SCSettingOf40 = 0, SCSettingOf20 = 0;

CHECK: Avoid CamelCase: <SCSettingOf20>
#602: FILE: ./hal/rtl8723b_phycfg.c:602:
+	u8 SCSettingOf40 = 0, SCSettingOf20 = 0;

CHECK: Avoid CamelCase: <phy_PostSetBwMode8723B>
#615: FILE: ./hal/rtl8723b_phycfg.c:615:
+static void phy_PostSetBwMode8723B(struct adapter *Adapter)

CHECK: Avoid CamelCase: <SubChnlNum>
#617: FILE: ./hal/rtl8723b_phycfg.c:617:
+	u8 SubChnlNum = 0;

CHECK: Please don't use multiple blank lines
#620: FILE: ./hal/rtl8723b_phycfg.c:620:
+
+

CHECK: Avoid CamelCase: <rFPGA0_RFMOD>
#634: FILE: ./hal/rtl8723b_phycfg.c:634:
+		PHY_SetBBReg(Adapter, rFPGA0_RFMOD, bRFMOD, 0x0);

CHECK: Avoid CamelCase: <bRFMOD>
#634: FILE: ./hal/rtl8723b_phycfg.c:634:
+		PHY_SetBBReg(Adapter, rFPGA0_RFMOD, bRFMOD, 0x0);

CHECK: Avoid CamelCase: <rFPGA1_RFMOD>
#636: FILE: ./hal/rtl8723b_phycfg.c:636:
+		PHY_SetBBReg(Adapter, rFPGA1_RFMOD, bRFMOD, 0x0);

CHECK: spaces preferred around that '|' (ctx:VxV)
#638: FILE: ./hal/rtl8723b_phycfg.c:638:
+		PHY_SetBBReg(Adapter, rOFDM0_TxPseudoNoiseWgt, (BIT31|BIT30), 0x0);
 		                                                     ^

CHECK: Avoid CamelCase: <rOFDM0_TxPseudoNoiseWgt>
#638: FILE: ./hal/rtl8723b_phycfg.c:638:
+		PHY_SetBBReg(Adapter, rOFDM0_TxPseudoNoiseWgt, (BIT31|BIT30), 0x0);

CHECK: line length of 104 exceeds 100 columns
#647: FILE: ./hal/rtl8723b_phycfg.c:647:
+		/*  Set Control channel to upper or lower. These settings are required only for 40MHz */

CHECK: spaces preferred around that '>>' (ctx:VxV)
#648: FILE: ./hal/rtl8723b_phycfg.c:648:
+		PHY_SetBBReg(Adapter, rCCK0_System, bCCKSideBand, (pHalData->nCur40MhzPrimeSC>>1));
 		                                                                             ^

CHECK: Avoid CamelCase: <rCCK0_System>
#648: FILE: ./hal/rtl8723b_phycfg.c:648:
+		PHY_SetBBReg(Adapter, rCCK0_System, bCCKSideBand, (pHalData->nCur40MhzPrimeSC>>1));

CHECK: Avoid CamelCase: <bCCKSideBand>
#648: FILE: ./hal/rtl8723b_phycfg.c:648:
+		PHY_SetBBReg(Adapter, rCCK0_System, bCCKSideBand, (pHalData->nCur40MhzPrimeSC>>1));

CHECK: Avoid CamelCase: <rOFDM1_LSTF>
#650: FILE: ./hal/rtl8723b_phycfg.c:650:
+		PHY_SetBBReg(Adapter, rOFDM1_LSTF, 0xC00, pHalData->nCur40MhzPrimeSC);

CHECK: line length of 129 exceeds 100 columns
#652: FILE: ./hal/rtl8723b_phycfg.c:652:
+		PHY_SetBBReg(Adapter, 0x818, (BIT26|BIT27), (pHalData->nCur40MhzPrimeSC == HAL_PRIME_CHNL_OFFSET_LOWER) ? 2 : 1);

CHECK: spaces preferred around that '|' (ctx:VxV)
#652: FILE: ./hal/rtl8723b_phycfg.c:652:
+		PHY_SetBBReg(Adapter, 0x818, (BIT26|BIT27), (pHalData->nCur40MhzPrimeSC == HAL_PRIME_CHNL_OFFSET_LOWER) ? 2 : 1);
 		                                   ^

CHECK: Avoid CamelCase: <PHY_RF6052SetBandwidth8723B>
#659: FILE: ./hal/rtl8723b_phycfg.c:659:
+	PHY_RF6052SetBandwidth8723B(Adapter, pHalData->CurrentChannelBW);

CHECK: Avoid CamelCase: <phy_SwChnl8723B>
#662: FILE: ./hal/rtl8723b_phycfg.c:662:
+static void phy_SwChnl8723B(struct adapter *padapter)

CHECK: Avoid CamelCase: <channelToSW>
#665: FILE: ./hal/rtl8723b_phycfg.c:665:
+	u8 channelToSW = pHalData->CurrentChannel;

CHECK: Avoid CamelCase: <RfRegChnlVal>
#669: FILE: ./hal/rtl8723b_phycfg.c:669:
+	pHalData->RfRegChnlVal[0] = ((pHalData->RfRegChnlVal[0] & 0xfffff00) | channelToSW);

CHECK: Avoid CamelCase: <phy_SwChnlAndSetBwMode8723B>
#674: FILE: ./hal/rtl8723b_phycfg.c:674:
+static void phy_SwChnlAndSetBwMode8723B(struct adapter *Adapter)

CHECK: Avoid CamelCase: <bSwChnl>
#681: FILE: ./hal/rtl8723b_phycfg.c:681:
+	if (pHalData->bSwChnl) {

CHECK: Avoid CamelCase: <bSetChnlBW>
#686: FILE: ./hal/rtl8723b_phycfg.c:686:
+	if (pHalData->bSetChnlBW) {

CHECK: Lines should not end with a '('
#694: FILE: ./hal/rtl8723b_phycfg.c:694:
+static void PHY_HandleSwChnlAndSetBW8723B(

CHECK: Avoid CamelCase: <bSwitchChannel>
#696: FILE: ./hal/rtl8723b_phycfg.c:696:
+	bool bSwitchChannel,

CHECK: Avoid CamelCase: <bSetBandWidth>
#697: FILE: ./hal/rtl8723b_phycfg.c:697:
+	bool bSetBandWidth,

CHECK: Avoid CamelCase: <ChnlWidth>
#699: FILE: ./hal/rtl8723b_phycfg.c:699:
+	enum channel_width ChnlWidth,

CHECK: Avoid CamelCase: <ExtChnlOffsetOf40MHz>
#700: FILE: ./hal/rtl8723b_phycfg.c:700:
+	enum extchnl_offset ExtChnlOffsetOf40MHz,

CHECK: Avoid CamelCase: <ExtChnlOffsetOf80MHz>
#701: FILE: ./hal/rtl8723b_phycfg.c:701:
+	enum extchnl_offset ExtChnlOffsetOf80MHz,

CHECK: Avoid CamelCase: <CenterFrequencyIndex1>
#702: FILE: ./hal/rtl8723b_phycfg.c:702:
+	u8 CenterFrequencyIndex1

CHECK: Avoid CamelCase: <tmpChannel>
#707: FILE: ./hal/rtl8723b_phycfg.c:707:
+	u8 tmpChannel = pHalData->CurrentChannel;

CHECK: Avoid CamelCase: <tmpBW>
#708: FILE: ./hal/rtl8723b_phycfg.c:708:
+	enum channel_width tmpBW = pHalData->CurrentChannelBW;

CHECK: Avoid CamelCase: <tmpnCur40MhzPrimeSC>
#709: FILE: ./hal/rtl8723b_phycfg.c:709:
+	u8 tmpnCur40MhzPrimeSC = pHalData->nCur40MhzPrimeSC;

CHECK: Avoid CamelCase: <tmpnCur80MhzPrimeSC>
#710: FILE: ./hal/rtl8723b_phycfg.c:710:
+	u8 tmpnCur80MhzPrimeSC = pHalData->nCur80MhzPrimeSC;

CHECK: Avoid CamelCase: <nCur80MhzPrimeSC>
#710: FILE: ./hal/rtl8723b_phycfg.c:710:
+	u8 tmpnCur80MhzPrimeSC = pHalData->nCur80MhzPrimeSC;

CHECK: Avoid CamelCase: <tmpCenterFrequencyIndex1>
#711: FILE: ./hal/rtl8723b_phycfg.c:711:
+	u8 tmpCenterFrequencyIndex1 = pHalData->CurrentCenterFrequencyIndex1;

CHECK: Avoid CamelCase: <CurrentCenterFrequencyIndex1>
#711: FILE: ./hal/rtl8723b_phycfg.c:711:
+	u8 tmpCenterFrequencyIndex1 = pHalData->CurrentCenterFrequencyIndex1;

CHECK: Please don't use multiple blank lines
#731: FILE: ./hal/rtl8723b_phycfg.c:731:
+
+

CHECK: Please don't use multiple blank lines
#737: FILE: ./hal/rtl8723b_phycfg.c:737:
+
+

CHECK: Unnecessary parentheses around '!Adapter->bDriverStopped'
#746: FILE: ./hal/rtl8723b_phycfg.c:746:
+	if ((!Adapter->bDriverStopped) && (!Adapter->bSurpriseRemoved)) {

CHECK: Unnecessary parentheses around '!Adapter->bSurpriseRemoved'
#746: FILE: ./hal/rtl8723b_phycfg.c:746:
+	if ((!Adapter->bDriverStopped) && (!Adapter->bSurpriseRemoved)) {

CHECK: Lines should not end with a '('
#769: FILE: ./hal/rtl8723b_phycfg.c:769:
+void PHY_SetSwChnlBWMode8723B(

CHECK: line length of 108 exceeds 100 columns
#777: FILE: ./hal/rtl8723b_phycfg.c:777:
+	PHY_HandleSwChnlAndSetBW8723B(Adapter, true, true, channel, Bandwidth, Offset40, Offset80, channel);

total: 0 errors, 2 warnings, 183 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_phycfg.c has style problems, please review.
-----------------------
./hal/rtl8723b_phycfg.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_phycfg.o has style problems, please review.
-----------------------
./hal/rtl8723b_rf6052.c
-----------------------
WARNING: Block comments should align the * on each line
#27: FILE: ./hal/rtl8723b_rf6052.c:27:
+ *
+******************************************************************************/

CHECK: Please don't use multiple blank lines
#34: FILE: ./hal/rtl8723b_rf6052.c:34:
+
+

CHECK: Please don't use multiple blank lines
#38: FILE: ./hal/rtl8723b_rf6052.c:38:
+
+

WARNING: Block comments use a trailing */ on a separate line
#56: FILE: ./hal/rtl8723b_rf6052.c:56:
+ *---------------------------------------------------------------------------*/

CHECK: Lines should not end with a '('
#57: FILE: ./hal/rtl8723b_rf6052.c:57:
+void PHY_RF6052SetBandwidth8723B(

CHECK: line length of 103 exceeds 100 columns
#65: FILE: ./hal/rtl8723b_rf6052.c:65:
+		pHalData->RfRegChnlVal[0] = ((pHalData->RfRegChnlVal[0] & 0xfffff3ff) | BIT10 | BIT11);

CHECK: line length of 105 exceeds 100 columns
#66: FILE: ./hal/rtl8723b_rf6052.c:66:
+		PHY_SetRFReg(Adapter, RF_PATH_A, RF_CHNLBW, bRFRegOffsetMask, pHalData->RfRegChnlVal[0]);

CHECK: line length of 105 exceeds 100 columns
#67: FILE: ./hal/rtl8723b_rf6052.c:67:
+		PHY_SetRFReg(Adapter, RF_PATH_B, RF_CHNLBW, bRFRegOffsetMask, pHalData->RfRegChnlVal[0]);

CHECK: line length of 105 exceeds 100 columns
#72: FILE: ./hal/rtl8723b_rf6052.c:72:
+		PHY_SetRFReg(Adapter, RF_PATH_A, RF_CHNLBW, bRFRegOffsetMask, pHalData->RfRegChnlVal[0]);

CHECK: line length of 105 exceeds 100 columns
#73: FILE: ./hal/rtl8723b_rf6052.c:73:
+		PHY_SetRFReg(Adapter, RF_PATH_B, RF_CHNLBW, bRFRegOffsetMask, pHalData->RfRegChnlVal[0]);

CHECK: Blank lines aren't necessary before a close brace '}'
#80: FILE: ./hal/rtl8723b_rf6052.c:80:
+
+}

CHECK: Avoid CamelCase: <phy_RF6052_Config_ParaFile>
#82: FILE: ./hal/rtl8723b_rf6052.c:82:
+static int phy_RF6052_Config_ParaFile(struct adapter *Adapter)

CHECK: Avoid CamelCase: <u4RegValue>
#84: FILE: ./hal/rtl8723b_rf6052.c:84:
+	u32 u4RegValue = 0;

CHECK: Avoid CamelCase: <NumTotalRFPath>
#93: FILE: ./hal/rtl8723b_rf6052.c:93:
+	for (eRFPath = 0; eRFPath < pHalData->NumTotalRFPath; eRFPath++) {

CHECK: Blank lines aren't necessary after an open brace '{'
#94: FILE: ./hal/rtl8723b_rf6052.c:94:
+	for (eRFPath = 0; eRFPath < pHalData->NumTotalRFPath; eRFPath++) {
+

CHECK: Avoid CamelCase: <bRFSI_RFENV>
#100: FILE: ./hal/rtl8723b_rf6052.c:100:
+			u4RegValue = PHY_QueryBBReg(Adapter, pPhyReg->rfintfs, bRFSI_RFENV);

CHECK: line length of 119 exceeds 100 columns
#116: FILE: ./hal/rtl8723b_rf6052.c:116:
+		PHY_SetBBReg(Adapter, pPhyReg->rfHSSIPara2, b3WireAddressLength, 0x0);	/*  Set 1 to 4 bits for 8255 */

CHECK: Avoid CamelCase: <b3WireAddressLength>
#116: FILE: ./hal/rtl8723b_rf6052.c:116:
+		PHY_SetBBReg(Adapter, pPhyReg->rfHSSIPara2, b3WireAddressLength, 0x0);	/*  Set 1 to 4 bits for 8255 */

CHECK: line length of 121 exceeds 100 columns
#119: FILE: ./hal/rtl8723b_rf6052.c:119:
+		PHY_SetBBReg(Adapter, pPhyReg->rfHSSIPara2, b3WireDataLength, 0x0);	/*  Set 0 to 12  bits for 8255 */

CHECK: Avoid CamelCase: <b3WireDataLength>
#119: FILE: ./hal/rtl8723b_rf6052.c:119:
+		PHY_SetBBReg(Adapter, pPhyReg->rfHSSIPara2, b3WireDataLength, 0x0);	/*  Set 0 to 12  bits for 8255 */

CHECK: Please don't use multiple blank lines
#151: FILE: ./hal/rtl8723b_rf6052.c:151:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#166: FILE: ./hal/rtl8723b_rf6052.c:166:
+
+}

total: 0 errors, 2 warnings, 20 checks, 168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_rf6052.c has style problems, please review.
-----------------------
./hal/rtl8723b_rf6052.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_rf6052.o has style problems, please review.
-----------------------
./hal/rtl8723b_rxdesc.c
-----------------------
CHECK: Please don't use multiple blank lines
#52: FILE: ./hal/rtl8723b_rxdesc.c:52:
+
+

total: 0 errors, 0 warnings, 1 checks, 70 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_rxdesc.c has style problems, please review.
-----------------------
./hal/rtl8723b_rxdesc.o
-----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723b_rxdesc.o has style problems, please review.
----------------------
./hal/rtl8723bs_recv.c
----------------------
CHECK: Avoid CamelCase: <IsFrameTypeCtrl>
#104: FILE: ./hal/rtl8723bs_recv.c:104:
+	pkt_info.bssid_match = ((!IsFrameTypeCtrl(wlanhdr)) &&

CHECK: Please don't use multiple blank lines
#113: FILE: ./hal/rtl8723bs_recv.c:113:
+
+

CHECK: Alignment should match open parenthesis
#131: FILE: ./hal/rtl8723bs_recv.c:131:
+	odm_phy_status_query(&p_hal_data->odmpriv, p_phy_info,
+			   (u8 *)pphy_status, &(pkt_info));

CHECK: Lines should not end with a '('
#136: FILE: ./hal/rtl8723bs_recv.c:136:
+	if (

WARNING: Missing a blank line after declarations
#146: FILE: ./hal/rtl8723bs_recv.c:146:
+		u32 adhoc_state = WIFI_ADHOC_STATE | WIFI_ADHOC_MASTER_STATE;
+		if (check_fwstate(&padapter->mlmepriv, adhoc_state))

CHECK: Avoid CamelCase: <ReceiveConfig>
#198: FILE: ./hal/rtl8723bs_recv.c:198:
+	if ((!(p_hal_data->ReceiveConfig & RCR_ACRC32)) && pattrib->crc_err) {

CHECK: Unnecessary parentheses around 'pattrib->crc_err'
#268: FILE: ./hal/rtl8723bs_recv.c:268:
+			if ((pattrib->crc_err) || (pattrib->icv_err)) {

CHECK: Unnecessary parentheses around 'pattrib->icv_err'
#268: FILE: ./hal/rtl8723bs_recv.c:268:
+			if ((pattrib->crc_err) || (pattrib->icv_err)) {

WARNING: please, no space before tabs
#272: FILE: ./hal/rtl8723bs_recv.c:272:
+^I^I^I^I/* ^IModified by Albert 20101213 */$

WARNING: please, no space before tabs
#273: FILE: ./hal/rtl8723bs_recv.c:273:
+^I^I^I^I/* ^IFor 8 bytes IP header alignment. */$

CHECK: line length of 109 exceeds 100 columns
#274: FILE: ./hal/rtl8723bs_recv.c:274:
+				if (pattrib->qos)	/* 	Qos data, wireless lan header length is 26 */

WARNING: please, no space before tabs
#274: FILE: ./hal/rtl8723bs_recv.c:274:
+^I^I^I^Iif (pattrib->qos)^I/* ^IQos data, wireless lan header length is 26 */$

CHECK: line length of 132 exceeds 100 columns
#281: FILE: ./hal/rtl8723bs_recv.c:281:
+				/*  for first fragment packet, driver need allocate 1536+drvinfo_sz+RXDESC_SIZE to defrag packet. */

CHECK: line length of 104 exceeds 100 columns
#282: FILE: ./hal/rtl8723bs_recv.c:282:
+				/*  modify alloc_sz for recvive crc error packet by thomas 2011-06-02 */

CHECK: Unnecessary parentheses around 'pattrib->mfrag == 1'
#283: FILE: ./hal/rtl8723bs_recv.c:283:
+				if ((pattrib->mfrag == 1) && (pattrib->frag_num == 0)) {

CHECK: Unnecessary parentheses around 'pattrib->frag_num == 0'
#283: FILE: ./hal/rtl8723bs_recv.c:283:
+				if ((pattrib->mfrag == 1) && (pattrib->frag_num == 0)) {

CHECK: line length of 107 exceeds 100 columns
#290: FILE: ./hal/rtl8723bs_recv.c:290:
+					/* 	6 is for IP header 8 bytes alignment in QoS packet case. */

WARNING: please, no space before tabs
#290: FILE: ./hal/rtl8723bs_recv.c:290:
+^I^I^I^I^I/* ^I6 is for IP header 8 bytes alignment in QoS packet case. */$

WARNING: please, no space before tabs
#291: FILE: ./hal/rtl8723bs_recv.c:291:
+^I^I^I^I^I/* ^I8 is for skb->data 4 bytes alignment. */$

CHECK: line length of 146 exceeds 100 columns
#303: FILE: ./hal/rtl8723bs_recv.c:303:
+				skb_reserve(pkt_copy, 8 - ((SIZE_PTR)(pkt_copy->data) & 7));/* force pkt_copy->data at 8-byte alignment address */

CHECK: line length of 133 exceeds 100 columns
#304: FILE: ./hal/rtl8723bs_recv.c:304:
+				skb_reserve(pkt_copy, shift_sz);/* force ip_hdr at 8-byte alignment address according to shift_sz. */

CHECK: line length of 106 exceeds 100 columns
#305: FILE: ./hal/rtl8723bs_recv.c:305:
+				memcpy(pkt_copy->data, (ptr + rx_report_sz + pattrib->shift_sz), skb_len);

CHECK: line length of 103 exceeds 100 columns
#307: FILE: ./hal/rtl8723bs_recv.c:307:
+				precvframe->u.hdr.rx_data = precvframe->u.hdr.rx_tail = pkt_copy->data;

CHECK: multiple assignments should be avoided
#307: FILE: ./hal/rtl8723bs_recv.c:307:
+				precvframe->u.hdr.rx_data = precvframe->u.hdr.rx_tail = pkt_copy->data;

CHECK: line length of 109 exceeds 100 columns
#327: FILE: ./hal/rtl8723bs_recv.c:327:
+						update_recvframe_phyinfo(precvframe, (struct phy_stat *)ptr);

CHECK: spaces preferred around that '-' (ctx:VxV)
#339: FILE: ./hal/rtl8723bs_recv.c:339:
+					C2hEvent.CmdLen = (len_c2h-2);
 					                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#340: FILE: ./hal/rtl8723bs_recv.c:340:
+					pdata_c2h = pbuf_c2h+2;
 					                    ^

CHECK: line length of 107 exceeds 100 columns
#343: FILE: ./hal/rtl8723bs_recv.c:343:
+						CCX_FwC2HTxRpt_8723b(padapter, pdata_c2h, C2hEvent.CmdLen);

CHECK: line length of 132 exceeds 100 columns
#345: FILE: ./hal/rtl8723bs_recv.c:345:
+						rtl8723bs_c2h_packet_handler(padapter, precvframe->u.hdr.rx_data, pattrib->pkt_len);

CHECK: spaces preferred around that '-' (ctx:VxV)
#408: FILE: ./hal/rtl8723bs_recv.c:408:
+				alignment = tmpaddr & (RECVBUFF_ALIGN_SZ-1);
 				                                        ^

total: 0 errors, 6 warnings, 24 checks, 478 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723bs_recv.c has style problems, please review.
----------------------
./hal/rtl8723bs_recv.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723bs_recv.o has style problems, please review.
----------------------
./hal/rtl8723bs_xmit.c
----------------------
CHECK: Avoid CamelCase: <rtw_sdio_wait_enough_TxOQT_space>
#11: FILE: ./hal/rtl8723bs_xmit.c:11:
+static u8 rtw_sdio_wait_enough_TxOQT_space(struct adapter *padapter, u8 agg_num)

CHECK: Avoid CamelCase: <SdioTxOQTFreeSpace>
#16: FILE: ./hal/rtl8723bs_xmit.c:16:
+	while (pHalData->SdioTxOQTFreeSpace < agg_num) {

CHECK: Lines should not end with a '('
#17: FILE: ./hal/rtl8723bs_xmit.c:17:
+		if (

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved'
#17: FILE: ./hal/rtl8723bs_xmit.c:17:
+		if (
+			(padapter->bSurpriseRemoved) ||
+			(padapter->bDriverStopped)
+		)

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped'
#17: FILE: ./hal/rtl8723bs_xmit.c:17:
+		if (
+			(padapter->bSurpriseRemoved) ||
+			(padapter->bDriverStopped)
+		)

CHECK: Avoid CamelCase: <HalQueryTxOQTBufferStatus8723BSdio>
#23: FILE: ./hal/rtl8723bs_xmit.c:23:
+		HalQueryTxOQTBufferStatus8723BSdio(padapter);

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#26: FILE: ./hal/rtl8723bs_xmit.c:26:
+			msleep(1);

CHECK: Avoid CamelCase: <bUpdatePageNum>
#46: FILE: ./hal/rtl8723bs_xmit.c:46:
+	u8 bUpdatePageNum = false;

CHECK: Avoid CamelCase: <HalQueryTxBufferStatus8723BSdio>
#80: FILE: ./hal/rtl8723bs_xmit.c:80:
+			HalQueryTxBufferStatus8723BSdio(padapter);

CHECK: Lines should not end with a '('
#90: FILE: ./hal/rtl8723bs_xmit.c:90:
+	if (

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved'
#90: FILE: ./hal/rtl8723bs_xmit.c:90:
+	if (
+		(padapter->bSurpriseRemoved) ||
+		(padapter->bDriverStopped)
+	)

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped'
#90: FILE: ./hal/rtl8723bs_xmit.c:90:
+	if (
+		(padapter->bSurpriseRemoved) ||
+		(padapter->bDriverStopped)
+	)

WARNING: braces {} are not necessary for single statement blocks
#143: FILE: ./hal/rtl8723bs_xmit.c:143:
+	if (ret != _SUCCESS) {
+		return _SUCCESS;
+	}

WARNING: please, no space before tabs
#149: FILE: ./hal/rtl8723bs_xmit.c:149:
+/* ^Idump secondary adapter xmitbuf */$

CHECK: Lines should not end with a '('
#203: FILE: ./hal/rtl8723bs_xmit.c:203:
+		if (

CHECK: Unnecessary parentheses around 'padapter->mlmepriv.LinkDetectInfo.bHigherBusyTxTraffic'
#203: FILE: ./hal/rtl8723bs_xmit.c:203:
+		if (
+			(check_pending_xmitbuf(pxmitpriv)) &&
+			(padapter->mlmepriv.LinkDetectInfo.bHigherBusyTxTraffic)
+		) {

CHECK: Unnecessary parentheses around 'phwxmit->accnt > 0'
#207: FILE: ./hal/rtl8723bs_xmit.c:207:
+			if ((phwxmit->accnt > 0) && (phwxmit->accnt < 5)) {

CHECK: Unnecessary parentheses around 'phwxmit->accnt < 5'
#207: FILE: ./hal/rtl8723bs_xmit.c:207:
+			if ((phwxmit->accnt > 0) && (phwxmit->accnt < 5)) {

CHECK: Alignment should match open parenthesis
#235: FILE: ./hal/rtl8723bs_xmit.c:235:
+				if (!pxmitbuf ||
+					((_RND(pxmitbuf->len, 8) + txlen) > max_xmit_len) ||

CHECK: line length of 107 exceeds 100 columns
#239: FILE: ./hal/rtl8723bs_xmit.c:239:
+						/* pxmitbuf->priv_data will be NULL, and will crash here */

WARNING: Too many leading tabs - consider code refactoring
#240: FILE: ./hal/rtl8723bs_xmit.c:240:
+						if (pxmitbuf->len > 0 &&

CHECK: braces {} should be used on all arms of this statement
#240: FILE: ./hal/rtl8723bs_xmit.c:240:
+						if (pxmitbuf->len > 0 &&
[...]
+						} else
[...]

CHECK: line length of 106 exceeds 100 columns
#243: FILE: ./hal/rtl8723bs_xmit.c:243:
+							pframe = (struct xmit_frame *)pxmitbuf->priv_data;

WARNING: Missing a blank line after declarations
#243: FILE: ./hal/rtl8723bs_xmit.c:243:
+							struct xmit_frame *pframe;
+							pframe = (struct xmit_frame *)pxmitbuf->priv_data;

CHECK: line length of 105 exceeds 100 columns
#246: FILE: ./hal/rtl8723bs_xmit.c:246:
+							rtl8723b_update_txdesc(pframe, pframe->buf_addr);

CHECK: line length of 101 exceeds 100 columns
#249: FILE: ./hal/rtl8723bs_xmit.c:249:
+							enqueue_pending_xmitbuf(pxmitpriv, pxmitbuf);

WARNING: Too many leading tabs - consider code refactoring
#252: FILE: ./hal/rtl8723bs_xmit.c:252:
+						} else

CHECK: Unbalanced braces around else statement
#252: FILE: ./hal/rtl8723bs_xmit.c:252:
+						} else

CHECK: Unnecessary parentheses around pxmitpriv->xmit_comp
#264: FILE: ./hal/rtl8723bs_xmit.c:264:
+						complete(&(pxmitpriv->xmit_comp));

CHECK: Lines should not end with a '('
#272: FILE: ./hal/rtl8723bs_xmit.c:272:
+					if (

CHECK: Unnecessary parentheses around 'pxmitframe->attrib.triggered == 0'
#272: FILE: ./hal/rtl8723bs_xmit.c:272:
+					if (
+						(pxmitframe->attrib.psta->state & WIFI_SLEEP_STATE) &&
+						(pxmitframe->attrib.triggered == 0)
+					)

CHECK: line length of 102 exceeds 100 columns
#273: FILE: ./hal/rtl8723bs_xmit.c:273:
+						(pxmitframe->attrib.psta->state & WIFI_SLEEP_STATE) &&

CHECK: line length of 105 exceeds 100 columns
#300: FILE: ./hal/rtl8723bs_xmit.c:300:
+						rtl8723b_update_txdesc(pxmitframe, pxmitframe->buf_addr);

CHECK: line length of 114 exceeds 100 columns
#301: FILE: ./hal/rtl8723bs_xmit.c:301:
+					rtw_count_tx_stats(padapter, pxmitframe, pxmitframe->attrib.last_txcmdsz);

CHECK: line length of 108 exceeds 100 columns
#306: FILE: ./hal/rtl8723bs_xmit.c:306:
+					pxmitbuf->ptail += _RND(txlen, 8); /*  round to 8 bytes alignment */

CHECK: braces {} should be used on all arms of this statement
#325: FILE: ./hal/rtl8723bs_xmit.c:325:
+			if (pxmitbuf->len > 0) {
[...]
+			} else
[...]

WARNING: Missing a blank line after declarations
#327: FILE: ./hal/rtl8723bs_xmit.c:327:
+				struct xmit_frame *pframe;
+				pframe = (struct xmit_frame *)pxmitbuf->priv_data;

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#334: FILE: ./hal/rtl8723bs_xmit.c:334:
+				yield();

CHECK: Unbalanced braces around else statement
#335: FILE: ./hal/rtl8723bs_xmit.c:335:
+			} else

CHECK: Lines should not end with a '('
#367: FILE: ./hal/rtl8723bs_xmit.c:367:
+	if (

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped'
#367: FILE: ./hal/rtl8723bs_xmit.c:367:
+	if (
+		(padapter->bDriverStopped) ||
+		(padapter->bSurpriseRemoved)
+	)

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved'
#367: FILE: ./hal/rtl8723bs_xmit.c:367:
+	if (
+		(padapter->bDriverStopped) ||
+		(padapter->bSurpriseRemoved)
+	)

WARNING: braces {} are not necessary for single statement blocks
#376: FILE: ./hal/rtl8723bs_xmit.c:376:
+	if (ret == 0) {
+		return _SUCCESS;
+	}

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#387: FILE: ./hal/rtl8723bs_xmit.c:387:
+			msleep(1);

WARNING: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#389: FILE: ./hal/rtl8723bs_xmit.c:389:
+			yield();

WARNING: braces {} are not necessary for single statement blocks
#396: FILE: ./hal/rtl8723bs_xmit.c:396:
+	if (ret == 1) {
+		goto next;
+	}

WARNING: braces {} are not necessary for single statement blocks
#413: FILE: ./hal/rtl8723bs_xmit.c:413:
+		if (signal_pending(current)) {
+			flush_signals(current);
+		}

WARNING: Comparisons should place the constant on the right side of the test
#416: FILE: ./hal/rtl8723bs_xmit.c:416:
+	} while (_SUCCESS == ret);

CHECK: Lines should not end with a '('
#423: FILE: ./hal/rtl8723bs_xmit.c:423:
+s32 rtl8723bs_mgnt_xmit(

CHECK: braces {} should be used on all arms of this statement
#448: FILE: ./hal/rtl8723bs_xmit.c:448:
+	if (GetFrameSubType(pframe) == WIFI_BEACON) { /* dump beacon directly */
[...]
+	} else
[...]

CHECK: line length of 123 exceeds 100 columns
#449: FILE: ./hal/rtl8723bs_xmit.c:449:
+		ret = rtw_write_port(padapter, pdvobjpriv->Queue2Pipe[pxmitbuf->ff_hwaddr], pxmitbuf->len, (u8 *)pxmitbuf);

CHECK: Unbalanced braces around else statement
#454: FILE: ./hal/rtl8723bs_xmit.c:454:
+	} else

CHECK: Lines should not end with a '('
#468: FILE: ./hal/rtl8723bs_xmit.c:468:
+s32 rtl8723bs_hal_xmit(

CHECK: Please don't use multiple blank lines
#475: FILE: ./hal/rtl8723bs_xmit.c:475:
+
+

CHECK: Lines should not end with a '('
#479: FILE: ./hal/rtl8723bs_xmit.c:479:
+	if (

CHECK: Unnecessary parentheses around 'pxmitframe->frame_tag == DATA_FRAMETAG'
#479: FILE: ./hal/rtl8723bs_xmit.c:479:
+	if (
+		(pxmitframe->frame_tag == DATA_FRAMETAG) &&
+		(pxmitframe->attrib.ether_type != 0x0806) &&
+		(pxmitframe->attrib.ether_type != 0x888e) &&
+		(pxmitframe->attrib.dhcp_pkt != 1)
+	) {

CHECK: Unnecessary parentheses around 'pxmitframe->attrib.ether_type != 0x0806'
#479: FILE: ./hal/rtl8723bs_xmit.c:479:
+	if (
+		(pxmitframe->frame_tag == DATA_FRAMETAG) &&
+		(pxmitframe->attrib.ether_type != 0x0806) &&
+		(pxmitframe->attrib.ether_type != 0x888e) &&
+		(pxmitframe->attrib.dhcp_pkt != 1)
+	) {

CHECK: Unnecessary parentheses around 'pxmitframe->attrib.ether_type != 0x888e'
#479: FILE: ./hal/rtl8723bs_xmit.c:479:
+	if (
+		(pxmitframe->frame_tag == DATA_FRAMETAG) &&
+		(pxmitframe->attrib.ether_type != 0x0806) &&
+		(pxmitframe->attrib.ether_type != 0x888e) &&
+		(pxmitframe->attrib.dhcp_pkt != 1)
+	) {

CHECK: Unnecessary parentheses around 'pxmitframe->attrib.dhcp_pkt != 1'
#479: FILE: ./hal/rtl8723bs_xmit.c:479:
+	if (
+		(pxmitframe->frame_tag == DATA_FRAMETAG) &&
+		(pxmitframe->attrib.ether_type != 0x0806) &&
+		(pxmitframe->attrib.ether_type != 0x888e) &&
+		(pxmitframe->attrib.dhcp_pkt != 1)
+	) {

CHECK: Lines should not end with a '('
#504: FILE: ./hal/rtl8723bs_xmit.c:504:
+s32	rtl8723bs_hal_xmitframe_enqueue(

CHECK: Blank lines aren't necessary before a close brace '}'
#522: FILE: ./hal/rtl8723bs_xmit.c:522:
+
+}

CHECK: Please don't use multiple blank lines
#535: FILE: ./hal/rtl8723bs_xmit.c:535:
+
+

CHECK: Avoid CamelCase: <SdioTxFIFOFreePageLock>
#538: FILE: ./hal/rtl8723bs_xmit.c:538:
+	spin_lock_init(&phal->SdioTxFIFOFreePageLock);

CHECK: Please don't use multiple blank lines
#553: FILE: ./hal/rtl8723bs_xmit.c:553:
+
+

total: 0 errors, 14 warnings, 50 checks, 576 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723bs_xmit.c has style problems, please review.
----------------------
./hal/rtl8723bs_xmit.o
----------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/rtl8723bs_xmit.o has style problems, please review.
--------------------
./hal/sdio_halinit.c
--------------------
CHECK: Avoid CamelCase: <CardEnable>
#19: FILE: ./hal/sdio_halinit.c:19:
+static u8 CardEnable(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#24: FILE: ./hal/sdio_halinit.c:24:
+
+

CHECK: braces {} should be used on all arms of this statement
#26: FILE: ./hal/sdio_halinit.c:26:
+	if (!bMacPwrCtrlOn) {
[...]
+	} else
[...]

CHECK: line length of 132 exceeds 100 columns
#31: FILE: ./hal/sdio_halinit.c:31:
+		ret = HalPwrSeqCmdParsing(padapter, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, rtl8723B_card_enable_flow);

WARNING: Missing a blank line after declarations
#34: FILE: ./hal/sdio_halinit.c:34:
+			u8 bMacPwrCtrlOn = true;
+			rtw_hal_set_hwreg(padapter, HW_VAR_APFM_ON_MAC, &bMacPwrCtrlOn);

CHECK: Unbalanced braces around else statement
#36: FILE: ./hal/sdio_halinit.c:36:
+	} else

CHECK: Avoid CamelCase: <_InitPowerOn_8723BS>
#43: FILE: ./hal/sdio_halinit.c:43:
+u8 _InitPowerOn_8723BS(struct adapter *padapter)

WARNING: please, no space before tabs
#49: FILE: ./hal/sdio_halinit.c:49:
+/* ^Iu8 bMacPwrCtrlOn; */$

CHECK: Please don't use multiple blank lines
#51: FILE: ./hal/sdio_halinit.c:51:
+
+

CHECK: Avoid CamelCase: <EnPDN>
#69: FILE: ./hal/sdio_halinit.c:69:
+	value16 |= EnPDN; /*  Enable HW power down and RF on */

WARNING: please, no space before tabs
#73: FILE: ./hal/sdio_halinit.c:73:
+/* ^IbMacPwrCtrlOn = true; */$

WARNING: please, no space before tabs
#74: FILE: ./hal/sdio_halinit.c:74:
+/* ^Irtw_hal_set_hwreg(padapter, HW_VAR_APFM_ON_MAC, &bMacPwrCtrlOn); */$

CHECK: Lines should not end with a '('
#79: FILE: ./hal/sdio_halinit.c:79:
+	value16 |= (

CHECK: line length of 110 exceeds 100 columns
#114: FILE: ./hal/sdio_halinit.c:114:
+static void _init_available_page_threshold(struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ)

CHECK: Avoid CamelCase: <_InitQueueReservedPage>
#132: FILE: ./hal/sdio_halinit.c:132:
+static void _InitQueueReservedPage(struct adapter *padapter)

CHECK: Avoid CamelCase: <bWiFiConfig>
#142: FILE: ./hal/sdio_halinit.c:142:
+	bool bWiFiConfig	= pregistrypriv->wifi_spec;

CHECK: Avoid CamelCase: <OutEpQueueSel>
#144: FILE: ./hal/sdio_halinit.c:144:
+	if (pHalData->OutEpQueueSel & TX_SELE_HQ)

CHECK: Avoid CamelCase: <_InitTxBufferBoundary>
#168: FILE: ./hal/sdio_halinit.c:168:
+static void _InitTxBufferBoundary(struct adapter *padapter)

CHECK: Lines should not end with a '('
#189: FILE: ./hal/sdio_halinit.c:189:
+static void _InitNormalChipRegPriority(

CHECK: Avoid CamelCase: <_InitNormalChipRegPriority>
#189: FILE: ./hal/sdio_halinit.c:189:
+static void _InitNormalChipRegPriority(

CHECK: Avoid CamelCase: <_InitNormalChipOneOutEpPriority>
#212: FILE: ./hal/sdio_halinit.c:212:
+static void _InitNormalChipOneOutEpPriority(struct adapter *Adapter)

WARNING: Missing a blank line after declarations
#217: FILE: ./hal/sdio_halinit.c:217:
+	u16 value = 0;
+	switch (pHalData->OutEpQueueSel) {

CHECK: Lines should not end with a '('
#231: FILE: ./hal/sdio_halinit.c:231:
+	_InitNormalChipRegPriority(

CHECK: Blank lines aren't necessary before a close brace '}'
#235: FILE: ./hal/sdio_halinit.c:235:
+
+}

CHECK: Avoid CamelCase: <_InitNormalChipTwoOutEpPriority>
#237: FILE: ./hal/sdio_halinit.c:237:
+static void _InitNormalChipTwoOutEpPriority(struct adapter *Adapter)

CHECK: Please don't use multiple blank lines
#243: FILE: ./hal/sdio_halinit.c:243:
+
+

CHECK: Avoid CamelCase: <valueHi>
#244: FILE: ./hal/sdio_halinit.c:244:
+	u16 valueHi = 0;

CHECK: Avoid CamelCase: <valueLow>
#245: FILE: ./hal/sdio_halinit.c:245:
+	u16 valueLow = 0;

CHECK: Blank lines aren't necessary before a close brace '}'
#283: FILE: ./hal/sdio_halinit.c:283:
+
+}

CHECK: Avoid CamelCase: <_InitNormalChipThreeOutEpPriority>
#285: FILE: ./hal/sdio_halinit.c:285:
+static void _InitNormalChipThreeOutEpPriority(struct adapter *padapter)

CHECK: Avoid CamelCase: <_InitQueuePriority>
#310: FILE: ./hal/sdio_halinit.c:310:
+static void _InitQueuePriority(struct adapter *Adapter)

CHECK: Avoid CamelCase: <OutEpNumber>
#314: FILE: ./hal/sdio_halinit.c:314:
+	switch (pHalData->OutEpNumber) {

CHECK: Please don't use multiple blank lines
#328: FILE: ./hal/sdio_halinit.c:328:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#329: FILE: ./hal/sdio_halinit.c:329:
+
+}

CHECK: Avoid CamelCase: <_InitPageBoundary>
#331: FILE: ./hal/sdio_halinit.c:331:
+static void _InitPageBoundary(struct adapter *padapter)

CHECK: Avoid CamelCase: <_InitTransferPageSize>
#339: FILE: ./hal/sdio_halinit.c:339:
+static void _InitTransferPageSize(struct adapter *padapter)

WARNING: Missing a blank line after declarations
#344: FILE: ./hal/sdio_halinit.c:344:
+	u8 value8;
+	value8 = _PSRX(PBP_128) | _PSTX(PBP_128);

CHECK: Avoid CamelCase: <_InitDriverInfoSize>
#348: FILE: ./hal/sdio_halinit.c:348:
+static void _InitDriverInfoSize(struct adapter *padapter, u8 drvInfoSize)

CHECK: Avoid CamelCase: <drvInfoSize>
#348: FILE: ./hal/sdio_halinit.c:348:
+static void _InitDriverInfoSize(struct adapter *padapter, u8 drvInfoSize)

CHECK: Avoid CamelCase: <_InitNetworkType>
#353: FILE: ./hal/sdio_halinit.c:353:
+static void _InitNetworkType(struct adapter *padapter)

WARNING: please, no space before tabs
#360: FILE: ./hal/sdio_halinit.c:360:
+/* ^Ivalue32 = (value32 & ~MASK_NETTYPE) | _NETTYPE(NT_LINK_AD_HOC); */$

CHECK: Avoid CamelCase: <_InitWMACSetting>
#366: FILE: ./hal/sdio_halinit.c:366:
+static void _InitWMACSetting(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#371: FILE: ./hal/sdio_halinit.c:371:
+
+

CHECK: Avoid CamelCase: <_InitAdaptiveCtrl>
#400: FILE: ./hal/sdio_halinit.c:400:
+static void _InitAdaptiveCtrl(struct adapter *padapter)

CHECK: Avoid CamelCase: <_InitEDCA>
#423: FILE: ./hal/sdio_halinit.c:423:
+static void _InitEDCA(struct adapter *padapter)

CHECK: Avoid CamelCase: <_InitRetryFunction>
#442: FILE: ./hal/sdio_halinit.c:442:
+static void _InitRetryFunction(struct adapter *padapter)

CHECK: Avoid CamelCase: <HalRxAggr8723BSdio>
#454: FILE: ./hal/sdio_halinit.c:454:
+static void HalRxAggr8723BSdio(struct adapter *padapter)

CHECK: Avoid CamelCase: <valueDMATimeout>
#456: FILE: ./hal/sdio_halinit.c:456:
+	u8 valueDMATimeout;

CHECK: Avoid CamelCase: <valueDMAPageCount>
#457: FILE: ./hal/sdio_halinit.c:457:
+	u8 valueDMAPageCount;

CHECK: Avoid CamelCase: <sdio_AggSettingRxUpdate>
#466: FILE: ./hal/sdio_halinit.c:466:
+static void sdio_AggSettingRxUpdate(struct adapter *padapter)

CHECK: Avoid CamelCase: <valueDMA>
#468: FILE: ./hal/sdio_halinit.c:468:
+	u8 valueDMA;

CHECK: Avoid CamelCase: <valueRxAggCtrl>
#469: FILE: ./hal/sdio_halinit.c:469:
+	u8 valueRxAggCtrl = 0;

CHECK: Avoid CamelCase: <aggBurstNum>
#470: FILE: ./hal/sdio_halinit.c:470:
+	u8 aggBurstNum = 3;  /* 0:1, 1:2, 2:3, 3:4 */

CHECK: Avoid CamelCase: <aggBurstSize>
#471: FILE: ./hal/sdio_halinit.c:471:
+	u8 aggBurstSize = 0;  /* 0:1K, 1:512Byte, 2:256Byte... */

CHECK: Avoid CamelCase: <_initSdioAggregationSetting>
#483: FILE: ./hal/sdio_halinit.c:483:
+static void _initSdioAggregationSetting(struct adapter *padapter)

WARNING: please, no space before tabs
#488: FILE: ./hal/sdio_halinit.c:488:
+/* ^Isdio_AggSettingTxUpdate(padapter); */$

CHECK: Avoid CamelCase: <UsbRxHighSpeedMode>
#496: FILE: ./hal/sdio_halinit.c:496:
+	pHalData->UsbRxHighSpeedMode = false;

CHECK: Avoid CamelCase: <_InitOperationMode>
#499: FILE: ./hal/sdio_halinit.c:499:
+static void _InitOperationMode(struct adapter *padapter)

CHECK: Avoid CamelCase: <regBwOpMode>
#502: FILE: ./hal/sdio_halinit.c:502:
+	u8 regBwOpMode = 0;

CHECK: Blank lines aren't necessary before a close brace '}'
#532: FILE: ./hal/sdio_halinit.c:532:
+
+}

CHECK: Avoid CamelCase: <_InitInterrupt>
#534: FILE: ./hal/sdio_halinit.c:534:
+static void _InitInterrupt(struct adapter *padapter)

CHECK: Avoid CamelCase: <InitInterrupt8723BSdio>
#545: FILE: ./hal/sdio_halinit.c:545:
+	InitInterrupt8723BSdio(padapter);

CHECK: Avoid CamelCase: <InitSysInterrupt8723BSdio>
#550: FILE: ./hal/sdio_halinit.c:550:
+	InitSysInterrupt8723BSdio(padapter);

CHECK: Avoid CamelCase: <_InitRFType>
#553: FILE: ./hal/sdio_halinit.c:553:
+static void _InitRFType(struct adapter *padapter)

CHECK: Avoid CamelCase: <_RfPowerSave>
#560: FILE: ./hal/sdio_halinit.c:560:
+static void _RfPowerSave(struct adapter *padapter)

CHECK: Avoid CamelCase: <HalDetectPwrDownMode>
#568: FILE: ./hal/sdio_halinit.c:568:
+static bool HalDetectPwrDownMode(struct adapter *Adapter)

CHECK: Please don't use multiple blank lines
#574: FILE: ./hal/sdio_halinit.c:574:
+
+

CHECK: Avoid CamelCase: <NavUpper>
#591: FILE: ./hal/sdio_halinit.c:591:
+	u32 NavUpper = WiFiNavUpperUs;

CHECK: Avoid CamelCase: <WiFiNavUpperUs>
#591: FILE: ./hal/sdio_halinit.c:591:
+	u32 NavUpper = WiFiNavUpperUs;

CHECK: Lines should not end with a '('
#597: FILE: ./hal/sdio_halinit.c:597:
+	if (

CHECK: Using comparison to true is error prone
#598: FILE: ./hal/sdio_halinit.c:598:
+		adapter_to_pwrctl(padapter)->bips_processing == true &&

CHECK: Blank lines aren't necessary after an open brace '{'
#620: FILE: ./hal/sdio_halinit.c:620:
+		do {
+

WARNING: please, no space before tabs
#642: FILE: ./hal/sdio_halinit.c:642:
+/* ^Irtw_hal_disable_interrupt(padapter); */$

CHECK: Avoid CamelCase: <bFWReady>
#652: FILE: ./hal/sdio_halinit.c:652:
+		padapter->bFWReady = false;

WARNING: else is not generally useful after a break or return
#655: FILE: ./hal/sdio_halinit.c:655:
+		return ret;
+	} else {

WARNING: please, no space before tabs
#662: FILE: ./hal/sdio_halinit.c:662:
+/* ^ISIC_Init(padapter); */$

CHECK: Please don't use multiple blank lines
#705: FILE: ./hal/sdio_halinit.c:705:
+
+

CHECK: Alignment should match open parenthesis
#744: FILE: ./hal/sdio_halinit.c:744:
+	rtw_hal_set_chnl_bw(padapter, padapter->registrypriv.channel,
+		CHANNEL_WIDTH_20, HAL_PRIME_CHNL_OFFSET_DONT_CARE, HAL_PRIME_CHNL_OFFSET_DONT_CARE);

WARNING: please, no space before tabs
#748: FILE: ./hal/sdio_halinit.c:748:
+/* ^IpHalData->OriginalCckTxPwrIdx = pHalData->CurrentCckTxPwrIdx; */$

WARNING: please, no space before tabs
#749: FILE: ./hal/sdio_halinit.c:749:
+/* ^IpHalData->OriginalOfdm24GTxPwrIdx = pHalData->CurrentOfdm24GTxPwrIdx; */$

CHECK: Please don't use multiple blank lines
#763: FILE: ./hal/sdio_halinit.c:763:
+
+

CHECK: Please don't use multiple blank lines
#772: FILE: ./hal/sdio_halinit.c:772:
+
+

WARNING: please, no space before tabs
#792: FILE: ./hal/sdio_halinit.c:792:
+/* ^IpHalData->PreRpwmVal = SdioLocalCmd52Read1Byte(padapter, SDIO_REG_HRPWM1) & 0x80; */$

CHECK: Avoid CamelCase: <b2Ant>
#801: FILE: ./hal/sdio_halinit.c:801:
+			u8 b2Ant;

CHECK: Avoid CamelCase: <h2cCmdBuf>
#802: FILE: ./hal/sdio_halinit.c:802:
+			u8 h2cCmdBuf;

CHECK: line length of 107 exceeds 100 columns
#824: FILE: ./hal/sdio_halinit.c:824:
+			PHY_IQCalibrate_8723B(padapter, false, restore_iqk_rst, b2Ant, pHalData->ant_path);

WARNING: please, no space before tabs
#845: FILE: ./hal/sdio_halinit.c:845:
+/* ^IRTL8723e card disable power sequence v003 which suggested by Scott. */$

CHECK: Avoid CamelCase: <CardDisableRTL8723BSdio>
#849: FILE: ./hal/sdio_halinit.c:849:
+static void CardDisableRTL8723BSdio(struct adapter *padapter)

CHECK: line length of 116 exceeds 100 columns
#855: FILE: ./hal/sdio_halinit.c:855:
+	HalPwrSeqCmdParsing(padapter, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, rtl8723B_enter_lps_flow);

WARNING: please, no space before tabs
#857: FILE: ./hal/sdio_halinit.c:857:
+^I/* ^I==== Reset digital sequence   ====== */$

CHECK: spaces preferred around that '+' (ctx:VxV)
#878: FILE: ./hal/sdio_halinit.c:878:
+	rtw_write8(padapter, REG_RSV_CTRL+1, u1bTmp);
 	                                 ^

WARNING: please, no space before tabs
#880: FILE: ./hal/sdio_halinit.c:880:
+^I/* ^I==== Reset digital sequence end ====== */$

CHECK: line length of 119 exceeds 100 columns
#884: FILE: ./hal/sdio_halinit.c:884:
+	HalPwrSeqCmdParsing(padapter, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, rtl8723B_card_disable_flow);

CHECK: braces {} should be used on all arms of this statement
#892: FILE: ./hal/sdio_halinit.c:892:
+	if (padapter->hw_init_completed) {
[...]
+	} else
[...]

CHECK: line length of 133 exceeds 100 columns
#899: FILE: ./hal/sdio_halinit.c:899:
+				/* poll 0x1cc to make sure H2C command already finished by FW; MAC_0x1cc = 0 means H2C done by FW. */

CHECK: line length of 102 exceeds 100 columns
#908: FILE: ./hal/sdio_halinit.c:908:
+					val8 = rtw_read8(padapter, SDIO_LOCAL_BASE | SDIO_REG_HRPWM1);

CHECK: line length of 102 exceeds 100 columns
#911: FILE: ./hal/sdio_halinit.c:911:
+					rtw_write8(padapter, SDIO_LOCAL_BASE | SDIO_REG_HRPWM1, val8);

CHECK: multiple assignments should be avoided
#913: FILE: ./hal/sdio_halinit.c:913:
+					cnt = val8 = 0;

CHECK: Unbalanced braces around else statement
#934: FILE: ./hal/sdio_halinit.c:934:
+	} else

CHECK: Please don't use multiple blank lines
#944: FILE: ./hal/sdio_halinit.c:944:
+
+

CHECK: Avoid CamelCase: <SdioRxFIFOCnt>
#950: FILE: ./hal/sdio_halinit.c:950:
+	pHalData->SdioRxFIFOCnt = 0;

CHECK: Please don't use multiple blank lines
#960: FILE: ./hal/sdio_halinit.c:960:
+
+

WARNING: please, no space before tabs
#988: FILE: ./hal/sdio_halinit.c:988:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#989: FILE: ./hal/sdio_halinit.c:989:
+/* ^I^IWe should set Efuse cell selection to WiFi cell in default. */$

WARNING: please, no space before tabs
#991: FILE: ./hal/sdio_halinit.c:991:
+/* ^IAssumption: */$

WARNING: please, no space before tabs
#992: FILE: ./hal/sdio_halinit.c:992:
+/* ^I^IPASSIVE_LEVEL */$

WARNING: please, no space before tabs
#994: FILE: ./hal/sdio_halinit.c:994:
+/* ^IAdded by Roger, 2010.11.23. */$

CHECK: Avoid CamelCase: <_EfuseCellSel>
#996: FILE: ./hal/sdio_halinit.c:996:
+static void _EfuseCellSel(struct adapter *padapter)

CHECK: Avoid CamelCase: <_ReadRFType>
#1005: FILE: ./hal/sdio_halinit.c:1005:
+static void _ReadRFType(struct adapter *Adapter)

CHECK: Please don't use multiple blank lines
#1012: FILE: ./hal/sdio_halinit.c:1012:
+
+

CHECK: Lines should not end with a '('
#1013: FILE: ./hal/sdio_halinit.c:1013:
+static void Hal_EfuseParseMACAddr_8723BS(

CHECK: Avoid CamelCase: <Hal_EfuseParseMACAddr_8723BS>
#1013: FILE: ./hal/sdio_halinit.c:1013:
+static void Hal_EfuseParseMACAddr_8723BS(

CHECK: Avoid CamelCase: <sMacAddr>
#1018: FILE: ./hal/sdio_halinit.c:1018:
+	u8 sMacAddr[6] = {0x00, 0xE0, 0x4C, 0xb7, 0x23, 0x00};

WARNING: please, no space before tabs
#1022: FILE: ./hal/sdio_halinit.c:1022:
+/* ^I^IsMacAddr[5] = (u8)GetRandomNumber(1, 254); */$

CHECK: Lines should not end with a '('
#1031: FILE: ./hal/sdio_halinit.c:1031:
+static void Hal_EfuseParseBoardType_8723BS(

CHECK: Avoid CamelCase: <Hal_EfuseParseBoardType_8723BS>
#1031: FILE: ./hal/sdio_halinit.c:1031:
+static void Hal_EfuseParseBoardType_8723BS(

CHECK: braces {} should be used on all arms of this statement
#1037: FILE: ./hal/sdio_halinit.c:1037:
+	if (!AutoLoadFail) {
[...]
+	} else
[...]

CHECK: Unbalanced braces around else statement
#1041: FILE: ./hal/sdio_halinit.c:1041:
+	} else

CHECK: Avoid CamelCase: <_ReadEfuseInfo8723BS>
#1045: FILE: ./hal/sdio_halinit.c:1045:
+static void _ReadEfuseInfo8723BS(struct adapter *padapter)

CHECK: Avoid CamelCase: <_ReadPROMContent>
#1082: FILE: ./hal/sdio_halinit.c:1082:
+static void _ReadPROMContent(struct adapter *padapter)

WARNING: please, no space before tabs
#1085: FILE: ./hal/sdio_halinit.c:1085:
+^Iu8 ^IeeValue;$

CHECK: Avoid CamelCase: <eeValue>
#1085: FILE: ./hal/sdio_halinit.c:1085:
+	u8 	eeValue;

WARNING: please, no space before tabs
#1092: FILE: ./hal/sdio_halinit.c:1092:
+/* ^IpHalData->EEType = IS_BOOT_FROM_EEPROM(Adapter) ? EEPROM_93C46 : EEPROM_BOOT_EFUSE; */$

CHECK: Avoid CamelCase: <_InitOtherVariable>
#1097: FILE: ./hal/sdio_halinit.c:1097:
+static void _InitOtherVariable(struct adapter *Adapter)

WARNING: please, no space before tabs
#1102: FILE: ./hal/sdio_halinit.c:1102:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#1103: FILE: ./hal/sdio_halinit.c:1103:
+/* ^I^IRead HW adapter information by E-Fuse or EEPROM according CR9346 reported. */$

WARNING: please, no space before tabs
#1105: FILE: ./hal/sdio_halinit.c:1105:
+/* ^IAssumption: */$

WARNING: please, no space before tabs
#1106: FILE: ./hal/sdio_halinit.c:1106:
+/* ^I^IPASSIVE_LEVEL (SDIO interface) */$

CHECK: Avoid CamelCase: <_ReadAdapterInfo8723BS>
#1109: FILE: ./hal/sdio_halinit.c:1109:
+static s32 _ReadAdapterInfo8723BS(struct adapter *padapter)

CHECK: Please don't use multiple blank lines
#1117: FILE: ./hal/sdio_halinit.c:1117:
+
+

CHECK: line length of 150 exceeds 100 columns
#1129: FILE: ./hal/sdio_halinit.c:1129:
+		CardDisableRTL8723BSdio(padapter);/* for the power consumption issue,  wifi ko module is loaded during booting, but wifi GUI is off */

CHECK: Avoid CamelCase: <EepromAddressSize>
#1138: FILE: ./hal/sdio_halinit.c:1138:
+	padapter->EepromAddressSize = GetEEPROMSize8723B(padapter);

WARNING: Missing a blank line after declarations
#1166: FILE: ./hal/sdio_halinit.c:1166:
+			u8 req_fw_ps = 0;
+			req_fw_ps = rtw_read8(padapter, 0x8f);

WARNING: please, no space before tabs
#1219: FILE: ./hal/sdio_halinit.c:1219:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#1220: FILE: ./hal/sdio_halinit.c:1220:
+/* ^I^IQuery setting of specified variable. */$

CHECK: Lines should not end with a '('
#1222: FILE: ./hal/sdio_halinit.c:1222:
+u8 GetHalDefVar8723BSDIO(

WARNING: please, no space before tabs
#1226: FILE: ./hal/sdio_halinit.c:1226:
+^Iu8 ^IbResult = _SUCCESS;$

WARNING: please, no space before tabs
#1247: FILE: ./hal/sdio_halinit.c:1247:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#1248: FILE: ./hal/sdio_halinit.c:1248:
+/* ^I^IChange default setting of specified variable. */$

CHECK: Blank lines aren't necessary before a close brace '}'
#1261: FILE: ./hal/sdio_halinit.c:1261:
+
+}

total: 0 errors, 35 warnings, 105 checks, 1261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/sdio_halinit.c has style problems, please review.
--------------------
./hal/sdio_halinit.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/sdio_halinit.o has style problems, please review.
----------------
./hal/sdio_ops.c
----------------
CHECK: Lines should not end with a '('
#16: FILE: ./hal/sdio_ops.c:16:
+static void hal_sdio_get_cmd_addr_8723b(

WARNING: Missing a blank line after declarations
#135: FILE: ./hal/sdio_ops.c:135:
+	u32 ftaddr;
+	ftaddr = _cvrt2ftaddr(addr, NULL, NULL);

CHECK: Lines should not end with a '('
#167: FILE: ./hal/sdio_ops.c:167:
+	if (

CHECK: Unnecessary parentheses around 'device_id == WLAN_IOREG_DEVICE_ID'
#167: FILE: ./hal/sdio_ops.c:167:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Unnecessary parentheses around 'offset < 0x100'
#167: FILE: ./hal/sdio_ops.c:167:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#167: FILE: ./hal/sdio_ops.c:167:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Lines should not end with a '('
#213: FILE: ./hal/sdio_ops.c:213:
+	if (

CHECK: Unnecessary parentheses around 'device_id == WLAN_IOREG_DEVICE_ID'
#213: FILE: ./hal/sdio_ops.c:213:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Unnecessary parentheses around 'offset < 0x100'
#213: FILE: ./hal/sdio_ops.c:213:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#213: FILE: ./hal/sdio_ops.c:213:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Lines should not end with a '('
#280: FILE: ./hal/sdio_ops.c:280:
+	if (

CHECK: Unnecessary parentheses around 'device_id == WLAN_IOREG_DEVICE_ID'
#280: FILE: ./hal/sdio_ops.c:280:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Unnecessary parentheses around 'offset < 0x100'
#280: FILE: ./hal/sdio_ops.c:280:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#280: FILE: ./hal/sdio_ops.c:280:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	) {

CHECK: Lines should not end with a '('
#317: FILE: ./hal/sdio_ops.c:317:
+	if (

CHECK: Unnecessary parentheses around 'device_id == WLAN_IOREG_DEVICE_ID'
#317: FILE: ./hal/sdio_ops.c:317:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Unnecessary parentheses around 'offset < 0x100'
#317: FILE: ./hal/sdio_ops.c:317:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#317: FILE: ./hal/sdio_ops.c:317:
+	if (
+		((device_id == WLAN_IOREG_DEVICE_ID) && (offset < 0x100)) ||
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Lines should not end with a '('
#348: FILE: ./hal/sdio_ops.c:348:
+static void sdio_read_mem(

CHECK: Lines should not end with a '('
#358: FILE: ./hal/sdio_ops.c:358:
+static void sdio_write_mem(

CHECK: Lines should not end with a '('
#384: FILE: ./hal/sdio_ops.c:384:
+static u32 sdio_read_port(

CHECK: Lines should not end with a '('
#428: FILE: ./hal/sdio_ops.c:428:
+static u32 sdio_write_port(

CHECK: Lines should not end with a '('
#454: FILE: ./hal/sdio_ops.c:454:
+	rtw_sctx_done_err(

CHECK: Avoid CamelCase: <_writeN>
#475: FILE: ./hal/sdio_ops.c:475:
+	ops->_writeN = &sdio_writeN;

CHECK: Lines should not end with a '('
#483: FILE: ./hal/sdio_ops.c:483:
+static s32 _sdio_local_read(

CHECK: Lines should not end with a '('
#521: FILE: ./hal/sdio_ops.c:521:
+s32 sdio_local_read(

CHECK: Lines should not end with a '('
#539: FILE: ./hal/sdio_ops.c:539:
+	if (

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#539: FILE: ./hal/sdio_ops.c:539:
+	if (
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Lines should not end with a '('
#562: FILE: ./hal/sdio_ops.c:562:
+s32 sdio_local_write(

CHECK: Lines should not end with a '('
#579: FILE: ./hal/sdio_ops.c:579:
+	if (

CHECK: Unnecessary parentheses around '!mac_pwr_ctrl_on'
#579: FILE: ./hal/sdio_ops.c:579:
+	if (
+		(!mac_pwr_ctrl_on) ||
+		(adapter_to_pwrctl(adapter)->fw_current_in_ps_mode)
+	)

CHECK: Blank lines aren't necessary after an open brace '{'
#622: FILE: ./hal/sdio_ops.c:622:
+{
+

CHECK: Avoid CamelCase: <SysIntrMask>
#717: FILE: ./hal/sdio_ops.c:717:
+	haldata->SysIntrMask = (0);

CHECK: line length of 120 exceeds 100 columns
#746: FILE: ./hal/sdio_ops.c:746:
+	/*  <Roger_Notes> There are some C2H CMDs have been sent before system interrupt is enabled, e.g., C2H, CPWM. */

CHECK: line length of 121 exceeds 100 columns
#747: FILE: ./hal/sdio_ops.c:747:
+	/*  So we need to clear all C2H events that FW has notified, otherwise FW won't schedule any commands anymore. */

CHECK: Unnecessary parentheses around adapter->xmitpriv.xmit_comp
#870: FILE: ./hal/sdio_ops.c:870:
+		complete(&(adapter->xmitpriv.xmit_comp));

CHECK: Unnecessary parentheses around pwrctl->pwr_rpwm_timer
#874: FILE: ./hal/sdio_ops.c:874:
+		timer_delete_sync(&(pwrctl->pwr_rpwm_timer));

CHECK: Unnecessary parentheses around pwrctl->cpwm_event
#878: FILE: ./hal/sdio_ops.c:878:
+		_set_workitem(&(pwrctl->cpwm_event));

CHECK: line length of 104 exceeds 100 columns
#925: FILE: ./hal/sdio_ops.c:925:
+			hal->SdioRxFIFOSize = sdio_local_cmd52_read2byte(adapter, SDIO_REG_RX0_REQ_LEN);

CHECK: Avoid CamelCase: <SdioRxFIFOSize>
#925: FILE: ./hal/sdio_ops.c:925:
+			hal->SdioRxFIFOSize = sdio_local_cmd52_read2byte(adapter, SDIO_REG_RX0_REQ_LEN);

CHECK: braces {} should be used on all arms of this statement
#926: FILE: ./hal/sdio_ops.c:926:
+			if (hal->SdioRxFIFOSize != 0) {
[...]
+			} else
[...]

CHECK: braces {} should be used on all arms of this statement
#928: FILE: ./hal/sdio_ops.c:928:
+				if (recvbuf)
[...]
+				else {
[...]

CHECK: Unbalanced braces around else statement
#930: FILE: ./hal/sdio_ops.c:930:
+				else {

CHECK: Unbalanced braces around else statement
#936: FILE: ./hal/sdio_ops.c:936:
+			} else

CHECK: Lines should not end with a '('
#952: FILE: ./hal/sdio_ops.c:952:
+	if (

CHECK: Unnecessary parentheses around 'adapter->bDriverStopped'
#952: FILE: ./hal/sdio_ops.c:952:
+	if (
+		(adapter->bDriverStopped) || (adapter->bSurpriseRemoved)
+	)

CHECK: Unnecessary parentheses around 'adapter->bSurpriseRemoved'
#952: FILE: ./hal/sdio_ops.c:952:
+	if (
+		(adapter->bDriverStopped) || (adapter->bSurpriseRemoved)
+	)

CHECK: line length of 101 exceeds 100 columns
#978: FILE: ./hal/sdio_ops.c:978:
+/*		Query SDIO Local register to query current the number of Free TxPacketBuffer page. */

CHECK: Please don't use multiple blank lines
#1011: FILE: ./hal/sdio_ops.c:1011:
+
+

total: 0 errors, 1 warnings, 48 checks, 1011 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/sdio_ops.c has style problems, please review.
----------------
./hal/sdio_ops.o
----------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./hal/sdio_ops.o has style problems, please review.
-----------------------
./include/basic_types.h
-----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/basic_types.h:10:
+
+

CHECK: Macro argument 's' may be better as '(s)' to avoid precedence issues
#16: FILE: ./include/basic_types.h:16:
+#define FIELD_OFFSET(s, field)	((__kernel_ssize_t)&((s *)(0))->field)

CHECK: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#16: FILE: ./include/basic_types.h:16:
+#define FIELD_OFFSET(s, field)	((__kernel_ssize_t)&((s *)(0))->field)

WARNING: Block comments should align the * on each line
#29: FILE: ./include/basic_types.h:29:
+ *	3. After read integer from IO.
+*/

CHECK: Avoid CamelCase: <EF1Byte>
#34: FILE: ./include/basic_types.h:34:
+#define EF1Byte	(u8)

CHECK: Avoid CamelCase: <EF2Byte>
#35: FILE: ./include/basic_types.h:35:
+#define EF2Byte		le16_to_cpu

CHECK: Avoid CamelCase: <EF4Byte>
#36: FILE: ./include/basic_types.h:36:
+#define EF4Byte	le32_to_cpu

WARNING: Single statement macros should not use a do {} while (0) loop
#56: FILE: ./include/basic_types.h:56:
+#define WRITEEF1BYTE(_ptr, _val)			\
+	do {						\
+		(*((u8 *)(_ptr))) = EF1BYTE(_val);	\
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#61: FILE: ./include/basic_types.h:61:
+#define WRITEEF2BYTE(_ptr, _val)			\
+	do {						\
+		(*((u16 *)(_ptr))) = EF2BYTE(_val);	\
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#66: FILE: ./include/basic_types.h:66:
+#define WRITEEF4BYTE(_ptr, _val)			\
+	do {						\
+		(*((u32 *)(_ptr))) = EF2BYTE(_val);	\
+	} while (0)

WARNING: please, no space before tabs
#109: FILE: ./include/basic_types.h:109:
+/* ^IDescription: */$

CHECK: line length of 106 exceeds 100 columns
#110: FILE: ./include/basic_types.h:110:
+/* 		Translate subfield (continuous bits in little-endian) of 4-byte value in litten byte to */

WARNING: please, no space before tabs
#110: FILE: ./include/basic_types.h:110:
+/* ^I^ITranslate subfield (continuous bits in little-endian) of 4-byte value in litten byte to */$

WARNING: please, no space before tabs
#111: FILE: ./include/basic_types.h:111:
+/* ^I^I4-byte value in host byte ordering. */$

WARNING: please, no space before tabs
#130: FILE: ./include/basic_types.h:130:
+/* ^IDescription: */$

CHECK: line length of 108 exceeds 100 columns
#131: FILE: ./include/basic_types.h:131:
+/* 		Mask subfield (continuous bits in little-endian) of 4-byte value in litten byte oredering */

WARNING: please, no space before tabs
#131: FILE: ./include/basic_types.h:131:
+/* ^I^IMask subfield (continuous bits in little-endian) of 4-byte value in litten byte oredering */$

WARNING: please, no space before tabs
#132: FILE: ./include/basic_types.h:132:
+/* ^I^Iand return the result in 4-byte value in host byte ordering. */$

WARNING: please, no space before tabs
#151: FILE: ./include/basic_types.h:151:
+/* ^IDescription: */$

WARNING: please, no space before tabs
#152: FILE: ./include/basic_types.h:152:
+/* ^I^ISet subfield of little-endian 4-byte value to specified value. */$

ERROR: Macros with complex values should be enclosed in parentheses
#154: FILE: ./include/basic_types.h:154:
+#define SET_BITS_TO_LE_4BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u32 *)(__pstart)) =				\
+		(						\
+		LE_BITS_CLEARED_TO_4BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u32)__val) & BIT_LEN_MASK_32(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__pstart' - possible side-effects?
#154: FILE: ./include/basic_types.h:154:
+#define SET_BITS_TO_LE_4BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u32 *)(__pstart)) =				\
+		(						\
+		LE_BITS_CLEARED_TO_4BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u32)__val) & BIT_LEN_MASK_32(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__bitoffset' - possible side-effects?
#154: FILE: ./include/basic_types.h:154:
+#define SET_BITS_TO_LE_4BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u32 *)(__pstart)) =				\
+		(						\
+		LE_BITS_CLEARED_TO_4BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u32)__val) & BIT_LEN_MASK_32(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__bitlen' - possible side-effects?
#154: FILE: ./include/basic_types.h:154:
+#define SET_BITS_TO_LE_4BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u32 *)(__pstart)) =				\
+		(						\
+		LE_BITS_CLEARED_TO_4BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u32)__val) & BIT_LEN_MASK_32(__bitlen)) << (__bitoffset)) \
+		)

ERROR: Macros with multiple statements should be enclosed in a do - while loop
#161: FILE: ./include/basic_types.h:161:
+#define SET_BITS_TO_LE_2BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u16 *)(__pstart)) =				\
+		(					\
+		LE_BITS_CLEARED_TO_2BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u16)__val) & BIT_LEN_MASK_16(__bitlen)) << (__bitoffset)) \
+		);

CHECK: Macro argument reuse '__pstart' - possible side-effects?
#161: FILE: ./include/basic_types.h:161:
+#define SET_BITS_TO_LE_2BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u16 *)(__pstart)) =				\
+		(					\
+		LE_BITS_CLEARED_TO_2BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u16)__val) & BIT_LEN_MASK_16(__bitlen)) << (__bitoffset)) \
+		);

CHECK: Macro argument reuse '__bitoffset' - possible side-effects?
#161: FILE: ./include/basic_types.h:161:
+#define SET_BITS_TO_LE_2BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u16 *)(__pstart)) =				\
+		(					\
+		LE_BITS_CLEARED_TO_2BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u16)__val) & BIT_LEN_MASK_16(__bitlen)) << (__bitoffset)) \
+		);

CHECK: Macro argument reuse '__bitlen' - possible side-effects?
#161: FILE: ./include/basic_types.h:161:
+#define SET_BITS_TO_LE_2BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u16 *)(__pstart)) =				\
+		(					\
+		LE_BITS_CLEARED_TO_2BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u16)__val) & BIT_LEN_MASK_16(__bitlen)) << (__bitoffset)) \
+		);

WARNING: macros should not use a trailing semicolon
#161: FILE: ./include/basic_types.h:161:
+#define SET_BITS_TO_LE_2BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u16 *)(__pstart)) =				\
+		(					\
+		LE_BITS_CLEARED_TO_2BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u16)__val) & BIT_LEN_MASK_16(__bitlen)) << (__bitoffset)) \
+		);

ERROR: Macros with complex values should be enclosed in parentheses
#168: FILE: ./include/basic_types.h:168:
+#define SET_BITS_TO_LE_1BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u8 *)(__pstart)) = EF1BYTE			\
+		(					\
+		LE_BITS_CLEARED_TO_1BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u8)__val) & BIT_LEN_MASK_8(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__pstart' - possible side-effects?
#168: FILE: ./include/basic_types.h:168:
+#define SET_BITS_TO_LE_1BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u8 *)(__pstart)) = EF1BYTE			\
+		(					\
+		LE_BITS_CLEARED_TO_1BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u8)__val) & BIT_LEN_MASK_8(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__bitoffset' - possible side-effects?
#168: FILE: ./include/basic_types.h:168:
+#define SET_BITS_TO_LE_1BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u8 *)(__pstart)) = EF1BYTE			\
+		(					\
+		LE_BITS_CLEARED_TO_1BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u8)__val) & BIT_LEN_MASK_8(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Macro argument reuse '__bitlen' - possible side-effects?
#168: FILE: ./include/basic_types.h:168:
+#define SET_BITS_TO_LE_1BYTE(__pstart, __bitoffset, __bitlen, __val) \
+		*((u8 *)(__pstart)) = EF1BYTE			\
+		(					\
+		LE_BITS_CLEARED_TO_1BYTE(__pstart, __bitoffset, __bitlen) | \
+		((((u8)__val) & BIT_LEN_MASK_8(__bitlen)) << (__bitoffset)) \
+		)

CHECK: Avoid CamelCase: <__pStart>
#175: FILE: ./include/basic_types.h:175:
+#define LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \

CHECK: Avoid CamelCase: <__BitOffset>
#175: FILE: ./include/basic_types.h:175:
+#define LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \

CHECK: Avoid CamelCase: <__BitLen>
#175: FILE: ./include/basic_types.h:175:
+#define LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \

WARNING: Argument '__BitOffset' is not used in function-like macro
#175: FILE: ./include/basic_types.h:175:
+#define LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \
+	(\
+		LE_P1BYTE_TO_HOST_1BYTE(__pStart) \
+	)

WARNING: Argument '__BitLen' is not used in function-like macro
#175: FILE: ./include/basic_types.h:175:
+#define LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \
+	(\
+		LE_P1BYTE_TO_HOST_1BYTE(__pStart) \
+	)

CHECK: Macro argument reuse '__pStart' - possible side-effects?
#180: FILE: ./include/basic_types.h:180:
+#define SET_BITS_TO_LE_1BYTE_8BIT(__pStart, __BitOffset, __BitLen, __Value) \
+{ \
+	*((u8 *)(__pStart)) = \
+		EF1Byte(\
+			LE_BITS_CLEARED_TO_1BYTE_8BIT(__pStart, __BitOffset, __BitLen) \
+			| \
+			((u8)__Value) \
+		); \
+}

CHECK: line length of 135 exceeds 100 columns
#191: FILE: ./include/basic_types.h:191:
+#define N_BYTE_ALIGMENT(__Value, __Aligment) ((__Aligment == 1) ? (__Value) : (((__Value + __Aligment - 1) / __Aligment) * __Aligment))

CHECK: Avoid CamelCase: <__Aligment>
#191: FILE: ./include/basic_types.h:191:
+#define N_BYTE_ALIGMENT(__Value, __Aligment) ((__Aligment == 1) ? (__Value) : (((__Value + __Aligment - 1) / __Aligment) * __Aligment))

CHECK: Macro argument reuse '__Value' - possible side-effects?
#191: FILE: ./include/basic_types.h:191:
+#define N_BYTE_ALIGMENT(__Value, __Aligment) ((__Aligment == 1) ? (__Value) : (((__Value + __Aligment - 1) / __Aligment) * __Aligment))

CHECK: Macro argument reuse '__Aligment' - possible side-effects?
#191: FILE: ./include/basic_types.h:191:
+#define N_BYTE_ALIGMENT(__Value, __Aligment) ((__Aligment == 1) ? (__Value) : (((__Value + __Aligment - 1) / __Aligment) * __Aligment))

CHECK: Macro argument '__Aligment' may be better as '(__Aligment)' to avoid precedence issues
#191: FILE: ./include/basic_types.h:191:
+#define N_BYTE_ALIGMENT(__Value, __Aligment) ((__Aligment == 1) ? (__Value) : (((__Value + __Aligment - 1) / __Aligment) * __Aligment))

CHECK: Avoid CamelCase: <__Flag>
#193: FILE: ./include/basic_types.h:193:
+#define TEST_FLAG(__Flag, __testFlag)		(((__Flag) & (__testFlag)) != 0)

CHECK: Avoid CamelCase: <__testFlag>
#193: FILE: ./include/basic_types.h:193:
+#define TEST_FLAG(__Flag, __testFlag)		(((__Flag) & (__testFlag)) != 0)

CHECK: Avoid CamelCase: <__setFlag>
#194: FILE: ./include/basic_types.h:194:
+#define SET_FLAG(__Flag, __setFlag)			((__Flag) |= __setFlag)

CHECK: Avoid CamelCase: <__clearFlag>
#195: FILE: ./include/basic_types.h:195:
+#define CLEAR_FLAG(__Flag, __clearFlag)		((__Flag) &= ~(__clearFlag))

CHECK: Avoid CamelCase: <__testFlags>
#197: FILE: ./include/basic_types.h:197:
+#define TEST_FLAGS(__Flag, __testFlags)		(((__Flag) & (__testFlags)) == (__testFlags))

CHECK: Macro argument reuse '__testFlags' - possible side-effects?
#197: FILE: ./include/basic_types.h:197:
+#define TEST_FLAGS(__Flag, __testFlags)		(((__Flag) & (__testFlags)) == (__testFlags))

total: 3 errors, 15 warnings, 32 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/basic_types.h has style problems, please review.
---------------------
./include/cmd_osdep.h
---------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/cmd_osdep.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#13: FILE: ./include/cmd_osdep.h:13:
+extern void _rtw_free_evt_priv(struct	evt_priv *pevtpriv);

CHECK: extern prototypes should be avoided in .h files
#14: FILE: ./include/cmd_osdep.h:14:
+extern void _rtw_free_cmd_priv(struct	cmd_priv *pcmdpriv);

CHECK: extern prototypes should be avoided in .h files
#16: FILE: ./include/cmd_osdep.h:16:
+extern struct	cmd_obj	*_rtw_dequeue_cmd(struct __queue *queue);

total: 0 errors, 0 warnings, 4 checks, 18 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/cmd_osdep.h has style problems, please review.
---------------------
./include/drv_types.h
---------------------
WARNING: Block comments use * on subsequent lines
#8: FILE: ./include/drv_types.h:8:
+/*-------------------------------------------------------------------------------
+

WARNING: Block comments use a trailing */ on a separate line
#11: FILE: ./include/drv_types.h:11:
+--------------------------------------------------------------------------------*/

CHECK: Please don't use multiple blank lines
#13: FILE: ./include/drv_types.h:13:
+
+

CHECK: line length of 115 exceeds 100 columns
#123: FILE: ./include/drv_types.h:123:
+	/*  BIT0: Enable VHT LDPC Rx, BIT1: Enable VHT LDPC Tx, BIT4: Enable HT LDPC Rx, BIT5: Enable HT LDPC Tx */

CHECK: line length of 115 exceeds 100 columns
#125: FILE: ./include/drv_types.h:125:
+	/*  BIT0: Enable VHT STBC Rx, BIT1: Enable VHT STBC Tx, BIT4: Enable HT STBC Rx, BIT5: Enable HT STBC Tx */

CHECK: line length of 127 exceeds 100 columns
#127: FILE: ./include/drv_types.h:127:
+	/*  BIT0: Enable VHT Beamformer, BIT1: Enable VHT Beamformee, BIT4: Enable HT Beamformer, BIT5: Enable HT Beamformee */

CHECK: Avoid CamelCase: <TxBBSwing_2G>
#165: FILE: ./include/drv_types.h:165:
+	s8	TxBBSwing_2G;

CHECK: Avoid CamelCase: <AmplifierType_2G>
#166: FILE: ./include/drv_types.h:166:
+	u8 AmplifierType_2G;

CHECK: Avoid CamelCase: <bEn_RFE>
#167: FILE: ./include/drv_types.h:167:
+	u8 bEn_RFE;

CHECK: Please don't use multiple blank lines
#176: FILE: ./include/drv_types.h:176:
+
+

CHECK: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#179: FILE: ./include/drv_types.h:179:
+#define RGTRY_SZ(field)   sizeof(((struct registry_priv *)0)->field)

CHECK: No space is necessary after a cast
#181: FILE: ./include/drv_types.h:181:
+#define BSSID_SZ(field)   sizeof(((struct wlan_bssid_ex *) 0)->field)

CHECK: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#181: FILE: ./include/drv_types.h:181:
+#define BSSID_SZ(field)   sizeof(((struct wlan_bssid_ex *) 0)->field)

CHECK: Avoid CamelCase: <dbg_dev_unload_inIPS_cnt>
#204: FILE: ./include/drv_types.h:204:
+	u32 dbg_dev_unload_inIPS_cnt;

CHECK: spinlock_t definition without comment
#247: FILE: ./include/drv_types.h:247:
+	spinlock_t lock;

CHECK: struct mutex definition without comment
#270: FILE: ./include/drv_types.h:270:
+	struct mutex hw_init_mutex;

CHECK: struct mutex definition without comment
#271: FILE: ./include/drv_types.h:271:
+	struct mutex h2c_fwcmd_mutex;

CHECK: struct mutex definition without comment
#272: FILE: ./include/drv_types.h:272:
+	struct mutex setch_mutex;

CHECK: struct mutex definition without comment
#273: FILE: ./include/drv_types.h:273:
+	struct mutex setbw_mutex;

CHECK: Avoid CamelCase: <RtInPipe>
#286: FILE: ./include/drv_types.h:286:
+	int	RtInPipe[2];

CHECK: Unnecessary parentheses around dvobj->pwrctl_priv
#305: FILE: ./include/drv_types.h:305:
+#define dvobj_to_pwrctl(dvobj) (&(dvobj->pwrctl_priv))

CHECK: Macro argument 'dvobj' may be better as '(dvobj)' to avoid precedence issues
#305: FILE: ./include/drv_types.h:305:
+#define dvobj_to_pwrctl(dvobj) (&(dvobj->pwrctl_priv))

CHECK: Avoid CamelCase: <DriverState>
#328: FILE: ./include/drv_types.h:328:
+	int	DriverState;/*  for disable driver using module, use dongle to replace module. */

CHECK: Avoid CamelCase: <bDongle>
#330: FILE: ./include/drv_types.h:330:
+	int	bDongle;/* build-in module or external dongle */

CHECK: Avoid CamelCase: <bCardDisableWOHSM>
#357: FILE: ./include/drv_types.h:357:
+	s32  bCardDisableWOHSM;

CHECK: Avoid CamelCase: <IsrContent>
#359: FILE: ./include/drv_types.h:359:
+	u32 IsrContent;

CHECK: Avoid CamelCase: <ImrContent>
#360: FILE: ./include/drv_types.h:360:
+	u32 ImrContent;

CHECK: Avoid CamelCase: <bDriverIsGoingToUnload>
#364: FILE: ./include/drv_types.h:364:
+	u8 bDriverIsGoingToUnload;

CHECK: Avoid CamelCase: <bHaltInProgress>
#366: FILE: ./include/drv_types.h:366:
+	u8 bHaltInProgress;

CHECK: Avoid CamelCase: <evtThread>
#369: FILE: ./include/drv_types.h:369:
+	void *evtThread;

CHECK: Avoid CamelCase: <xmitThread>
#370: FILE: ./include/drv_types.h:370:
+	void *xmitThread;

CHECK: Avoid CamelCase: <recvThread>
#371: FILE: ./include/drv_types.h:371:
+	void *recvThread;

CHECK: Please don't use multiple blank lines
#378: FILE: ./include/drv_types.h:378:
+
+

CHECK: Avoid CamelCase: <old_bRegUseLed>
#389: FILE: ./include/drv_types.h:389:
+		u8 old_bRegUseLed;

CHECK: Avoid CamelCase: <bBTFWReady>
#404: FILE: ./include/drv_types.h:404:
+	u8 bBTFWReady;

CHECK: Avoid CamelCase: <bRxRSSIDisplay>
#406: FILE: ./include/drv_types.h:406:
+	u8 bRxRSSIDisplay;

WARNING: please, no space before tabs
#407: FILE: ./include/drv_types.h:407:
+^I/* ^IAdded by Albert 2012/10/26 */$

WARNING: please, no space before tabs
#408: FILE: ./include/drv_types.h:408:
+^I/* ^IThe driver will show up the desired channel number when this flag is 1. */$

CHECK: Avoid CamelCase: <bNotifyChannelChange>
#409: FILE: ./include/drv_types.h:409:
+	u8 bNotifyChannelChange;

CHECK: line length of 107 exceeds 100 columns
#411: FILE: ./include/drv_types.h:411:
+	/* pbuddystruct adapter is used only in two interface case, (iface_nums =2 in struct dvobj_priv) */

CHECK: line length of 109 exceeds 100 columns
#414: FILE: ./include/drv_types.h:414:
+	/* for iface_id > SECONDARY_ADAPTER(IFACE_ID1), refer to padapters[iface_id]  in struct dvobj_priv */

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#434: FILE: ./include/drv_types.h:434:
+#define adapter_to_dvobj(adapter) (adapter->dvobj)

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#435: FILE: ./include/drv_types.h:435:
+#define adapter_to_pwrctl(adapter) (dvobj_to_pwrctl(adapter->dvobj))

CHECK: line length of 108 exceeds 100 columns
#445: FILE: ./include/drv_types.h:445:
+/* define RTW_ENABLE_FUNC(padapter, func) (atomic_sub(&adapter_to_dvobj(padapter)->disable_func, (func))) */

WARNING: Missing a blank line after declarations
#450: FILE: ./include/drv_types.h:450:
+	int	df = atomic_read(&adapter_to_dvobj(padapter)->disable_func);
+	df &= ~(func_bit);

CHECK: line length of 118 exceeds 100 columns
#454: FILE: ./include/drv_types.h:454:
+#define RTW_IS_FUNC_DISABLED(padapter, func_bit) (atomic_read(&adapter_to_dvobj(padapter)->disable_func) & (func_bit))

CHECK: Macro argument reuse 'padapter' - possible side-effects?
#456: FILE: ./include/drv_types.h:456:
+#define RTW_CANNOT_IO(padapter) \
+			((padapter)->bSurpriseRemoved || \
+			 RTW_IS_FUNC_DISABLED((padapter), DF_IO_BIT))

CHECK: Macro argument reuse 'padapter' - possible side-effects?
#460: FILE: ./include/drv_types.h:460:
+#define RTW_CANNOT_RX(padapter) \
+			((padapter)->bDriverStopped || \
+			 (padapter)->bSurpriseRemoved || \
+			 RTW_IS_FUNC_DISABLED((padapter), DF_RX_BIT))

CHECK: Macro argument reuse 'padapter' - possible side-effects?
#465: FILE: ./include/drv_types.h:465:
+#define RTW_CANNOT_TX(padapter) \
+			((padapter)->bDriverStopped || \
+			 (padapter)->bSurpriseRemoved || \
+			 RTW_IS_FUNC_DISABLED((padapter), DF_TX_BIT))

total: 0 errors, 5 warnings, 44 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/drv_types.h has style problems, please review.
--------------------------
./include/drv_types_sdio.h
--------------------------
total: 0 errors, 0 warnings, 0 checks, 25 lines checked

./include/drv_types_sdio.h has no obvious style problems and is ready for submission.
--------------------------
./include/Hal8192CPhyReg.h
--------------------------
CHECK: Please don't use multiple blank lines
#33: FILE: ./include/Hal8192CPhyReg.h:33:
+
+

CHECK: line length of 105 exceeds 100 columns
#52: FILE: ./include/Hal8192CPhyReg.h:52:
+#define		rFPGA0_RFMOD				0x800	/* RF mode & CCK TxSC  RF BW Setting?? */

CHECK: Avoid CamelCase: <rTxAGC_B_Rate18_06>
#58: FILE: ./include/Hal8192CPhyReg.h:58:
+#define		rTxAGC_B_Rate18_06				0x830

CHECK: Avoid CamelCase: <rTxAGC_B_Rate54_24>
#59: FILE: ./include/Hal8192CPhyReg.h:59:
+#define		rTxAGC_B_Rate54_24				0x834

CHECK: Avoid CamelCase: <rTxAGC_B_CCK1_55_Mcs32>
#60: FILE: ./include/Hal8192CPhyReg.h:60:
+#define		rTxAGC_B_CCK1_55_Mcs32		0x838

CHECK: Avoid CamelCase: <rTxAGC_B_Mcs03_Mcs00>
#61: FILE: ./include/Hal8192CPhyReg.h:61:
+#define		rTxAGC_B_Mcs03_Mcs00			0x83c

CHECK: Avoid CamelCase: <rTxAGC_B_Mcs07_Mcs04>
#63: FILE: ./include/Hal8192CPhyReg.h:63:
+#define		rTxAGC_B_Mcs07_Mcs04			0x848

CHECK: line length of 106 exceeds 100 columns
#87: FILE: ./include/Hal8192CPhyReg.h:87:
+#define		rFPGA1_RFMOD				0x900	/* RF mode & OFDM TxSC  RF BW Setting?? */

CHECK: line length of 115 exceeds 100 columns
#97: FILE: ./include/Hal8192CPhyReg.h:97:
+#define		rCCK0_AFESetting			0xa04	/*  Disable init gain now Select RX path by RSSI */

CHECK: line length of 103 exceeds 100 columns
#186: FILE: ./include/Hal8192CPhyReg.h:186:
+#define		RF_CHNLBW					0x18	/*  RF channel and BW switch */

CHECK: line length of 109 exceeds 100 columns
#196: FILE: ./include/Hal8192CPhyReg.h:196:
+#define		bRFMOD							0x1	/*  Reg 0x800 rFPGA0_RFMOD */

CHECK: line length of 109 exceeds 100 columns
#198: FILE: ./include/Hal8192CPhyReg.h:198:
+#define		b3WireDataLength			0x800	/*  Reg 0x820~84f rFPGA0_XA_HSSIParameter1 */

CHECK: line length of 105 exceeds 100 columns
#201: FILE: ./include/Hal8192CPhyReg.h:201:
+#define		bRFSI_RFENV				0x10	/*  Reg 0x870 rFPGA0_XAB_RFInterfaceSW */

total: 0 errors, 0 warnings, 13 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/Hal8192CPhyReg.h has style problems, please review.
----------------------
./include/hal_btcoex.h
----------------------
CHECK: Avoid CamelCase: <btChipType>
#19: FILE: ./include/hal_btcoex.h:19:
+	u8 btChipType;

CHECK: Avoid CamelCase: <bInitlized>
#20: FILE: ./include/hal_btcoex.h:20:
+	u8 bInitlized;

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#25: FILE: ./include/hal_btcoex.h:25:
+bool hal_btcoex_IsBtDisabled(struct adapter *);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#49: FILE: ./include/hal_btcoex.h:49:
+u8 hal_btcoex_RpwmVal(struct adapter *);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#50: FILE: ./include/hal_btcoex.h:50:
+u8 hal_btcoex_LpsVal(struct adapter *);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#51: FILE: ./include/hal_btcoex.h:51:
+u32 hal_btcoex_GetRaMask(struct adapter *);

total: 0 errors, 4 warnings, 2 checks, 54 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_btcoex.h has style problems, please review.
-------------------
./include/hal_com.h
-------------------
WARNING: please, no space before tabs
#21: FILE: ./include/hal_com.h:21:
+/* ^IRate */$

CHECK: Macro argument reuse 'rate' - possible side-effects?
#49: FILE: ./include/hal_com.h:49:
+#define HDATA_RATE(rate)\
+(rate == DESC_RATE1M) ? "CCK_1M" : \
+(rate == DESC_RATE2M) ? "CCK_2M" : \
+(rate == DESC_RATE5_5M) ? "CCK5_5M" : \
+(rate == DESC_RATE11M) ? "CCK_11M" : \
+(rate == DESC_RATE6M) ? "OFDM_6M" : \
+(rate == DESC_RATE9M) ? "OFDM_9M" : \
+(rate == DESC_RATE12M) ? "OFDM_12M" : \
+(rate == DESC_RATE18M) ? "OFDM_18M" : \
+(rate == DESC_RATE24M) ? "OFDM_24M" : \
+(rate == DESC_RATE36M) ? "OFDM_36M" : \
+(rate == DESC_RATE48M) ? "OFDM_48M" : \
+(rate == DESC_RATE54M) ? "OFDM_54M" : \
+(rate == DESC_RATEMCS0) ? "MCS0" : \
+(rate == DESC_RATEMCS1) ? "MCS1" : \
+(rate == DESC_RATEMCS2) ? "MCS2" : \
+(rate == DESC_RATEMCS3) ? "MCS3" : \
+(rate == DESC_RATEMCS4) ? "MCS4" : \
+(rate == DESC_RATEMCS5) ? "MCS5" : \
+(rate == DESC_RATEMCS6) ? "MCS6" : \
+(rate == DESC_RATEMCS7) ? "MCS7" : "UNKNOWN"

CHECK: Macro argument 'rate' may be better as '(rate)' to avoid precedence issues
#49: FILE: ./include/hal_com.h:49:
+#define HDATA_RATE(rate)\
+(rate == DESC_RATE1M) ? "CCK_1M" : \
+(rate == DESC_RATE2M) ? "CCK_2M" : \
+(rate == DESC_RATE5_5M) ? "CCK5_5M" : \
+(rate == DESC_RATE11M) ? "CCK_11M" : \
+(rate == DESC_RATE6M) ? "OFDM_6M" : \
+(rate == DESC_RATE9M) ? "OFDM_9M" : \
+(rate == DESC_RATE12M) ? "OFDM_12M" : \
+(rate == DESC_RATE18M) ? "OFDM_18M" : \
+(rate == DESC_RATE24M) ? "OFDM_24M" : \
+(rate == DESC_RATE36M) ? "OFDM_36M" : \
+(rate == DESC_RATE48M) ? "OFDM_48M" : \
+(rate == DESC_RATE54M) ? "OFDM_54M" : \
+(rate == DESC_RATEMCS0) ? "MCS0" : \
+(rate == DESC_RATEMCS1) ? "MCS1" : \
+(rate == DESC_RATEMCS2) ? "MCS2" : \
+(rate == DESC_RATEMCS3) ? "MCS3" : \
+(rate == DESC_RATEMCS4) ? "MCS4" : \
+(rate == DESC_RATEMCS5) ? "MCS5" : \
+(rate == DESC_RATEMCS6) ? "MCS6" : \
+(rate == DESC_RATEMCS7) ? "MCS7" : "UNKNOWN"

CHECK: Please use a blank line after function/struct/union/enum declarations
#75: FILE: ./include/hal_com.h:75:
+};
+enum rt_media_status {

CHECK: Avoid CamelCase: <_Len>
#90: FILE: ./include/hal_com.h:90:
+#define PageNum_128(_Len)		((u32)(((_Len) >> 7) + ((_Len) & 0x7F ? 1 : 0)))

CHECK: Macro argument reuse '_Len' - possible side-effects?
#90: FILE: ./include/hal_com.h:90:
+#define PageNum_128(_Len)		((u32)(((_Len) >> 7) + ((_Len) & 0x7F ? 1 : 0)))

CHECK: Lines should not end with a '('
#98: FILE: ./include/hal_com.h:98:
+hal_com_config_channel_plan(

WARNING: please, no space before tabs
#100: FILE: ./include/hal_com.h:100:
+u8 ^Ihw_channel_plan,^I/* channel plan from HW (efuse/eeprom) */$

WARNING: please, no space before tabs
#101: FILE: ./include/hal_com.h:101:
+u8 ^Isw_channel_plan,^I/* channel plan from SW (registry/module param) */$

WARNING: please, no space before tabs
#102: FILE: ./include/hal_com.h:102:
+u8 ^Idef_channel_plan,^I/* channel plan used when the former two is invalid */$

CHECK: Lines should not end with a '('
#107: FILE: ./include/hal_com.h:107:
+HAL_IsLegalChannel(

WARNING: please, no space before tabs
#109: FILE: ./include/hal_com.h:109:
+u32 ^I^IChannel$

CHECK: Lines should not end with a '('
#116: FILE: ./include/hal_com.h:116:
+void HalSetBrateCfg(

CHECK: Lines should not end with a '('
#122: FILE: ./include/hal_com.h:122:
+Hal_MappingOutPipe(

CHECK: Lines should not end with a '('
#156: FILE: ./include/hal_com.h:156:
+void SetHalODMVar(

total: 0 errors, 5 warnings, 10 checks, 161 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_com.h has style problems, please review.
-----------------------
./include/hal_com_h2c.h
-----------------------
total: 0 errors, 0 warnings, 0 checks, 28 lines checked

./include/hal_com_h2c.h has no obvious style problems and is ready for submission.
--------------------------
./include/hal_com_phycfg.h
--------------------------
CHECK: Avoid CamelCase: <PathA>
#10: FILE: ./include/hal_com_phycfg.h:10:
+#define		PathA		0x0	/*  Useless */

CHECK: Avoid CamelCase: <PathB>
#11: FILE: ./include/hal_com_phycfg.h:11:
+#define		PathB		0x1

CHECK: Avoid CamelCase: <PathC>
#12: FILE: ./include/hal_com_phycfg.h:12:
+#define		PathC		0x2

CHECK: Avoid CamelCase: <PathD>
#13: FILE: ./include/hal_com_phycfg.h:13:
+#define		PathD		0x3

WARNING: please, no space before tabs
#34: FILE: ./include/hal_com_phycfg.h:34:
+^I^I^I^I^I/* ^I0x870~0x877[8 bytes] */$

WARNING: please, no space before tabs
#37: FILE: ./include/hal_com_phycfg.h:37:
+^I^I^I^I^I/* ^I0x860~0x86f [16 bytes] */$

WARNING: please, no space before tabs
#40: FILE: ./include/hal_com_phycfg.h:40:
+^I^I^I^I^I/* ^I0x860~0x86f [16 bytes] */$

WARNING: please, no space before tabs
#43: FILE: ./include/hal_com_phycfg.h:43:
+^I^I^I^I^I/* ^I0x840~0x84f [16 bytes] */$

WARNING: please, no space before tabs
#46: FILE: ./include/hal_com_phycfg.h:46:
+^I^I^I^I^I/* ^I0x824~0x827, 0x82c~0x82f,$

WARNING: please, no space before tabs
#50: FILE: ./include/hal_com_phycfg.h:50:
+^I^I^I^I^I/* ^I0x8a0~0x8af [16 bytes] */$

WARNING: Block comments use a trailing */ on a separate line
#53: FILE: ./include/hal_com_phycfg.h:53:
+					 *	0x8b8-8bc for Path A and B */

CHECK: Avoid CamelCase: <DataRate>
#94: FILE: ./include/hal_com_phycfg.h:94:
+		      enum channel_width Bandwidth, u8 RfPath, u8 DataRate,

total: 0 errors, 7 warnings, 5 checks, 108 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_com_phycfg.h has style problems, please review.
-----------------------
./include/hal_com_reg.h
-----------------------
WARNING: please, no space before tabs
#12: FILE: ./include/hal_com_reg.h:12:
+/* ^I0x0000h ~ 0x00FFh^ISystem Configuration */$

CHECK: line length of 101 exceeds 100 columns
#23: FILE: ./include/hal_com_reg.h:23:
+#define REG_MAC_PHY_CTRL				0x002c /* for 92d, DMDP, SMSP, DMSP contrl */

CHECK: line length of 117 exceeds 100 columns
#32: FILE: ./include/hal_com_reg.h:32:
+#define REG_GPIO_IO_SEL_2				0x0062 /*  RTL8723 WIFI/BT/GPS Multi-Function GPIO Select. */

CHECK: line length of 112 exceeds 100 columns
#33: FILE: ./include/hal_com_reg.h:33:
+#define REG_MULTI_FUNC_CTRL			0x0068 /*  RTL8723 WIFI/BT/GPS Multi-Function control source. */

CHECK: line length of 106 exceeds 100 columns
#35: FILE: ./include/hal_com_reg.h:35:
+#define REG_EFUSE_ACCESS				0x00CF	/*  Efuse access protection for RTL8723 */

WARNING: please, no space before tabs
#41: FILE: ./include/hal_com_reg.h:41:
+/* ^I0x0100h ~ 0x01FFh^IMACTOP General Configuration */$

WARNING: please, no space before tabs
#58: FILE: ./include/hal_com_reg.h:58:
+/* ^I0x0200h ~ 0x027Fh^ITXDMA Configuration */$

CHECK: Please don't use multiple blank lines
#67: FILE: ./include/hal_com_reg.h:67:
+
+

WARNING: please, no space before tabs
#70: FILE: ./include/hal_com_reg.h:70:
+/* ^I0x0280h ~ 0x02FFh^IRXDMA Configuration */$

WARNING: please, no space before tabs
#78: FILE: ./include/hal_com_reg.h:78:
+/* ^I0x0400h ~ 0x047Fh^IProtocol Configuration */$

WARNING: please, no space before tabs
#97: FILE: ./include/hal_com_reg.h:97:
+/* ^I0x0500h ~ 0x05FFh^IEDCA Configuration */$

CHECK: line length of 108 exceeds 100 columns
#113: FILE: ./include/hal_com_reg.h:113:
+/* 	[3:0]:   TBTT prohibit setup in unit of 32us. The time for HW getting beacon content before TBTT. */

WARNING: please, no space before tabs
#113: FILE: ./include/hal_com_reg.h:113:
+/* ^I[3:0]:   TBTT prohibit setup in unit of 32us. The time for HW getting beacon content before TBTT. */$

WARNING: please, no space before tabs
#114: FILE: ./include/hal_com_reg.h:114:
+/* ^I[7:4]:   Reserved. */$

CHECK: line length of 106 exceeds 100 columns
#115: FILE: ./include/hal_com_reg.h:115:
+/* 	[19:8]:  TBTT prohibit hold in unit of 32us. The time for HW holding to send the beacon packet. */

WARNING: please, no space before tabs
#115: FILE: ./include/hal_com_reg.h:115:
+/* ^I[19:8]:  TBTT prohibit hold in unit of 32us. The time for HW holding to send the beacon packet. */$

WARNING: please, no space before tabs
#116: FILE: ./include/hal_com_reg.h:116:
+/* ^I[23:20]: Reserved */$

WARNING: please, no space before tabs
#118: FILE: ./include/hal_com_reg.h:118:
+/* ^I              | */$

WARNING: please, no space before tabs
#120: FILE: ./include/hal_com_reg.h:120:
+/* ^I--------------|---------------------- */$

CHECK: line length of 113 exceeds 100 columns
#123: FILE: ./include/hal_com_reg.h:123:
+/*  Note: We cannot update beacon content to HW or send any AC packets during the time between Setup and Hold. */

CHECK: line length of 103 exceeds 100 columns
#130: FILE: ./include/hal_com_reg.h:130:
+#define REG_BCN_INTERVAL				0x0554	/*  The same as REG_MBSSID_BCN_SPACE */

WARNING: please, no space before tabs
#142: FILE: ./include/hal_com_reg.h:142:
+/* ^I0x0600h ~ 0x07FFh^IWMAC Configuration */$

CHECK: line length of 109 exceeds 100 columns
#156: FILE: ./include/hal_com_reg.h:156:
+#define REG_RESP_SIFS_CCK				0x063C	/*  [15:8]SIFS_R2T_OFDM, [7:0]SIFS_R2T_CCK */

CHECK: line length of 101 exceeds 100 columns
#157: FILE: ./include/hal_com_reg.h:157:
+#define REG_RESP_SIFS_OFDM                    0x063E	/*  [15:8]SIFS_T2T_OFDM, [7:0]SIFS_T2T_CCK */

WARNING: please, no space before tabs
#163: FILE: ./include/hal_com_reg.h:163:
+/* ^IThe NAV upper value is very important to WiFi 11n 5.2.3 NAV test. The default value is */$

CHECK: line length of 102 exceeds 100 columns
#164: FILE: ./include/hal_com_reg.h:164:
+/* 	always too small, but the WiFi TestPlan test by 25, 000 microseconds of NAV through sending */

WARNING: please, no space before tabs
#164: FILE: ./include/hal_com_reg.h:164:
+/* ^Ialways too small, but the WiFi TestPlan test by 25, 000 microseconds of NAV through sending */$

CHECK: line length of 104 exceeds 100 columns
#165: FILE: ./include/hal_com_reg.h:165:
+/* 	CTS in the air. We must update this value greater than 25, 000 microseconds to pass the item. */

WARNING: please, no space before tabs
#165: FILE: ./include/hal_com_reg.h:165:
+/* ^ICTS in the air. We must update this value greater than 25, 000 microseconds to pass the item. */$

CHECK: line length of 105 exceeds 100 columns
#166: FILE: ./include/hal_com_reg.h:166:
+/* 	The offset of NAV_UPPER in 8192C Spec is incorrect, and the offset should be 0x0652. Commented */

WARNING: please, no space before tabs
#166: FILE: ./include/hal_com_reg.h:166:
+/* ^IThe offset of NAV_UPPER in 8192C Spec is incorrect, and the offset should be 0x0652. Commented */$

WARNING: please, no space before tabs
#167: FILE: ./include/hal_com_reg.h:167:
+/* ^Iby SD1 Scott. */$

WARNING: please, no space before tabs
#189: FILE: ./include/hal_com_reg.h:189:
+/* ^IRedifine 8192C register definition for compatibility */$

CHECK: line length of 108 exceeds 100 columns
#198: FILE: ./include/hal_com_reg.h:198:
+#define MSR						(REG_CR + 2)		/*  Media Status register */

CHECK: line length of 113 exceeds 100 columns
#205: FILE: ./include/hal_com_reg.h:205:
+#define RWCAM					REG_CAMCMD		/* IN 8190 Data Sheet is called CAMcmd */

CHECK: line length of 103 exceeds 100 columns
#206: FILE: ./include/hal_com_reg.h:206:
+#define WCAMI					REG_CAMWRITE	/*  Software write CAM input content */

CHECK: spaces preferred around that '|' (ctx:VxV)
#228: FILE: ./include/hal_com_reg.h:228:
+#define RRSR_CCK_RATES (RRSR_11M|RRSR_5_5M|RRSR_2M|RRSR_1M)
                                 ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#228: FILE: ./include/hal_com_reg.h:228:
+#define RRSR_CCK_RATES (RRSR_11M|RRSR_5_5M|RRSR_2M|RRSR_1M)
                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#228: FILE: ./include/hal_com_reg.h:228:
+#define RRSR_CCK_RATES (RRSR_11M|RRSR_5_5M|RRSR_2M|RRSR_1M)
                                                   ^

CHECK: line length of 117 exceeds 100 columns
#281: FILE: ./include/hal_com_reg.h:281:
+#define RCR_APP_MIC				BIT30	/*  MACRX will retain the MIC at the bottom of the packet. */

CHECK: line length of 117 exceeds 100 columns
#282: FILE: ./include/hal_com_reg.h:282:
+#define RCR_APP_ICV				BIT29	/*  MACRX will retain the ICV at the bottom of the packet. */

CHECK: line length of 102 exceeds 100 columns
#283: FILE: ./include/hal_com_reg.h:283:
+#define RCR_APP_PHYST_RXFF		BIT28	/*  PHY Status is appended before RX packet in RXFF */

CHECK: line length of 138 exceeds 100 columns
#284: FILE: ./include/hal_com_reg.h:284:
+#define RCR_APP_BA_SSN			BIT27	/*  SSN of previous TXBA is appended as after original RXDESC as the 4-th DW of RXDESC. */

CHECK: line length of 147 exceeds 100 columns
#287: FILE: ./include/hal_com_reg.h:287:
+#define RCR_ADF					BIT11	/*  Accept data type frame. This bit also regulates BA, BAR, and PS-Poll (AP mode only). */

CHECK: line length of 111 exceeds 100 columns
#289: FILE: ./include/hal_com_reg.h:289:
+#define RCR_CBSSID_BCN			BIT7		/*  Accept BSSID match packet (Rx beacon, probe rsp) */

CHECK: Please don't use multiple blank lines
#295: FILE: ./include/hal_com_reg.h:295:
+
+

WARNING: please, no space before tabs
#298: FILE: ./include/hal_com_reg.h:298:
+/* ^I0x0000h ~ 0x00FFh^ISystem Configuration */$

CHECK: Please don't use multiple blank lines
#318: FILE: ./include/hal_com_reg.h:318:
+
+

CHECK: Please don't use multiple blank lines
#323: FILE: ./include/hal_com_reg.h:323:
+
+

CHECK: Please don't use multiple blank lines
#337: FILE: ./include/hal_com_reg.h:337:
+
+

CHECK: line length of 111 exceeds 100 columns
#349: FILE: ./include/hal_com_reg.h:349:
+#define SPS_SEL					BIT(24) /*  1:LDO regulator mode; 0:Switching regulator mode */

CHECK: Please don't use multiple blank lines
#351: FILE: ./include/hal_com_reg.h:351:
+
+

CHECK: spaces preferred around that '|' (ctx:VxV)
#356: FILE: ./include/hal_com_reg.h:356:
+#define RF_RL_ID					(BIT(31)|BIT(30)|BIT(29)|BIT(28))
                 					        ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#356: FILE: ./include/hal_com_reg.h:356:
+#define RF_RL_ID					(BIT(31)|BIT(30)|BIT(29)|BIT(28))
                 					                ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#356: FILE: ./include/hal_com_reg.h:356:
+#define RF_RL_ID					(BIT(31)|BIT(30)|BIT(29)|BIT(28))
                 					                        ^

WARNING: please, no space before tabs
#360: FILE: ./include/hal_com_reg.h:360:
+/* ^I0x0100h ~ 0x01FFh^IMACTOP General Configuration */$

CHECK: spaces preferred around that '&' (ctx:VxV)
#394: FILE: ./include/hal_com_reg.h:394:
+#define _TXDMA_HIQ_MAP(x)			(((x)&0x3) << 14)
                          			     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#395: FILE: ./include/hal_com_reg.h:395:
+#define _TXDMA_MGQ_MAP(x)			(((x)&0x3) << 12)
                          			     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#396: FILE: ./include/hal_com_reg.h:396:
+#define _TXDMA_BKQ_MAP(x)			(((x)&0x3) << 10)
                          			     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#397: FILE: ./include/hal_com_reg.h:397:
+#define _TXDMA_BEQ_MAP(x)			(((x)&0x3) << 8)
                          			     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#398: FILE: ./include/hal_com_reg.h:398:
+#define _TXDMA_VIQ_MAP(x)			(((x)&0x3) << 6)
                          			     ^

CHECK: spaces preferred around that '&' (ctx:VxV)
#399: FILE: ./include/hal_com_reg.h:399:
+#define _TXDMA_VOQ_MAP(x)			(((x)&0x3) << 4)
                          			     ^

WARNING: please, no space before tabs
#407: FILE: ./include/hal_com_reg.h:407:
+/* ^I0x0200h ~ 0x027Fh^ITXDMA Configuration */$

CHECK: line length of 113 exceeds 100 columns
#414: FILE: ./include/hal_com_reg.h:414:
+#define _NPQ(x)					((x) & 0xFF)			/*  NOTE: in RQPN_NPQ register */

WARNING: please, no space before tabs
#423: FILE: ./include/hal_com_reg.h:423:
+/* ^I0x0280h ~ 0x028Bh^IRX DMA Configuration */$

CHECK: line length of 106 exceeds 100 columns
#429: FILE: ./include/hal_com_reg.h:429:
+/*  this bit is polled, FW shall update RXFF_RD_PTR first. This register is write pulse and auto clear. */

WARNING: please, no space before tabs
#445: FILE: ./include/hal_com_reg.h:445:
+/* ^I0x0400h ~ 0x047Fh^IProtocol Configuration */$

CHECK: Please don't use multiple blank lines
#451: FILE: ./include/hal_com_reg.h:451:
+
+

WARNING: please, no space before tabs
#462: FILE: ./include/hal_com_reg.h:462:
+/* ^I0x0500h ~ 0x05FFh^IEDCA Configuration */$

CHECK: Please don't use multiple blank lines
#469: FILE: ./include/hal_com_reg.h:469:
+
+

WARNING: please, no space before tabs
#486: FILE: ./include/hal_com_reg.h:486:
+/* ^I0x0600h ~ 0x07FFh^IWMAC Configuration */$

CHECK: line length of 102 exceeds 100 columns
#497: FILE: ./include/hal_com_reg.h:497:
+#define SCR_TxUseDK				BIT(0)			/* Force Tx Use Default Key */

CHECK: line length of 102 exceeds 100 columns
#498: FILE: ./include/hal_com_reg.h:498:
+#define SCR_RxUseDK				BIT(1)			/* Force Rx Use Default Key */

CHECK: line length of 113 exceeds 100 columns
#501: FILE: ./include/hal_com_reg.h:501:
+#define SCR_TXBCUSEDK			BIT(6)			/*  Force Tx Broadcast packets Use Default Key */

CHECK: line length of 113 exceeds 100 columns
#502: FILE: ./include/hal_com_reg.h:502:
+#define SCR_RXBCUSEDK			BIT(7)			/*  Force Rx Broadcast packets Use Default Key */

WARNING: please, no space before tabs
#507: FILE: ./include/hal_com_reg.h:507:
+/* ^ISDIO Bus Specification */$

WARNING: please, no space before tabs
#588: FILE: ./include/hal_com_reg.h:588:
+/* ^I0xFE00h ~ 0xFE55h^IUSB Configuration */$

CHECK: line length of 131 exceeds 100 columns
#593: FILE: ./include/hal_com_reg.h:593:
+#define C2H_EVT_HOST_CLOSE		0x00	/*  Set by driver and notify FW that the driver has read the C2H command message */

CHECK: line length of 148 exceeds 100 columns
#594: FILE: ./include/hal_com_reg.h:594:
+#define C2H_EVT_FW_CLOSE		0xFF	/*  Set by FW indicating that FW had set the C2H command message and it's not yet read by driver. */

total: 0 errors, 28 warnings, 51 checks, 602 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_com_reg.h has style problems, please review.
--------------------
./include/hal_data.h
--------------------
CHECK: Please use a blank line after function/struct/union/enum declarations
#24: FILE: ./include/hal_data.h:24:
+};
+/*  */

CHECK: Avoid CamelCase: <LastMinUndecoratedPWDBForDM>
#93: FILE: ./include/hal_data.h:93:
+	int	LastMinUndecoratedPWDBForDM;

CHECK: Avoid CamelCase: <UndecoratedSmoothedBeacon>
#95: FILE: ./include/hal_data.h:95:
+	s32	UndecoratedSmoothedBeacon;

CHECK: line length of 111 exceeds 100 columns
#110: FILE: ./include/hal_data.h:110:
+	u8 ThermalMeter[2];				/*  ThermalMeter, index 0 for RFIC0, and 1 for RFIC1 */

CHECK: Avoid CamelCase: <PowerIndex_backup>
#135: FILE: ./include/hal_data.h:135:
+	u8 PowerIndex_backup[6];

CHECK: Avoid CamelCase: <bDoneTxpower>
#140: FILE: ./include/hal_data.h:140:
+	u8 bDoneTxpower;

CHECK: line length of 128 exceeds 100 columns
#159: FILE: ./include/hal_data.h:159:
+	/*  Add for Reading Initial Data Rate SEL Register 0x484 during watchdog. Using for fill tx desc. 2011.3.21 by Thomas */

CHECK: Please don't use multiple blank lines
#163: FILE: ./include/hal_data.h:163:
+
+

CHECK: Avoid CamelCase: <FirmwareVersionRev>
#171: FILE: ./include/hal_data.h:171:
+	u16 FirmwareVersionRev;

CHECK: Avoid CamelCase: <CurrentWirelessMode>
#176: FILE: ./include/hal_data.h:176:
+	enum wireless_mode CurrentWirelessMode;

CHECK: Avoid CamelCase: <framesyncC34>
#195: FILE: ./include/hal_data.h:195:
+	u32 framesyncC34;

CHECK: Avoid CamelCase: <framesyncMonitor>
#196: FILE: ./include/hal_data.h:196:
+	u8 framesyncMonitor;

CHECK: Avoid CamelCase: <DefaultInitialGain>
#197: FILE: ./include/hal_data.h:197:
+	u8 DefaultInitialGain[4];

CHECK: Avoid CamelCase: <EEPROMSubCustomerID>
#203: FILE: ./include/hal_data.h:203:
+	u8 EEPROMSubCustomerID;

CHECK: Avoid CamelCase: <EEPROMBluetoothAntIsolation>
#210: FILE: ./include/hal_data.h:210:
+	u8 EEPROMBluetoothAntIsolation;

CHECK: Avoid CamelCase: <EEPROMBluetoothRadioShared>
#211: FILE: ./include/hal_data.h:211:
+	u8 EEPROMBluetoothRadioShared;

WARNING: please, no space before tabs
#217: FILE: ./include/hal_data.h:217:
+^Iu8 ^I^IEfuseUsedPercentage;$

WARNING: please, no space before tabs
#218: FILE: ./include/hal_data.h:218:
+^Iu16 ^I^I^IEfuseUsedBytes;$

CHECK: Avoid CamelCase: <TxPwrInPercentage>
#232: FILE: ./include/hal_data.h:232:
+	u8 TxPwrInPercentage;

CHECK: Avoid CamelCase: <TxPwrCalibrateRate>
#234: FILE: ./include/hal_data.h:234:
+	u8 TxPwrCalibrateRate;

CHECK: Avoid CamelCase: <TxPwrByRateTable>
#238: FILE: ./include/hal_data.h:238:
+	u8 TxPwrByRateTable;

CHECK: Avoid CamelCase: <TxPwrByRateBand>
#239: FILE: ./include/hal_data.h:239:
+	u8 TxPwrByRateBand;

CHECK: Avoid CamelCase: <TxPwrLevelCck>
#244: FILE: ./include/hal_data.h:244:
+	u8 TxPwrLevelCck[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];

CHECK: Avoid CamelCase: <TxPwrLevelHT40_1S>
#245: FILE: ./include/hal_data.h:245:
+	u8 TxPwrLevelHT40_1S[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];	/*  For HT 40MHZ pwr */

CHECK: Avoid CamelCase: <TxPwrLevelHT40_2S>
#246: FILE: ./include/hal_data.h:246:
+	u8 TxPwrLevelHT40_2S[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];	/*  For HT 40MHZ pwr */

CHECK: Avoid CamelCase: <TxPwrHt20Diff>
#247: FILE: ./include/hal_data.h:247:
+	s8	TxPwrHt20Diff[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];/*  HT 20<->40 Pwr diff */

CHECK: line length of 101 exceeds 100 columns
#248: FILE: ./include/hal_data.h:248:
+	u8 TxPwrLegacyHtDiff[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];/*  For HT<->legacy pwr diff */

CHECK: Avoid CamelCase: <TxPwrLegacyHtDiff>
#248: FILE: ./include/hal_data.h:248:
+	u8 TxPwrLegacyHtDiff[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];/*  For HT<->legacy pwr diff */

ERROR: code indent should use tabs where possible
#253: FILE: ./include/hal_data.h:253:
+^I                                [MAX_RATE_SECTION_NUM]$

ERROR: code indent should use tabs where possible
#254: FILE: ./include/hal_data.h:254:
+^I                                [CHANNEL_MAX_NUMBER_2G]$

CHECK: line length of 103 exceeds 100 columns
#257: FILE: ./include/hal_data.h:257:
+	/*  Store the original power by rate value of the base of each rate section of rf path A & B */

CHECK: Avoid CamelCase: <PwrGroupHT20>
#261: FILE: ./include/hal_data.h:261:
+	u8 PwrGroupHT20[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];

CHECK: Avoid CamelCase: <PwrGroupHT40>
#262: FILE: ./include/hal_data.h:262:
+	u8 PwrGroupHT40[RF_PATH_MAX_92C_88E][CHANNEL_MAX_NUMBER];

CHECK: Please don't use multiple blank lines
#264: FILE: ./include/hal_data.h:264:
+
+

CHECK: Please don't use multiple blank lines
#266: FILE: ./include/hal_data.h:266:
+
+

CHECK: Avoid CamelCase: <PGMaxGroup>
#267: FILE: ./include/hal_data.h:267:
+	u8 PGMaxGroup;

CHECK: Avoid CamelCase: <LegacyHTTxPowerDiff>
#268: FILE: ./include/hal_data.h:268:
+	u8 LegacyHTTxPowerDiff;/*  Legacy to HT rate power diff */

CHECK: Avoid CamelCase: <CurrentCckTxPwrIdx>
#270: FILE: ./include/hal_data.h:270:
+	u8 CurrentCckTxPwrIdx;

CHECK: Avoid CamelCase: <CurrentOfdm24GTxPwrIdx>
#271: FILE: ./include/hal_data.h:271:
+	u8 CurrentOfdm24GTxPwrIdx;

CHECK: Avoid CamelCase: <CurrentBW2024GTxPwrIdx>
#272: FILE: ./include/hal_data.h:272:
+	u8 CurrentBW2024GTxPwrIdx;

CHECK: Avoid CamelCase: <CurrentBW4024GTxPwrIdx>
#273: FILE: ./include/hal_data.h:273:
+	u8 CurrentBW4024GTxPwrIdx;

CHECK: Avoid CamelCase: <CCKTxPowerLevelOriginalOffset>
#278: FILE: ./include/hal_data.h:278:
+	u32 CCKTxPowerLevelOriginalOffset;

CHECK: Avoid CamelCase: <AntennaTxPath>
#281: FILE: ./include/hal_data.h:281:
+	u32 AntennaTxPath;					/*  Antenna path Tx */

CHECK: Avoid CamelCase: <AntennaRxPath>
#282: FILE: ./include/hal_data.h:282:
+	u32 AntennaRxPath;					/*  Antenna path Rx */

CHECK: Avoid CamelCase: <PAType_2G>
#284: FILE: ./include/hal_data.h:284:
+	u8 PAType_2G;

CHECK: Avoid CamelCase: <LNAType_2G>
#285: FILE: ./include/hal_data.h:285:
+	u8 LNAType_2G;

CHECK: Avoid CamelCase: <ExternalPA_2G>
#286: FILE: ./include/hal_data.h:286:
+	u8 ExternalPA_2G;

CHECK: Avoid CamelCase: <ExternalLNA_2G>
#287: FILE: ./include/hal_data.h:287:
+	u8 ExternalLNA_2G;

CHECK: Avoid CamelCase: <ExternalPA>
#294: FILE: ./include/hal_data.h:294:
+	u8 ExternalPA;

CHECK: Avoid CamelCase: <bChnlBWInitialized>
#300: FILE: ./include/hal_data.h:300:
+	bool		bChnlBWInitialized;

CHECK: line length of 116 exceeds 100 columns
#303: FILE: ./include/hal_data.h:303:
+	u8 bLedOpenDrain; /*  Support Open-drain arrangement for controlling the LED. Added by Roger, 2009.10.16. */

CHECK: Avoid CamelCase: <bLedOpenDrain>
#303: FILE: ./include/hal_data.h:303:
+	u8 bLedOpenDrain; /*  Support Open-drain arrangement for controlling the LED. Added by Roger, 2009.10.16. */

CHECK: Avoid CamelCase: <b1x1RecvCombine>
#305: FILE: ./include/hal_data.h:305:
+	u8 b1x1RecvCombine;	/*  for 1T1R receive combining */

CHECK: Avoid CamelCase: <bRDGEnable>
#314: FILE: ./include/hal_data.h:314:
+	bool	 bRDGEnable;

CHECK: Avoid CamelCase: <Reg837>
#326: FILE: ./include/hal_data.h:326:
+	u8 Reg837;

CHECK: Avoid CamelCase: <RegRFPathS1>
#327: FILE: ./include/hal_data.h:327:
+	u8 RegRFPathS1;

CHECK: Avoid CamelCase: <TRxAntDivType>
#333: FILE: ./include/hal_data.h:333:
+	u8 TRxAntDivType;

CHECK: line length of 115 exceeds 100 columns
#340: FILE: ./include/hal_data.h:340:
+	u8 FwRsvdPageStartOffset; /* 2010.06.23. Added by tynli. Reserve page start offset except beacon in TxQ. */

CHECK: Avoid CamelCase: <FwRsvdPageStartOffset>
#340: FILE: ./include/hal_data.h:340:
+	u8 FwRsvdPageStartOffset; /* 2010.06.23. Added by tynli. Reserve page start offset except beacon in TxQ. */

CHECK: Avoid CamelCase: <interfaceIndex>
#346: FILE: ./include/hal_data.h:346:
+	u32 interfaceIndex;

CHECK: line length of 113 exceeds 100 columns
#355: FILE: ./include/hal_data.h:355:
+	/*  This is used for fix the drawback of CU TSMC-A/UMC-A cut. HW auto suspend ability. Close BT clock. */

CHECK: Avoid CamelCase: <SlimComboDbg>
#356: FILE: ./include/hal_data.h:356:
+	bool		SlimComboDbg;

CHECK: Avoid CamelCase: <RegIQKFWOffload>
#363: FILE: ./include/hal_data.h:363:
+	u8 RegIQKFWOffload;

CHECK: line length of 101 exceeds 100 columns
#366: FILE: ./include/hal_data.h:366:
+	enum rt_ampdu_burst	AMPDUBurstMode; /* 92C maybe not use, but for compile successfully */

WARNING: please, no space before tabs
#368: FILE: ./include/hal_data.h:368:
+^Iu32 ^I^Isdio_himr;$

WARNING: please, no space before tabs
#369: FILE: ./include/hal_data.h:369:
+^Iu32 ^I^Isdio_hisr;$

WARNING: please, no space before tabs
#373: FILE: ./include/hal_data.h:373:
+^Iu8 ^ISdioTxFIFOFreePage[SDIO_TX_FREE_PG_QUEUE];$

CHECK: spinlock_t definition without comment
#374: FILE: ./include/hal_data.h:374:
+	spinlock_t		SdioTxFIFOFreePageLock;

WARNING: please, no space before tabs
#375: FILE: ./include/hal_data.h:375:
+^Iu8 ^ISdioTxOQTMaxFreeSpace;$

WARNING: please, no space before tabs
#376: FILE: ./include/hal_data.h:376:
+^Iu8 ^ISdioTxOQTFreeSpace;$

CHECK: Please don't use multiple blank lines
#378: FILE: ./include/hal_data.h:378:
+
+

WARNING: please, no space before tabs
#380: FILE: ./include/hal_data.h:380:
+^Iu8 ^ISdioRxFIFOCnt;$

WARNING: please, no space before tabs
#381: FILE: ./include/hal_data.h:381:
+^Iu16 ^I^ISdioRxFIFOSize;$

CHECK: line length of 124 exceeds 100 columns
#383: FILE: ./include/hal_data.h:383:
+	u32 		sdio_tx_max_len[SDIO_MAX_TX_QUEUE];/*  H, N, L, used for sdio tx aggregation max length per queue */

WARNING: please, no space before tabs
#383: FILE: ./include/hal_data.h:383:
+^Iu32 ^I^Isdio_tx_max_len[SDIO_MAX_TX_QUEUE];/*  H, N, L, used for sdio tx aggregation max length per queue */$

WARNING: please, no space before tabs
#392: FILE: ./include/hal_data.h:392:
+^Iu32 ^I^ISysIntrStatus;$

CHECK: Avoid CamelCase: <SysIntrStatus>
#392: FILE: ./include/hal_data.h:392:
+	u32 		SysIntrStatus;

WARNING: please, no space before tabs
#393: FILE: ./include/hal_data.h:393:
+^Iu32 ^I^ISysIntrMask;$

CHECK: line length of 105 exceeds 100 columns
#397: FILE: ./include/hal_data.h:397:
+#define GET_HAL_RFPATH_NUM(__padapter) (((struct hal_com_data *)((__padapter)->HalData))->NumTotalRFPath)

CHECK: Avoid CamelCase: <_Adapter>
#398: FILE: ./include/hal_data.h:398:
+#define RT_GetInterfaceSelection(_Adapter)	(GET_HAL_DATA(_Adapter)->InterfaceSel)

total: 2 errors, 12 warnings, 66 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./include/hal_data.h has style problems, please review.
--------------------
./include/hal_intf.h
--------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/hal_intf.h:10:
+
+

CHECK: line length of 107 exceeds 100 columns
#85: FILE: ./include/hal_intf.h:85:
+	HW_VAR_APFM_ON_MAC, /* Auto FSM to Turn On, include clock, isolation, power control for MAC only */

CHECK: line length of 135 exceeds 100 columns
#86: FILE: ./include/hal_intf.h:86:
+	/*  The valid upper nav range for the HW updating, if the true value is larger than the upper range, the HW won't update it. */

CHECK: line length of 121 exceeds 100 columns
#164: FILE: ./include/hal_intf.h:164:
+	void (*SetHalODMVarHandler)(struct adapter *padapter, enum hal_odm_variable eVariable, void *pValue1, bool bSet);

CHECK: line length of 122 exceeds 100 columns
#166: FILE: ./include/hal_intf.h:166:
+	u8 (*Efuse_WordEnableDataWrite)(struct adapter *padapter, u16 efuse_addr, u8 word_en, u8 *data, bool bPseudoTest);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#174: FILE: ./include/hal_intf.h:174:
+	s32 (*fill_h2c_cmd)(struct adapter *, u8 ElementID, u32 CmdLen, u8 *pCmdBuffer);

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#183: FILE: ./include/hal_intf.h:183:
+#define GET_EEPROM_EFUSE_PRIV(adapter) (&adapter->eeprompriv)

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#184: FILE: ./include/hal_intf.h:184:
+#define is_boot_from_eeprom(adapter) (adapter->eeprompriv.EepromOrEfuse)

CHECK: Avoid CamelCase: <Rx_Pairwisekey>
#186: FILE: ./include/hal_intf.h:186:
+#define Rx_Pairwisekey			0x01

CHECK: Avoid CamelCase: <Rx_GTK>
#187: FILE: ./include/hal_intf.h:187:
+#define Rx_GTK					0x02

CHECK: Avoid CamelCase: <Rx_DisAssoc>
#188: FILE: ./include/hal_intf.h:188:
+#define Rx_DisAssoc				0x04

CHECK: Avoid CamelCase: <Rx_DeAuth>
#189: FILE: ./include/hal_intf.h:189:
+#define Rx_DeAuth				0x08

CHECK: Avoid CamelCase: <Rx_ARPReq>
#190: FILE: ./include/hal_intf.h:190:
+#define Rx_ARPReq				0x09

CHECK: Avoid CamelCase: <FWDecisionDisconnect>
#191: FILE: ./include/hal_intf.h:191:
+#define FWDecisionDisconnect	0x10

CHECK: Avoid CamelCase: <Rx_MagicPkt>
#192: FILE: ./include/hal_intf.h:192:
+#define Rx_MagicPkt				0x21

CHECK: Avoid CamelCase: <Rx_UnicastPkt>
#193: FILE: ./include/hal_intf.h:193:
+#define Rx_UnicastPkt			0x22

CHECK: Avoid CamelCase: <Rx_PatternPkt>
#194: FILE: ./include/hal_intf.h:194:
+#define Rx_PatternPkt			0x23

CHECK: Avoid CamelCase: <RX_PNOWakeUp>
#195: FILE: ./include/hal_intf.h:195:
+#define	RX_PNOWakeUp			0x55

CHECK: line length of 110 exceeds 100 columns
#220: FILE: ./include/hal_intf.h:220:
+void rtw_hal_set_odm_var(struct adapter *padapter, enum hal_odm_variable eVariable, void *pValue1, bool bSet);

CHECK: line length of 101 exceeds 100 columns
#250: FILE: ./include/hal_intf.h:250:
+#define PHY_QueryBBReg(Adapter, RegAddr, BitMask) rtw_hal_read_bbreg((Adapter), (RegAddr), (BitMask))

CHECK: line length of 114 exceeds 100 columns
#251: FILE: ./include/hal_intf.h:251:
+#define PHY_SetBBReg(Adapter, RegAddr, BitMask, Data) rtw_hal_write_bbreg((Adapter), (RegAddr), (BitMask), (Data))

CHECK: line length of 121 exceeds 100 columns
#252: FILE: ./include/hal_intf.h:252:
+#define PHY_QueryRFReg(Adapter, eRFPath, RegAddr, BitMask) rtw_hal_read_rfreg((Adapter), (eRFPath), (RegAddr), (BitMask))

CHECK: line length of 134 exceeds 100 columns
#253: FILE: ./include/hal_intf.h:253:
+#define PHY_SetRFReg(Adapter, eRFPath, RegAddr, BitMask, Data) rtw_hal_write_rfreg((Adapter), (eRFPath), (RegAddr), (BitMask), (Data))

CHECK: line length of 119 exceeds 100 columns
#259: FILE: ./include/hal_intf.h:259:
+void rtw_hal_set_chnl_bw(struct adapter *padapter, u8 channel, enum channel_width Bandwidth, u8 Offset40, u8 Offset80);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#275: FILE: ./include/hal_intf.h:275:
+s32 rtw_hal_fill_h2c_cmd(struct adapter *, u8 ElementID, u32 CmdLen, u8 *pCmdBuffer);

total: 0 errors, 2 warnings, 23 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_intf.h has style problems, please review.
------------------
./include/hal_pg.h
------------------
total: 0 errors, 0 warnings, 0 checks, 69 lines checked

./include/hal_pg.h has no obvious style problems and is ready for submission.
-----------------------
./include/hal_phy_cfg.h
-----------------------
CHECK: Avoid CamelCase: <AntennaDiversityValue>
#13: FILE: ./include/hal_phy_cfg.h:13:
+#define AntennaDiversityValue	0x80	/* Adapter->bSoftwareAntennaDiversity ? 0x00:0x80) */

CHECK: Avoid CamelCase: <Reset_Cnt_Limit>
#15: FILE: ./include/hal_phy_cfg.h:15:
+#define Reset_Cnt_Limit		3

CHECK: Please don't use multiple blank lines
#19: FILE: ./include/hal_phy_cfg.h:19:
+
+

CHECK: Please don't use multiple blank lines
#22: FILE: ./include/hal_phy_cfg.h:22:
+
+

CHECK: Alignment should match open parenthesis
#50: FILE: ./include/hal_phy_cfg.h:50:
+u8 PHY_GetTxPowerIndex(struct adapter *padapter, u8 RFPath, u8 Rate,
+			enum channel_width BandWidth, u8 Channel);

CHECK: Alignment should match open parenthesis
#58: FILE: ./include/hal_phy_cfg.h:58:
+void PHY_SetSwChnlBWMode8723B(struct adapter *Adapter, u8 channel,
+				enum channel_width Bandwidth,

total: 0 errors, 0 warnings, 6 checks, 63 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_phy_cfg.h has style problems, please review.
-------------------
./include/hal_phy.h
-------------------
CHECK: line length of 111 exceeds 100 columns
#10: FILE: ./include/hal_phy.h:10:
+/*  Antenna detection method, i.e., using single tone detection or RSSI reported from each antenna detected. */

CHECK: line length of 133 exceeds 100 columns
#15: FILE: ./include/hal_phy.h:15:
+#define IS_ANT_DETECT_SUPPORT_SINGLE_TONE(__Adapter)		((GET_HAL_DATA(__Adapter)->AntDetection) & ANT_DETECT_BY_SINGLE_TONE)

CHECK: Avoid CamelCase: <__Adapter>
#15: FILE: ./include/hal_phy.h:15:
+#define IS_ANT_DETECT_SUPPORT_SINGLE_TONE(__Adapter)		((GET_HAL_DATA(__Adapter)->AntDetection) & ANT_DETECT_BY_SINGLE_TONE)

CHECK: line length of 118 exceeds 100 columns
#16: FILE: ./include/hal_phy.h:16:
+#define IS_ANT_DETECT_SUPPORT_RSSI(__Adapter)		((GET_HAL_DATA(__Adapter)->AntDetection) & ANT_DETECT_BY_RSSI)

CHECK: Please don't use multiple blank lines
#18: FILE: ./include/hal_phy.h:18:
+
+

CHECK: Avoid CamelCase: <SwChnlCmdID>
#54: FILE: ./include/hal_phy.h:54:
+enum SwChnlCmdID {

CHECK: Avoid CamelCase: <CmdID_End>
#55: FILE: ./include/hal_phy.h:55:
+	CmdID_End,

CHECK: Avoid CamelCase: <CmdID_SetTxPowerLevel>
#56: FILE: ./include/hal_phy.h:56:
+	CmdID_SetTxPowerLevel,

CHECK: Avoid CamelCase: <CmdID_BBRegWrite10>
#57: FILE: ./include/hal_phy.h:57:
+	CmdID_BBRegWrite10,

CHECK: Avoid CamelCase: <CmdID_WritePortUlong>
#58: FILE: ./include/hal_phy.h:58:
+	CmdID_WritePortUlong,

CHECK: Avoid CamelCase: <CmdID_WritePortUshort>
#59: FILE: ./include/hal_phy.h:59:
+	CmdID_WritePortUshort,

CHECK: Avoid CamelCase: <CmdID_WritePortUchar>
#60: FILE: ./include/hal_phy.h:60:
+	CmdID_WritePortUchar,

CHECK: Avoid CamelCase: <CmdID_RF_WriteReg>
#61: FILE: ./include/hal_phy.h:61:
+	CmdID_RF_WriteReg,

CHECK: Avoid CamelCase: <SwChnlCmd>
#64: FILE: ./include/hal_phy.h:64:
+struct SwChnlCmd {

WARNING: please, no space before tabs
#66: FILE: ./include/hal_phy.h:66:
+^Iu32 ^I^I^IPara1;$

CHECK: Avoid CamelCase: <Para1>
#66: FILE: ./include/hal_phy.h:66:
+	u32 			Para1;

WARNING: please, no space before tabs
#67: FILE: ./include/hal_phy.h:67:
+^Iu32 ^I^I^IPara2;$

CHECK: Avoid CamelCase: <Para2>
#67: FILE: ./include/hal_phy.h:67:
+	u32 			Para2;

WARNING: please, no space before tabs
#68: FILE: ./include/hal_phy.h:68:
+^Iu32 ^I^I^ImsDelay;$

CHECK: Avoid CamelCase: <msDelay>
#68: FILE: ./include/hal_phy.h:68:
+	u32 			msDelay;

total: 0 errors, 3 warnings, 17 checks, 73 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_phy.h has style problems, please review.
-----------------------
./include/hal_phy_reg.h
-----------------------
total: 0 errors, 0 warnings, 0 checks, 17 lines checked

./include/hal_phy_reg.h has no obvious style problems and is ready for submission.
------------------------
./include/HalPwrSeqCmd.h
------------------------
CHECK: spaces preferred around that '|' (ctx:VxV)
#60: FILE: ./include/HalPwrSeqCmd.h:60:
+#define	PWR_INTF_ALL_MSK		(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	                		       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#60: FILE: ./include/HalPwrSeqCmd.h:60:
+#define	PWR_INTF_ALL_MSK		(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	                		              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#60: FILE: ./include/HalPwrSeqCmd.h:60:
+#define	PWR_INTF_ALL_MSK		(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	                		                     ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#65: FILE: ./include/HalPwrSeqCmd.h:65:
+#define	PWR_FAB_ALL_MSK			(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	               			       ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#65: FILE: ./include/HalPwrSeqCmd.h:65:
+#define	PWR_FAB_ALL_MSK			(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	               			              ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#65: FILE: ./include/HalPwrSeqCmd.h:65:
+#define	PWR_FAB_ALL_MSK			(BIT(0)|BIT(1)|BIT(2)|BIT(3))
        	               			                     ^

CHECK: Please don't use multiple blank lines
#73: FILE: ./include/HalPwrSeqCmd.h:73:
+
+

CHECK: Please don't use multiple blank lines
#90: FILE: ./include/HalPwrSeqCmd.h:90:
+
+

CHECK: Please don't use multiple blank lines
#100: FILE: ./include/HalPwrSeqCmd.h:100:
+
+

WARNING: please, no space before tabs
#102: FILE: ./include/HalPwrSeqCmd.h:102:
+/* ^IPrototype of protected function. */$

CHECK: Lines should not end with a '('
#104: FILE: ./include/HalPwrSeqCmd.h:104:
+u8 HalPwrSeqCmdParsing(

WARNING: please, no space before tabs
#106: FILE: ./include/HalPwrSeqCmd.h:106:
+^Iu8 ^I^ICutVersion,$

WARNING: please, no space before tabs
#107: FILE: ./include/HalPwrSeqCmd.h:107:
+^Iu8 ^I^IFabVersion,$

WARNING: please, no space before tabs
#108: FILE: ./include/HalPwrSeqCmd.h:108:
+^Iu8 ^I^IInterfaceType,$

total: 0 errors, 4 warnings, 10 checks, 111 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/HalPwrSeqCmd.h has style problems, please review.
-----------------------
./include/hal_pwr_seq.h
-----------------------
WARNING: Block comments use * on subsequent lines
#8: FILE: ./include/hal_pwr_seq.h:8:
+/*
+	Check document WM-20130815-JackieLau-RTL8723B_Power_Architecture v08.vsd

CHECK: Please don't use multiple blank lines
#38: FILE: ./include/hal_pwr_seq.h:38:
+
+

CHECK: line length of 145 exceeds 100 columns
#39: FILE: ./include/hal_pwr_seq.h:39:
+#define RTL8723B_TRANS_CARDEMU_TO_ACT														\

ERROR: Macros with complex values should be enclosed in parentheses
#39: FILE: ./include/hal_pwr_seq.h:39:
+#define RTL8723B_TRANS_CARDEMU_TO_ACT														\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0}, /*0x20[0] = 1b'1 enable LDOA12 MACRO block for all interface*/   \
+	{0x0067, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x67[0] = 0 to disable BT_GPS_SEL pins*/	\
+	{0x0001, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 1, PWRSEQ_DELAY_MS},/*Delay 1ms*/   \
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, 0}, /*0x00[5] = 1b'0 release analog Ips to digital , 1:isolation*/   \
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3|BIT2), 0},/* disable SW LPS 0x04[10]= 0 and WLSUS_EN 0x04[11]= 0*/	\
+	{0x0075, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* Disable USB suspend */	\
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, BIT1},/* wait till 0x04[17] = 1    power ready*/	\
+	{0x0075, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/* Enable USB suspend */	\
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* release WLON reset  0x04[16]= 1*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, 0},/* disable HWPDN 0x04[15]= 0*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3), 0},/* disable WL suspend*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* polling until return 0*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT0, 0},/**/	\
+	{0x0010, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, BIT6},/* Enable WL control XTAL setting*/	\
+	{0x0049, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable falling edge triggering interrupt*/\
+	{0x0063, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable GPIO9 interrupt mode*/\
+	{0x0062, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Enable GPIO9 input mode*/\
+	{0x0058, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Enable HSISR GPIO[C:0] interrupt*/\
+	{0x005A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable HSISR GPIO9 interrupt*/\
+	{0x0068, PWR_CUT_TESTCHIP_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3, BIT3},/*For GPIO9 internal pull high setting by test chip*/\
+	{0x0069, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, BIT6},/*For GPIO9 internal pull high setting*/\
+

CHECK: line length of 145 exceeds 100 columns
#40: FILE: ./include/hal_pwr_seq.h:40:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#41: FILE: ./include/hal_pwr_seq.h:41:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\

CHECK: line length of 199 exceeds 100 columns
#42: FILE: ./include/hal_pwr_seq.h:42:
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0}, /*0x20[0] = 1b'1 enable LDOA12 MACRO block for all interface*/   \

CHECK: spaces preferred around that '|' (ctx:VxV)
#42: FILE: ./include/hal_pwr_seq.h:42:
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0}, /*0x20[0] = 1b'1 enable LDOA12 MACRO block for all interface*/   \
 	                                                           ^

CHECK: line length of 177 exceeds 100 columns
#43: FILE: ./include/hal_pwr_seq.h:43:
+	{0x0067, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x67[0] = 0 to disable BT_GPS_SEL pins*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#43: FILE: ./include/hal_pwr_seq.h:43:
+	{0x0067, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x67[0] = 0 to disable BT_GPS_SEL pins*/	\
 	                                                           ^

CHECK: line length of 157 exceeds 100 columns
#44: FILE: ./include/hal_pwr_seq.h:44:
+	{0x0001, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 1, PWRSEQ_DELAY_MS},/*Delay 1ms*/   \

CHECK: spaces preferred around that '|' (ctx:VxV)
#44: FILE: ./include/hal_pwr_seq.h:44:
+	{0x0001, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 1, PWRSEQ_DELAY_MS},/*Delay 1ms*/   \
 	                                                           ^

CHECK: line length of 196 exceeds 100 columns
#45: FILE: ./include/hal_pwr_seq.h:45:
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, 0}, /*0x00[5] = 1b'0 release analog Ips to digital , 1:isolation*/   \

CHECK: spaces preferred around that '|' (ctx:VxV)
#45: FILE: ./include/hal_pwr_seq.h:45:
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, 0}, /*0x00[5] = 1b'0 release analog Ips to digital , 1:isolation*/   \
 	                                                           ^

CHECK: line length of 185 exceeds 100 columns
#46: FILE: ./include/hal_pwr_seq.h:46:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3|BIT2), 0},/* disable SW LPS 0x04[10]= 0 and WLSUS_EN 0x04[11]= 0*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#46: FILE: ./include/hal_pwr_seq.h:46:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3|BIT2), 0},/* disable SW LPS 0x04[10]= 0 and WLSUS_EN 0x04[11]= 0*/	\
 	                                                                                                   ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#46: FILE: ./include/hal_pwr_seq.h:46:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3|BIT2), 0},/* disable SW LPS 0x04[10]= 0 and WLSUS_EN 0x04[11]= 0*/	\
 	                                                                                                        ^

CHECK: line length of 145 exceeds 100 columns
#47: FILE: ./include/hal_pwr_seq.h:47:
+	{0x0075, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* Disable USB suspend */	\

CHECK: line length of 161 exceeds 100 columns
#48: FILE: ./include/hal_pwr_seq.h:48:
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, BIT1},/* wait till 0x04[17] = 1    power ready*/	\

CHECK: line length of 137 exceeds 100 columns
#49: FILE: ./include/hal_pwr_seq.h:49:
+	{0x0075, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/* Enable USB suspend */	\

CHECK: line length of 153 exceeds 100 columns
#50: FILE: ./include/hal_pwr_seq.h:50:
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* release WLON reset  0x04[16]= 1*/	\

CHECK: line length of 145 exceeds 100 columns
#51: FILE: ./include/hal_pwr_seq.h:51:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, 0},/* disable HWPDN 0x04[15]= 0*/	\

CHECK: line length of 145 exceeds 100 columns
#52: FILE: ./include/hal_pwr_seq.h:52:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3), 0},/* disable WL suspend*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#52: FILE: ./include/hal_pwr_seq.h:52:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, (BIT4|BIT3), 0},/* disable WL suspend*/	\
 	                                                                                                   ^

CHECK: line length of 145 exceeds 100 columns
#53: FILE: ./include/hal_pwr_seq.h:53:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* polling until return 0*/	\

CHECK: line length of 121 exceeds 100 columns
#54: FILE: ./include/hal_pwr_seq.h:54:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT0, 0},/**/	\

CHECK: line length of 153 exceeds 100 columns
#55: FILE: ./include/hal_pwr_seq.h:55:
+	{0x0010, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, BIT6},/* Enable WL control XTAL setting*/	\

CHECK: line length of 159 exceeds 100 columns
#56: FILE: ./include/hal_pwr_seq.h:56:
+	{0x0049, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable falling edge triggering interrupt*/\

CHECK: line length of 146 exceeds 100 columns
#57: FILE: ./include/hal_pwr_seq.h:57:
+	{0x0063, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable GPIO9 interrupt mode*/\

CHECK: line length of 139 exceeds 100 columns
#58: FILE: ./include/hal_pwr_seq.h:58:
+	{0x0062, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Enable GPIO9 input mode*/\

CHECK: line length of 151 exceeds 100 columns
#59: FILE: ./include/hal_pwr_seq.h:59:
+	{0x0058, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Enable HSISR GPIO[C:0] interrupt*/\

CHECK: line length of 147 exceeds 100 columns
#60: FILE: ./include/hal_pwr_seq.h:60:
+	{0x005A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/*Enable HSISR GPIO9 interrupt*/\

CHECK: line length of 173 exceeds 100 columns
#61: FILE: ./include/hal_pwr_seq.h:61:
+	{0x0068, PWR_CUT_TESTCHIP_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3, BIT3},/*For GPIO9 internal pull high setting by test chip*/\

CHECK: line length of 155 exceeds 100 columns
#62: FILE: ./include/hal_pwr_seq.h:62:
+	{0x0069, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, BIT6},/*For GPIO9 internal pull high setting*/\

CHECK: Please don't use multiple blank lines
#64: FILE: ./include/hal_pwr_seq.h:64:
+
+

CHECK: line length of 137 exceeds 100 columns
#65: FILE: ./include/hal_pwr_seq.h:65:
+#define RTL8723B_TRANS_ACT_TO_CARDEMU													\

ERROR: Macros with complex values should be enclosed in parentheses
#65: FILE: ./include/hal_pwr_seq.h:65:
+#define RTL8723B_TRANS_ACT_TO_CARDEMU													\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\
+	{0x001F, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*0x1F[7:0] = 0 turn off RF*/	\
+	{0x0049, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Enable rising edge triggering interrupt*/ \
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* release WLON reset  0x04[16]= 1*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*0x04[9] = 1 turn off MAC by HW state machine*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, 0}, /*wait till 0x04[9] = 0 polling until return 0 to disable*/	\
+	{0x0010, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, 0},/* Enable BT control XTAL setting*/\
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5}, /*0x00[5] = 1b'1 analog Ips to digital , 1:isolation*/   \
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x20[0] = 1b'0 disable LDOA12 MACRO block*/\
+

CHECK: line length of 145 exceeds 100 columns
#66: FILE: ./include/hal_pwr_seq.h:66:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#67: FILE: ./include/hal_pwr_seq.h:67:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\

CHECK: line length of 145 exceeds 100 columns
#68: FILE: ./include/hal_pwr_seq.h:68:
+	{0x001F, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*0x1F[7:0] = 0 turn off RF*/	\

CHECK: line length of 156 exceeds 100 columns
#69: FILE: ./include/hal_pwr_seq.h:69:
+	{0x0049, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Enable rising edge triggering interrupt*/ \

CHECK: line length of 153 exceeds 100 columns
#70: FILE: ./include/hal_pwr_seq.h:70:
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/* release WLON reset  0x04[16]= 1*/	\

CHECK: line length of 169 exceeds 100 columns
#71: FILE: ./include/hal_pwr_seq.h:71:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*0x04[9] = 1 turn off MAC by HW state machine*/	\

CHECK: line length of 177 exceeds 100 columns
#72: FILE: ./include/hal_pwr_seq.h:72:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, 0}, /*wait till 0x04[9] = 0 polling until return 0 to disable*/	\

CHECK: line length of 147 exceeds 100 columns
#73: FILE: ./include/hal_pwr_seq.h:73:
+	{0x0010, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6, 0},/* Enable BT control XTAL setting*/\

CHECK: line length of 191 exceeds 100 columns
#74: FILE: ./include/hal_pwr_seq.h:74:
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5}, /*0x00[5] = 1b'1 analog Ips to digital , 1:isolation*/   \

CHECK: spaces preferred around that '|' (ctx:VxV)
#74: FILE: ./include/hal_pwr_seq.h:74:
+	{0x0000, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5}, /*0x00[5] = 1b'1 analog Ips to digital , 1:isolation*/   \
 	                                                           ^

CHECK: line length of 176 exceeds 100 columns
#75: FILE: ./include/hal_pwr_seq.h:75:
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x20[0] = 1b'0 disable LDOA12 MACRO block*/\

CHECK: spaces preferred around that '|' (ctx:VxV)
#75: FILE: ./include/hal_pwr_seq.h:75:
+	{0x0020, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x20[0] = 1b'0 disable LDOA12 MACRO block*/\
 	                                                           ^

CHECK: Please don't use multiple blank lines
#77: FILE: ./include/hal_pwr_seq.h:77:
+
+

CHECK: line length of 137 exceeds 100 columns
#78: FILE: ./include/hal_pwr_seq.h:78:
+#define RTL8723B_TRANS_CARDEMU_TO_SUS													\

ERROR: Macros with complex values should be enclosed in parentheses
#78: FILE: ./include/hal_pwr_seq.h:78:
+#define RTL8723B_TRANS_CARDEMU_TO_SUS													\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4|BIT3, (BIT4|BIT3)}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07[7:0] = 0x20 SDIO SOP option to disable BG/MB/ACK/SWR*/   \
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3|BIT4}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, BIT0}, /*Set SDIO suspend local register*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, 0}, /*wait power state to suspend*/

CHECK: line length of 145 exceeds 100 columns
#79: FILE: ./include/hal_pwr_seq.h:79:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#80: FILE: ./include/hal_pwr_seq.h:80:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\

CHECK: line length of 185 exceeds 100 columns
#81: FILE: ./include/hal_pwr_seq.h:81:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4|BIT3, (BIT4|BIT3)}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#81: FILE: ./include/hal_pwr_seq.h:81:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4|BIT3, (BIT4|BIT3)}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
 	                                                                                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#81: FILE: ./include/hal_pwr_seq.h:81:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4|BIT3, (BIT4|BIT3)}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
 	                                                                                                              ^

CHECK: line length of 185 exceeds 100 columns
#82: FILE: ./include/hal_pwr_seq.h:82:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#82: FILE: ./include/hal_pwr_seq.h:82:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
 	                                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#82: FILE: ./include/hal_pwr_seq.h:82:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
 	                                                                                                                    ^

CHECK: line length of 163 exceeds 100 columns
#83: FILE: ./include/hal_pwr_seq.h:83:
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \

CHECK: line length of 181 exceeds 100 columns
#84: FILE: ./include/hal_pwr_seq.h:84:
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07[7:0] = 0x20 SDIO SOP option to disable BG/MB/ACK/SWR*/   \

CHECK: line length of 177 exceeds 100 columns
#85: FILE: ./include/hal_pwr_seq.h:85:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3|BIT4}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#85: FILE: ./include/hal_pwr_seq.h:85:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3|BIT4}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
 	                                                                                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#85: FILE: ./include/hal_pwr_seq.h:85:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3|BIT4}, /*0x04[12:11] = 2b'11 enable WL suspend for PCIe*/	\
 	                                                                                                             ^

CHECK: line length of 161 exceeds 100 columns
#86: FILE: ./include/hal_pwr_seq.h:86:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, BIT0}, /*Set SDIO suspend local register*/	\

CHECK: line length of 147 exceeds 100 columns
#87: FILE: ./include/hal_pwr_seq.h:87:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, 0}, /*wait power state to suspend*/

CHECK: line length of 137 exceeds 100 columns
#89: FILE: ./include/hal_pwr_seq.h:89:
+#define RTL8723B_TRANS_SUS_TO_CARDEMU													\

ERROR: Macros with complex values should be enclosed in parentheses
#89: FILE: ./include/hal_pwr_seq.h:89:
+#define RTL8723B_TRANS_SUS_TO_CARDEMU													\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3 | BIT7, 0}, /*clear suspend enable and power down enable*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, 0}, /*Set SDIO suspend local register*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, BIT1}, /*wait power state to suspend*/\
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x23[4] = 1b'0 12H LDO enter normal mode*/   \
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/

CHECK: line length of 145 exceeds 100 columns
#90: FILE: ./include/hal_pwr_seq.h:90:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#91: FILE: ./include/hal_pwr_seq.h:91:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value },  comments here*/								\

CHECK: line length of 169 exceeds 100 columns
#92: FILE: ./include/hal_pwr_seq.h:92:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3 | BIT7, 0}, /*clear suspend enable and power down enable*/	\

CHECK: line length of 153 exceeds 100 columns
#93: FILE: ./include/hal_pwr_seq.h:93:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, 0}, /*Set SDIO suspend local register*/	\

CHECK: line length of 151 exceeds 100 columns
#94: FILE: ./include/hal_pwr_seq.h:94:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, BIT1}, /*wait power state to suspend*/\

CHECK: line length of 161 exceeds 100 columns
#95: FILE: ./include/hal_pwr_seq.h:95:
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x23[4] = 1b'0 12H LDO enter normal mode*/   \

CHECK: line length of 157 exceeds 100 columns
#96: FILE: ./include/hal_pwr_seq.h:96:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/

CHECK: spaces preferred around that '|' (ctx:VxV)
#96: FILE: ./include/hal_pwr_seq.h:96:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/
 	                                                                                                  ^

CHECK: line length of 145 exceeds 100 columns
#98: FILE: ./include/hal_pwr_seq.h:98:
+#define RTL8723B_TRANS_CARDEMU_TO_CARDDIS													\

ERROR: Macros with complex values should be enclosed in parentheses
#98: FILE: ./include/hal_pwr_seq.h:98:
+#define RTL8723B_TRANS_CARDEMU_TO_CARDDIS													\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, omments here*/								\
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07 = 0x20 , SOP option to disable BG/MB*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, BIT2}, /*0x04[10] = 1, enable SW LPS*/	\
+	{0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1}, /*0x48[16] = 1 to enable GPIO9 as EXT WAKEUP*/   \
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, BIT0}, /*Set SDIO suspend local register*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, 0}, /*wait power state to suspend*/

CHECK: line length of 145 exceeds 100 columns
#99: FILE: ./include/hal_pwr_seq.h:99:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#100: FILE: ./include/hal_pwr_seq.h:100:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, omments here*/								\

CHECK: line length of 169 exceeds 100 columns
#101: FILE: ./include/hal_pwr_seq.h:101:
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07 = 0x20 , SOP option to disable BG/MB*/	\

CHECK: line length of 185 exceeds 100 columns
#102: FILE: ./include/hal_pwr_seq.h:102:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\

CHECK: spaces preferred around that '|' (ctx:VxV)
#102: FILE: ./include/hal_pwr_seq.h:102:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
 	                                                           ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#102: FILE: ./include/hal_pwr_seq.h:102:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK|PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, BIT3}, /*0x04[12:11] = 2b'01 enable WL suspend*/	\
 	                                                                                                                    ^

CHECK: line length of 153 exceeds 100 columns
#103: FILE: ./include/hal_pwr_seq.h:103:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, BIT2}, /*0x04[10] = 1, enable SW LPS*/	\

CHECK: line length of 162 exceeds 100 columns
#104: FILE: ./include/hal_pwr_seq.h:104:
+	{0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1}, /*0x48[16] = 1 to enable GPIO9 as EXT WAKEUP*/   \

CHECK: line length of 163 exceeds 100 columns
#105: FILE: ./include/hal_pwr_seq.h:105:
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \

CHECK: line length of 161 exceeds 100 columns
#106: FILE: ./include/hal_pwr_seq.h:106:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, BIT0}, /*Set SDIO suspend local register*/	\

CHECK: line length of 147 exceeds 100 columns
#107: FILE: ./include/hal_pwr_seq.h:107:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, 0}, /*wait power state to suspend*/

CHECK: line length of 145 exceeds 100 columns
#109: FILE: ./include/hal_pwr_seq.h:109:
+#define RTL8723B_TRANS_CARDDIS_TO_CARDEMU													\

ERROR: Macros with complex values should be enclosed in parentheses
#109: FILE: ./include/hal_pwr_seq.h:109:
+#define RTL8723B_TRANS_CARDDIS_TO_CARDEMU													\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3 | BIT7, 0}, /*clear suspend enable and power down enable*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, 0}, /*Set SDIO suspend local register*/	\
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, BIT1}, /*wait power state to suspend*/\
+        {0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x48[16] = 0 to disable GPIO9 as EXT WAKEUP*/   \
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/\
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x23[4] = 1b'0 12H LDO enter normal mode*/   \
+	{0x0301, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*PCIe DMA start*/

CHECK: line length of 145 exceeds 100 columns
#110: FILE: ./include/hal_pwr_seq.h:110:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#111: FILE: ./include/hal_pwr_seq.h:111:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 169 exceeds 100 columns
#112: FILE: ./include/hal_pwr_seq.h:112:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3 | BIT7, 0}, /*clear suspend enable and power down enable*/	\

CHECK: line length of 153 exceeds 100 columns
#113: FILE: ./include/hal_pwr_seq.h:113:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, BIT0, 0}, /*Set SDIO suspend local register*/	\

CHECK: line length of 151 exceeds 100 columns
#114: FILE: ./include/hal_pwr_seq.h:114:
+	{0x0086, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_POLLING, BIT1, BIT1}, /*wait power state to suspend*/\

CHECK: line length of 163 exceeds 100 columns
#115: FILE: ./include/hal_pwr_seq.h:115:
+        {0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x48[16] = 0 to disable GPIO9 as EXT WAKEUP*/   \

ERROR: code indent should use tabs where possible
#115: FILE: ./include/hal_pwr_seq.h:115:
+        {0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x48[16] = 0 to disable GPIO9 as EXT WAKEUP*/   \$

WARNING: please, no spaces at the start of a line
#115: FILE: ./include/hal_pwr_seq.h:115:
+        {0x004A, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0}, /*0x48[16] = 0 to disable GPIO9 as EXT WAKEUP*/   \$

CHECK: line length of 158 exceeds 100 columns
#116: FILE: ./include/hal_pwr_seq.h:116:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/\

CHECK: spaces preferred around that '|' (ctx:VxV)
#116: FILE: ./include/hal_pwr_seq.h:116:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT3|BIT4, 0}, /*0x04[12:11] = 2b'01enable WL suspend*/\
 	                                                                                                  ^

CHECK: line length of 161 exceeds 100 columns
#117: FILE: ./include/hal_pwr_seq.h:117:
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*0x23[4] = 1b'0 12H LDO enter normal mode*/   \

CHECK: line length of 129 exceeds 100 columns
#118: FILE: ./include/hal_pwr_seq.h:118:
+	{0x0301, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*PCIe DMA start*/

CHECK: Please don't use multiple blank lines
#120: FILE: ./include/hal_pwr_seq.h:120:
+
+

CHECK: line length of 129 exceeds 100 columns
#121: FILE: ./include/hal_pwr_seq.h:121:
+#define RTL8723B_TRANS_CARDEMU_TO_PDN												\

ERROR: Macros with complex values should be enclosed in parentheses
#121: FILE: ./include/hal_pwr_seq.h:121:
+#define RTL8723B_TRANS_CARDEMU_TO_PDN												\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK|PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07[7:0] = 0x20 SOP option to disable BG/MB/ACK/SWR*/   \
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/* 0x04[16] = 0*/\
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, BIT7},/* 0x04[15] = 1*/

CHECK: line length of 145 exceeds 100 columns
#122: FILE: ./include/hal_pwr_seq.h:122:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#123: FILE: ./include/hal_pwr_seq.h:123:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 163 exceeds 100 columns
#124: FILE: ./include/hal_pwr_seq.h:124:
+	{0x0023, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4}, /*0x23[4] = 1b'1 12H LDO enter sleep mode*/   \

CHECK: line length of 193 exceeds 100 columns
#125: FILE: ./include/hal_pwr_seq.h:125:
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK|PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07[7:0] = 0x20 SOP option to disable BG/MB/ACK/SWR*/   \

CHECK: spaces preferred around that '|' (ctx:VxV)
#125: FILE: ./include/hal_pwr_seq.h:125:
+	{0x0007, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK|PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x20}, /*0x07[7:0] = 0x20 SOP option to disable BG/MB/ACK/SWR*/   \
 	                                                            ^

CHECK: line length of 129 exceeds 100 columns
#126: FILE: ./include/hal_pwr_seq.h:126:
+	{0x0006, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/* 0x04[16] = 0*/\

CHECK: line length of 131 exceeds 100 columns
#127: FILE: ./include/hal_pwr_seq.h:127:
+	{0x0005, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, BIT7},/* 0x04[15] = 1*/

CHECK: line length of 145 exceeds 100 columns
#129: FILE: ./include/hal_pwr_seq.h:129:
+#define RTL8723B_TRANS_ACT_TO_LPS														\

ERROR: Macros with complex values should be enclosed in parentheses
#129: FILE: ./include/hal_pwr_seq.h:129:
+#define RTL8723B_TRANS_ACT_TO_LPS														\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0301, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF},/*PCIe DMA stop*/	\
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF},/*Tx Pause*/	\
+	{0x05F8, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\
+	{0x05F9, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\
+	{0x05FA, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\
+	{0x05FB, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 0, PWRSEQ_DELAY_US},/*Delay 1us*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Whole BB is reset*/	\
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x03},/*Reset MAC TRX*/	\
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*check if removed later*/	\
+	{0x0093, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x00},/*When driver enter Sus/ Disable, enable LOP for BT*/	\
+	{0x0553, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5},/*Respond TxOK to scheduler*/	\
+

CHECK: line length of 145 exceeds 100 columns
#130: FILE: ./include/hal_pwr_seq.h:130:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#131: FILE: ./include/hal_pwr_seq.h:131:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 137 exceeds 100 columns
#132: FILE: ./include/hal_pwr_seq.h:132:
+	{0x0301, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF},/*PCIe DMA stop*/	\

CHECK: line length of 129 exceeds 100 columns
#133: FILE: ./include/hal_pwr_seq.h:133:
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF},/*Tx Pause*/	\

CHECK: line length of 169 exceeds 100 columns
#134: FILE: ./include/hal_pwr_seq.h:134:
+	{0x05F8, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\

CHECK: line length of 169 exceeds 100 columns
#135: FILE: ./include/hal_pwr_seq.h:135:
+	{0x05F9, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\

CHECK: line length of 169 exceeds 100 columns
#136: FILE: ./include/hal_pwr_seq.h:136:
+	{0x05FA, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\

CHECK: line length of 169 exceeds 100 columns
#137: FILE: ./include/hal_pwr_seq.h:137:
+	{0x05FB, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*Should be zero if no packet is transmitting*/	\

CHECK: line length of 169 exceeds 100 columns
#138: FILE: ./include/hal_pwr_seq.h:138:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\

CHECK: line length of 137 exceeds 100 columns
#139: FILE: ./include/hal_pwr_seq.h:139:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 0, PWRSEQ_DELAY_US},/*Delay 1us*/	\

CHECK: line length of 137 exceeds 100 columns
#140: FILE: ./include/hal_pwr_seq.h:140:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*Whole BB is reset*/	\

CHECK: line length of 137 exceeds 100 columns
#141: FILE: ./include/hal_pwr_seq.h:141:
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x03},/*Reset MAC TRX*/	\

CHECK: line length of 145 exceeds 100 columns
#142: FILE: ./include/hal_pwr_seq.h:142:
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*check if removed later*/	\

CHECK: line length of 177 exceeds 100 columns
#143: FILE: ./include/hal_pwr_seq.h:143:
+	{0x0093, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x00},/*When driver enter Sus/ Disable, enable LOP for BT*/	\

CHECK: line length of 145 exceeds 100 columns
#144: FILE: ./include/hal_pwr_seq.h:144:
+	{0x0553, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5},/*Respond TxOK to scheduler*/	\

CHECK: Please don't use multiple blank lines
#146: FILE: ./include/hal_pwr_seq.h:146:
+
+

CHECK: line length of 153 exceeds 100 columns
#147: FILE: ./include/hal_pwr_seq.h:147:
+#define RTL8723B_TRANS_LPS_TO_ACT															\

ERROR: Macros with complex values should be enclosed in parentheses
#147: FILE: ./include/hal_pwr_seq.h:147:
+#define RTL8723B_TRANS_LPS_TO_ACT															\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, 0xFF, 0x84}, /*SDIO RPWM*/\
+	{0xFE58, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x84}, /*USB RPWM*/\
+	{0x0361, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x84}, /*PCIe RPWM*/\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 0, PWRSEQ_DELAY_MS}, /*Delay*/\
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*.	0x08[4] = 0		 switch TSF to 40M*/\
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT7, 0}, /*Polling 0x109[7]= 0  TSF in 40M*/\
+	{0x0029, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6|BIT7, 0}, /*.	0x29[7:6] = 2b'00	 enable BB clock*/\
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*.	0x101[1] = 1*/\
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF}, /*.	0x100[7:0] = 0xFF	 enable WMAC TRX*/\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1|BIT0, BIT1|BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0}, /*.	0x522 = 0*/

CHECK: line length of 145 exceeds 100 columns
#148: FILE: ./include/hal_pwr_seq.h:148:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#149: FILE: ./include/hal_pwr_seq.h:149:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 131 exceeds 100 columns
#150: FILE: ./include/hal_pwr_seq.h:150:
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_SDIO, PWR_CMD_WRITE, 0xFF, 0x84}, /*SDIO RPWM*/\

CHECK: line length of 128 exceeds 100 columns
#151: FILE: ./include/hal_pwr_seq.h:151:
+	{0xFE58, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_USB_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x84}, /*USB RPWM*/\

CHECK: line length of 129 exceeds 100 columns
#152: FILE: ./include/hal_pwr_seq.h:152:
+	{0x0361, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_PCI_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x84}, /*PCIe RPWM*/\

CHECK: line length of 133 exceeds 100 columns
#153: FILE: ./include/hal_pwr_seq.h:153:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_DELAY, 0, PWRSEQ_DELAY_MS}, /*Delay*/\

CHECK: line length of 165 exceeds 100 columns
#154: FILE: ./include/hal_pwr_seq.h:154:
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0}, /*.	0x08[4] = 0		 switch TSF to 40M*/\

CHECK: line length of 150 exceeds 100 columns
#155: FILE: ./include/hal_pwr_seq.h:155:
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT7, 0}, /*Polling 0x109[7]= 0  TSF in 40M*/\

CHECK: line length of 171 exceeds 100 columns
#156: FILE: ./include/hal_pwr_seq.h:156:
+	{0x0029, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6|BIT7, 0}, /*.	0x29[7:6] = 2b'00	 enable BB clock*/\

CHECK: spaces preferred around that '|' (ctx:VxV)
#156: FILE: ./include/hal_pwr_seq.h:156:
+	{0x0029, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT6|BIT7, 0}, /*.	0x29[7:6] = 2b'00	 enable BB clock*/\
 	                                                                                                  ^

CHECK: line length of 135 exceeds 100 columns
#157: FILE: ./include/hal_pwr_seq.h:157:
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*.	0x101[1] = 1*/\

CHECK: line length of 163 exceeds 100 columns
#158: FILE: ./include/hal_pwr_seq.h:158:
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF}, /*.	0x100[7:0] = 0xFF	 enable WMAC TRX*/\

CHECK: line length of 179 exceeds 100 columns
#159: FILE: ./include/hal_pwr_seq.h:159:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1|BIT0, BIT1|BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\

CHECK: spaces preferred around that '|' (ctx:VxV)
#159: FILE: ./include/hal_pwr_seq.h:159:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1|BIT0, BIT1|BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\
 	                                                                                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#159: FILE: ./include/hal_pwr_seq.h:159:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1|BIT0, BIT1|BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\
 	                                                                                                             ^

CHECK: line length of 131 exceeds 100 columns
#160: FILE: ./include/hal_pwr_seq.h:160:
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_ALL_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0}, /*.	0x522 = 0*/

CHECK: Please don't use multiple blank lines
#162: FILE: ./include/hal_pwr_seq.h:162:
+
+

CHECK: line length of 145 exceeds 100 columns
#163: FILE: ./include/hal_pwr_seq.h:163:
+ #define RTL8723B_TRANS_ACT_TO_SWLPS														\

ERROR: Macros with complex values should be enclosed in parentheses
#163: FILE: ./include/hal_pwr_seq.h:163:
+ #define RTL8723B_TRANS_ACT_TO_SWLPS														\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0194, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*enable 32 K source*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*CCK and OFDM are enable*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*CCK and OFDM are enable*/	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x3F},/*Reset MAC TRX*/	\
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*disable security engine*/	\
+	{0x0093, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x40},/*When driver enter Sus/ Disable, enable LOP for BT*/	\
+	{0x0553, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5},/*reset dual TSF*/	\
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, 0},/*Reset CPU*/	\
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*Reset MCUFWDL register*/	\
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*Reset CPU IO Wrapper*/	\
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*Reset CPU IO Wrapper*/	\
+	{0x0287, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*polling RXFF packet number = 0 */	\
+	{0x0286, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, BIT1},/*polling RXDMA idle */	\
+	{0x013D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Clear FW RPWM interrupt */\
+	{0x0139, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Set FW RPWM interrupt source*/\
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4},/*switch TSF to 32K*/\
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, BIT7},/*polling TSF stable*/\
+	{0x0090, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Set FW LPS*/	\
+	{0x0090, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT0, 0},/*polling FW LPS ready */

CHECK: line length of 145 exceeds 100 columns
#164: FILE: ./include/hal_pwr_seq.h:164:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#165: FILE: ./include/hal_pwr_seq.h:165:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 145 exceeds 100 columns
#166: FILE: ./include/hal_pwr_seq.h:166:
+	{0x0194, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*enable 32 K source*/	\

CHECK: line length of 169 exceeds 100 columns
#167: FILE: ./include/hal_pwr_seq.h:167:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\

CHECK: line length of 145 exceeds 100 columns
#168: FILE: ./include/hal_pwr_seq.h:168:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*CCK and OFDM are enable*/	\

CHECK: line length of 169 exceeds 100 columns
#169: FILE: ./include/hal_pwr_seq.h:169:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\

CHECK: line length of 145 exceeds 100 columns
#170: FILE: ./include/hal_pwr_seq.h:170:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*CCK and OFDM are enable*/	\

CHECK: line length of 169 exceeds 100 columns
#171: FILE: ./include/hal_pwr_seq.h:171:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*CCK and OFDM are disabled, and clock are gated*/	\

CHECK: line length of 137 exceeds 100 columns
#172: FILE: ./include/hal_pwr_seq.h:172:
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x3F},/*Reset MAC TRX*/	\

CHECK: line length of 145 exceeds 100 columns
#173: FILE: ./include/hal_pwr_seq.h:173:
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, 0},/*disable security engine*/	\

CHECK: line length of 177 exceeds 100 columns
#174: FILE: ./include/hal_pwr_seq.h:174:
+	{0x0093, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x40},/*When driver enter Sus/ Disable, enable LOP for BT*/	\

CHECK: line length of 137 exceeds 100 columns
#175: FILE: ./include/hal_pwr_seq.h:175:
+	{0x0553, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT5, BIT5},/*reset dual TSF*/	\

CHECK: line length of 129 exceeds 100 columns
#176: FILE: ./include/hal_pwr_seq.h:176:
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, 0},/*Reset CPU*/	\

CHECK: line length of 145 exceeds 100 columns
#177: FILE: ./include/hal_pwr_seq.h:177:
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0},/*Reset MCUFWDL register*/	\

CHECK: line length of 145 exceeds 100 columns
#178: FILE: ./include/hal_pwr_seq.h:178:
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*Reset CPU IO Wrapper*/	\

CHECK: line length of 145 exceeds 100 columns
#179: FILE: ./include/hal_pwr_seq.h:179:
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 1},/*Reset CPU IO Wrapper*/	\

CHECK: line length of 153 exceeds 100 columns
#180: FILE: ./include/hal_pwr_seq.h:180:
+	{0x0287, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, 0xFF, 0},/*polling RXFF packet number = 0 */	\

CHECK: line length of 145 exceeds 100 columns
#181: FILE: ./include/hal_pwr_seq.h:181:
+	{0x0286, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT1, BIT1},/*polling RXDMA idle */	\

CHECK: line length of 144 exceeds 100 columns
#182: FILE: ./include/hal_pwr_seq.h:182:
+	{0x013D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Clear FW RPWM interrupt */\

CHECK: line length of 148 exceeds 100 columns
#183: FILE: ./include/hal_pwr_seq.h:183:
+	{0x0139, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Set FW RPWM interrupt source*/\

CHECK: line length of 137 exceeds 100 columns
#184: FILE: ./include/hal_pwr_seq.h:184:
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, BIT4},/*switch TSF to 32K*/\

CHECK: line length of 138 exceeds 100 columns
#185: FILE: ./include/hal_pwr_seq.h:185:
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, BIT7},/*polling TSF stable*/\

CHECK: line length of 137 exceeds 100 columns
#186: FILE: ./include/hal_pwr_seq.h:186:
+	{0x0090, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*Set FW LPS*/	\

CHECK: line length of 139 exceeds 100 columns
#187: FILE: ./include/hal_pwr_seq.h:187:
+	{0x0090, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT0, 0},/*polling FW LPS ready */

CHECK: Please don't use multiple blank lines
#189: FILE: ./include/hal_pwr_seq.h:189:
+
+

CHECK: line length of 153 exceeds 100 columns
#190: FILE: ./include/hal_pwr_seq.h:190:
+#define RTL8723B_TRANS_SWLPS_TO_ACT															\

ERROR: Macros with complex values should be enclosed in parentheses
#190: FILE: ./include/hal_pwr_seq.h:190:
+#define RTL8723B_TRANS_SWLPS_TO_ACT															\
+	/* format */																\
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0},/*switch TSF to 32K*/\
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, 0},/*polling TSF stable*/\
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*.	0x101[1] = 1, enable security engine*/\
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF}, /*.	0x100[7:0] = 0xFF	 enable WMAC TRX*/\
+	{0x06B7, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x09}, /*.	reset MAC rx state machine*/\
+	{0x06B4, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x86}, /*.	reset MAC rx state machine*/\
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/* set CPU RAM code ready*/	\
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*Reset CPU IO Wrapper*/	\
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, 0},/* Enable CPU*/	\
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*enable CPU IO Wrapper*/	\
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, BIT2},/* Enable CPU*/	\
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT7, BIT7},/*polling FW init ready */	\
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT6, BIT6},/*polling FW init ready */	\
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0}, /*.	0x522 = 0*/

CHECK: line length of 145 exceeds 100 columns
#191: FILE: ./include/hal_pwr_seq.h:191:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#192: FILE: ./include/hal_pwr_seq.h:192:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: line length of 134 exceeds 100 columns
#193: FILE: ./include/hal_pwr_seq.h:193:
+	{0x0008, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT4, 0},/*switch TSF to 32K*/\

CHECK: line length of 135 exceeds 100 columns
#194: FILE: ./include/hal_pwr_seq.h:194:
+	{0x0109, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT7, 0},/*polling TSF stable*/\

CHECK: line length of 159 exceeds 100 columns
#195: FILE: ./include/hal_pwr_seq.h:195:
+	{0x0101, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1}, /*.	0x101[1] = 1, enable security engine*/\

CHECK: line length of 163 exceeds 100 columns
#196: FILE: ./include/hal_pwr_seq.h:196:
+	{0x0100, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0xFF}, /*.	0x100[7:0] = 0xFF	 enable WMAC TRX*/\

CHECK: line length of 149 exceeds 100 columns
#197: FILE: ./include/hal_pwr_seq.h:197:
+	{0x06B7, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x09}, /*.	reset MAC rx state machine*/\

CHECK: line length of 149 exceeds 100 columns
#198: FILE: ./include/hal_pwr_seq.h:198:
+	{0x06B4, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0x86}, /*.	reset MAC rx state machine*/\

CHECK: line length of 145 exceeds 100 columns
#199: FILE: ./include/hal_pwr_seq.h:199:
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT1, BIT1},/* set CPU RAM code ready*/	\

CHECK: line length of 145 exceeds 100 columns
#200: FILE: ./include/hal_pwr_seq.h:200:
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, 0},/*Reset CPU IO Wrapper*/	\

CHECK: line length of 129 exceeds 100 columns
#201: FILE: ./include/hal_pwr_seq.h:201:
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, 0},/* Enable CPU*/	\

CHECK: line length of 145 exceeds 100 columns
#202: FILE: ./include/hal_pwr_seq.h:202:
+	{0x001D, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0},/*enable CPU IO Wrapper*/	\

CHECK: line length of 137 exceeds 100 columns
#203: FILE: ./include/hal_pwr_seq.h:203:
+	{0x0003, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT2, BIT2},/* Enable CPU*/	\

CHECK: line length of 145 exceeds 100 columns
#204: FILE: ./include/hal_pwr_seq.h:204:
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT7, BIT7},/*polling FW init ready */	\

CHECK: line length of 145 exceeds 100 columns
#205: FILE: ./include/hal_pwr_seq.h:205:
+	{0x0080, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_POLLING, BIT6, BIT6},/*polling FW init ready */	\

CHECK: line length of 163 exceeds 100 columns
#206: FILE: ./include/hal_pwr_seq.h:206:
+	{0x0002, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, BIT0, BIT0}, /*.	0x02[1:0] = 2b'11	 enable BB macro*/\

CHECK: line length of 131 exceeds 100 columns
#207: FILE: ./include/hal_pwr_seq.h:207:
+	{0x0522, PWR_CUT_ALL_MSK, PWR_FAB_ALL_MSK, PWR_INTF_SDIO_MSK, PWR_BASEADDR_MAC, PWR_CMD_WRITE, 0xFF, 0}, /*.	0x522 = 0*/

CHECK: line length of 145 exceeds 100 columns
#209: FILE: ./include/hal_pwr_seq.h:209:
+#define RTL8723B_TRANS_END															\

CHECK: line length of 145 exceeds 100 columns
#210: FILE: ./include/hal_pwr_seq.h:210:
+	/* format */																\

CHECK: line length of 153 exceeds 100 columns
#211: FILE: ./include/hal_pwr_seq.h:211:
+	/* { offset, cut_msk, fab_msk|interface_msk, base|cmd, msk, value }, comments here*/								\

CHECK: Please don't use multiple blank lines
#214: FILE: ./include/hal_pwr_seq.h:214:
+
+

CHECK: line length of 112 exceeds 100 columns
#215: FILE: ./include/hal_pwr_seq.h:215:
+extern struct wlan_pwr_cfg rtl8723B_power_on_flow[RTL8723B_TRANS_CARDEMU_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#215: FILE: ./include/hal_pwr_seq.h:215:
+extern struct wlan_pwr_cfg rtl8723B_power_on_flow[RTL8723B_TRANS_CARDEMU_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                      ^

CHECK: line length of 113 exceeds 100 columns
#216: FILE: ./include/hal_pwr_seq.h:216:
+extern struct wlan_pwr_cfg rtl8723B_radio_off_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#216: FILE: ./include/hal_pwr_seq.h:216:
+extern struct wlan_pwr_cfg rtl8723B_radio_off_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                       ^

CHECK: line length of 152 exceeds 100 columns
#217: FILE: ./include/hal_pwr_seq.h:217:
+extern struct wlan_pwr_cfg rtl8723B_card_disable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#217: FILE: ./include/hal_pwr_seq.h:217:
+extern struct wlan_pwr_cfg rtl8723B_card_disable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                          ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#217: FILE: ./include/hal_pwr_seq.h:217:
+extern struct wlan_pwr_cfg rtl8723B_card_disable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                                                              ^

CHECK: line length of 151 exceeds 100 columns
#218: FILE: ./include/hal_pwr_seq.h:218:
+extern struct wlan_pwr_cfg rtl8723B_card_enable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#218: FILE: ./include/hal_pwr_seq.h:218:
+extern struct wlan_pwr_cfg rtl8723B_card_enable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                         ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#218: FILE: ./include/hal_pwr_seq.h:218:
+extern struct wlan_pwr_cfg rtl8723B_card_enable_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                                                             ^

CHECK: line length of 147 exceeds 100 columns
#219: FILE: ./include/hal_pwr_seq.h:219:
+extern struct wlan_pwr_cfg rtl8723B_suspend_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#219: FILE: ./include/hal_pwr_seq.h:219:
+extern struct wlan_pwr_cfg rtl8723B_suspend_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                     ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#219: FILE: ./include/hal_pwr_seq.h:219:
+extern struct wlan_pwr_cfg rtl8723B_suspend_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                                                         ^

CHECK: line length of 146 exceeds 100 columns
#220: FILE: ./include/hal_pwr_seq.h:220:
+extern struct wlan_pwr_cfg rtl8723B_resume_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#220: FILE: ./include/hal_pwr_seq.h:220:
+extern struct wlan_pwr_cfg rtl8723B_resume_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                    ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#220: FILE: ./include/hal_pwr_seq.h:220:
+extern struct wlan_pwr_cfg rtl8723B_resume_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_SUS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                                                        ^

CHECK: line length of 145 exceeds 100 columns
#221: FILE: ./include/hal_pwr_seq.h:221:
+extern struct wlan_pwr_cfg rtl8723B_hwpdn_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#221: FILE: ./include/hal_pwr_seq.h:221:
+extern struct wlan_pwr_cfg rtl8723B_hwpdn_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                   ^

CHECK: spaces preferred around that '+' (ctx:VxV)
#221: FILE: ./include/hal_pwr_seq.h:221:
+extern struct wlan_pwr_cfg rtl8723B_hwpdn_flow[RTL8723B_TRANS_ACT_TO_CARDEMU_STEPS+RTL8723B_TRANS_CARDEMU_TO_PDN_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                                                       ^

CHECK: line length of 109 exceeds 100 columns
#222: FILE: ./include/hal_pwr_seq.h:222:
+extern struct wlan_pwr_cfg rtl8723B_enter_lps_flow[RTL8723B_TRANS_ACT_TO_LPS_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#222: FILE: ./include/hal_pwr_seq.h:222:
+extern struct wlan_pwr_cfg rtl8723B_enter_lps_flow[RTL8723B_TRANS_ACT_TO_LPS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                   ^

CHECK: line length of 109 exceeds 100 columns
#223: FILE: ./include/hal_pwr_seq.h:223:
+extern struct wlan_pwr_cfg rtl8723B_leave_lps_flow[RTL8723B_TRANS_LPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#223: FILE: ./include/hal_pwr_seq.h:223:
+extern struct wlan_pwr_cfg rtl8723B_leave_lps_flow[RTL8723B_TRANS_LPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                   ^

CHECK: line length of 113 exceeds 100 columns
#224: FILE: ./include/hal_pwr_seq.h:224:
+extern struct wlan_pwr_cfg rtl8723B_enter_swlps_flow[RTL8723B_TRANS_ACT_TO_SWLPS_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#224: FILE: ./include/hal_pwr_seq.h:224:
+extern struct wlan_pwr_cfg rtl8723B_enter_swlps_flow[RTL8723B_TRANS_ACT_TO_SWLPS_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                       ^

CHECK: line length of 113 exceeds 100 columns
#225: FILE: ./include/hal_pwr_seq.h:225:
+extern struct wlan_pwr_cfg rtl8723B_leave_swlps_flow[RTL8723B_TRANS_SWLPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];

CHECK: spaces preferred around that '+' (ctx:VxV)
#225: FILE: ./include/hal_pwr_seq.h:225:
+extern struct wlan_pwr_cfg rtl8723B_leave_swlps_flow[RTL8723B_TRANS_SWLPS_TO_ACT_STEPS+RTL8723B_TRANS_END_STEPS];
                                                                                       ^

total: 12 errors, 2 warnings, 214 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./include/hal_pwr_seq.h has style problems, please review.
--------------------
./include/hal_sdio.h
--------------------
CHECK: Macro argument 'pdvobj' may be better as '(pdvobj)' to avoid precedence issues
#10: FILE: ./include/hal_sdio.h:10:
+#define ffaddr2deviceId(pdvobj, addr)	(pdvobj->Queue2Pipe[addr])

CHECK: line length of 104 exceeds 100 columns
#15: FILE: ./include/hal_sdio.h:15:
+void rtw_hal_set_sdio_tx_max_length(struct adapter *padapter, u8 numHQ, u8 numNQ, u8 numLQ, u8 numPubQ);

total: 0 errors, 0 warnings, 2 checks, 18 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/hal_sdio.h has style problems, please review.
---------------------
./include/HalVerDef.h
---------------------
WARNING: please, no space before tabs
#49: FILE: ./include/HalVerDef.h:49:
+^Iu8 ^I^I^IROMVer;$

CHECK: line length of 107 exceeds 100 columns
#67: FILE: ./include/HalVerDef.h:67:
+#define IS_TEST_CHIP(version)			((GET_CVID_CHIP_TYPE(version) == TEST_CHIP) ? true : false)

CHECK: line length of 109 exceeds 100 columns
#68: FILE: ./include/HalVerDef.h:68:
+#define IS_NORMAL_CHIP(version)			((GET_CVID_CHIP_TYPE(version) == NORMAL_CHIP) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#71: FILE: ./include/HalVerDef.h:71:
+#define IS_A_CUT(version)				((GET_CVID_CUT_VERSION(version) == A_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#72: FILE: ./include/HalVerDef.h:72:
+#define IS_B_CUT(version)				((GET_CVID_CUT_VERSION(version) == B_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#73: FILE: ./include/HalVerDef.h:73:
+#define IS_C_CUT(version)				((GET_CVID_CUT_VERSION(version) == C_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#74: FILE: ./include/HalVerDef.h:74:
+#define IS_D_CUT(version)				((GET_CVID_CUT_VERSION(version) == D_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#75: FILE: ./include/HalVerDef.h:75:
+#define IS_E_CUT(version)				((GET_CVID_CUT_VERSION(version) == E_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#76: FILE: ./include/HalVerDef.h:76:
+#define IS_I_CUT(version)				((GET_CVID_CUT_VERSION(version) == I_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#77: FILE: ./include/HalVerDef.h:77:
+#define IS_J_CUT(version)				((GET_CVID_CUT_VERSION(version) == J_CUT_VERSION) ? true : false)

CHECK: line length of 121 exceeds 100 columns
#78: FILE: ./include/HalVerDef.h:78:
+#define IS_K_CUT(version)				((GET_CVID_CUT_VERSION(version) == K_CUT_VERSION) ? true : false)

CHECK: line length of 108 exceeds 100 columns
#81: FILE: ./include/HalVerDef.h:81:
+#define IS_CHIP_VENDOR_TSMC(version)	((GET_CVID_MANUFACTUER(version) == CHIP_VENDOR_TSMC) ? true : false)

CHECK: line length of 107 exceeds 100 columns
#82: FILE: ./include/HalVerDef.h:82:
+#define IS_CHIP_VENDOR_UMC(version)	((GET_CVID_MANUFACTUER(version) == CHIP_VENDOR_UMC) ? true : false)

CHECK: line length of 108 exceeds 100 columns
#83: FILE: ./include/HalVerDef.h:83:
+#define IS_CHIP_VENDOR_SMIC(version)	((GET_CVID_MANUFACTUER(version) == CHIP_VENDOR_SMIC) ? true : false)

total: 0 errors, 1 warnings, 13 checks, 85 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/HalVerDef.h has style problems, please review.
---------------------
./include/ieee80211.h
---------------------
CHECK: Please don't use multiple blank lines
#88: FILE: ./include/ieee80211.h:88:
+
+

CHECK: Please don't use multiple blank lines
#97: FILE: ./include/ieee80211.h:97:
+
+

CHECK: Please don't use multiple blank lines
#112: FILE: ./include/ieee80211.h:112:
+
+

CHECK: Please don't use multiple blank lines
#126: FILE: ./include/ieee80211.h:126:
+
+

CHECK: line length of 112 exceeds 100 columns
#149: FILE: ./include/ieee80211.h:149:
+	WIRELESS_11BG = (WIRELESS_11B|WIRELESS_11G), /*  tx: cck & ofdm, rx: cck & ofdm & MCS, hw: cck & ofdm */

CHECK: spaces preferred around that '|' (ctx:VxV)
#149: FILE: ./include/ieee80211.h:149:
+	WIRELESS_11BG = (WIRELESS_11B|WIRELESS_11G), /*  tx: cck & ofdm, rx: cck & ofdm & MCS, hw: cck & ofdm */
 	                             ^

CHECK: line length of 118 exceeds 100 columns
#150: FILE: ./include/ieee80211.h:150:
+	WIRELESS_11G_24N = (WIRELESS_11G|WIRELESS_11_24N), /*  tx: ofdm & MCS, rx: ofdm & cck & MCS, hw: cck & ofdm */

CHECK: spaces preferred around that '|' (ctx:VxV)
#150: FILE: ./include/ieee80211.h:150:
+	WIRELESS_11G_24N = (WIRELESS_11G|WIRELESS_11_24N), /*  tx: ofdm & MCS, rx: ofdm & cck & MCS, hw: cck & ofdm */
 	                                ^

CHECK: line length of 124 exceeds 100 columns
#151: FILE: ./include/ieee80211.h:151:
+	WIRELESS_11B_24N = (WIRELESS_11B|WIRELESS_11_24N), /*  tx: ofdm & cck & MCS, rx: ofdm & cck & MCS, hw: ofdm & cck */

CHECK: spaces preferred around that '|' (ctx:VxV)
#151: FILE: ./include/ieee80211.h:151:
+	WIRELESS_11B_24N = (WIRELESS_11B|WIRELESS_11_24N), /*  tx: ofdm & cck & MCS, rx: ofdm & cck & MCS, hw: ofdm & cck */
 	                                ^

CHECK: line length of 138 exceeds 100 columns
#152: FILE: ./include/ieee80211.h:152:
+	WIRELESS_11BG_24N = (WIRELESS_11B|WIRELESS_11G|WIRELESS_11_24N), /*  tx: ofdm & cck & MCS, rx: ofdm & cck & MCS, hw: ofdm & cck */

CHECK: spaces preferred around that '|' (ctx:VxV)
#152: FILE: ./include/ieee80211.h:152:
+	WIRELESS_11BG_24N = (WIRELESS_11B|WIRELESS_11G|WIRELESS_11_24N), /*  tx: ofdm & cck & MCS, rx: ofdm & cck & MCS, hw: ofdm & cck */
 	                                 ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#152: FILE: ./include/ieee80211.h:152:
+	WIRELESS_11BG_24N = (WIRELESS_11B|WIRELESS_11G|WIRELESS_11_24N), /*  tx: ofdm & cck & MCS, rx: ofdm & cck & MCS, hw: ofdm & cck */
 	                                              ^

CHECK: Macro argument reuse 'net_type' - possible side-effects?
#157: FILE: ./include/ieee80211.h:157:
+#define is_legacy_only(net_type)  ((net_type) == ((net_type) & (WIRELESS_11BG)))

WARNING: Prefer __packed over __attribute__((packed))
#235: FILE: ./include/ieee80211.h:235:
+} __attribute__ ((packed));

CHECK: Please don't use multiple blank lines
#246: FILE: ./include/ieee80211.h:246:
+
+

WARNING: Prefer __packed over __attribute__((packed))
#278: FILE: ./include/ieee80211.h:278:
+} __attribute__ ((packed));

CHECK: Please don't use multiple blank lines
#299: FILE: ./include/ieee80211.h:299:
+
+

CHECK: spaces preferred around that '<<' (ctx:VxV)
#300: FILE: ./include/ieee80211.h:300:
+#define IEEE80211_STATMASK_SIGNAL (1<<0)
                                     ^

CHECK: Prefer using the BIT macro
#300: FILE: ./include/ieee80211.h:300:
+#define IEEE80211_STATMASK_SIGNAL (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#301: FILE: ./include/ieee80211.h:301:
+#define IEEE80211_STATMASK_RSSI (1<<1)
                                   ^

CHECK: Prefer using the BIT macro
#301: FILE: ./include/ieee80211.h:301:
+#define IEEE80211_STATMASK_RSSI (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: ./include/ieee80211.h:302:
+#define IEEE80211_STATMASK_NOISE (1<<2)
                                    ^

CHECK: Prefer using the BIT macro
#302: FILE: ./include/ieee80211.h:302:
+#define IEEE80211_STATMASK_NOISE (1<<2)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#303: FILE: ./include/ieee80211.h:303:
+#define IEEE80211_STATMASK_RATE (1<<3)
                                   ^

CHECK: Prefer using the BIT macro
#303: FILE: ./include/ieee80211.h:303:
+#define IEEE80211_STATMASK_RATE (1<<3)

CHECK: Please don't use multiple blank lines
#306: FILE: ./include/ieee80211.h:306:
+
+

CHECK: spaces preferred around that '<<' (ctx:VxV)
#307: FILE: ./include/ieee80211.h:307:
+#define IEEE80211_CCK_MODULATION    (1<<0)
                                       ^

CHECK: Prefer using the BIT macro
#307: FILE: ./include/ieee80211.h:307:
+#define IEEE80211_CCK_MODULATION    (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#308: FILE: ./include/ieee80211.h:308:
+#define IEEE80211_OFDM_MODULATION   (1<<1)
                                       ^

CHECK: Prefer using the BIT macro
#308: FILE: ./include/ieee80211.h:308:
+#define IEEE80211_OFDM_MODULATION   (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#310: FILE: ./include/ieee80211.h:310:
+#define IEEE80211_24GHZ_BAND     (1<<0)
                                    ^

CHECK: Prefer using the BIT macro
#310: FILE: ./include/ieee80211.h:310:
+#define IEEE80211_24GHZ_BAND     (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#311: FILE: ./include/ieee80211.h:311:
+#define IEEE80211_52GHZ_BAND     (1<<1)
                                    ^

CHECK: Prefer using the BIT macro
#311: FILE: ./include/ieee80211.h:311:
+#define IEEE80211_52GHZ_BAND     (1<<1)

CHECK: Please don't use multiple blank lines
#316: FILE: ./include/ieee80211.h:316:
+
+

CHECK: spaces preferred around that '<<' (ctx:VxV)
#332: FILE: ./include/ieee80211.h:332:
+#define IEEE80211_CCK_RATE_1MB_MASK		(1<<0)
                                    		  ^

CHECK: Prefer using the BIT macro
#332: FILE: ./include/ieee80211.h:332:
+#define IEEE80211_CCK_RATE_1MB_MASK		(1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#333: FILE: ./include/ieee80211.h:333:
+#define IEEE80211_CCK_RATE_2MB_MASK		(1<<1)
                                    		  ^

CHECK: Prefer using the BIT macro
#333: FILE: ./include/ieee80211.h:333:
+#define IEEE80211_CCK_RATE_2MB_MASK		(1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#334: FILE: ./include/ieee80211.h:334:
+#define IEEE80211_CCK_RATE_5MB_MASK		(1<<2)
                                    		  ^

CHECK: Prefer using the BIT macro
#334: FILE: ./include/ieee80211.h:334:
+#define IEEE80211_CCK_RATE_5MB_MASK		(1<<2)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#335: FILE: ./include/ieee80211.h:335:
+#define IEEE80211_CCK_RATE_11MB_MASK		(1<<3)
                                     		  ^

CHECK: Prefer using the BIT macro
#335: FILE: ./include/ieee80211.h:335:
+#define IEEE80211_CCK_RATE_11MB_MASK		(1<<3)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#336: FILE: ./include/ieee80211.h:336:
+#define IEEE80211_OFDM_RATE_6MB_MASK		(1<<4)
                                     		  ^

CHECK: Prefer using the BIT macro
#336: FILE: ./include/ieee80211.h:336:
+#define IEEE80211_OFDM_RATE_6MB_MASK		(1<<4)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#337: FILE: ./include/ieee80211.h:337:
+#define IEEE80211_OFDM_RATE_9MB_MASK		(1<<5)
                                     		  ^

CHECK: Prefer using the BIT macro
#337: FILE: ./include/ieee80211.h:337:
+#define IEEE80211_OFDM_RATE_9MB_MASK		(1<<5)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#338: FILE: ./include/ieee80211.h:338:
+#define IEEE80211_OFDM_RATE_12MB_MASK		(1<<6)
                                      		  ^

CHECK: Prefer using the BIT macro
#338: FILE: ./include/ieee80211.h:338:
+#define IEEE80211_OFDM_RATE_12MB_MASK		(1<<6)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#339: FILE: ./include/ieee80211.h:339:
+#define IEEE80211_OFDM_RATE_18MB_MASK		(1<<7)
                                      		  ^

CHECK: Prefer using the BIT macro
#339: FILE: ./include/ieee80211.h:339:
+#define IEEE80211_OFDM_RATE_18MB_MASK		(1<<7)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#340: FILE: ./include/ieee80211.h:340:
+#define IEEE80211_OFDM_RATE_24MB_MASK		(1<<8)
                                      		  ^

CHECK: Prefer using the BIT macro
#340: FILE: ./include/ieee80211.h:340:
+#define IEEE80211_OFDM_RATE_24MB_MASK		(1<<8)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#341: FILE: ./include/ieee80211.h:341:
+#define IEEE80211_OFDM_RATE_36MB_MASK		(1<<9)
                                      		  ^

CHECK: Prefer using the BIT macro
#341: FILE: ./include/ieee80211.h:341:
+#define IEEE80211_OFDM_RATE_36MB_MASK		(1<<9)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#342: FILE: ./include/ieee80211.h:342:
+#define IEEE80211_OFDM_RATE_48MB_MASK		(1<<10)
                                      		  ^

CHECK: Prefer using the BIT macro
#342: FILE: ./include/ieee80211.h:342:
+#define IEEE80211_OFDM_RATE_48MB_MASK		(1<<10)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#343: FILE: ./include/ieee80211.h:343:
+#define IEEE80211_OFDM_RATE_54MB_MASK		(1<<11)
                                      		  ^

CHECK: Prefer using the BIT macro
#343: FILE: ./include/ieee80211.h:343:
+#define IEEE80211_OFDM_RATE_54MB_MASK		(1<<11)

CHECK: Please don't use multiple blank lines
#371: FILE: ./include/ieee80211.h:371:
+
+

CHECK: Macro argument reuse '_rate' - possible side-effects?
#397: FILE: ./include/ieee80211.h:397:
+#define IS_HT_RATE(_rate)				(_rate >= MGN_MCS0 && _rate <= MGN_MCS31)

CHECK: Macro argument '_rate' may be better as '(_rate)' to avoid precedence issues
#397: FILE: ./include/ieee80211.h:397:
+#define IS_HT_RATE(_rate)				(_rate >= MGN_MCS0 && _rate <= MGN_MCS31)

CHECK: line length of 133 exceeds 100 columns
#398: FILE: ./include/ieee80211.h:398:
+#define IS_CCK_RATE(_rate)				(MGN_1M == _rate || _rate == MGN_2M || _rate == MGN_5_5M || _rate == MGN_11M)

WARNING: Comparisons should place the constant on the right side of the test
#398: FILE: ./include/ieee80211.h:398:
+#define IS_CCK_RATE(_rate)				(MGN_1M == _rate || _rate == MGN_2M || _rate == MGN_5_5M || _rate == MGN_11M)

CHECK: Macro argument reuse '_rate' - possible side-effects?
#398: FILE: ./include/ieee80211.h:398:
+#define IS_CCK_RATE(_rate)				(MGN_1M == _rate || _rate == MGN_2M || _rate == MGN_5_5M || _rate == MGN_11M)

CHECK: Macro argument '_rate' may be better as '(_rate)' to avoid precedence issues
#398: FILE: ./include/ieee80211.h:398:
+#define IS_CCK_RATE(_rate)				(MGN_1M == _rate || _rate == MGN_2M || _rate == MGN_5_5M || _rate == MGN_11M)

CHECK: line length of 114 exceeds 100 columns
#399: FILE: ./include/ieee80211.h:399:
+#define IS_OFDM_RATE(_rate)				(MGN_6M <= _rate && _rate <= MGN_54M  && _rate != MGN_11M)

WARNING: Comparisons should place the constant on the right side of the test
#399: FILE: ./include/ieee80211.h:399:
+#define IS_OFDM_RATE(_rate)				(MGN_6M <= _rate && _rate <= MGN_54M  && _rate != MGN_11M)

CHECK: Macro argument reuse '_rate' - possible side-effects?
#399: FILE: ./include/ieee80211.h:399:
+#define IS_OFDM_RATE(_rate)				(MGN_6M <= _rate && _rate <= MGN_54M  && _rate != MGN_11M)

CHECK: Macro argument '_rate' may be better as '(_rate)' to avoid precedence issues
#399: FILE: ./include/ieee80211.h:399:
+#define IS_OFDM_RATE(_rate)				(MGN_6M <= _rate && _rate <= MGN_54M  && _rate != MGN_11M)

CHECK: Please don't use multiple blank lines
#401: FILE: ./include/ieee80211.h:401:
+
+

WARNING: Block comments use a trailing */ on a separate line
#404: FILE: ./include/ieee80211.h:404:
+ *       any adverse affects. */

WARNING: Block comments use a trailing */ on a separate line
#409: FILE: ./include/ieee80211.h:409:
+ * 2 kB of RAM and increasing cache size will slow down frame reassembly. */

CHECK: spaces preferred around that '<<' (ctx:VxV)
#412: FILE: ./include/ieee80211.h:412:
+#define SEC_KEY_1         (1<<0)
                             ^

CHECK: Prefer using the BIT macro
#412: FILE: ./include/ieee80211.h:412:
+#define SEC_KEY_1         (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#413: FILE: ./include/ieee80211.h:413:
+#define SEC_KEY_2         (1<<1)
                             ^

CHECK: Prefer using the BIT macro
#413: FILE: ./include/ieee80211.h:413:
+#define SEC_KEY_2         (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#414: FILE: ./include/ieee80211.h:414:
+#define SEC_KEY_3         (1<<2)
                             ^

CHECK: Prefer using the BIT macro
#414: FILE: ./include/ieee80211.h:414:
+#define SEC_KEY_3         (1<<2)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#415: FILE: ./include/ieee80211.h:415:
+#define SEC_KEY_4         (1<<3)
                             ^

CHECK: Prefer using the BIT macro
#415: FILE: ./include/ieee80211.h:415:
+#define SEC_KEY_4         (1<<3)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#416: FILE: ./include/ieee80211.h:416:
+#define SEC_ACTIVE_KEY    (1<<4)
                             ^

CHECK: Prefer using the BIT macro
#416: FILE: ./include/ieee80211.h:416:
+#define SEC_ACTIVE_KEY    (1<<4)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#417: FILE: ./include/ieee80211.h:417:
+#define SEC_AUTH_MODE     (1<<5)
                             ^

CHECK: Prefer using the BIT macro
#417: FILE: ./include/ieee80211.h:417:
+#define SEC_AUTH_MODE     (1<<5)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#418: FILE: ./include/ieee80211.h:418:
+#define SEC_UNICAST_GROUP (1<<6)
                             ^

CHECK: Prefer using the BIT macro
#418: FILE: ./include/ieee80211.h:418:
+#define SEC_UNICAST_GROUP (1<<6)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#419: FILE: ./include/ieee80211.h:419:
+#define SEC_LEVEL         (1<<7)
                             ^

CHECK: Prefer using the BIT macro
#419: FILE: ./include/ieee80211.h:419:
+#define SEC_LEVEL         (1<<7)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#420: FILE: ./include/ieee80211.h:420:
+#define SEC_ENABLED       (1<<8)
                             ^

CHECK: Prefer using the BIT macro
#420: FILE: ./include/ieee80211.h:420:
+#define SEC_ENABLED       (1<<8)

WARNING: Block comments use * on subsequent lines
#435: FILE: ./include/ieee80211.h:435:
+/*
+

WARNING: Block comments use a trailing */ on a separate line
#471: FILE: ./include/ieee80211.h:471:
+ * main rates information element... */

CHECK: spaces preferred around that '<<' (ctx:VxV)
#487: FILE: ./include/ieee80211.h:487:
+#define NETWORK_EMPTY_ESSID (1<<0)
                               ^

CHECK: Prefer using the BIT macro
#487: FILE: ./include/ieee80211.h:487:
+#define NETWORK_EMPTY_ESSID (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#488: FILE: ./include/ieee80211.h:488:
+#define NETWORK_HAS_OFDM    (1<<1)
                               ^

CHECK: Prefer using the BIT macro
#488: FILE: ./include/ieee80211.h:488:
+#define NETWORK_HAS_OFDM    (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#489: FILE: ./include/ieee80211.h:489:
+#define NETWORK_HAS_CCK     (1<<2)
                               ^

CHECK: Prefer using the BIT macro
#489: FILE: ./include/ieee80211.h:489:
+#define NETWORK_HAS_CCK     (1<<2)

WARNING: Block comments use * on subsequent lines
#501: FILE: ./include/ieee80211.h:501:
+/*
+join_res:

WARNING: Avoid unnecessary line continuations
#519: FILE: ./include/ieee80211.h:519:
+	return ((addr[0] == 0xff) && (addr[1] == 0xff) && (addr[2] == 0xff) &&   \

WARNING: Avoid unnecessary line continuations
#525: FILE: ./include/ieee80211.h:525:
+	return ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) &&   \

CHECK: spaces preferred around that '<<' (ctx:VxV)
#529: FILE: ./include/ieee80211.h:529:
+#define CFG_IEEE80211_RESERVE_FCS (1<<0)
                                     ^

CHECK: Prefer using the BIT macro
#529: FILE: ./include/ieee80211.h:529:
+#define CFG_IEEE80211_RESERVE_FCS (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#530: FILE: ./include/ieee80211.h:530:
+#define CFG_IEEE80211_COMPUTE_FCS (1<<1)
                                     ^

CHECK: Prefer using the BIT macro
#530: FILE: ./include/ieee80211.h:530:
+#define CFG_IEEE80211_COMPUTE_FCS (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#534: FILE: ./include/ieee80211.h:534:
+#define IEEE_A            (1<<0)
                             ^

CHECK: Prefer using the BIT macro
#534: FILE: ./include/ieee80211.h:534:
+#define IEEE_A            (1<<0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#535: FILE: ./include/ieee80211.h:535:
+#define IEEE_B            (1<<1)
                             ^

CHECK: Prefer using the BIT macro
#535: FILE: ./include/ieee80211.h:535:
+#define IEEE_B            (1<<1)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#536: FILE: ./include/ieee80211.h:536:
+#define IEEE_G            (1<<2)
                             ^

CHECK: Prefer using the BIT macro
#536: FILE: ./include/ieee80211.h:536:
+#define IEEE_G            (1<<2)

CHECK: spaces preferred around that '|' (ctx:VxV)
#537: FILE: ./include/ieee80211.h:537:
+#define IEEE_MODE_MASK    (IEEE_A|IEEE_B|IEEE_G)
                                  ^

CHECK: spaces preferred around that '|' (ctx:VxV)
#537: FILE: ./include/ieee80211.h:537:
+#define IEEE_MODE_MASK    (IEEE_A|IEEE_B|IEEE_G)
                                         ^

CHECK: line length of 103 exceeds 100 columns
#550: FILE: ./include/ieee80211.h:550:
+	RTW_WLAN_CATEGORY_UNPROTECTED_WNM = 11, /*  add for CONFIG_IEEE80211W, none 11w also can use */

CHECK: line length of 102 exceeds 100 columns
#552: FILE: ./include/ieee80211.h:552:
+	RTW_WLAN_CATEGORY_SELF_PROTECTED = 15, /*  add for CONFIG_IEEE80211W, none 11w also can use */

WARNING: Block comments use a trailing */ on a separate line
#578: FILE: ./include/ieee80211.h:578:
+				* 00:50:F2 */

CHECK: Please don't use multiple blank lines
#597: FILE: ./include/ieee80211.h:597:
+
+

CHECK: spaces preferred around that '<<' (ctx:VxV)
#618: FILE: ./include/ieee80211.h:618:
+	RTW_IEEE80211_CHAN_DISABLED         = 1<<0,
 	                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#619: FILE: ./include/ieee80211.h:619:
+	RTW_IEEE80211_CHAN_PASSIVE_SCAN     = 1<<1,
 	                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#620: FILE: ./include/ieee80211.h:620:
+	RTW_IEEE80211_CHAN_NO_IBSS          = 1<<2,
 	                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#621: FILE: ./include/ieee80211.h:621:
+	RTW_IEEE80211_CHAN_RADAR            = 1<<3,
 	                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#622: FILE: ./include/ieee80211.h:622:
+	RTW_IEEE80211_CHAN_NO_HT40PLUS      = 1<<4,
 	                                       ^

CHECK: spaces preferred around that '<<' (ctx:VxV)
#623: FILE: ./include/ieee80211.h:623:
+	RTW_IEEE80211_CHAN_NO_HT40MINUS     = 1<<5,
 	                                       ^

ERROR: Macros with complex values should be enclosed in parentheses
#658: FILE: ./include/ieee80211.h:658:
+#define CHAN_ARG(channel) \
+	/*(channel)->band*/ \
+	/*, (channel)->center_freq*/ \
+	(channel)->hw_value \
+	, (channel)->flags \
+	/*, (channel)->max_antenna_gain*/ \
+	/*, (channel)->max_power*/ \
+	/*, (channel)->max_reg_power*/ \
+	/*, (channel)->beacon_found*/ \
+	/*, (channel)->orig_flags*/ \
+	/*, (channel)->orig_mag*/ \
+	/*, (channel)->orig_mpwr*/ \
+

CHECK: Macro argument reuse 'channel' - possible side-effects?
#658: FILE: ./include/ieee80211.h:658:
+#define CHAN_ARG(channel) \
+	/*(channel)->band*/ \
+	/*, (channel)->center_freq*/ \
+	(channel)->hw_value \
+	, (channel)->flags \
+	/*, (channel)->max_antenna_gain*/ \
+	/*, (channel)->max_power*/ \
+	/*, (channel)->max_reg_power*/ \
+	/*, (channel)->beacon_found*/ \
+	/*, (channel)->orig_flags*/ \
+	/*, (channel)->orig_mag*/ \
+	/*, (channel)->orig_mpwr*/ \
+

CHECK: Alignment should match open parenthesis
#730: FILE: ./include/ieee80211.h:730:
+enum ParseRes rtw_ieee802_11_parse_elems(u8 *start, uint len,
+				struct rtw_ieee802_11_elems *elems,

CHECK: line length of 104 exceeds 100 columns
#733: FILE: ./include/ieee80211.h:733:
+u8 *rtw_set_fixed_ie(unsigned char *pbuf, unsigned int len, unsigned char *source, unsigned int *frlen);

CHECK: line length of 105 exceeds 100 columns
#747: FILE: ./include/ieee80211.h:747:
+int rtw_parse_wpa_ie(u8 *wpa_ie, int wpa_ie_len, int *group_cipher, int *pairwise_cipher, int *is_8021x);

CHECK: line length of 106 exceeds 100 columns
#748: FILE: ./include/ieee80211.h:748:
+int rtw_parse_wpa2_ie(u8 *wpa_ie, int wpa_ie_len, int *group_cipher, int *pairwise_cipher, int *is_8021x);

CHECK: line length of 113 exceeds 100 columns
#754: FILE: ./include/ieee80211.h:754:
+u8 *rtw_get_wps_attr_content(u8 *wps_ie, uint wps_ielen, u16 target_attr_id, u8 *buf_content, uint *len_content);

CHECK: Macro argument reuse 'ie' - possible side-effects?
#762: FILE: ./include/ieee80211.h:762:
+#define for_each_ie(ie, buf, buf_len) \
+	for (ie = (void *)buf; (((u8 *)ie) - ((u8 *)buf) + 1) < buf_len; \
+		ie = (void *)(((u8 *)ie) + *(((u8 *)ie) + 1) + 2))

CHECK: Macro argument reuse 'buf' - possible side-effects?
#762: FILE: ./include/ieee80211.h:762:
+#define for_each_ie(ie, buf, buf_len) \
+	for (ie = (void *)buf; (((u8 *)ie) - ((u8 *)buf) + 1) < buf_len; \
+		ie = (void *)(((u8 *)ie) + *(((u8 *)ie) + 1) + 2))

CHECK: Macro argument 'buf_len' may be better as '(buf_len)' to avoid precedence issues
#762: FILE: ./include/ieee80211.h:762:
+#define for_each_ie(ie, buf, buf_len) \
+	for (ie = (void *)buf; (((u8 *)ie) - ((u8 *)buf) + 1) < buf_len; \
+		ie = (void *)(((u8 *)ie) + *(((u8 *)ie) + 1) + 2))

CHECK: Please don't use multiple blank lines
#771: FILE: ./include/ieee80211.h:771:
+
+

total: 1 errors, 12 warnings, 123 checks, 789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/ieee80211.h has style problems, please review.
--------------------------
./include/ioctl_cfg80211.h
--------------------------
CHECK: Macro argument reuse 'invit_info' - possible side-effects?
#21: FILE: ./include/ioctl_cfg80211.h:21:
+#define rtw_wdev_invit_info_init(invit_info) \
+	do { \
+		(invit_info)->state = 0xff; \
+		memset((invit_info)->peer_mac, 0, ETH_ALEN); \
+		(invit_info)->active = 0xff; \
+		(invit_info)->token = 0; \
+		(invit_info)->flags = 0x00; \
+		(invit_info)->status = 0xff; \
+		(invit_info)->req_op_ch = 0; \
+		(invit_info)->rsp_op_ch = 0; \
+	} while (0)

CHECK: Macro argument reuse 'nego_info' - possible side-effects?
#47: FILE: ./include/ioctl_cfg80211.h:47:
+#define rtw_wdev_nego_info_init(nego_info) \
+	do { \
+		(nego_info)->state = 0xff; \
+		memset((nego_info)->peer_mac, 0, ETH_ALEN); \
+		(nego_info)->active = 0xff; \
+		(nego_info)->token = 0; \
+		(nego_info)->status = 0xff; \
+		(nego_info)->req_intent = 0xff; \
+		(nego_info)->req_op_ch = 0; \
+		(nego_info)->req_listen_ch = 0; \
+		(nego_info)->rsp_intent = 0xff; \
+		(nego_info)->rsp_op_ch = 0; \
+		(nego_info)->conf_op_ch = 0; \
+	} while (0)

CHECK: spinlock_t definition without comment
#68: FILE: ./include/ioctl_cfg80211.h:68:
+	spinlock_t scan_req_lock;

CHECK: line length of 102 exceeds 100 columns
#97: FILE: ./include/ioctl_cfg80211.h:97:
+struct cfg80211_bss *rtw_cfg80211_inform_bss(struct adapter *padapter, struct wlan_network *pnetwork);

CHECK: line length of 108 exceeds 100 columns
#105: FILE: ./include/ioctl_cfg80211.h:105:
+void rtw_cfg80211_indicate_sta_disassoc(struct adapter *padapter, unsigned char *da, unsigned short reason);

CHECK: line length of 133 exceeds 100 columns
#111: FILE: ./include/ioctl_cfg80211.h:111:
+#define rtw_cfg80211_rx_mgmt(adapter, freq, sig_dbm, buf, len, gfp) cfg80211_rx_mgmt((adapter)->rtw_wdev, freq, sig_dbm, buf, len, 0)

WARNING: Argument 'gfp' is not used in function-like macro
#111: FILE: ./include/ioctl_cfg80211.h:111:
+#define rtw_cfg80211_rx_mgmt(adapter, freq, sig_dbm, buf, len, gfp) cfg80211_rx_mgmt((adapter)->rtw_wdev, freq, sig_dbm, buf, len, 0)

CHECK: line length of 116 exceeds 100 columns
#112: FILE: ./include/ioctl_cfg80211.h:112:
+#define rtw_cfg80211_send_rx_assoc(adapter, bss, buf, len) cfg80211_send_rx_assoc((adapter)->pnetdev, bss, buf, len)

CHECK: line length of 145 exceeds 100 columns
#113: FILE: ./include/ioctl_cfg80211.h:113:
+#define rtw_cfg80211_mgmt_tx_status(adapter, cookie, buf, len, ack, gfp) cfg80211_mgmt_tx_status((adapter)->rtw_wdev, cookie, buf, len, ack, gfp)

CHECK: line length of 166 exceeds 100 columns
#114: FILE: ./include/ioctl_cfg80211.h:114:
+#define rtw_cfg80211_ready_on_channel(adapter, cookie, chan, channel_type, duration, gfp)  cfg80211_ready_on_channel((adapter)->rtw_wdev, cookie, chan, duration, gfp)

WARNING: Argument 'channel_type' is not used in function-like macro
#114: FILE: ./include/ioctl_cfg80211.h:114:
+#define rtw_cfg80211_ready_on_channel(adapter, cookie, chan, channel_type, duration, gfp)  cfg80211_ready_on_channel((adapter)->rtw_wdev, cookie, chan, duration, gfp)

CHECK: line length of 160 exceeds 100 columns
#115: FILE: ./include/ioctl_cfg80211.h:115:
+#define rtw_cfg80211_remain_on_channel_expired(adapter, cookie, chan, chan_type, gfp) cfg80211_remain_on_channel_expired((adapter)->rtw_wdev, cookie, chan, gfp)

WARNING: Argument 'chan_type' is not used in function-like macro
#115: FILE: ./include/ioctl_cfg80211.h:115:
+#define rtw_cfg80211_remain_on_channel_expired(adapter, cookie, chan, chan_type, gfp) cfg80211_remain_on_channel_expired((adapter)->rtw_wdev, cookie, chan, gfp)

total: 0 errors, 3 warnings, 10 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/ioctl_cfg80211.h has style problems, please review.
----------------------
./include/mlme_osdep.h
----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/mlme_osdep.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#11: FILE: ./include/mlme_osdep.h:11:
+extern void rtw_init_mlme_timer(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#12: FILE: ./include/mlme_osdep.h:12:
+extern void rtw_os_indicate_disconnect(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#13: FILE: ./include/mlme_osdep.h:13:
+extern void rtw_os_indicate_connect(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#15: FILE: ./include/mlme_osdep.h:15:
+extern void rtw_report_sec_ie(struct adapter *adapter, u8 authmode, u8 *sec_ie);

total: 0 errors, 0 warnings, 5 checks, 19 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/mlme_osdep.h has style problems, please review.
----------------------
./include/osdep_intf.h
----------------------
total: 0 errors, 0 warnings, 0 checks, 42 lines checked

./include/osdep_intf.h has no obvious style problems and is ready for submission.
-------------------------
./include/osdep_service.h
-------------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/osdep_service.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#55: FILE: ./include/osdep_service.h:55:
+extern int RTW_STATUS_CODE(int error_code);

WARNING: Argument 'mstat_f' is not used in function-like macro
#69: FILE: ./include/osdep_service.h:69:
+#define rtw_skb_alloc_f(size, mstat_f)	_rtw_skb_alloc((size))

WARNING: Argument 'mstat_f' is not used in function-like macro
#71: FILE: ./include/osdep_service.h:71:
+#define rtw_skb_copy_f(skb, mstat_f)	_rtw_skb_copy((skb))

CHECK: extern prototypes should be avoided in .h files
#74: FILE: ./include/osdep_service.h:74:
+extern void _rtw_init_queue(struct __queue	*pqueue);

CHECK: Blank lines aren't necessary before a close brace '}'
#90: FILE: ./include/osdep_service.h:90:
+
+}

CHECK: spaces preferred around that '+' (ctx:VxV)
#92: FILE: ./include/osdep_service.h:92:
+#define _RND(sz, r) ((((sz)+((r)-1))/(r))*(r))
                            ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#92: FILE: ./include/osdep_service.h:92:
+#define _RND(sz, r) ((((sz)+((r)-1))/(r))*(r))
                                 ^

CHECK: spaces preferred around that '/' (ctx:VxV)
#92: FILE: ./include/osdep_service.h:92:
+#define _RND(sz, r) ((((sz)+((r)-1))/(r))*(r))
                                     ^

CHECK: spaces preferred around that '*' (ctx:VxV)
#92: FILE: ./include/osdep_service.h:92:
+#define _RND(sz, r) ((((sz)+((r)-1))/(r))*(r))
                                          ^

CHECK: Macro argument reuse 'r' - possible side-effects?
#92: FILE: ./include/osdep_service.h:92:
+#define _RND(sz, r) ((((sz)+((r)-1))/(r))*(r))

CHECK: extern prototypes should be avoided in .h files
#98: FILE: ./include/osdep_service.h:98:
+extern void rtw_free_netdev(struct net_device *netdev);

total: 0 errors, 2 warnings, 10 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/osdep_service.h has style problems, please review.
-------------------------------
./include/osdep_service_linux.h
-------------------------------
CHECK: spinlock_t definition without comment
#43: FILE: ./include/osdep_service_linux.h:43:
+	spinlock_t	lock;

CHECK: Unnecessary parentheses around queue->queue
#53: FILE: ./include/osdep_service_linux.h:53:
+	return (&(queue->queue));

CHECK: Macro argument 'ndev' may be better as '(ndev)' to avoid precedence issues
#101: FILE: ./include/osdep_service_linux.h:101:
+#define NDEV_ARG(ndev) ndev->name

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#102: FILE: ./include/osdep_service_linux.h:102:
+#define ADPT_ARG(adapter) adapter->pnetdev->name

ERROR: Macros with complex values should be enclosed in parentheses
#104: FILE: ./include/osdep_service_linux.h:104:
+#define FUNC_NDEV_ARG(ndev) __func__, ndev->name

CHECK: Macro argument 'ndev' may be better as '(ndev)' to avoid precedence issues
#104: FILE: ./include/osdep_service_linux.h:104:
+#define FUNC_NDEV_ARG(ndev) __func__, ndev->name

ERROR: Macros with complex values should be enclosed in parentheses
#106: FILE: ./include/osdep_service_linux.h:106:
+#define FUNC_ADPT_ARG(adapter) __func__, adapter->pnetdev->name

CHECK: Macro argument 'adapter' may be better as '(adapter)' to avoid precedence issues
#106: FILE: ./include/osdep_service_linux.h:106:
+#define FUNC_ADPT_ARG(adapter) __func__, adapter->pnetdev->name

CHECK: extern prototypes should be avoided in .h files
#119: FILE: ./include/osdep_service_linux.h:119:
+extern struct net_device *rtw_alloc_etherdev(int sizeof_priv);

total: 2 errors, 0 warnings, 7 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/osdep_service_linux.h has style problems, please review.
----------------------
./include/recv_osdep.h
----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/recv_osdep.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#11: FILE: ./include/recv_osdep.h:11:
+extern signed int _rtw_init_recv_priv(struct recv_priv *precvpriv, struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#12: FILE: ./include/recv_osdep.h:12:
+extern void _rtw_free_recv_priv(struct recv_priv *precvpriv);

CHECK: Please don't use multiple blank lines
#14: FILE: ./include/recv_osdep.h:14:
+
+

CHECK: extern prototypes should be avoided in .h files
#15: FILE: ./include/recv_osdep.h:15:
+extern s32  rtw_recv_entry(union recv_frame *precv_frame);

CHECK: extern prototypes should be avoided in .h files
#16: FILE: ./include/recv_osdep.h:16:
+extern int rtw_recv_indicatepkt(struct adapter *adapter, union recv_frame *precv_frame);

CHECK: extern prototypes should be avoided in .h files
#17: FILE: ./include/recv_osdep.h:17:
+extern void rtw_recv_returnpacket(struct net_device *cnxt, struct sk_buff *preturnedpkt);

CHECK: extern prototypes should be avoided in .h files
#19: FILE: ./include/recv_osdep.h:19:
+extern void rtw_handle_tkip_mic_err(struct adapter *padapter, u8 bgroup);

CHECK: Please don't use multiple blank lines
#24: FILE: ./include/recv_osdep.h:24:
+
+

CHECK: Please don't use multiple blank lines
#28: FILE: ./include/recv_osdep.h:28:
+
+

CHECK: Please don't use multiple blank lines
#31: FILE: ./include/recv_osdep.h:31:
+
+

CHECK: line length of 108 exceeds 100 columns
#35: FILE: ./include/recv_osdep.h:35:
+void rtw_os_recv_indicate_pkt(struct adapter *padapter, struct sk_buff *pkt, struct rx_pkt_attrib *pattrib);

CHECK: Please don't use multiple blank lines
#39: FILE: ./include/recv_osdep.h:39:
+
+

total: 0 errors, 0 warnings, 13 checks, 40 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/recv_osdep.h has style problems, please review.
-------------------------
./include/rtl8192c_recv.h
-------------------------
CHECK: Please don't use multiple blank lines
#37: FILE: ./include/rtl8192c_recv.h:37:
+
+

total: 0 errors, 0 warnings, 1 checks, 41 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8192c_recv.h has style problems, please review.
------------------------
./include/rtl8723b_cmd.h
------------------------
CHECK: Please use a blank line after function/struct/union/enum declarations
#74: FILE: ./include/rtl8723b_cmd.h:74:
+};
+/*  */

CHECK: line length of 139 exceeds 100 columns
#78: FILE: ./include/rtl8723b_cmd.h:78:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_PROBE_RSP(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd, 0, 8, __Value)

CHECK: Avoid CamelCase: <__pH2CCmd>
#78: FILE: ./include/rtl8723b_cmd.h:78:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_PROBE_RSP(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 151 exceeds 100 columns
#79: FILE: ./include/rtl8723b_cmd.h:79:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_PSPOLL(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#79: FILE: ./include/rtl8723b_cmd.h:79:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_PSPOLL(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+1, 0, 8, __Value)
                                                                 				                                     ^

CHECK: line length of 143 exceeds 100 columns
#80: FILE: ./include/rtl8723b_cmd.h:80:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_NULL_DATA(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#80: FILE: ./include/rtl8723b_cmd.h:80:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_NULL_DATA(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+2, 0, 8, __Value)
                                                                    			                                     ^

CHECK: line length of 135 exceeds 100 columns
#81: FILE: ./include/rtl8723b_cmd.h:81:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_QOS_NULL_DATA(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#81: FILE: ./include/rtl8723b_cmd.h:81:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_QOS_NULL_DATA(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+3, 0, 8, __Value)
                                                                        		                                     ^

CHECK: line length of 135 exceeds 100 columns
#82: FILE: ./include/rtl8723b_cmd.h:82:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_BT_QOS_NULL_DATA(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+4, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#82: FILE: ./include/rtl8723b_cmd.h:82:
+#define SET_8723B_H2CCMD_RSVDPAGE_LOC_BT_QOS_NULL_DATA(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+4, 0, 8, __Value)
                                                                           	                                     ^

CHECK: line length of 134 exceeds 100 columns
#85: FILE: ./include/rtl8723b_cmd.h:85:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_OPMODE(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 1, __Value)

CHECK: line length of 134 exceeds 100 columns
#86: FILE: ./include/rtl8723b_cmd.h:86:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID_IND(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 1, 1, __Value)

CHECK: line length of 141 exceeds 100 columns
#87: FILE: ./include/rtl8723b_cmd.h:87:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#87: FILE: ./include/rtl8723b_cmd.h:87:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)
                                                               				                                   ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#87: FILE: ./include/rtl8723b_cmd.h:87:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 141 exceeds 100 columns
#88: FILE: ./include/rtl8723b_cmd.h:88:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID_END(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#88: FILE: ./include/rtl8723b_cmd.h:88:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID_END(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)
                                                                   			                                   ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#88: FILE: ./include/rtl8723b_cmd.h:88:
+#define SET_8723B_H2CCMD_MSRRPT_PARM_MACID_END(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)

CHECK: line length of 134 exceeds 100 columns
#91: FILE: ./include/rtl8723b_cmd.h:91:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_ENABLE(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 1, __Value)

CHECK: line length of 142 exceeds 100 columns
#92: FILE: ./include/rtl8723b_cmd.h:92:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_ADOPT(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE(__pH2CCmd, 1, 1, __Value)

CHECK: line length of 134 exceeds 100 columns
#93: FILE: ./include/rtl8723b_cmd.h:93:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_PKT_TYPE(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 2, 1, __Value)

CHECK: line length of 141 exceeds 100 columns
#94: FILE: ./include/rtl8723b_cmd.h:94:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_CHECK_PERIOD(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#94: FILE: ./include/rtl8723b_cmd.h:94:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_CHECK_PERIOD(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)
                                                                         		                                   ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#94: FILE: ./include/rtl8723b_cmd.h:94:
+#define SET_8723B_H2CCMD_KEEPALIVE_PARM_CHECK_PERIOD(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 134 exceeds 100 columns
#97: FILE: ./include/rtl8723b_cmd.h:97:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_ENABLE(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 1, __Value)

CHECK: line length of 134 exceeds 100 columns
#98: FILE: ./include/rtl8723b_cmd.h:98:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_ADOPT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 1, 1, __Value)

CHECK: line length of 133 exceeds 100 columns
#99: FILE: ./include/rtl8723b_cmd.h:99:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_CHECK_PERIOD(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#99: FILE: ./include/rtl8723b_cmd.h:99:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_CHECK_PERIOD(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)
                                                                              	                                   ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#99: FILE: ./include/rtl8723b_cmd.h:99:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_CHECK_PERIOD(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 133 exceeds 100 columns
#100: FILE: ./include/rtl8723b_cmd.h:100:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_TRY_PKT_NUM(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#100: FILE: ./include/rtl8723b_cmd.h:100:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_TRY_PKT_NUM(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)
                                                                             	                                   ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#100: FILE: ./include/rtl8723b_cmd.h:100:
+#define SET_8723B_H2CCMD_DISCONDECISION_PARM_TRY_PKT_NUM(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd+2, 0, 8, __Value)

CHECK: line length of 139 exceeds 100 columns
#103: FILE: ./include/rtl8723b_cmd.h:103:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_MODE(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 138 exceeds 100 columns
#104: FILE: ./include/rtl8723b_cmd.h:104:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_RLBM(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE((__pH2CCmd)+1, 0, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#104: FILE: ./include/rtl8723b_cmd.h:104:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_RLBM(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE((__pH2CCmd)+1, 0, 4, __Value)
                                                               				                                ^

CHECK: line length of 138 exceeds 100 columns
#105: FILE: ./include/rtl8723b_cmd.h:105:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_SMART_PS(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE((__pH2CCmd)+1, 4, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#105: FILE: ./include/rtl8723b_cmd.h:105:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_SMART_PS(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE((__pH2CCmd)+1, 4, 4, __Value)
                                                                   			                                ^

CHECK: line length of 135 exceeds 100 columns
#106: FILE: ./include/rtl8723b_cmd.h:106:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_BCN_PASS_TIME(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#106: FILE: ./include/rtl8723b_cmd.h:106:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_BCN_PASS_TIME(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+2, 0, 8, __Value)
                                                                        		                                     ^

CHECK: line length of 135 exceeds 100 columns
#107: FILE: ./include/rtl8723b_cmd.h:107:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_ALL_QUEUE_UAPSD(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#107: FILE: ./include/rtl8723b_cmd.h:107:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_ALL_QUEUE_UAPSD(__pH2CCmd, __Value)	SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+3, 0, 8, __Value)
                                                                          	                                     ^

CHECK: line length of 143 exceeds 100 columns
#108: FILE: ./include/rtl8723b_cmd.h:108:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_PWR_STATE(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+4, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#108: FILE: ./include/rtl8723b_cmd.h:108:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_PWR_STATE(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+4, 0, 8, __Value)
                                                                    			                                     ^

CHECK: line length of 143 exceeds 100 columns
#109: FILE: ./include/rtl8723b_cmd.h:109:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_BYTE5(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+5, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#109: FILE: ./include/rtl8723b_cmd.h:109:
+#define SET_8723B_H2CCMD_PWRMODE_PARM_BYTE5(__pH2CCmd, __Value)				SET_BITS_TO_LE_1BYTE_8BIT((__pH2CCmd)+5, 0, 8, __Value)
                                                                				                                     ^

CHECK: line length of 121 exceeds 100 columns
#111: FILE: ./include/rtl8723b_cmd.h:111:
+#define GET_8723B_H2CCMD_PWRMODE_PARM_MODE(__pH2CCmd)					LE_BITS_TO_1BYTE(__pH2CCmd, 0, 8)

CHECK: line length of 134 exceeds 100 columns
#114: FILE: ./include/rtl8723b_cmd.h:114:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_BCN_TO_LIMIT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 136 exceeds 100 columns
#115: FILE: ./include/rtl8723b_cmd.h:115:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#115: FILE: ./include/rtl8723b_cmd.h:115:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)
                                                                      			                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#115: FILE: ./include/rtl8723b_cmd.h:115:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 128 exceeds 100 columns
#116: FILE: ./include/rtl8723b_cmd.h:116:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_ADOPT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#116: FILE: ./include/rtl8723b_cmd.h:116:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_ADOPT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 1, __Value)
                                                               			                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#116: FILE: ./include/rtl8723b_cmd.h:116:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_ADOPT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 1, __Value)

CHECK: line length of 136 exceeds 100 columns
#117: FILE: ./include/rtl8723b_cmd.h:117:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_PS_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 1, 7, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#117: FILE: ./include/rtl8723b_cmd.h:117:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_PS_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 1, 7, __Value)
                                                                    			                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#117: FILE: ./include/rtl8723b_cmd.h:117:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_PS_TIMEOUT(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 1, 7, __Value)

CHECK: line length of 136 exceeds 100 columns
#118: FILE: ./include/rtl8723b_cmd.h:118:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_PERIOD(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#118: FILE: ./include/rtl8723b_cmd.h:118:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_PERIOD(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)
                                                                     			                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#118: FILE: ./include/rtl8723b_cmd.h:118:
+#define SET_8723B_H2CCMD_PSTUNE_PARM_DTIM_PERIOD(__pH2CCmd, __Value)			SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: line length of 118 exceeds 100 columns
#121: FILE: ./include/rtl8723b_cmd.h:121:
+#define SET_8723B_H2CCMD_MACID_CFG_MACID(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 120 exceeds 100 columns
#122: FILE: ./include/rtl8723b_cmd.h:122:
+#define SET_8723B_H2CCMD_MACID_CFG_RAID(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#122: FILE: ./include/rtl8723b_cmd.h:122:
+#define SET_8723B_H2CCMD_MACID_CFG_RAID(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 5, __Value)
                                                            		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#122: FILE: ./include/rtl8723b_cmd.h:122:
+#define SET_8723B_H2CCMD_MACID_CFG_RAID(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 5, __Value)

CHECK: line length of 120 exceeds 100 columns
#123: FILE: ./include/rtl8723b_cmd.h:123:
+#define SET_8723B_H2CCMD_MACID_CFG_SGI_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 7, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#123: FILE: ./include/rtl8723b_cmd.h:123:
+#define SET_8723B_H2CCMD_MACID_CFG_SGI_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 7, 1, __Value)
                                                              		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#123: FILE: ./include/rtl8723b_cmd.h:123:
+#define SET_8723B_H2CCMD_MACID_CFG_SGI_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 7, 1, __Value)

CHECK: line length of 120 exceeds 100 columns
#124: FILE: ./include/rtl8723b_cmd.h:124:
+#define SET_8723B_H2CCMD_MACID_CFG_BW(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#124: FILE: ./include/rtl8723b_cmd.h:124:
+#define SET_8723B_H2CCMD_MACID_CFG_BW(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 2, __Value)
                                                          		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#124: FILE: ./include/rtl8723b_cmd.h:124:
+#define SET_8723B_H2CCMD_MACID_CFG_BW(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 2, __Value)

CHECK: line length of 128 exceeds 100 columns
#125: FILE: ./include/rtl8723b_cmd.h:125:
+#define SET_8723B_H2CCMD_MACID_CFG_NO_UPDATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 3, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#125: FILE: ./include/rtl8723b_cmd.h:125:
+#define SET_8723B_H2CCMD_MACID_CFG_NO_UPDATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 3, 1, __Value)
                                                                 		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#125: FILE: ./include/rtl8723b_cmd.h:125:
+#define SET_8723B_H2CCMD_MACID_CFG_NO_UPDATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 3, 1, __Value)

CHECK: line length of 120 exceeds 100 columns
#126: FILE: ./include/rtl8723b_cmd.h:126:
+#define SET_8723B_H2CCMD_MACID_CFG_VHT_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 4, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#126: FILE: ./include/rtl8723b_cmd.h:126:
+#define SET_8723B_H2CCMD_MACID_CFG_VHT_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 4, 2, __Value)
                                                              		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#126: FILE: ./include/rtl8723b_cmd.h:126:
+#define SET_8723B_H2CCMD_MACID_CFG_VHT_EN(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 4, 2, __Value)

CHECK: line length of 120 exceeds 100 columns
#127: FILE: ./include/rtl8723b_cmd.h:127:
+#define SET_8723B_H2CCMD_MACID_CFG_DISPT(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 6, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#127: FILE: ./include/rtl8723b_cmd.h:127:
+#define SET_8723B_H2CCMD_MACID_CFG_DISPT(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 6, 1, __Value)
                                                             		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#127: FILE: ./include/rtl8723b_cmd.h:127:
+#define SET_8723B_H2CCMD_MACID_CFG_DISPT(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 6, 1, __Value)

CHECK: line length of 120 exceeds 100 columns
#128: FILE: ./include/rtl8723b_cmd.h:128:
+#define SET_8723B_H2CCMD_MACID_CFG_DISRA(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 7, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#128: FILE: ./include/rtl8723b_cmd.h:128:
+#define SET_8723B_H2CCMD_MACID_CFG_DISRA(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 7, 1, __Value)
                                                             		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#128: FILE: ./include/rtl8723b_cmd.h:128:
+#define SET_8723B_H2CCMD_MACID_CFG_DISRA(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 7, 1, __Value)

CHECK: line length of 128 exceeds 100 columns
#129: FILE: ./include/rtl8723b_cmd.h:129:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK0(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#129: FILE: ./include/rtl8723b_cmd.h:129:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK0(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)
                                                                  		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#129: FILE: ./include/rtl8723b_cmd.h:129:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK0(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: line length of 128 exceeds 100 columns
#130: FILE: ./include/rtl8723b_cmd.h:130:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK1(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#130: FILE: ./include/rtl8723b_cmd.h:130:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK1(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)
                                                                  		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#130: FILE: ./include/rtl8723b_cmd.h:130:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK1(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)

CHECK: line length of 128 exceeds 100 columns
#131: FILE: ./include/rtl8723b_cmd.h:131:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+5, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#131: FILE: ./include/rtl8723b_cmd.h:131:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+5, 0, 8, __Value)
                                                                  		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#131: FILE: ./include/rtl8723b_cmd.h:131:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+5, 0, 8, __Value)

CHECK: line length of 128 exceeds 100 columns
#132: FILE: ./include/rtl8723b_cmd.h:132:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK3(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+6, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#132: FILE: ./include/rtl8723b_cmd.h:132:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK3(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+6, 0, 8, __Value)
                                                                  		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#132: FILE: ./include/rtl8723b_cmd.h:132:
+#define SET_8723B_H2CCMD_MACID_CFG_RATE_MASK3(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+6, 0, 8, __Value)

CHECK: line length of 118 exceeds 100 columns
#135: FILE: ./include/rtl8723b_cmd.h:135:
+#define SET_8723B_H2CCMD_RSSI_SETTING_MACID(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 120 exceeds 100 columns
#136: FILE: ./include/rtl8723b_cmd.h:136:
+#define SET_8723B_H2CCMD_RSSI_SETTING_RSSI(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 7, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#136: FILE: ./include/rtl8723b_cmd.h:136:
+#define SET_8723B_H2CCMD_RSSI_SETTING_RSSI(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 7, __Value)
                                                               		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#136: FILE: ./include/rtl8723b_cmd.h:136:
+#define SET_8723B_H2CCMD_RSSI_SETTING_RSSI(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 7, __Value)

CHECK: line length of 128 exceeds 100 columns
#137: FILE: ./include/rtl8723b_cmd.h:137:
+#define SET_8723B_H2CCMD_RSSI_SETTING_ULDL_STATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#137: FILE: ./include/rtl8723b_cmd.h:137:
+#define SET_8723B_H2CCMD_RSSI_SETTING_ULDL_STATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)
                                                                     		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#137: FILE: ./include/rtl8723b_cmd.h:137:
+#define SET_8723B_H2CCMD_RSSI_SETTING_ULDL_STATE(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: line length of 126 exceeds 100 columns
#140: FILE: ./include/rtl8723b_cmd.h:140:
+#define SET_8723B_H2CCMD_APREQRPT_PARM_MACID1(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 128 exceeds 100 columns
#141: FILE: ./include/rtl8723b_cmd.h:141:
+#define SET_8723B_H2CCMD_APREQRPT_PARM_MACID2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#141: FILE: ./include/rtl8723b_cmd.h:141:
+#define SET_8723B_H2CCMD_APREQRPT_PARM_MACID2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)
                                                                  		                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#141: FILE: ./include/rtl8723b_cmd.h:141:
+#define SET_8723B_H2CCMD_APREQRPT_PARM_MACID2(__pH2CCmd, __Value)		SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 155 exceeds 100 columns
#144: FILE: ./include/rtl8723b_cmd.h:144:
+#define SET_8723B_H2CCMD_BT_PWR_IDX(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE_8BIT(__pH2CCmd, 0, 8, __Value)

CHECK: line length of 158 exceeds 100 columns
#147: FILE: ./include/rtl8723b_cmd.h:147:
+#define SET_8723B_H2CCMD_BT_MPOPER_VER(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd, 0, 4, __Value)

CHECK: line length of 158 exceeds 100 columns
#148: FILE: ./include/rtl8723b_cmd.h:148:
+#define SET_8723B_H2CCMD_BT_MPOPER_REQNUM(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd, 4, 4, __Value)

CHECK: line length of 160 exceeds 100 columns
#149: FILE: ./include/rtl8723b_cmd.h:149:
+#define SET_8723B_H2CCMD_BT_MPOPER_IDX(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#149: FILE: ./include/rtl8723b_cmd.h:149:
+#define SET_8723B_H2CCMD_BT_MPOPER_IDX(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)
                                                           							                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#149: FILE: ./include/rtl8723b_cmd.h:149:
+#define SET_8723B_H2CCMD_BT_MPOPER_IDX(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+1, 0, 8, __Value)

CHECK: line length of 160 exceeds 100 columns
#150: FILE: ./include/rtl8723b_cmd.h:150:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM1(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#150: FILE: ./include/rtl8723b_cmd.h:150:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM1(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 8, __Value)
                                                              							                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#150: FILE: ./include/rtl8723b_cmd.h:150:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM1(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+2, 0, 8, __Value)

CHECK: line length of 160 exceeds 100 columns
#151: FILE: ./include/rtl8723b_cmd.h:151:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM2(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#151: FILE: ./include/rtl8723b_cmd.h:151:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM2(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)
                                                              							                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#151: FILE: ./include/rtl8723b_cmd.h:151:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM2(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+3, 0, 8, __Value)

CHECK: line length of 160 exceeds 100 columns
#152: FILE: ./include/rtl8723b_cmd.h:152:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM3(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#152: FILE: ./include/rtl8723b_cmd.h:152:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM3(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)
                                                              							                              ^

CHECK: Macro argument '__pH2CCmd' may be better as '(__pH2CCmd)' to avoid precedence issues
#152: FILE: ./include/rtl8723b_cmd.h:152:
+#define SET_8723B_H2CCMD_BT_MPOPER_PARAM3(__pH2CCmd, __Value)							SET_BITS_TO_LE_1BYTE(__pH2CCmd+4, 0, 8, __Value)

CHECK: line length of 151 exceeds 100 columns
#155: FILE: ./include/rtl8723b_cmd.h:155:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_SIZE(__pH2CCmd, __Value)					SET_BITS_TO_LE_2BYTE((u8 *)(__pH2CCmd), 0, 16, __Value)

CHECK: line length of 146 exceeds 100 columns
#156: FILE: ./include/rtl8723b_cmd.h:156:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR0(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+2, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#156: FILE: ./include/rtl8723b_cmd.h:156:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR0(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+2, 0, 8, __Value)
                                                               					                                ^

CHECK: line length of 146 exceeds 100 columns
#157: FILE: ./include/rtl8723b_cmd.h:157:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR1(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+3, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#157: FILE: ./include/rtl8723b_cmd.h:157:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR1(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+3, 0, 8, __Value)
                                                               					                                ^

CHECK: line length of 146 exceeds 100 columns
#158: FILE: ./include/rtl8723b_cmd.h:158:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR2(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+4, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#158: FILE: ./include/rtl8723b_cmd.h:158:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR2(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+4, 0, 8, __Value)
                                                               					                                ^

CHECK: line length of 146 exceeds 100 columns
#159: FILE: ./include/rtl8723b_cmd.h:159:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR3(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+5, 0, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#159: FILE: ./include/rtl8723b_cmd.h:159:
+#define SET_8723B_H2CCMD_BT_FW_PATCH_ADDR3(__pH2CCmd, __Value)					SET_BITS_TO_LE_1BYTE((__pH2CCmd)+5, 0, 8, __Value)
                                                               					                                ^

CHECK: Avoid CamelCase: <Mode>
#166: FILE: ./include/rtl8723b_cmd.h:166:
+void rtl8723b_set_FwPwrMode_cmd(struct adapter *padapter, u8 Mode);

CHECK: line length of 107 exceeds 100 columns
#173: FILE: ./include/rtl8723b_cmd.h:173:
+void rtl8723b_set_FwMacIdConfig_cmd(struct adapter *padapter, u8 mac_id, u8 raid, u8 bw, u8 sgi, u32 mask);

CHECK: Avoid CamelCase: <FillH2CCmd>
#184: FILE: ./include/rtl8723b_cmd.h:184:
+#define FillH2CCmd FillH2CCmd8723B

total: 0 errors, 0 warnings, 132 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_cmd.h has style problems, please review.
-----------------------
./include/rtl8723b_dm.h
-----------------------
CHECK: Please don't use multiple blank lines
#32: FILE: ./include/rtl8723b_dm.h:32:
+
+

total: 0 errors, 0 warnings, 1 checks, 33 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_dm.h has style problems, please review.
------------------------
./include/rtl8723b_hal.h
------------------------
CHECK: Macro argument 'fw_hdr' may be better as '(fw_hdr)' to avoid precedence issues
#30: FILE: ./include/rtl8723b_hal.h:30:
+#define IS_FW_HEADER_EXIST_8723B(fw_hdr) \
+	((le16_to_cpu(fw_hdr->signature) & 0xFFF0) == 0x5300)

CHECK: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#136: FILE: ./include/rtl8723b_hal.h:136:
+#define AVAILABLE_EFUSE_ADDR(addr) (addr < EFUSE_REAL_CONTENT_LEN_8723B)

WARNING: Prefer __packed over __attribute__((__packed__))
#174: FILE: ./include/rtl8723b_hal.h:174:
+} __attribute__((__packed__));

CHECK: Avoid CamelCase: <FirmwareDownloadBT>
#242: FILE: ./include/rtl8723b_hal.h:242:
+int FirmwareDownloadBT(struct adapter *adapter, struct rt_firmware *firmware);

CHECK: Avoid CamelCase: <MRateToHwRate8723B>
#247: FILE: ./include/rtl8723b_hal.h:247:
+u8 MRateToHwRate8723B(u8 rate);

CHECK: Avoid CamelCase: <HwRateToMRate8723B>
#248: FILE: ./include/rtl8723b_hal.h:248:
+u8 HwRateToMRate8723B(u8 rate);

total: 0 errors, 1 warnings, 5 checks, 253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_hal.h has style problems, please review.
-------------------------
./include/rtl8723b_recv.h
-------------------------
total: 0 errors, 0 warnings, 0 checks, 95 lines checked

./include/rtl8723b_recv.h has no obvious style problems and is ready for submission.
-----------------------
./include/rtl8723b_rf.h
-----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtl8723b_rf.h:10:
+
+

CHECK: Alignment should match open parenthesis
#15: FILE: ./include/rtl8723b_rf.h:15:
+PHY_RF6052SetBandwidth8723B(struct adapter *Adapter,
+	enum channel_width		Bandwidth);

total: 0 errors, 0 warnings, 2 checks, 17 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_rf.h has style problems, please review.
-------------------------
./include/rtl8723b_spec.h
-------------------------
CHECK: line length of 103 exceeds 100 columns
#70: FILE: ./include/rtl8723b_spec.h:70:
+#define	REG_HQ_DESA_8723B				0x0310	/*  TX High Queue Descriptor Address */

CHECK: line length of 101 exceeds 100 columns
#73: FILE: ./include/rtl8723b_spec.h:73:
+#define	REG_VIQ_DESA_8723B				0x0328	/*  TX VI Queue Descriptor Address */

CHECK: line length of 101 exceeds 100 columns
#76: FILE: ./include/rtl8723b_spec.h:76:
+#define	REG_RX_DESA_8723B				0x0340	/*  RX Queue	Descriptor Address */

CHECK: line length of 106 exceeds 100 columns
#191: FILE: ./include/rtl8723b_spec.h:191:
+#define	IMR_TIMER2_8723B					BIT31		/*  Timeout interrupt 2 */

CHECK: line length of 106 exceeds 100 columns
#192: FILE: ./include/rtl8723b_spec.h:192:
+#define	IMR_TIMER1_8723B					BIT30		/*  Timeout interrupt 1 */

CHECK: line length of 108 exceeds 100 columns
#193: FILE: ./include/rtl8723b_spec.h:193:
+#define	IMR_PSTIMEOUT_8723B				BIT29		/*  Power Save Time Out Interrupt */

CHECK: line length of 129 exceeds 100 columns
#194: FILE: ./include/rtl8723b_spec.h:194:
+#define	IMR_GTINT4_8723B					BIT28		/*  When GTIMER4 expires, this bit is set to 1 */

CHECK: line length of 129 exceeds 100 columns
#195: FILE: ./include/rtl8723b_spec.h:195:
+#define	IMR_GTINT3_8723B					BIT27		/*  When GTIMER3 expires, this bit is set to 1 */

CHECK: line length of 101 exceeds 100 columns
#196: FILE: ./include/rtl8723b_spec.h:196:
+#define	IMR_TXBCN0ERR_8723B				BIT26		/*  Transmit Beacon0 Error */

CHECK: line length of 114 exceeds 100 columns
#198: FILE: ./include/rtl8723b_spec.h:198:
+#define	IMR_TSF_BIT32_TOGGLE_8723B		BIT24		/*  TSF Timer BIT32 toggle indication interrupt */

CHECK: line length of 101 exceeds 100 columns
#199: FILE: ./include/rtl8723b_spec.h:199:
+#define	IMR_BCNDMAINT0_8723B				BIT20		/*  Beacon DMA Interrupt 0 */

CHECK: line length of 132 exceeds 100 columns
#201: FILE: ./include/rtl8723b_spec.h:201:
+#define	IMR_HSISR_IND_ON_INT_8723B		BIT15		/*  HSISR Indicator (HSIMR & HSISR is true, this bit is set to 1) */

CHECK: line length of 110 exceeds 100 columns
#202: FILE: ./include/rtl8723b_spec.h:202:
+#define	IMR_BCNDMAINT_E_8723B			BIT14		/*  Beacon DMA Interrupt Extension for Win7 */

CHECK: line length of 110 exceeds 100 columns
#203: FILE: ./include/rtl8723b_spec.h:203:
+#define	IMR_ATIMEND_8723B				BIT12		/*  CTWidnow End or ATIM Window End */

CHECK: line length of 132 exceeds 100 columns
#204: FILE: ./include/rtl8723b_spec.h:204:
+#define	IMR_C2HCMD_8723B					BIT10		/*  CPU to Host Command INT Status, Write 1 clear */

CHECK: line length of 136 exceeds 100 columns
#205: FILE: ./include/rtl8723b_spec.h:205:
+#define	IMR_CPWM2_8723B					BIT9			/*  CPU power Mode exchange INT Status, Write 1 clear */

CHECK: line length of 136 exceeds 100 columns
#206: FILE: ./include/rtl8723b_spec.h:206:
+#define	IMR_CPWM_8723B					BIT8			/*  CPU power Mode exchange INT Status, Write 1 clear */

CHECK: line length of 104 exceeds 100 columns
#207: FILE: ./include/rtl8723b_spec.h:207:
+#define	IMR_HIGHDOK_8723B				BIT7			/*  High Queue DMA OK */

CHECK: line length of 110 exceeds 100 columns
#208: FILE: ./include/rtl8723b_spec.h:208:
+#define	IMR_MGNTDOK_8723B				BIT6			/*  Management Queue DMA OK */

CHECK: line length of 112 exceeds 100 columns
#213: FILE: ./include/rtl8723b_spec.h:213:
+#define	IMR_RDU_8723B					BIT1			/*  Rx Descriptor Unavailable */

CHECK: line length of 101 exceeds 100 columns
#214: FILE: ./include/rtl8723b_spec.h:214:
+#define	IMR_ROK_8723B					BIT0			/*  Receive DMA OK */

CHECK: line length of 101 exceeds 100 columns
#217: FILE: ./include/rtl8723b_spec.h:217:
+#define	IMR_BCNDMAINT7_8723B				BIT27		/*  Beacon DMA Interrupt 7 */

CHECK: line length of 101 exceeds 100 columns
#218: FILE: ./include/rtl8723b_spec.h:218:
+#define	IMR_BCNDMAINT6_8723B				BIT26		/*  Beacon DMA Interrupt 6 */

CHECK: line length of 101 exceeds 100 columns
#219: FILE: ./include/rtl8723b_spec.h:219:
+#define	IMR_BCNDMAINT5_8723B				BIT25		/*  Beacon DMA Interrupt 5 */

CHECK: line length of 101 exceeds 100 columns
#220: FILE: ./include/rtl8723b_spec.h:220:
+#define	IMR_BCNDMAINT4_8723B				BIT24		/*  Beacon DMA Interrupt 4 */

CHECK: line length of 101 exceeds 100 columns
#221: FILE: ./include/rtl8723b_spec.h:221:
+#define	IMR_BCNDMAINT3_8723B				BIT23		/*  Beacon DMA Interrupt 3 */

CHECK: line length of 101 exceeds 100 columns
#222: FILE: ./include/rtl8723b_spec.h:222:
+#define	IMR_BCNDMAINT2_8723B				BIT22		/*  Beacon DMA Interrupt 2 */

CHECK: line length of 101 exceeds 100 columns
#223: FILE: ./include/rtl8723b_spec.h:223:
+#define	IMR_BCNDMAINT1_8723B				BIT21		/*  Beacon DMA Interrupt 1 */

CHECK: line length of 118 exceeds 100 columns
#224: FILE: ./include/rtl8723b_spec.h:224:
+#define	IMR_BCNDOK7_8723B					BIT20		/*  Beacon Queue DMA OK Interrupt 7 */

CHECK: line length of 118 exceeds 100 columns
#225: FILE: ./include/rtl8723b_spec.h:225:
+#define	IMR_BCNDOK6_8723B					BIT19		/*  Beacon Queue DMA OK Interrupt 6 */

CHECK: line length of 118 exceeds 100 columns
#226: FILE: ./include/rtl8723b_spec.h:226:
+#define	IMR_BCNDOK5_8723B					BIT18		/*  Beacon Queue DMA OK Interrupt 5 */

CHECK: line length of 118 exceeds 100 columns
#227: FILE: ./include/rtl8723b_spec.h:227:
+#define	IMR_BCNDOK4_8723B					BIT17		/*  Beacon Queue DMA OK Interrupt 4 */

CHECK: line length of 118 exceeds 100 columns
#228: FILE: ./include/rtl8723b_spec.h:228:
+#define	IMR_BCNDOK3_8723B					BIT16		/*  Beacon Queue DMA OK Interrupt 3 */

CHECK: line length of 118 exceeds 100 columns
#229: FILE: ./include/rtl8723b_spec.h:229:
+#define	IMR_BCNDOK2_8723B					BIT15		/*  Beacon Queue DMA OK Interrupt 2 */

CHECK: line length of 118 exceeds 100 columns
#230: FILE: ./include/rtl8723b_spec.h:230:
+#define	IMR_BCNDOK1_8723B					BIT14		/*  Beacon Queue DMA OK Interrupt 1 */

CHECK: line length of 113 exceeds 100 columns
#231: FILE: ./include/rtl8723b_spec.h:231:
+#define	IMR_ATIMEND_E_8723B				BIT13		/*  ATIM Window End Extension for Win7 */

CHECK: line length of 125 exceeds 100 columns
#232: FILE: ./include/rtl8723b_spec.h:232:
+#define	IMR_TXERR_8723B					BIT11		/*  Tx Error Flag Interrupt Status, write 1 clear. */

CHECK: line length of 118 exceeds 100 columns
#233: FILE: ./include/rtl8723b_spec.h:233:
+#define	IMR_RXERR_8723B					BIT10		/*  Rx Error Flag INT Status, Write 1 clear */

CHECK: line length of 117 exceeds 100 columns
#234: FILE: ./include/rtl8723b_spec.h:234:
+#define	IMR_TXFOVW_8723B					BIT9			/*  Transmit FIFO Overflow */

CHECK: line length of 116 exceeds 100 columns
#235: FILE: ./include/rtl8723b_spec.h:235:
+#define	IMR_RXFOVW_8723B					BIT8			/*  Receive FIFO Overflow */

total: 0 errors, 0 warnings, 40 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_spec.h has style problems, please review.
-------------------------
./include/rtl8723b_xmit.h
-------------------------
CHECK: Please don't use multiple blank lines
#32: FILE: ./include/rtl8723b_xmit.h:32:
+
+

CHECK: Avoid CamelCase: <Rate_ID_SHT>
#37: FILE: ./include/rtl8723b_xmit.h:37:
+#define Rate_ID_SHT	16

CHECK: Please don't use multiple blank lines
#186: FILE: ./include/rtl8723b_xmit.h:186:
+
+

CHECK: line length of 133 exceeds 100 columns
#188: FILE: ./include/rtl8723b_xmit.h:188:
+#define SET_RX_STATUS_DESC_PKT_LEN_8723B(__pRxStatusDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pRxStatusDesc, 0, 14, __Value)

CHECK: Avoid CamelCase: <__pRxStatusDesc>
#188: FILE: ./include/rtl8723b_xmit.h:188:
+#define SET_RX_STATUS_DESC_PKT_LEN_8723B(__pRxStatusDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pRxStatusDesc, 0, 14, __Value)

CHECK: line length of 125 exceeds 100 columns
#189: FILE: ./include/rtl8723b_xmit.h:189:
+#define SET_RX_STATUS_DESC_EOR_8723B(__pRxStatusDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pRxStatusDesc, 30, 1, __Value)

CHECK: line length of 125 exceeds 100 columns
#190: FILE: ./include/rtl8723b_xmit.h:190:
+#define SET_RX_STATUS_DESC_OWN_8723B(__pRxStatusDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pRxStatusDesc, 31, 1, __Value)

CHECK: line length of 120 exceeds 100 columns
#192: FILE: ./include/rtl8723b_xmit.h:192:
+#define GET_RX_STATUS_DESC_PKT_LEN_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 0, 14)

CHECK: line length of 112 exceeds 100 columns
#193: FILE: ./include/rtl8723b_xmit.h:193:
+#define GET_RX_STATUS_DESC_CRC32_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 14, 1)

CHECK: line length of 120 exceeds 100 columns
#194: FILE: ./include/rtl8723b_xmit.h:194:
+#define GET_RX_STATUS_DESC_ICV_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc, 15, 1)

CHECK: line length of 112 exceeds 100 columns
#195: FILE: ./include/rtl8723b_xmit.h:195:
+#define GET_RX_STATUS_DESC_DRVINFO_SIZE_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc, 16, 4)

CHECK: line length of 120 exceeds 100 columns
#196: FILE: ./include/rtl8723b_xmit.h:196:
+#define GET_RX_STATUS_DESC_SECURITY_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 20, 3)

CHECK: line length of 120 exceeds 100 columns
#197: FILE: ./include/rtl8723b_xmit.h:197:
+#define GET_RX_STATUS_DESC_QOS_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc, 23, 1)

CHECK: line length of 112 exceeds 100 columns
#198: FILE: ./include/rtl8723b_xmit.h:198:
+#define GET_RX_STATUS_DESC_SHIFT_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 24, 2)

CHECK: line length of 120 exceeds 100 columns
#199: FILE: ./include/rtl8723b_xmit.h:199:
+#define GET_RX_STATUS_DESC_PHY_STATUS_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 26, 1)

CHECK: line length of 112 exceeds 100 columns
#200: FILE: ./include/rtl8723b_xmit.h:200:
+#define GET_RX_STATUS_DESC_SWDEC_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 27, 1)

CHECK: line length of 120 exceeds 100 columns
#201: FILE: ./include/rtl8723b_xmit.h:201:
+#define GET_RX_STATUS_DESC_LAST_SEG_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc, 28, 1)

CHECK: line length of 112 exceeds 100 columns
#202: FILE: ./include/rtl8723b_xmit.h:202:
+#define GET_RX_STATUS_DESC_FIRST_SEG_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc, 29, 1)

CHECK: line length of 120 exceeds 100 columns
#203: FILE: ./include/rtl8723b_xmit.h:203:
+#define GET_RX_STATUS_DESC_EOR_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc, 30, 1)

CHECK: line length of 120 exceeds 100 columns
#204: FILE: ./include/rtl8723b_xmit.h:204:
+#define GET_RX_STATUS_DESC_OWN_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc, 31, 1)

CHECK: line length of 123 exceeds 100 columns
#207: FILE: ./include/rtl8723b_xmit.h:207:
+#define GET_RX_STATUS_DESC_MACID_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 0, 7)

CHECK: spaces preferred around that '+' (ctx:VxV)
#207: FILE: ./include/rtl8723b_xmit.h:207:
+#define GET_RX_STATUS_DESC_MACID_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 0, 7)
                                                  					                          ^

CHECK: Avoid CamelCase: <__pRxDesc>
#207: FILE: ./include/rtl8723b_xmit.h:207:
+#define GET_RX_STATUS_DESC_MACID_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 0, 7)

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#207: FILE: ./include/rtl8723b_xmit.h:207:
+#define GET_RX_STATUS_DESC_MACID_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 0, 7)

CHECK: line length of 123 exceeds 100 columns
#208: FILE: ./include/rtl8723b_xmit.h:208:
+#define GET_RX_STATUS_DESC_TID_8723B(__pRxDesc)						LE_BITS_TO_4BYTE(__pRxDesc+4, 8, 4)

CHECK: spaces preferred around that '+' (ctx:VxV)
#208: FILE: ./include/rtl8723b_xmit.h:208:
+#define GET_RX_STATUS_DESC_TID_8723B(__pRxDesc)						LE_BITS_TO_4BYTE(__pRxDesc+4, 8, 4)
                                                						                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#208: FILE: ./include/rtl8723b_xmit.h:208:
+#define GET_RX_STATUS_DESC_TID_8723B(__pRxDesc)						LE_BITS_TO_4BYTE(__pRxDesc+4, 8, 4)

CHECK: line length of 124 exceeds 100 columns
#209: FILE: ./include/rtl8723b_xmit.h:209:
+#define GET_RX_STATUS_DESC_AMSDU_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 13, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#209: FILE: ./include/rtl8723b_xmit.h:209:
+#define GET_RX_STATUS_DESC_AMSDU_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 13, 1)
                                                  					                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#209: FILE: ./include/rtl8723b_xmit.h:209:
+#define GET_RX_STATUS_DESC_AMSDU_8723B(__pRxDesc)					LE_BITS_TO_4BYTE(__pRxDesc+4, 13, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#210: FILE: ./include/rtl8723b_xmit.h:210:
+#define GET_RX_STATUS_DESC_RXID_MATCH_8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+4, 14, 1)
                                                       		                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#210: FILE: ./include/rtl8723b_xmit.h:210:
+#define GET_RX_STATUS_DESC_RXID_MATCH_8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+4, 14, 1)

CHECK: line length of 116 exceeds 100 columns
#211: FILE: ./include/rtl8723b_xmit.h:211:
+#define GET_RX_STATUS_DESC_PAGGR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 15, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#211: FILE: ./include/rtl8723b_xmit.h:211:
+#define GET_RX_STATUS_DESC_PAGGR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 15, 1)
                                                  				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#211: FILE: ./include/rtl8723b_xmit.h:211:
+#define GET_RX_STATUS_DESC_PAGGR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 15, 1)

CHECK: line length of 116 exceeds 100 columns
#212: FILE: ./include/rtl8723b_xmit.h:212:
+#define GET_RX_STATUS_DESC_A1_FIT_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 16, 4)

CHECK: spaces preferred around that '+' (ctx:VxV)
#212: FILE: ./include/rtl8723b_xmit.h:212:
+#define GET_RX_STATUS_DESC_A1_FIT_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 16, 4)
                                                   				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#212: FILE: ./include/rtl8723b_xmit.h:212:
+#define GET_RX_STATUS_DESC_A1_FIT_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 16, 4)

CHECK: line length of 116 exceeds 100 columns
#213: FILE: ./include/rtl8723b_xmit.h:213:
+#define GET_RX_STATUS_DESC_CHKERR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 20, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#213: FILE: ./include/rtl8723b_xmit.h:213:
+#define GET_RX_STATUS_DESC_CHKERR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 20, 1)
                                                   				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#213: FILE: ./include/rtl8723b_xmit.h:213:
+#define GET_RX_STATUS_DESC_CHKERR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 20, 1)

CHECK: line length of 108 exceeds 100 columns
#214: FILE: ./include/rtl8723b_xmit.h:214:
+#define GET_RX_STATUS_DESC_IPVER_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 21, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#214: FILE: ./include/rtl8723b_xmit.h:214:
+#define GET_RX_STATUS_DESC_IPVER_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 21, 1)
                                                  			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#214: FILE: ./include/rtl8723b_xmit.h:214:
+#define GET_RX_STATUS_DESC_IPVER_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 21, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#215: FILE: ./include/rtl8723b_xmit.h:215:
+#define GET_RX_STATUS_DESC_IS_TCPUDP__8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+4, 22, 1)
                                                       		                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#215: FILE: ./include/rtl8723b_xmit.h:215:
+#define GET_RX_STATUS_DESC_IS_TCPUDP__8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+4, 22, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#216: FILE: ./include/rtl8723b_xmit.h:216:
+#define GET_RX_STATUS_DESC_CHK_VLD_8723B(__pRxDesc)	LE_BITS_TO_4BYTE(__pRxDesc+4, 23, 1)
                                                    	                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#216: FILE: ./include/rtl8723b_xmit.h:216:
+#define GET_RX_STATUS_DESC_CHK_VLD_8723B(__pRxDesc)	LE_BITS_TO_4BYTE(__pRxDesc+4, 23, 1)

CHECK: line length of 108 exceeds 100 columns
#217: FILE: ./include/rtl8723b_xmit.h:217:
+#define GET_RX_STATUS_DESC_PAM_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 24, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#217: FILE: ./include/rtl8723b_xmit.h:217:
+#define GET_RX_STATUS_DESC_PAM_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 24, 1)
                                                				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#217: FILE: ./include/rtl8723b_xmit.h:217:
+#define GET_RX_STATUS_DESC_PAM_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 24, 1)

CHECK: line length of 108 exceeds 100 columns
#218: FILE: ./include/rtl8723b_xmit.h:218:
+#define GET_RX_STATUS_DESC_PWR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 25, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#218: FILE: ./include/rtl8723b_xmit.h:218:
+#define GET_RX_STATUS_DESC_PWR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 25, 1)
                                                				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#218: FILE: ./include/rtl8723b_xmit.h:218:
+#define GET_RX_STATUS_DESC_PWR_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 25, 1)

CHECK: line length of 108 exceeds 100 columns
#219: FILE: ./include/rtl8723b_xmit.h:219:
+#define GET_RX_STATUS_DESC_MORE_DATA_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 26, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#219: FILE: ./include/rtl8723b_xmit.h:219:
+#define GET_RX_STATUS_DESC_MORE_DATA_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 26, 1)
                                                      			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#219: FILE: ./include/rtl8723b_xmit.h:219:
+#define GET_RX_STATUS_DESC_MORE_DATA_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 26, 1)

CHECK: line length of 108 exceeds 100 columns
#220: FILE: ./include/rtl8723b_xmit.h:220:
+#define GET_RX_STATUS_DESC_MORE_FRAG_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 27, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#220: FILE: ./include/rtl8723b_xmit.h:220:
+#define GET_RX_STATUS_DESC_MORE_FRAG_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 27, 1)
                                                      			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#220: FILE: ./include/rtl8723b_xmit.h:220:
+#define GET_RX_STATUS_DESC_MORE_FRAG_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 27, 1)

CHECK: line length of 108 exceeds 100 columns
#221: FILE: ./include/rtl8723b_xmit.h:221:
+#define GET_RX_STATUS_DESC_TYPE_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 28, 2)

CHECK: spaces preferred around that '+' (ctx:VxV)
#221: FILE: ./include/rtl8723b_xmit.h:221:
+#define GET_RX_STATUS_DESC_TYPE_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 28, 2)
                                                 			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#221: FILE: ./include/rtl8723b_xmit.h:221:
+#define GET_RX_STATUS_DESC_TYPE_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+4, 28, 2)

CHECK: line length of 108 exceeds 100 columns
#222: FILE: ./include/rtl8723b_xmit.h:222:
+#define GET_RX_STATUS_DESC_MC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 30, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#222: FILE: ./include/rtl8723b_xmit.h:222:
+#define GET_RX_STATUS_DESC_MC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 30, 1)
                                               				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#222: FILE: ./include/rtl8723b_xmit.h:222:
+#define GET_RX_STATUS_DESC_MC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 30, 1)

CHECK: line length of 108 exceeds 100 columns
#223: FILE: ./include/rtl8723b_xmit.h:223:
+#define GET_RX_STATUS_DESC_BC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 31, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#223: FILE: ./include/rtl8723b_xmit.h:223:
+#define GET_RX_STATUS_DESC_BC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 31, 1)
                                               				                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#223: FILE: ./include/rtl8723b_xmit.h:223:
+#define GET_RX_STATUS_DESC_BC_8723B(__pRxDesc)				LE_BITS_TO_4BYTE(__pRxDesc+4, 31, 1)

CHECK: line length of 130 exceeds 100 columns
#226: FILE: ./include/rtl8723b_xmit.h:226:
+#define GET_RX_STATUS_DESC_SEQ_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 0, 12)

CHECK: spaces preferred around that '+' (ctx:VxV)
#226: FILE: ./include/rtl8723b_xmit.h:226:
+#define GET_RX_STATUS_DESC_SEQ_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 0, 12)
                                                      					                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#226: FILE: ./include/rtl8723b_xmit.h:226:
+#define GET_RX_STATUS_DESC_SEQ_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 0, 12)

CHECK: line length of 122 exceeds 100 columns
#227: FILE: ./include/rtl8723b_xmit.h:227:
+#define GET_RX_STATUS_DESC_FRAG_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 12, 4)

CHECK: spaces preferred around that '+' (ctx:VxV)
#227: FILE: ./include/rtl8723b_xmit.h:227:
+#define GET_RX_STATUS_DESC_FRAG_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 12, 4)
                                                       				                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#227: FILE: ./include/rtl8723b_xmit.h:227:
+#define GET_RX_STATUS_DESC_FRAG_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 12, 4)

CHECK: line length of 114 exceeds 100 columns
#228: FILE: ./include/rtl8723b_xmit.h:228:
+#define GET_RX_STATUS_DESC_RX_IS_QOS_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 16, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#228: FILE: ./include/rtl8723b_xmit.h:228:
+#define GET_RX_STATUS_DESC_RX_IS_QOS_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 16, 1)
                                                            		                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#228: FILE: ./include/rtl8723b_xmit.h:228:
+#define GET_RX_STATUS_DESC_RX_IS_QOS_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 16, 1)

CHECK: line length of 114 exceeds 100 columns
#229: FILE: ./include/rtl8723b_xmit.h:229:
+#define GET_RX_STATUS_DESC_WLANHD_IV_LEN_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 18, 6)

CHECK: spaces preferred around that '+' (ctx:VxV)
#229: FILE: ./include/rtl8723b_xmit.h:229:
+#define GET_RX_STATUS_DESC_WLANHD_IV_LEN_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 18, 6)
                                                                		                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#229: FILE: ./include/rtl8723b_xmit.h:229:
+#define GET_RX_STATUS_DESC_WLANHD_IV_LEN_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 18, 6)

CHECK: line length of 122 exceeds 100 columns
#230: FILE: ./include/rtl8723b_xmit.h:230:
+#define GET_RX_STATUS_DESC_RPT_SEL_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 28, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#230: FILE: ./include/rtl8723b_xmit.h:230:
+#define GET_RX_STATUS_DESC_RPT_SEL_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 28, 1)
                                                          			                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#230: FILE: ./include/rtl8723b_xmit.h:230:
+#define GET_RX_STATUS_DESC_RPT_SEL_8723B(__pRxStatusDesc)			LE_BITS_TO_4BYTE(__pRxStatusDesc+8, 28, 1)

CHECK: line length of 130 exceeds 100 columns
#233: FILE: ./include/rtl8723b_xmit.h:233:
+#define GET_RX_STATUS_DESC_RX_RATE_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 0, 7)

CHECK: spaces preferred around that '+' (ctx:VxV)
#233: FILE: ./include/rtl8723b_xmit.h:233:
+#define GET_RX_STATUS_DESC_RX_RATE_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 0, 7)
                                                          				                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#233: FILE: ./include/rtl8723b_xmit.h:233:
+#define GET_RX_STATUS_DESC_RX_RATE_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 0, 7)

CHECK: line length of 131 exceeds 100 columns
#234: FILE: ./include/rtl8723b_xmit.h:234:
+#define GET_RX_STATUS_DESC_HTC_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 10, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#234: FILE: ./include/rtl8723b_xmit.h:234:
+#define GET_RX_STATUS_DESC_HTC_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 10, 1)
                                                      					                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#234: FILE: ./include/rtl8723b_xmit.h:234:
+#define GET_RX_STATUS_DESC_HTC_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 10, 1)

CHECK: line length of 131 exceeds 100 columns
#235: FILE: ./include/rtl8723b_xmit.h:235:
+#define GET_RX_STATUS_DESC_EOSP_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 11, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#235: FILE: ./include/rtl8723b_xmit.h:235:
+#define GET_RX_STATUS_DESC_EOSP_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 11, 1)
                                                       					                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#235: FILE: ./include/rtl8723b_xmit.h:235:
+#define GET_RX_STATUS_DESC_EOSP_8723B(__pRxStatusDesc)					LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 11, 1)

CHECK: line length of 115 exceeds 100 columns
#236: FILE: ./include/rtl8723b_xmit.h:236:
+#define GET_RX_STATUS_DESC_BSSID_FIT_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 12, 2)

CHECK: spaces preferred around that '+' (ctx:VxV)
#236: FILE: ./include/rtl8723b_xmit.h:236:
+#define GET_RX_STATUS_DESC_BSSID_FIT_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 12, 2)
                                                            		                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#236: FILE: ./include/rtl8723b_xmit.h:236:
+#define GET_RX_STATUS_DESC_BSSID_FIT_8723B(__pRxStatusDesc)		LE_BITS_TO_4BYTE(__pRxStatusDesc+12, 12, 2)

CHECK: line length of 117 exceeds 100 columns
#237: FILE: ./include/rtl8723b_xmit.h:237:
+#define GET_RX_STATUS_DESC_PATTERN_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 29, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#237: FILE: ./include/rtl8723b_xmit.h:237:
+#define GET_RX_STATUS_DESC_PATTERN_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 29, 1)
                                                          			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#237: FILE: ./include/rtl8723b_xmit.h:237:
+#define GET_RX_STATUS_DESC_PATTERN_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 29, 1)

CHECK: line length of 117 exceeds 100 columns
#238: FILE: ./include/rtl8723b_xmit.h:238:
+#define GET_RX_STATUS_DESC_UNICAST_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 30, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#238: FILE: ./include/rtl8723b_xmit.h:238:
+#define GET_RX_STATUS_DESC_UNICAST_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 30, 1)
                                                          			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#238: FILE: ./include/rtl8723b_xmit.h:238:
+#define GET_RX_STATUS_DESC_UNICAST_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 30, 1)

CHECK: line length of 109 exceeds 100 columns
#239: FILE: ./include/rtl8723b_xmit.h:239:
+#define GET_RX_STATUS_DESC_MAGIC_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 31, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#239: FILE: ./include/rtl8723b_xmit.h:239:
+#define GET_RX_STATUS_DESC_MAGIC_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 31, 1)
                                                        			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#239: FILE: ./include/rtl8723b_xmit.h:239:
+#define GET_RX_STATUS_DESC_MAGIC_MATCH_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+12, 31, 1)

CHECK: line length of 108 exceeds 100 columns
#242: FILE: ./include/rtl8723b_xmit.h:242:
+#define GET_RX_STATUS_DESC_SPLCP_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 0, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#242: FILE: ./include/rtl8723b_xmit.h:242:
+#define GET_RX_STATUS_DESC_SPLCP_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 0, 1)
                                                  			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#242: FILE: ./include/rtl8723b_xmit.h:242:
+#define GET_RX_STATUS_DESC_SPLCP_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 0, 1)

CHECK: line length of 108 exceeds 100 columns
#243: FILE: ./include/rtl8723b_xmit.h:243:
+#define GET_RX_STATUS_DESC_LDPC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 1, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#243: FILE: ./include/rtl8723b_xmit.h:243:
+#define GET_RX_STATUS_DESC_LDPC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 1, 1)
                                                 			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#243: FILE: ./include/rtl8723b_xmit.h:243:
+#define GET_RX_STATUS_DESC_LDPC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 1, 1)

CHECK: line length of 108 exceeds 100 columns
#244: FILE: ./include/rtl8723b_xmit.h:244:
+#define GET_RX_STATUS_DESC_STBC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 2, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#244: FILE: ./include/rtl8723b_xmit.h:244:
+#define GET_RX_STATUS_DESC_STBC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 2, 1)
                                                 			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#244: FILE: ./include/rtl8723b_xmit.h:244:
+#define GET_RX_STATUS_DESC_STBC_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 2, 1)

CHECK: spaces preferred around that '+' (ctx:VxV)
#245: FILE: ./include/rtl8723b_xmit.h:245:
+#define GET_RX_STATUS_DESC_BW_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 4, 2)
                                               			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#245: FILE: ./include/rtl8723b_xmit.h:245:
+#define GET_RX_STATUS_DESC_BW_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+16, 4, 2)

CHECK: line length of 123 exceeds 100 columns
#248: FILE: ./include/rtl8723b_xmit.h:248:
+#define GET_RX_STATUS_DESC_TSFL_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+20, 0, 32)

CHECK: spaces preferred around that '+' (ctx:VxV)
#248: FILE: ./include/rtl8723b_xmit.h:248:
+#define GET_RX_STATUS_DESC_TSFL_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+20, 0, 32)
                                                       				                                ^

CHECK: Macro argument '__pRxStatusDesc' may be better as '(__pRxStatusDesc)' to avoid precedence issues
#248: FILE: ./include/rtl8723b_xmit.h:248:
+#define GET_RX_STATUS_DESC_TSFL_8723B(__pRxStatusDesc)				LE_BITS_TO_4BYTE(__pRxStatusDesc+20, 0, 32)

CHECK: line length of 101 exceeds 100 columns
#250: FILE: ./include/rtl8723b_xmit.h:250:
+#define GET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+24, 0, 32)

CHECK: spaces preferred around that '+' (ctx:VxV)
#250: FILE: ./include/rtl8723b_xmit.h:250:
+#define GET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+24, 0, 32)
                                                      		                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#250: FILE: ./include/rtl8723b_xmit.h:250:
+#define GET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc)		LE_BITS_TO_4BYTE(__pRxDesc+24, 0, 32)

CHECK: line length of 109 exceeds 100 columns
#251: FILE: ./include/rtl8723b_xmit.h:251:
+#define GET_RX_STATUS_DESC_BUFF_ADDR64_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+28, 0, 32)

CHECK: spaces preferred around that '+' (ctx:VxV)
#251: FILE: ./include/rtl8723b_xmit.h:251:
+#define GET_RX_STATUS_DESC_BUFF_ADDR64_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+28, 0, 32)
                                                        			                          ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#251: FILE: ./include/rtl8723b_xmit.h:251:
+#define GET_RX_STATUS_DESC_BUFF_ADDR64_8723B(__pRxDesc)			LE_BITS_TO_4BYTE(__pRxDesc+28, 0, 32)

CHECK: line length of 114 exceeds 100 columns
#253: FILE: ./include/rtl8723b_xmit.h:253:
+#define SET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pRxDesc+24, 0, 32, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#253: FILE: ./include/rtl8723b_xmit.h:253:
+#define SET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pRxDesc+24, 0, 32, __Value)
                                                               	                              ^

CHECK: Macro argument '__pRxDesc' may be better as '(__pRxDesc)' to avoid precedence issues
#253: FILE: ./include/rtl8723b_xmit.h:253:
+#define SET_RX_STATUS_DESC_BUFF_ADDR_8723B(__pRxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pRxDesc+24, 0, 32, __Value)

CHECK: Please don't use multiple blank lines
#255: FILE: ./include/rtl8723b_xmit.h:255:
+
+

CHECK: line length of 106 exceeds 100 columns
#257: FILE: ./include/rtl8723b_xmit.h:257:
+#define GET_TX_DESC_OWN_8723B(__pTxDesc)				LE_BITS_TO_4BYTE(__pTxDesc, 31, 1)

CHECK: line length of 102 exceeds 100 columns
#259: FILE: ./include/rtl8723b_xmit.h:259:
+#define SET_TX_DESC_PKT_SIZE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc, 0, 16, __Value)

CHECK: line length of 102 exceeds 100 columns
#263: FILE: ./include/rtl8723b_xmit.h:263:
+#define SET_TX_DESC_LAST_SEG_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc, 26, 1, __Value)

CHECK: line length of 103 exceeds 100 columns
#264: FILE: ./include/rtl8723b_xmit.h:264:
+#define SET_TX_DESC_FIRST_SEG_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc, 27, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#271: FILE: ./include/rtl8723b_xmit.h:271:
+#define SET_TX_DESC_MACID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 0, 7, __Value)
                                                                                   ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#271: FILE: ./include/rtl8723b_xmit.h:271:
+#define SET_TX_DESC_MACID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 0, 7, __Value)

CHECK: line length of 104 exceeds 100 columns
#272: FILE: ./include/rtl8723b_xmit.h:272:
+#define SET_TX_DESC_QUEUE_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 8, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#272: FILE: ./include/rtl8723b_xmit.h:272:
+#define SET_TX_DESC_QUEUE_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 8, 5, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#272: FILE: ./include/rtl8723b_xmit.h:272:
+#define SET_TX_DESC_QUEUE_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 8, 5, __Value)

CHECK: line length of 107 exceeds 100 columns
#273: FILE: ./include/rtl8723b_xmit.h:273:
+#define SET_TX_DESC_RDG_NAV_EXT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 13, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#273: FILE: ./include/rtl8723b_xmit.h:273:
+#define SET_TX_DESC_RDG_NAV_EXT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 13, 1, __Value)
                                                                                         ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#273: FILE: ./include/rtl8723b_xmit.h:273:
+#define SET_TX_DESC_RDG_NAV_EXT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 13, 1, __Value)

CHECK: line length of 108 exceeds 100 columns
#274: FILE: ./include/rtl8723b_xmit.h:274:
+#define SET_TX_DESC_LSIG_TXOP_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 14, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#274: FILE: ./include/rtl8723b_xmit.h:274:
+#define SET_TX_DESC_LSIG_TXOP_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 14, 1, __Value)
                                                                                          ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#274: FILE: ./include/rtl8723b_xmit.h:274:
+#define SET_TX_DESC_LSIG_TXOP_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 14, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#275: FILE: ./include/rtl8723b_xmit.h:275:
+#define SET_TX_DESC_PIFS_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 15, 1, __Value)
                                                                                  ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#275: FILE: ./include/rtl8723b_xmit.h:275:
+#define SET_TX_DESC_PIFS_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 15, 1, __Value)

CHECK: line length of 103 exceeds 100 columns
#276: FILE: ./include/rtl8723b_xmit.h:276:
+#define SET_TX_DESC_RATE_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 16, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#276: FILE: ./include/rtl8723b_xmit.h:276:
+#define SET_TX_DESC_RATE_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 16, 5, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#276: FILE: ./include/rtl8723b_xmit.h:276:
+#define SET_TX_DESC_RATE_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 16, 5, __Value)

CHECK: line length of 106 exceeds 100 columns
#277: FILE: ./include/rtl8723b_xmit.h:277:
+#define SET_TX_DESC_EN_DESC_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 21, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#277: FILE: ./include/rtl8723b_xmit.h:277:
+#define SET_TX_DESC_EN_DESC_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 21, 1, __Value)
                                                                                        ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#277: FILE: ./include/rtl8723b_xmit.h:277:
+#define SET_TX_DESC_EN_DESC_ID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 21, 1, __Value)

CHECK: line length of 104 exceeds 100 columns
#278: FILE: ./include/rtl8723b_xmit.h:278:
+#define SET_TX_DESC_SEC_TYPE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 22, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#278: FILE: ./include/rtl8723b_xmit.h:278:
+#define SET_TX_DESC_SEC_TYPE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 22, 2, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#278: FILE: ./include/rtl8723b_xmit.h:278:
+#define SET_TX_DESC_SEC_TYPE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 22, 2, __Value)

CHECK: line length of 121 exceeds 100 columns
#279: FILE: ./include/rtl8723b_xmit.h:279:
+#define SET_TX_DESC_PKT_OFFSET_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 24, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#279: FILE: ./include/rtl8723b_xmit.h:279:
+#define SET_TX_DESC_PKT_OFFSET_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 24, 5, __Value)
                                                         		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#279: FILE: ./include/rtl8723b_xmit.h:279:
+#define SET_TX_DESC_PKT_OFFSET_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+4, 24, 5, __Value)

CHECK: Please don't use multiple blank lines
#281: FILE: ./include/rtl8723b_xmit.h:281:
+
+

CHECK: spaces preferred around that '+' (ctx:VxV)
#283: FILE: ./include/rtl8723b_xmit.h:283:
+#define SET_TX_DESC_PAID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 0,  9, __Value)
                                                                                  ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#283: FILE: ./include/rtl8723b_xmit.h:283:
+#define SET_TX_DESC_PAID_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 0,  9, __Value)

CHECK: line length of 103 exceeds 100 columns
#284: FILE: ./include/rtl8723b_xmit.h:284:
+#define SET_TX_DESC_CCA_RTS_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 10, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#284: FILE: ./include/rtl8723b_xmit.h:284:
+#define SET_TX_DESC_CCA_RTS_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 10, 2, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#284: FILE: ./include/rtl8723b_xmit.h:284:
+#define SET_TX_DESC_CCA_RTS_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 10, 2, __Value)

CHECK: line length of 121 exceeds 100 columns
#285: FILE: ./include/rtl8723b_xmit.h:285:
+#define SET_TX_DESC_AGG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 12, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#285: FILE: ./include/rtl8723b_xmit.h:285:
+#define SET_TX_DESC_AGG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 12, 1, __Value)
                                                         		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#285: FILE: ./include/rtl8723b_xmit.h:285:
+#define SET_TX_DESC_AGG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 12, 1, __Value)

CHECK: line length of 121 exceeds 100 columns
#286: FILE: ./include/rtl8723b_xmit.h:286:
+#define SET_TX_DESC_RDG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 13, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#286: FILE: ./include/rtl8723b_xmit.h:286:
+#define SET_TX_DESC_RDG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 13, 1, __Value)
                                                         		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#286: FILE: ./include/rtl8723b_xmit.h:286:
+#define SET_TX_DESC_RDG_ENABLE_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 13, 1, __Value)

CHECK: line length of 137 exceeds 100 columns
#287: FILE: ./include/rtl8723b_xmit.h:287:
+#define SET_TX_DESC_AGG_BREAK_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 16, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#287: FILE: ./include/rtl8723b_xmit.h:287:
+#define SET_TX_DESC_AGG_BREAK_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 16, 1, __Value)
                                                        					                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#287: FILE: ./include/rtl8723b_xmit.h:287:
+#define SET_TX_DESC_AGG_BREAK_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 16, 1, __Value)

CHECK: line length of 105 exceeds 100 columns
#288: FILE: ./include/rtl8723b_xmit.h:288:
+#define SET_TX_DESC_MORE_FRAG_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 17, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#288: FILE: ./include/rtl8723b_xmit.h:288:
+#define SET_TX_DESC_MORE_FRAG_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 17, 1, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#288: FILE: ./include/rtl8723b_xmit.h:288:
+#define SET_TX_DESC_MORE_FRAG_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 17, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#289: FILE: ./include/rtl8723b_xmit.h:289:
+#define SET_TX_DESC_RAW_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 18, 1, __Value)
                                                                                 ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#289: FILE: ./include/rtl8723b_xmit.h:289:
+#define SET_TX_DESC_RAW_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 18, 1, __Value)

CHECK: line length of 103 exceeds 100 columns
#290: FILE: ./include/rtl8723b_xmit.h:290:
+#define SET_TX_DESC_SPE_RPT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 19, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#290: FILE: ./include/rtl8723b_xmit.h:290:
+#define SET_TX_DESC_SPE_RPT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 19, 1, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#290: FILE: ./include/rtl8723b_xmit.h:290:
+#define SET_TX_DESC_SPE_RPT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 19, 1, __Value)

CHECK: line length of 109 exceeds 100 columns
#291: FILE: ./include/rtl8723b_xmit.h:291:
+#define SET_TX_DESC_AMPDU_DENSITY_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 20, 3, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#291: FILE: ./include/rtl8723b_xmit.h:291:
+#define SET_TX_DESC_AMPDU_DENSITY_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 20, 3, __Value)
                                                                                           ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#291: FILE: ./include/rtl8723b_xmit.h:291:
+#define SET_TX_DESC_AMPDU_DENSITY_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 20, 3, __Value)

CHECK: line length of 121 exceeds 100 columns
#292: FILE: ./include/rtl8723b_xmit.h:292:
+#define SET_TX_DESC_BT_INT_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 23, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#292: FILE: ./include/rtl8723b_xmit.h:292:
+#define SET_TX_DESC_BT_INT_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 23, 1, __Value)
                                                     			                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#292: FILE: ./include/rtl8723b_xmit.h:292:
+#define SET_TX_DESC_BT_INT_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 23, 1, __Value)

CHECK: line length of 121 exceeds 100 columns
#293: FILE: ./include/rtl8723b_xmit.h:293:
+#define SET_TX_DESC_GID_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 6, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#293: FILE: ./include/rtl8723b_xmit.h:293:
+#define SET_TX_DESC_GID_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 6, __Value)
                                                  			                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#293: FILE: ./include/rtl8723b_xmit.h:293:
+#define SET_TX_DESC_GID_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+8, 24, 6, __Value)

CHECK: Please don't use multiple blank lines
#295: FILE: ./include/rtl8723b_xmit.h:295:
+
+

CHECK: line length of 107 exceeds 100 columns
#297: FILE: ./include/rtl8723b_xmit.h:297:
+#define SET_TX_DESC_WHEADER_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 0, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#297: FILE: ./include/rtl8723b_xmit.h:297:
+#define SET_TX_DESC_WHEADER_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 0, 4, __Value)
                                                                                         ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#297: FILE: ./include/rtl8723b_xmit.h:297:
+#define SET_TX_DESC_WHEADER_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 0, 4, __Value)

CHECK: line length of 102 exceeds 100 columns
#298: FILE: ./include/rtl8723b_xmit.h:298:
+#define SET_TX_DESC_CHK_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 4, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#298: FILE: ./include/rtl8723b_xmit.h:298:
+#define SET_TX_DESC_CHK_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 4, 1, __Value)
                                                                                    ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#298: FILE: ./include/rtl8723b_xmit.h:298:
+#define SET_TX_DESC_CHK_EN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 4, 1, __Value)

CHECK: line length of 106 exceeds 100 columns
#299: FILE: ./include/rtl8723b_xmit.h:299:
+#define SET_TX_DESC_EARLY_MODE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 5, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#299: FILE: ./include/rtl8723b_xmit.h:299:
+#define SET_TX_DESC_EARLY_MODE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 5, 1, __Value)
                                                                                        ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#299: FILE: ./include/rtl8723b_xmit.h:299:
+#define SET_TX_DESC_EARLY_MODE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 5, 1, __Value)

CHECK: line length of 105 exceeds 100 columns
#300: FILE: ./include/rtl8723b_xmit.h:300:
+#define SET_TX_DESC_HWSEQ_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 6, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#300: FILE: ./include/rtl8723b_xmit.h:300:
+#define SET_TX_DESC_HWSEQ_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 6, 2, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#300: FILE: ./include/rtl8723b_xmit.h:300:
+#define SET_TX_DESC_HWSEQ_SEL_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 6, 2, __Value)

CHECK: line length of 104 exceeds 100 columns
#301: FILE: ./include/rtl8723b_xmit.h:301:
+#define SET_TX_DESC_USE_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 8, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#301: FILE: ./include/rtl8723b_xmit.h:301:
+#define SET_TX_DESC_USE_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 8, 1, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#301: FILE: ./include/rtl8723b_xmit.h:301:
+#define SET_TX_DESC_USE_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 8, 1, __Value)

CHECK: line length of 110 exceeds 100 columns
#302: FILE: ./include/rtl8723b_xmit.h:302:
+#define SET_TX_DESC_DISABLE_RTS_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 9, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#302: FILE: ./include/rtl8723b_xmit.h:302:
+#define SET_TX_DESC_DISABLE_RTS_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 9, 1, __Value)
                                                                                            ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#302: FILE: ./include/rtl8723b_xmit.h:302:
+#define SET_TX_DESC_DISABLE_RTS_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 9, 1, __Value)

CHECK: line length of 107 exceeds 100 columns
#303: FILE: ./include/rtl8723b_xmit.h:303:
+#define SET_TX_DESC_DISABLE_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 10, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#303: FILE: ./include/rtl8723b_xmit.h:303:
+#define SET_TX_DESC_DISABLE_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 10, 1, __Value)
                                                                                        ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#303: FILE: ./include/rtl8723b_xmit.h:303:
+#define SET_TX_DESC_DISABLE_FB_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 10, 1, __Value)

CHECK: line length of 105 exceeds 100 columns
#304: FILE: ./include/rtl8723b_xmit.h:304:
+#define SET_TX_DESC_CTS2SELF_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 11, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#304: FILE: ./include/rtl8723b_xmit.h:304:
+#define SET_TX_DESC_CTS2SELF_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 11, 1, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#304: FILE: ./include/rtl8723b_xmit.h:304:
+#define SET_TX_DESC_CTS2SELF_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 11, 1, __Value)

CHECK: line length of 107 exceeds 100 columns
#305: FILE: ./include/rtl8723b_xmit.h:305:
+#define SET_TX_DESC_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 12, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#305: FILE: ./include/rtl8723b_xmit.h:305:
+#define SET_TX_DESC_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 12, 1, __Value)
                                                                                        ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#305: FILE: ./include/rtl8723b_xmit.h:305:
+#define SET_TX_DESC_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 12, 1, __Value)

CHECK: line length of 110 exceeds 100 columns
#306: FILE: ./include/rtl8723b_xmit.h:306:
+#define SET_TX_DESC_HW_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 13, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#306: FILE: ./include/rtl8723b_xmit.h:306:
+#define SET_TX_DESC_HW_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 13, 1, __Value)
                                                                                           ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#306: FILE: ./include/rtl8723b_xmit.h:306:
+#define SET_TX_DESC_HW_RTS_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 13, 1, __Value)

CHECK: line length of 108 exceeds 100 columns
#307: FILE: ./include/rtl8723b_xmit.h:307:
+#define SET_TX_DESC_NAV_USE_HDR_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 15, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#307: FILE: ./include/rtl8723b_xmit.h:307:
+#define SET_TX_DESC_NAV_USE_HDR_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 15, 1, __Value)
                                                                                         ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#307: FILE: ./include/rtl8723b_xmit.h:307:
+#define SET_TX_DESC_NAV_USE_HDR_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 15, 1, __Value)

CHECK: line length of 108 exceeds 100 columns
#308: FILE: ./include/rtl8723b_xmit.h:308:
+#define SET_TX_DESC_USE_MAX_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 16, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#308: FILE: ./include/rtl8723b_xmit.h:308:
+#define SET_TX_DESC_USE_MAX_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 16, 1, __Value)
                                                                                         ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#308: FILE: ./include/rtl8723b_xmit.h:308:
+#define SET_TX_DESC_USE_MAX_LEN_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 16, 1, __Value)

CHECK: line length of 108 exceeds 100 columns
#309: FILE: ./include/rtl8723b_xmit.h:309:
+#define SET_TX_DESC_MAX_AGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 17, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#309: FILE: ./include/rtl8723b_xmit.h:309:
+#define SET_TX_DESC_MAX_AGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 17, 5, __Value)
                                                                                         ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#309: FILE: ./include/rtl8723b_xmit.h:309:
+#define SET_TX_DESC_MAX_AGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 17, 5, __Value)

CHECK: line length of 114 exceeds 100 columns
#310: FILE: ./include/rtl8723b_xmit.h:310:
+#define SET_TX_DESC_NDPA_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 22, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#310: FILE: ./include/rtl8723b_xmit.h:310:
+#define SET_TX_DESC_NDPA_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 22, 2, __Value)
                                                   		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#310: FILE: ./include/rtl8723b_xmit.h:310:
+#define SET_TX_DESC_NDPA_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 22, 2, __Value)

CHECK: line length of 122 exceeds 100 columns
#311: FILE: ./include/rtl8723b_xmit.h:311:
+#define SET_TX_DESC_AMPDU_MAX_TIME_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 24, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#311: FILE: ./include/rtl8723b_xmit.h:311:
+#define SET_TX_DESC_AMPDU_MAX_TIME_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 24, 8, __Value)
                                                             		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#311: FILE: ./include/rtl8723b_xmit.h:311:
+#define SET_TX_DESC_AMPDU_MAX_TIME_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+12, 24, 8, __Value)

CHECK: line length of 103 exceeds 100 columns
#314: FILE: ./include/rtl8723b_xmit.h:314:
+#define SET_TX_DESC_TX_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 0, 7, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#314: FILE: ./include/rtl8723b_xmit.h:314:
+#define SET_TX_DESC_TX_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 0, 7, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#314: FILE: ./include/rtl8723b_xmit.h:314:
+#define SET_TX_DESC_TX_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 0, 7, __Value)

CHECK: line length of 114 exceeds 100 columns
#315: FILE: ./include/rtl8723b_xmit.h:315:
+#define SET_TX_DESC_DATA_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 8, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#315: FILE: ./include/rtl8723b_xmit.h:315:
+#define SET_TX_DESC_DATA_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 8, 5, __Value)
                                                                                                ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#315: FILE: ./include/rtl8723b_xmit.h:315:
+#define SET_TX_DESC_DATA_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 8, 5, __Value)

CHECK: line length of 114 exceeds 100 columns
#316: FILE: ./include/rtl8723b_xmit.h:316:
+#define SET_TX_DESC_RTS_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 13, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#316: FILE: ./include/rtl8723b_xmit.h:316:
+#define SET_TX_DESC_RTS_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 13, 4, __Value)
                                                                                               ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#316: FILE: ./include/rtl8723b_xmit.h:316:
+#define SET_TX_DESC_RTS_RATE_FB_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 13, 4, __Value)

CHECK: line length of 115 exceeds 100 columns
#317: FILE: ./include/rtl8723b_xmit.h:317:
+#define SET_TX_DESC_RETRY_LIMIT_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 17, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#317: FILE: ./include/rtl8723b_xmit.h:317:
+#define SET_TX_DESC_RETRY_LIMIT_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 17, 1, __Value)
                                                                                                ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#317: FILE: ./include/rtl8723b_xmit.h:317:
+#define SET_TX_DESC_RETRY_LIMIT_ENABLE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 17, 1, __Value)

CHECK: line length of 113 exceeds 100 columns
#318: FILE: ./include/rtl8723b_xmit.h:318:
+#define SET_TX_DESC_DATA_RETRY_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 18, 6, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#318: FILE: ./include/rtl8723b_xmit.h:318:
+#define SET_TX_DESC_DATA_RETRY_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 18, 6, __Value)
                                                                                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#318: FILE: ./include/rtl8723b_xmit.h:318:
+#define SET_TX_DESC_DATA_RETRY_LIMIT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 18, 6, __Value)

CHECK: line length of 105 exceeds 100 columns
#319: FILE: ./include/rtl8723b_xmit.h:319:
+#define SET_TX_DESC_RTS_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 24, 5, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#319: FILE: ./include/rtl8723b_xmit.h:319:
+#define SET_TX_DESC_RTS_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 24, 5, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#319: FILE: ./include/rtl8723b_xmit.h:319:
+#define SET_TX_DESC_RTS_RATE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+16, 24, 5, __Value)

CHECK: Please don't use multiple blank lines
#321: FILE: ./include/rtl8723b_xmit.h:321:
+
+

CHECK: line length of 103 exceeds 100 columns
#323: FILE: ./include/rtl8723b_xmit.h:323:
+#define SET_TX_DESC_DATA_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 0, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#323: FILE: ./include/rtl8723b_xmit.h:323:
+#define SET_TX_DESC_DATA_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 0, 4, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#323: FILE: ./include/rtl8723b_xmit.h:323:
+#define SET_TX_DESC_DATA_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 0, 4, __Value)

CHECK: line length of 113 exceeds 100 columns
#324: FILE: ./include/rtl8723b_xmit.h:324:
+#define SET_TX_DESC_DATA_SHORT_8723B(__pTxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 4, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#324: FILE: ./include/rtl8723b_xmit.h:324:
+#define SET_TX_DESC_DATA_SHORT_8723B(__pTxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 4, 1, __Value)
                                                         	                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#324: FILE: ./include/rtl8723b_xmit.h:324:
+#define SET_TX_DESC_DATA_SHORT_8723B(__pTxDesc, __Value)	SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 4, 1, __Value)

CHECK: line length of 103 exceeds 100 columns
#325: FILE: ./include/rtl8723b_xmit.h:325:
+#define SET_TX_DESC_DATA_BW_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 5, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#325: FILE: ./include/rtl8723b_xmit.h:325:
+#define SET_TX_DESC_DATA_BW_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 5, 2, __Value)
                                                                                     ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#325: FILE: ./include/rtl8723b_xmit.h:325:
+#define SET_TX_DESC_DATA_BW_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 5, 2, __Value)

CHECK: line length of 105 exceeds 100 columns
#326: FILE: ./include/rtl8723b_xmit.h:326:
+#define SET_TX_DESC_DATA_LDPC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 7, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#326: FILE: ./include/rtl8723b_xmit.h:326:
+#define SET_TX_DESC_DATA_LDPC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 7, 1, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#326: FILE: ./include/rtl8723b_xmit.h:326:
+#define SET_TX_DESC_DATA_LDPC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 7, 1, __Value)

CHECK: line length of 105 exceeds 100 columns
#327: FILE: ./include/rtl8723b_xmit.h:327:
+#define SET_TX_DESC_DATA_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 8, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#327: FILE: ./include/rtl8723b_xmit.h:327:
+#define SET_TX_DESC_DATA_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 8, 2, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#327: FILE: ./include/rtl8723b_xmit.h:327:
+#define SET_TX_DESC_DATA_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 8, 2, __Value)

CHECK: line length of 107 exceeds 100 columns
#328: FILE: ./include/rtl8723b_xmit.h:328:
+#define SET_TX_DESC_CTROL_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 10, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#328: FILE: ./include/rtl8723b_xmit.h:328:
+#define SET_TX_DESC_CTROL_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 10, 2, __Value)
                                                                                        ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#328: FILE: ./include/rtl8723b_xmit.h:328:
+#define SET_TX_DESC_CTROL_STBC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 10, 2, __Value)

CHECK: line length of 106 exceeds 100 columns
#329: FILE: ./include/rtl8723b_xmit.h:329:
+#define SET_TX_DESC_RTS_SHORT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 12, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#329: FILE: ./include/rtl8723b_xmit.h:329:
+#define SET_TX_DESC_RTS_SHORT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 12, 1, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#329: FILE: ./include/rtl8723b_xmit.h:329:
+#define SET_TX_DESC_RTS_SHORT_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 12, 1, __Value)

CHECK: line length of 103 exceeds 100 columns
#330: FILE: ./include/rtl8723b_xmit.h:330:
+#define SET_TX_DESC_RTS_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 13, 4, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#330: FILE: ./include/rtl8723b_xmit.h:330:
+#define SET_TX_DESC_RTS_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 13, 4, __Value)
                                                                                    ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#330: FILE: ./include/rtl8723b_xmit.h:330:
+#define SET_TX_DESC_RTS_SC_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+20, 13, 4, __Value)

CHECK: Please don't use multiple blank lines
#332: FILE: ./include/rtl8723b_xmit.h:332:
+
+

CHECK: line length of 106 exceeds 100 columns
#334: FILE: ./include/rtl8723b_xmit.h:334:
+#define SET_TX_DESC_SW_DEFINE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 0, 12, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#334: FILE: ./include/rtl8723b_xmit.h:334:
+#define SET_TX_DESC_SW_DEFINE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 0, 12, __Value)
                                                                                       ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#334: FILE: ./include/rtl8723b_xmit.h:334:
+#define SET_TX_DESC_SW_DEFINE_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 0, 12, __Value)

CHECK: line length of 105 exceeds 100 columns
#335: FILE: ./include/rtl8723b_xmit.h:335:
+#define SET_TX_DESC_ANTSEL_A_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 16, 3, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#335: FILE: ./include/rtl8723b_xmit.h:335:
+#define SET_TX_DESC_ANTSEL_A_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 16, 3, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#335: FILE: ./include/rtl8723b_xmit.h:335:
+#define SET_TX_DESC_ANTSEL_A_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 16, 3, __Value)

CHECK: line length of 105 exceeds 100 columns
#336: FILE: ./include/rtl8723b_xmit.h:336:
+#define SET_TX_DESC_ANTSEL_B_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 19, 3, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#336: FILE: ./include/rtl8723b_xmit.h:336:
+#define SET_TX_DESC_ANTSEL_B_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 19, 3, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#336: FILE: ./include/rtl8723b_xmit.h:336:
+#define SET_TX_DESC_ANTSEL_B_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 19, 3, __Value)

CHECK: line length of 105 exceeds 100 columns
#337: FILE: ./include/rtl8723b_xmit.h:337:
+#define SET_TX_DESC_ANTSEL_C_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 22, 3, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#337: FILE: ./include/rtl8723b_xmit.h:337:
+#define SET_TX_DESC_ANTSEL_C_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 22, 3, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#337: FILE: ./include/rtl8723b_xmit.h:337:
+#define SET_TX_DESC_ANTSEL_C_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 22, 3, __Value)

CHECK: line length of 105 exceeds 100 columns
#338: FILE: ./include/rtl8723b_xmit.h:338:
+#define SET_TX_DESC_ANTSEL_D_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 25, 3, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#338: FILE: ./include/rtl8723b_xmit.h:338:
+#define SET_TX_DESC_ANTSEL_D_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 25, 3, __Value)
                                                                                      ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#338: FILE: ./include/rtl8723b_xmit.h:338:
+#define SET_TX_DESC_ANTSEL_D_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+24, 25, 3, __Value)

CHECK: line length of 113 exceeds 100 columns
#341: FILE: ./include/rtl8723b_xmit.h:341:
+#define SET_TX_DESC_TX_DESC_CHECKSUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 0, 16, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#341: FILE: ./include/rtl8723b_xmit.h:341:
+#define SET_TX_DESC_TX_DESC_CHECKSUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 0, 16, __Value)
                                                                                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#341: FILE: ./include/rtl8723b_xmit.h:341:
+#define SET_TX_DESC_TX_DESC_CHECKSUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 0, 16, __Value)

CHECK: line length of 110 exceeds 100 columns
#342: FILE: ./include/rtl8723b_xmit.h:342:
+#define SET_TX_DESC_USB_TXAGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 24, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#342: FILE: ./include/rtl8723b_xmit.h:342:
+#define SET_TX_DESC_USB_TXAGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 24, 8, __Value)
                                                                                           ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#342: FILE: ./include/rtl8723b_xmit.h:342:
+#define SET_TX_DESC_USB_TXAGG_NUM_8723B(__pTxDesc, __Value) SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 24, 8, __Value)

CHECK: line length of 130 exceeds 100 columns
#343: FILE: ./include/rtl8723b_xmit.h:343:
+#define SET_TX_DESC_SDIO_TXSEQ_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 16, 8, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#343: FILE: ./include/rtl8723b_xmit.h:343:
+#define SET_TX_DESC_SDIO_TXSEQ_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 16, 8, __Value)
                                                         			                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#343: FILE: ./include/rtl8723b_xmit.h:343:
+#define SET_TX_DESC_SDIO_TXSEQ_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+28, 16, 8, __Value)

CHECK: line length of 122 exceeds 100 columns
#346: FILE: ./include/rtl8723b_xmit.h:346:
+#define SET_TX_DESC_HWSEQ_EN_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+32, 15, 1, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#346: FILE: ./include/rtl8723b_xmit.h:346:
+#define SET_TX_DESC_HWSEQ_EN_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+32, 15, 1, __Value)
                                                       			                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#346: FILE: ./include/rtl8723b_xmit.h:346:
+#define SET_TX_DESC_HWSEQ_EN_8723B(__pTxDesc, __Value)			SET_BITS_TO_LE_4BYTE(__pTxDesc+32, 15, 1, __Value)

CHECK: line length of 139 exceeds 100 columns
#349: FILE: ./include/rtl8723b_xmit.h:349:
+#define SET_TX_DESC_SEQ_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+36, 12, 12, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#349: FILE: ./include/rtl8723b_xmit.h:349:
+#define SET_TX_DESC_SEQ_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+36, 12, 12, __Value)
                                                  					                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#349: FILE: ./include/rtl8723b_xmit.h:349:
+#define SET_TX_DESC_SEQ_8723B(__pTxDesc, __Value)					SET_BITS_TO_LE_4BYTE(__pTxDesc+36, 12, 12, __Value)

CHECK: line length of 122 exceeds 100 columns
#352: FILE: ./include/rtl8723b_xmit.h:352:
+#define SET_TX_DESC_TX_BUFFER_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+40, 0, 32, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#352: FILE: ./include/rtl8723b_xmit.h:352:
+#define SET_TX_DESC_TX_BUFFER_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+40, 0, 32, __Value)
                                                                		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#352: FILE: ./include/rtl8723b_xmit.h:352:
+#define SET_TX_DESC_TX_BUFFER_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+40, 0, 32, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#353: FILE: ./include/rtl8723b_xmit.h:353:
+#define GET_TX_DESC_TX_BUFFER_ADDRESS_8723B(__pTxDesc)	LE_BITS_TO_4BYTE(__pTxDesc+40, 0, 32)
                                                       	                          ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#353: FILE: ./include/rtl8723b_xmit.h:353:
+#define GET_TX_DESC_TX_BUFFER_ADDRESS_8723B(__pTxDesc)	LE_BITS_TO_4BYTE(__pTxDesc+40, 0, 32)

CHECK: line length of 122 exceeds 100 columns
#356: FILE: ./include/rtl8723b_xmit.h:356:
+#define SET_TX_DESC_NEXT_DESC_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+48, 0, 32, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#356: FILE: ./include/rtl8723b_xmit.h:356:
+#define SET_TX_DESC_NEXT_DESC_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+48, 0, 32, __Value)
                                                                		                              ^

CHECK: Macro argument '__pTxDesc' may be better as '(__pTxDesc)' to avoid precedence issues
#356: FILE: ./include/rtl8723b_xmit.h:356:
+#define SET_TX_DESC_NEXT_DESC_ADDRESS_8723B(__pTxDesc, __Value)		SET_BITS_TO_LE_4BYTE(__pTxDesc+48, 0, 32, __Value)

CHECK: Please don't use multiple blank lines
#358: FILE: ./include/rtl8723b_xmit.h:358:
+
+

CHECK: line length of 132 exceeds 100 columns
#359: FILE: ./include/rtl8723b_xmit.h:359:
+#define SET_EARLYMODE_PKTNUM_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr, 0, 4, __Value)

CHECK: Avoid CamelCase: <__pAddr>
#359: FILE: ./include/rtl8723b_xmit.h:359:
+#define SET_EARLYMODE_PKTNUM_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr, 0, 4, __Value)

CHECK: line length of 133 exceeds 100 columns
#360: FILE: ./include/rtl8723b_xmit.h:360:
+#define SET_EARLYMODE_LEN0_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr, 4, 15, __Value)

CHECK: line length of 134 exceeds 100 columns
#361: FILE: ./include/rtl8723b_xmit.h:361:
+#define SET_EARLYMODE_LEN1_1_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr, 19, 13, __Value)

CHECK: line length of 134 exceeds 100 columns
#362: FILE: ./include/rtl8723b_xmit.h:362:
+#define SET_EARLYMODE_LEN1_2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 0, 2, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#362: FILE: ./include/rtl8723b_xmit.h:362:
+#define SET_EARLYMODE_LEN1_2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 0, 2, __Value)
                                                     					                            ^

CHECK: Macro argument '__pAddr' may be better as '(__pAddr)' to avoid precedence issues
#362: FILE: ./include/rtl8723b_xmit.h:362:
+#define SET_EARLYMODE_LEN1_2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 0, 2, __Value)

CHECK: line length of 136 exceeds 100 columns
#363: FILE: ./include/rtl8723b_xmit.h:363:
+#define SET_EARLYMODE_LEN2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 2, 15,	__Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#363: FILE: ./include/rtl8723b_xmit.h:363:
+#define SET_EARLYMODE_LEN2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 2, 15,	__Value)
                                                   					                            ^

CHECK: Macro argument '__pAddr' may be better as '(__pAddr)' to avoid precedence issues
#363: FILE: ./include/rtl8723b_xmit.h:363:
+#define SET_EARLYMODE_LEN2_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 2, 15,	__Value)

CHECK: line length of 136 exceeds 100 columns
#364: FILE: ./include/rtl8723b_xmit.h:364:
+#define SET_EARLYMODE_LEN3_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 17, 15, __Value)

CHECK: spaces preferred around that '+' (ctx:VxV)
#364: FILE: ./include/rtl8723b_xmit.h:364:
+#define SET_EARLYMODE_LEN3_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 17, 15, __Value)
                                                   					                            ^

CHECK: Macro argument '__pAddr' may be better as '(__pAddr)' to avoid precedence issues
#364: FILE: ./include/rtl8723b_xmit.h:364:
+#define SET_EARLYMODE_LEN3_8723B(__pAddr, __Value)					SET_BITS_TO_LE_4BYTE(__pAddr+4, 17, 15, __Value)

WARNING: please, no space before tabs
#369: FILE: ./include/rtl8723b_xmit.h:369:
+/* ^IRate */$

CHECK: Macro argument reuse 'pDesc' - possible side-effects?
#398: FILE: ./include/rtl8723b_xmit.h:398:
+#define		RX_HAL_IS_CCK_RATE_8723B(pDesc)\
+			(GET_RX_STATUS_DESC_RX_RATE_8723B(pDesc) == DESC8723B_RATE1M ||\
+			GET_RX_STATUS_DESC_RX_RATE_8723B(pDesc) == DESC8723B_RATE2M ||\
+			GET_RX_STATUS_DESC_RX_RATE_8723B(pDesc) == DESC8723B_RATE5_5M ||\
+			GET_RX_STATUS_DESC_RX_RATE_8723B(pDesc) == DESC8723B_RATE11M)

CHECK: Please don't use multiple blank lines
#404: FILE: ./include/rtl8723b_xmit.h:404:
+
+

CHECK: line length of 127 exceeds 100 columns
#406: FILE: ./include/rtl8723b_xmit.h:406:
+void rtl8723b_fill_fake_txdesc(struct adapter *padapter, u8 *pDesc, u32 BufferLen, u8 IsPsPoll, u8 IsBTQosNull, u8 bDataFrame);

total: 0 errors, 1 warnings, 335 checks, 422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtl8723b_xmit.h has style problems, please review.
------------------
./include/rtw_ap.h
------------------
total: 0 errors, 0 warnings, 0 checks, 39 lines checked

./include/rtw_ap.h has no obvious style problems and is ready for submission.
----------------------
./include/rtw_btcoex.h
----------------------
CHECK: Please don't use multiple blank lines
#12: FILE: ./include/rtw_btcoex.h:12:
+
+

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#18: FILE: ./include/rtw_btcoex.h:18:
+void rtw_btcoex_MediaStatusNotify(struct adapter *, u8 mediaStatus);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#19: FILE: ./include/rtw_btcoex.h:19:
+void rtw_btcoex_HaltNotify(struct adapter *);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#24: FILE: ./include/rtw_btcoex.h:24:
+void rtw_btcoex_RejectApAggregatedPacket(struct adapter *, u8 enable);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#25: FILE: ./include/rtw_btcoex.h:25:
+void rtw_btcoex_LPS_Enter(struct adapter *);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#26: FILE: ./include/rtw_btcoex.h:26:
+void rtw_btcoex_LPS_Leave(struct adapter *);

total: 0 errors, 5 warnings, 1 checks, 28 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_btcoex.h has style problems, please review.
-------------------------
./include/rtw_byteorder.h
-------------------------
total: 0 errors, 0 warnings, 0 checks, 16 lines checked

./include/rtw_byteorder.h has no obvious style problems and is ready for submission.
-------------------
./include/rtw_cmd.h
-------------------
CHECK: spaces preferred around that '*' (ctx:VxV)
#12: FILE: ./include/rtw_cmd.h:12:
+#define C2H_MEM_SZ (16*1024)
                       ^

CHECK: struct mutex definition without comment
#56: FILE: ./include/rtw_cmd.h:56:
+		struct mutex sctx_mutex;

CHECK: Macro argument reuse 'pcmd' - possible side-effects?
#73: FILE: ./include/rtw_cmd.h:73:
+#define init_h2fwcmd_w_parm_no_rsp(pcmd, pparm, code) \
+do {\
+	INIT_LIST_HEAD(&pcmd->list);\
+	pcmd->cmdcode = code;\
+	pcmd->parmbuf = (u8 *)(pparm);\
+	pcmd->cmdsz = sizeof(*pparm);\
+	pcmd->rsp = NULL;\
+	pcmd->rspsz = 0;\
+} while (0)

CHECK: Macro argument 'pcmd' may be better as '(pcmd)' to avoid precedence issues
#73: FILE: ./include/rtw_cmd.h:73:
+#define init_h2fwcmd_w_parm_no_rsp(pcmd, pparm, code) \
+do {\
+	INIT_LIST_HEAD(&pcmd->list);\
+	pcmd->cmdcode = code;\
+	pcmd->parmbuf = (u8 *)(pparm);\
+	pcmd->cmdsz = sizeof(*pparm);\
+	pcmd->rsp = NULL;\
+	pcmd->rspsz = 0;\
+} while (0)

CHECK: Macro argument reuse 'pparm' - possible side-effects?
#73: FILE: ./include/rtw_cmd.h:73:
+#define init_h2fwcmd_w_parm_no_rsp(pcmd, pparm, code) \
+do {\
+	INIT_LIST_HEAD(&pcmd->list);\
+	pcmd->cmdcode = code;\
+	pcmd->parmbuf = (u8 *)(pparm);\
+	pcmd->cmdsz = sizeof(*pparm);\
+	pcmd->rsp = NULL;\
+	pcmd->rspsz = 0;\
+} while (0)

CHECK: Macro argument reuse 'pcmd' - possible side-effects?
#83: FILE: ./include/rtw_cmd.h:83:
+#define init_h2fwcmd_w_parm_no_parm_rsp(pcmd, code) \
+do {\
+	INIT_LIST_HEAD(&pcmd->list);\
+	pcmd->cmdcode = code;\
+	pcmd->parmbuf = NULL;\
+	pcmd->cmdsz = 0;\
+	pcmd->rsp = NULL;\
+	pcmd->rspsz = 0;\
+} while (0)

CHECK: Macro argument 'pcmd' may be better as '(pcmd)' to avoid precedence issues
#83: FILE: ./include/rtw_cmd.h:83:
+#define init_h2fwcmd_w_parm_no_parm_rsp(pcmd, code) \
+do {\
+	INIT_LIST_HEAD(&pcmd->list);\
+	pcmd->cmdcode = code;\
+	pcmd->parmbuf = NULL;\
+	pcmd->cmdsz = 0;\
+	pcmd->rsp = NULL;\
+	pcmd->rspsz = 0;\
+} while (0)

CHECK: Macro argument reuse 'c2h_evt' - possible side-effects?
#108: FILE: ./include/rtw_cmd.h:108:
+#define c2h_evt_valid(c2h_evt) ((c2h_evt)->id || (c2h_evt)->plen)

CHECK: extern prototypes should be avoided in .h files
#111: FILE: ./include/rtw_cmd.h:111:
+extern struct cmd_obj *rtw_dequeue_cmd(struct cmd_priv *pcmdpriv);

CHECK: extern prototypes should be avoided in .h files
#112: FILE: ./include/rtw_cmd.h:112:
+extern void rtw_free_cmd_obj(struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#117: FILE: ./include/rtw_cmd.h:117:
+extern void rtw_free_cmd_priv(struct cmd_priv *pcmdpriv);

CHECK: extern prototypes should be avoided in .h files
#119: FILE: ./include/rtw_cmd.h:119:
+extern void rtw_free_evt_priv(struct evt_priv *pevtpriv);

CHECK: extern prototypes should be avoided in .h files
#120: FILE: ./include/rtw_cmd.h:120:
+extern void rtw_evt_notify_isr(struct evt_priv *pevtpriv);

CHECK: Avoid CamelCase: <INTEl_WIDI_WK_CID>
#133: FILE: ./include/rtw_cmd.h:133:
+	INTEl_WIDI_WK_CID,

WARNING: Block comments use * on subsequent lines
#163: FILE: ./include/rtw_cmd.h:163:
+/*
+Caller Mode: Infra, Ad-HoC

WARNING: Block comments use * on subsequent lines
#172: FILE: ./include/rtw_cmd.h:172:
+/*
+Caller Mode: Infra, Ad-Hoc

WARNING: Block comments use * on subsequent lines
#184: FILE: ./include/rtw_cmd.h:184:
+/*
+Caller Mode: Infra, Ad-HoC(C)

WARNING: Block comments use * on subsequent lines
#196: FILE: ./include/rtw_cmd.h:196:
+/*
+Caller Mode: AP, Ad-HoC(M)

WARNING: Block comments use * on subsequent lines
#207: FILE: ./include/rtw_cmd.h:207:
+/*
+Caller Mode: AP, Ad-HoC, Infra

WARNING: Block comments use * on subsequent lines
#230: FILE: ./include/rtw_cmd.h:230:
+/*
+Caller Mode: AP, Ad-HoC, Infra

CHECK: spaces preferred around that '+' (ctx:VxV)
#239: FILE: ./include/rtw_cmd.h:239:
+#define RTW_CHANNEL_SCAN_AMOUNT (14+37)
                                    ^

WARNING: Block comments use * on subsequent lines
#249: FILE: ./include/rtw_cmd.h:249:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#263: FILE: ./include/rtw_cmd.h:263:
+/*
+Caller Mode: Infra

CHECK: line length of 110 exceeds 100 columns
#277: FILE: ./include/rtw_cmd.h:277:
+	u8 grpkey;		/*  1: this is the grpkey for 802.1x. 0: this is the unicast key for 802.1x */

WARNING: Block comments use * on subsequent lines
#283: FILE: ./include/rtw_cmd.h:283:
+/*
+When in AP or Ad-Hoc mode, this is used to

WARNING: Block comments use * on subsequent lines
#305: FILE: ./include/rtw_cmd.h:305:
+/*
+Caller Ad-Hoc/AP

WARNING: Block comments use * on subsequent lines
#324: FILE: ./include/rtw_cmd.h:324:
+/*
+	Caller Ad-Hoc/AP

WARNING: Block comments use * on subsequent lines
#338: FILE: ./include/rtw_cmd.h:338:
+/*
+Caller Mode: AP/Ad-HoC(M)

WARNING: Block comments use * on subsequent lines
#352: FILE: ./include/rtw_cmd.h:352:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#364: FILE: ./include/rtw_cmd.h:364:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#376: FILE: ./include/rtw_cmd.h:376:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#389: FILE: ./include/rtw_cmd.h:389:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#402: FILE: ./include/rtw_cmd.h:402:
+/*
+Caller Mode: Any

CHECK: Please don't use multiple blank lines
#408: FILE: ./include/rtw_cmd.h:408:
+
+

WARNING: Block comments use * on subsequent lines
#425: FILE: ./include/rtw_cmd.h:425:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#439: FILE: ./include/rtw_cmd.h:439:
+/*
+Caller Mode: Any

WARNING: Block comments use * on subsequent lines
#456: FILE: ./include/rtw_cmd.h:456:
+/*
+	Notes: This command is used for H2C/C2H loopback testing

CHECK: Please don't use multiple blank lines
#504: FILE: ./include/rtw_cmd.h:504:
+
+

WARNING: function definition argument 'void *' should also have an identifier name
#549: FILE: ./include/rtw_cmd.h:549:
+	void (*func)(void *);

CHECK: Please don't use multiple blank lines
#553: FILE: ./include/rtw_cmd.h:553:
+
+

CHECK: Please don't use multiple blank lines
#556: FILE: ./include/rtw_cmd.h:556:
+
+

WARNING: Block comments use * on subsequent lines
#558: FILE: ./include/rtw_cmd.h:558:
+/*
+

CHECK: line length of 140 exceeds 100 columns
#579: FILE: ./include/rtw_cmd.h:579:
+u8 rtw_sitesurvey_cmd(struct adapter  *padapter, struct ndis_802_11_ssid *ssid, int ssid_num, struct rtw_ieee80211_channel *ch, int ch_num);

CHECK: extern prototypes should be avoided in .h files
#580: FILE: ./include/rtw_cmd.h:580:
+extern u8 rtw_createbss_cmd(struct adapter  *padapter);

CHECK: line length of 107 exceeds 100 columns
#584: FILE: ./include/rtw_cmd.h:584:
+extern u8 rtw_setstakey_cmd(struct adapter  *padapter, struct sta_info *sta, u8 unicast_key, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#584: FILE: ./include/rtw_cmd.h:584:
+extern u8 rtw_setstakey_cmd(struct adapter  *padapter, struct sta_info *sta, u8 unicast_key, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#585: FILE: ./include/rtw_cmd.h:585:
+extern u8 rtw_clearstakey_cmd(struct adapter *padapter, struct sta_info *sta, u8 enqueue);

CHECK: extern prototypes should be avoided in .h files
#587: FILE: ./include/rtw_cmd.h:587:
+extern u8 rtw_joinbss_cmd(struct adapter *padapter, struct wlan_network *pnetwork);

CHECK: line length of 122 exceeds 100 columns
#589: FILE: ./include/rtw_cmd.h:589:
+extern u8 rtw_setopmode_cmd(struct adapter  *padapter, enum ndis_802_11_network_infrastructure networktype, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#589: FILE: ./include/rtw_cmd.h:589:
+extern u8 rtw_setopmode_cmd(struct adapter  *padapter, enum ndis_802_11_network_infrastructure networktype, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#590: FILE: ./include/rtw_cmd.h:590:
+extern u8 rtw_setrfintfs_cmd(struct adapter  *padapter, u8 mode);

CHECK: extern prototypes should be avoided in .h files
#592: FILE: ./include/rtw_cmd.h:592:
+extern u8 rtw_gettssi_cmd(struct adapter  *padapter, u8 offset, u8 *pval);

CHECK: extern prototypes should be avoided in .h files
#593: FILE: ./include/rtw_cmd.h:593:
+extern u8 rtw_setfwdig_cmd(struct adapter *padapter, u8 type);

CHECK: extern prototypes should be avoided in .h files
#594: FILE: ./include/rtw_cmd.h:594:
+extern u8 rtw_setfwra_cmd(struct adapter *padapter, u8 type);

CHECK: extern prototypes should be avoided in .h files
#596: FILE: ./include/rtw_cmd.h:596:
+extern u8 rtw_addbareq_cmd(struct adapter *padapter, u8 tid, u8 *addr);

CHECK: extern prototypes should be avoided in .h files
#598: FILE: ./include/rtw_cmd.h:598:
+extern u8 rtw_reset_securitypriv_cmd(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#599: FILE: ./include/rtw_cmd.h:599:
+extern u8 rtw_free_assoc_resources_cmd(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#600: FILE: ./include/rtw_cmd.h:600:
+extern u8 rtw_dynamic_chk_wk_cmd(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#607: FILE: ./include/rtw_cmd.h:607:
+extern u8 rtw_ps_cmd(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#611: FILE: ./include/rtw_cmd.h:611:
+extern u8 rtw_c2h_packet_wk_cmd(struct adapter *padapter, u8 *pbuf, u16 length);

CHECK: extern prototypes should be avoided in .h files
#612: FILE: ./include/rtw_cmd.h:612:
+extern u8 rtw_c2h_wk_cmd(struct adapter *padapter, u8 *c2h_evt);

CHECK: extern prototypes should be avoided in .h files
#616: FILE: ./include/rtw_cmd.h:616:
+extern void rtw_survey_cmd_callback(struct adapter  *padapter, struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#617: FILE: ./include/rtw_cmd.h:617:
+extern void rtw_disassoc_cmd_callback(struct adapter  *padapter, struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#618: FILE: ./include/rtw_cmd.h:618:
+extern void rtw_joinbss_cmd_callback(struct adapter  *padapter, struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#619: FILE: ./include/rtw_cmd.h:619:
+extern void rtw_createbss_cmd_callback(struct adapter  *padapter, struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#620: FILE: ./include/rtw_cmd.h:620:
+extern void rtw_getbbrfreg_cmdrsp_callback(struct adapter  *padapter, struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#622: FILE: ./include/rtw_cmd.h:622:
+extern void rtw_setstaKey_cmdrsp_callback(struct adapter  *padapter,  struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#623: FILE: ./include/rtw_cmd.h:623:
+extern void rtw_setassocsta_cmdrsp_callback(struct adapter  *padapter,  struct cmd_obj *pcmd);

CHECK: extern prototypes should be avoided in .h files
#624: FILE: ./include/rtw_cmd.h:624:
+extern void rtw_getrttbl_cmdrsp_callback(struct adapter  *padapter,  struct cmd_obj *pcmd);

CHECK: Please don't use multiple blank lines
#626: FILE: ./include/rtw_cmd.h:626:
+
+

CHECK: Avoid CamelCase: <_GetBBReg_CMD_>
#710: FILE: ./include/rtw_cmd.h:710:
+#define _GetBBReg_CMD_		_Read_BBREG_CMD_

CHECK: Avoid CamelCase: <_Read_BBREG_CMD_>
#710: FILE: ./include/rtw_cmd.h:710:
+#define _GetBBReg_CMD_		_Read_BBREG_CMD_

CHECK: Avoid CamelCase: <_SetBBReg_CMD_>
#711: FILE: ./include/rtw_cmd.h:711:
+#define _SetBBReg_CMD_		_Write_BBREG_CMD_

CHECK: Avoid CamelCase: <_Write_BBREG_CMD_>
#711: FILE: ./include/rtw_cmd.h:711:
+#define _SetBBReg_CMD_		_Write_BBREG_CMD_

CHECK: Avoid CamelCase: <_GetRFReg_CMD_>
#712: FILE: ./include/rtw_cmd.h:712:
+#define _GetRFReg_CMD_		_Read_RFREG_CMD_

CHECK: Avoid CamelCase: <_Read_RFREG_CMD_>
#712: FILE: ./include/rtw_cmd.h:712:
+#define _GetRFReg_CMD_		_Read_RFREG_CMD_

CHECK: Avoid CamelCase: <_SetRFReg_CMD_>
#713: FILE: ./include/rtw_cmd.h:713:
+#define _SetRFReg_CMD_		_Write_RFREG_CMD_

CHECK: Avoid CamelCase: <_Write_RFREG_CMD_>
#713: FILE: ./include/rtw_cmd.h:713:
+#define _SetRFReg_CMD_		_Write_RFREG_CMD_

total: 0 errors, 22 warnings, 56 checks, 715 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_cmd.h has style problems, please review.
----------------------
./include/rtw_eeprom.h
----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_eeprom.h:10:
+
+

CHECK: Avoid CamelCase: <RT_CID_819x_Senao>
#54: FILE: ./include/rtw_eeprom.h:54:
+	RT_CID_819x_Senao = 8,

CHECK: Avoid CamelCase: <RT_CID_819x_Netcore>
#56: FILE: ./include/rtw_eeprom.h:56:
+	RT_CID_819x_Netcore = 10,

CHECK: Avoid CamelCase: <RT_CID_819x_Sitecom>
#63: FILE: ./include/rtw_eeprom.h:63:
+	RT_CID_819x_Sitecom = 17,

CHECK: line length of 174 exceeds 100 columns
#64: FILE: ./include/rtw_eeprom.h:64:
+	RT_CID_CCX = 18, /*  It's set under CCX logo test and isn't demanded for CCX functions, but for test behavior like retry limit and tx report. By Bruce, 2009-02-17. */

CHECK: Avoid CamelCase: <RT_CID_819x_Lenovo>
#65: FILE: ./include/rtw_eeprom.h:65:
+	RT_CID_819x_Lenovo = 19,

CHECK: Avoid CamelCase: <RT_CID_819x_Edimax_Belkin>
#67: FILE: ./include/rtw_eeprom.h:67:
+	RT_CID_819x_Edimax_Belkin = 21,

CHECK: Avoid CamelCase: <RT_CID_819x_Sercomm_Belkin>
#68: FILE: ./include/rtw_eeprom.h:68:
+	RT_CID_819x_Sercomm_Belkin = 22,

CHECK: Avoid CamelCase: <RT_CID_819x_Acer>
#71: FILE: ./include/rtw_eeprom.h:71:
+	RT_CID_819x_Acer = 25,

CHECK: Avoid CamelCase: <RT_CID_819x_AzWave_ASUS>
#72: FILE: ./include/rtw_eeprom.h:72:
+	RT_CID_819x_AzWave_ASUS = 26,

CHECK: Avoid CamelCase: <RT_CID_819x_AzWave>
#73: FILE: ./include/rtw_eeprom.h:73:
+	RT_CID_819x_AzWave = 27, /*  For AzWave in PCIe, The ID is AzWave use and not only Asus */

CHECK: Avoid CamelCase: <RT_CID_819x_Arcadyan_Belkin>
#76: FILE: ./include/rtw_eeprom.h:76:
+	RT_CID_819x_Arcadyan_Belkin = 30,

CHECK: Avoid CamelCase: <RT_CID_819x_Edimax_ASUS>
#81: FILE: ./include/rtw_eeprom.h:81:
+	RT_CID_819x_Edimax_ASUS = 35,

CHECK: Avoid CamelCase: <RT_CID_819x_Xavi>
#85: FILE: ./include/rtw_eeprom.h:85:
+	RT_CID_819x_Xavi = 39,

CHECK: Avoid CamelCase: <RT_CID_819x_Sercomm_Netgear>
#89: FILE: ./include/rtw_eeprom.h:89:
+	RT_CID_819x_Sercomm_Netgear = 43,

CHECK: Avoid CamelCase: <RT_CID_819x_ALPHA_Dlink>
#90: FILE: ./include/rtw_eeprom.h:90:
+	RT_CID_819x_ALPHA_Dlink = 44,/* add by ylb 20121012 for customer led for alpha */

WARNING: please, no space before tabs
#103: FILE: ./include/rtw_eeprom.h:103:
+^Iu16 ^Ichannel_plan;$

WARNING: please, no space before tabs
#104: FILE: ./include/rtw_eeprom.h:104:
+^Iu16 ^ICustomerID;$

CHECK: line length of 108 exceeds 100 columns
#106: FILE: ./include/rtw_eeprom.h:106:
+	u8 efuse_eeprom_data[EEPROM_MAX_SIZE]; /* 92C:256bytes, 88E:512bytes, we use union set (512bytes) */

WARNING: please, no space before tabs
#113: FILE: ./include/rtw_eeprom.h:113:
+^Iu32 ^Iocr;$

total: 0 errors, 3 warnings, 17 checks, 118 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_eeprom.h has style problems, please review.
---------------------
./include/rtw_efuse.h
---------------------
CHECK: Macro argument 'header' may be better as '(header)' to avoid precedence issues
#30: FILE: ./include/rtw_efuse.h:30:
+#define EXT_HEADER(header) ((header & 0x1F) == 0x0F)

CHECK: Macro argument 'wde' may be better as '(wde)' to avoid precedence issues
#31: FILE: ./include/rtw_efuse.h:31:
+#define ALL_WORDS_DISABLED(wde)	((wde & 0x0F) == 0x0F)

CHECK: Macro argument 'header' may be better as '(header)' to avoid precedence issues
#32: FILE: ./include/rtw_efuse.h:32:
+#define GET_HDR_OFFSET_2_0(header) ((header & 0xE0) >> 5)

WARNING: please, no space before tabs
#37: FILE: ./include/rtw_efuse.h:37:
+/* ^IThe following is for BT Efuse definition */$

CHECK: spaces preferred around that '-' (ctx:VxV)
#41: FILE: ./include/rtw_efuse.h:41:
+#define		EFUSE_MAX_BT_BANK		(EFUSE_MAX_BANK-1)
        		                 		               ^

CHECK: Please don't use multiple blank lines
#74: FILE: ./include/rtw_efuse.h:74:
+
+

CHECK: line length of 109 exceeds 100 columns
#94: FILE: ./include/rtw_efuse.h:94:
+void EFUSE_GetEfuseDefinition(struct adapter *padapter, u8 efuseType, u8 type, void *pOut, bool bPseudoTest);

CHECK: line length of 111 exceeds 100 columns
#99: FILE: ./include/rtw_efuse.h:99:
+u8 Efuse_WordEnableDataWrite(struct adapter *padapter, u16 efuse_addr, u8 word_en, u8 *data, bool bPseudoTest);

CHECK: Avoid CamelCase: <Rtw_Hal_ReadMACAddrFromFile>
#104: FILE: ./include/rtw_efuse.h:104:
+void Rtw_Hal_ReadMACAddrFromFile(struct adapter *padapter);

CHECK: Avoid CamelCase: <Rtw_Hal_readPGDataFromConfigFile>
#105: FILE: ./include/rtw_efuse.h:105:
+u32 Rtw_Hal_readPGDataFromConfigFile(struct adapter *padapter);

total: 0 errors, 1 warnings, 9 checks, 107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_efuse.h has style problems, please review.
---------------------
./include/rtw_event.h
---------------------
WARNING: Block comments use * on subsequent lines
#11: FILE: ./include/rtw_event.h:11:
+/*
+Used to report a bss has been scanned

WARNING: Block comments use * on subsequent lines
#19: FILE: ./include/rtw_event.h:19:
+/*
+Used to report that the requested site survey has been done.

CHECK: Please don't use multiple blank lines
#23: FILE: ./include/rtw_event.h:23:
+
+

WARNING: Block comments use * on subsequent lines
#31: FILE: ./include/rtw_event.h:31:
+/*
+Used to report the link result of joining the given bss

CHECK: Please don't use multiple blank lines
#33: FILE: ./include/rtw_event.h:33:
+
+

WARNING: Block comments use * on subsequent lines
#45: FILE: ./include/rtw_event.h:45:
+/*
+Used to report a given STA has joinned the created BSS.

CHECK: Please don't use multiple blank lines
#48: FILE: ./include/rtw_event.h:48:
+
+

WARNING: please, no spaces at the start of a line
#58: FILE: ./include/rtw_event.h:58:
+ unsigned char macaddr[6];$

WARNING: please, no spaces at the start of a line
#59: FILE: ./include/rtw_event.h:59:
+ unsigned char rsvd[2]; /* for reason */$

WARNING: please, no spaces at the start of a line
#60: FILE: ./include/rtw_event.h:60:
+ int mac_id;$

CHECK: Please don't use multiple blank lines
#69: FILE: ./include/rtw_event.h:69:
+
+

CHECK: Please don't use multiple blank lines
#76: FILE: ./include/rtw_event.h:76:
+
+

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#83: FILE: ./include/rtw_event.h:83:
+	volatile int	*caller_ff_tail;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#90: FILE: ./include/rtw_event.h:90:
+	volatile int	head;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#91: FILE: ./include/rtw_event.h:91:
+	volatile int	tail;

CHECK: Please don't use multiple blank lines
#95: FILE: ./include/rtw_event.h:95:
+
+

total: 0 errors, 10 warnings, 6 checks, 96 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_event.h has style problems, please review.
------------------
./include/rtw_ht.h
------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_ht.h:10:
+
+

CHECK: line length of 126 exceeds 100 columns
#76: FILE: ./include/rtw_ht.h:76:
+#define SET_EXT_CAPABILITY_ELE_BSS_COEXIST(_pEleStart, _val)			SET_BITS_TO_LE_1BYTE((_pEleStart), 0, 1, _val)

CHECK: Avoid CamelCase: <_pEleStart>
#76: FILE: ./include/rtw_ht.h:76:
+#define SET_EXT_CAPABILITY_ELE_BSS_COEXIST(_pEleStart, _val)			SET_BITS_TO_LE_1BYTE((_pEleStart), 0, 1, _val)

CHECK: line length of 114 exceeds 100 columns
#78: FILE: ./include/rtw_ht.h:78:
+#define GET_HT_CAPABILITY_ELE_LDPC_CAP(_pEleStart)				LE_BITS_TO_1BYTE(_pEleStart, 0, 1)

CHECK: line length of 122 exceeds 100 columns
#79: FILE: ./include/rtw_ht.h:79:
+#define GET_HT_CAPABILITY_ELE_TX_STBC(_pEleStart)					LE_BITS_TO_1BYTE(_pEleStart, 7, 1)

CHECK: line length of 126 exceeds 100 columns
#81: FILE: ./include/rtw_ht.h:81:
+#define GET_HT_CAPABILITY_ELE_RX_STBC(_pEleStart)					LE_BITS_TO_1BYTE((_pEleStart)+1, 0, 2)

CHECK: spaces preferred around that '+' (ctx:VxV)
#81: FILE: ./include/rtw_ht.h:81:
+#define GET_HT_CAPABILITY_ELE_RX_STBC(_pEleStart)					LE_BITS_TO_1BYTE((_pEleStart)+1, 0, 2)
                                                  					                             ^

total: 0 errors, 0 warnings, 7 checks, 83 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_ht.h has style problems, please review.
-------------------------
./include/rtw_ioctl_set.h
-------------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_ioctl_set.h:10:
+
+

CHECK: line length of 110 exceeds 100 columns
#13: FILE: ./include/rtw_ioctl_set.h:13:
+u8 rtw_set_802_11_authentication_mode(struct adapter *pdapter, enum ndis_802_11_authentication_mode authmode);

CHECK: line length of 110 exceeds 100 columns
#16: FILE: ./include/rtw_ioctl_set.h:16:
+u8 rtw_set_802_11_bssid_list_scan(struct adapter *padapter, struct ndis_802_11_ssid *pssid, int ssid_max_num);

CHECK: line length of 117 exceeds 100 columns
#17: FILE: ./include/rtw_ioctl_set.h:17:
+u8 rtw_set_802_11_infrastructure_mode(struct adapter *padapter, enum ndis_802_11_network_infrastructure networktype);

total: 0 errors, 0 warnings, 4 checks, 28 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_ioctl_set.h has style problems, please review.
------------------
./include/rtw_io.h
------------------
WARNING: please, no space before tabs
#43: FILE: ./include/rtw_io.h:43:
+^Istruct dvobj_priv *pintf_dev;/* ^Ipointer to &(padapter->dvobjpriv); */$

CHECK: Blank lines aren't necessary after an open brace '{'
#55: FILE: ./include/rtw_io.h:55:
+struct io_priv {
+

CHECK: extern prototypes should be avoided in .h files
#62: FILE: ./include/rtw_io.h:62:
+extern u8 rtw_read8(struct adapter *adapter, u32 addr);

CHECK: extern prototypes should be avoided in .h files
#63: FILE: ./include/rtw_io.h:63:
+extern u16 rtw_read16(struct adapter *adapter, u32 addr);

CHECK: extern prototypes should be avoided in .h files
#64: FILE: ./include/rtw_io.h:64:
+extern u32 rtw_read32(struct adapter *adapter, u32 addr);

CHECK: extern prototypes should be avoided in .h files
#66: FILE: ./include/rtw_io.h:66:
+extern int rtw_write8(struct adapter *adapter, u32 addr, u8 val);

CHECK: extern prototypes should be avoided in .h files
#67: FILE: ./include/rtw_io.h:67:
+extern int rtw_write16(struct adapter *adapter, u32 addr, u16 val);

CHECK: extern prototypes should be avoided in .h files
#68: FILE: ./include/rtw_io.h:68:
+extern int rtw_write32(struct adapter *adapter, u32 addr, u32 val);

CHECK: extern prototypes should be avoided in .h files
#70: FILE: ./include/rtw_io.h:70:
+extern u32 rtw_write_port(struct adapter *adapter, u32 addr, u32 cnt, u8 *pmem);

CHECK: line length of 117 exceeds 100 columns
#72: FILE: ./include/rtw_io.h:72:
+int rtw_init_io_priv(struct adapter *padapter, void (*set_intf_ops)(struct adapter *padapter, struct _io_ops *pops));

total: 0 errors, 1 warnings, 9 checks, 74 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_io.h has style problems, please review.
------------------------
./include/rtw_mlme_ext.h
------------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_mlme_ext.h:10:
+
+

WARNING: please, no space before tabs
#11: FILE: ./include/rtw_mlme_ext.h:11:
+/* ^ICommented by Albert 20101105 */$

WARNING: please, no space before tabs
#12: FILE: ./include/rtw_mlme_ext.h:12:
+/* ^IIncrease the SURVEY_TO value from 100 to 150  (100ms to 150ms) */$

CHECK: line length of 122 exceeds 100 columns
#13: FILE: ./include/rtw_mlme_ext.h:13:
+/* 	The Realtek 8188CE SoftAP will spend around 100ms to send the probe response after receiving the probe request. */

WARNING: please, no space before tabs
#13: FILE: ./include/rtw_mlme_ext.h:13:
+/* ^IThe Realtek 8188CE SoftAP will spend around 100ms to send the probe response after receiving the probe request. */$

WARNING: please, no space before tabs
#14: FILE: ./include/rtw_mlme_ext.h:14:
+/* ^ISo, this driver tried to extend the dwell time for each scanning channel. */$

WARNING: please, no space before tabs
#15: FILE: ./include/rtw_mlme_ext.h:15:
+/* ^IThis will increase the chance to receive the probe response from SoftAP. */$

CHECK: Please don't use multiple blank lines
#44: FILE: ./include/rtw_mlme_ext.h:44:
+
+

WARNING: Block comments use * on subsequent lines
#59: FILE: ./include/rtw_mlme_ext.h:59:
+/********************************************************
+MCS rate definitions

CHECK: Please don't use multiple blank lines
#72: FILE: ./include/rtw_mlme_ext.h:72:
+
+

CHECK: line length of 104 exceeds 100 columns
#76: FILE: ./include/rtw_mlme_ext.h:76:
+/* 	We just add new channel plan when the new channel plan is different from any of the following */

WARNING: please, no space before tabs
#76: FILE: ./include/rtw_mlme_ext.h:76:
+/* ^IWe just add new channel plan when the new channel plan is different from any of the following */$

WARNING: please, no space before tabs
#77: FILE: ./include/rtw_mlme_ext.h:77:
+/* ^Ichannel plan. */$

CHECK: line length of 112 exceeds 100 columns
#78: FILE: ./include/rtw_mlme_ext.h:78:
+/* 	If you just want to customize the actions(scan period or join actions) about one of the channel plan, */

WARNING: please, no space before tabs
#78: FILE: ./include/rtw_mlme_ext.h:78:
+/* ^IIf you just want to customize the actions(scan period or join actions) about one of the channel plan, */$

WARNING: please, no space before tabs
#79: FILE: ./include/rtw_mlme_ext.h:79:
+/* ^Icustomize them in rt_channel_info in the RT_CHANNEL_LIST. */$

CHECK: line length of 120 exceeds 100 columns
#161: FILE: ./include/rtw_mlme_ext.h:161:
+#define rtw_is_channel_plan_valid(chplan) (chplan < RT_CHANNEL_DOMAIN_MAX || chplan == RT_CHANNEL_DOMAIN_REALTEK_DEFINE)

CHECK: Macro argument reuse 'chplan' - possible side-effects?
#161: FILE: ./include/rtw_mlme_ext.h:161:
+#define rtw_is_channel_plan_valid(chplan) (chplan < RT_CHANNEL_DOMAIN_MAX || chplan == RT_CHANNEL_DOMAIN_REALTEK_DEFINE)

CHECK: Macro argument 'chplan' may be better as '(chplan)' to avoid precedence issues
#161: FILE: ./include/rtw_mlme_ext.h:161:
+#define rtw_is_channel_plan_valid(chplan) (chplan < RT_CHANNEL_DOMAIN_MAX || chplan == RT_CHANNEL_DOMAIN_REALTEK_DEFINE)

CHECK: Please don't use multiple blank lines
#199: FILE: ./include/rtw_mlme_ext.h:199:
+
+

CHECK: line length of 125 exceeds 100 columns
#249: FILE: ./include/rtw_mlme_ext.h:249:
+#define	WIFI_FW_LINKING_STATE		(WIFI_FW_AUTH_NULL | WIFI_FW_AUTH_STATE | WIFI_FW_AUTH_SUCCESS | WIFI_FW_ASSOC_STATE)

CHECK: line length of 106 exceeds 100 columns
#264: FILE: ./include/rtw_mlme_ext.h:264:
+ * When the driver scanned RTW_SCAN_NUM_OF_CH channels, it would switch back to AP's operating channel for

CHECK: line length of 143 exceeds 100 columns
#319: FILE: ./include/rtw_mlme_ext.h:319:
+	struct wlan_bssid_ex			network;/* join network or bss_network, if in ap mode, it is the same to cur_network.network */

CHECK: line length of 101 exceeds 100 columns
#323: FILE: ./include/rtw_mlme_ext.h:323:
+/*  The channel information about this channel including joining, scanning, and power constraints. */

WARNING: please, no space before tabs
#325: FILE: ./include/rtw_mlme_ext.h:325:
+^Iu8 ^I^IChannelNum;^I^I/*  The channel number. */$

CHECK: line length of 104 exceeds 100 columns
#326: FILE: ./include/rtw_mlme_ext.h:326:
+	enum rt_scan_type	ScanType;		/*  Scan type such as passive or active scan. */

CHECK: line length of 135 exceeds 100 columns
#387: FILE: ./include/rtw_mlme_ext.h:387:
+	struct mlme_ext_info mlmext_info;	/* for sta/adhoc mode, including current scanning/connecting/connected related info. */

WARNING: please, no space before tabs
#393: FILE: ./include/rtw_mlme_ext.h:393:
+^Iu16 ^I^Ichan_scan_time;$

CHECK: extern prototypes should be avoided in .h files
#429: FILE: ./include/rtw_mlme_ext.h:429:
+extern void init_mlme_ext_timer(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#430: FILE: ./include/rtw_mlme_ext.h:430:
+extern void init_addba_retry_timer(struct adapter *padapter, struct sta_info *psta);

CHECK: extern prototypes should be avoided in .h files
#431: FILE: ./include/rtw_mlme_ext.h:431:
+extern struct xmit_frame *alloc_mgtxmitframe(struct xmit_priv *pxmitpriv);

CHECK: line length of 126 exceeds 100 columns
#455: FILE: ./include/rtw_mlme_ext.h:455:
+void set_channel_bwmode(struct adapter *padapter, unsigned char channel, unsigned char channel_offset, unsigned short bwmode);

CHECK: Please don't use multiple blank lines
#474: FILE: ./include/rtw_mlme_ext.h:474:
+
+

CHECK: line length of 106 exceeds 100 columns
#479: FILE: ./include/rtw_mlme_ext.h:479:
+u8 collect_bss_info(struct adapter *padapter, union recv_frame *precv_frame, struct wlan_bssid_ex *bssid);

CHECK: line length of 116 exceeds 100 columns
#480: FILE: ./include/rtw_mlme_ext.h:480:
+void update_network(struct wlan_bssid_ex *dst, struct wlan_bssid_ex *src, struct adapter *padapter, bool update_ie);

CHECK: line length of 105 exceeds 100 columns
#515: FILE: ./include/rtw_mlme_ext.h:515:
+unsigned int receive_disconnect(struct adapter *padapter, unsigned char *MacAddr, unsigned short reason);

CHECK: extern prototypes should be avoided in .h files
#525: FILE: ./include/rtw_mlme_ext.h:525:
+extern void rtw_alloc_macid(struct adapter *padapter, struct sta_info *psta);

CHECK: extern prototypes should be avoided in .h files
#526: FILE: ./include/rtw_mlme_ext.h:526:
+extern void rtw_release_macid(struct adapter *padapter, struct sta_info *psta);

CHECK: extern prototypes should be avoided in .h files
#536: FILE: ./include/rtw_mlme_ext.h:536:
+extern u8 set_tx_beacon_cmd(struct adapter *padapter);

CHECK: line length of 101 exceeds 100 columns
#542: FILE: ./include/rtw_mlme_ext.h:542:
+s32 dump_mgntframe_and_wait(struct adapter *padapter, struct xmit_frame *pmgntframe, int timeout_ms);

CHECK: line length of 106 exceeds 100 columns
#548: FILE: ./include/rtw_mlme_ext.h:548:
+void issue_asocrsp(struct adapter *padapter, unsigned short status, struct sta_info *pstat, int pkt_type);

CHECK: line length of 138 exceeds 100 columns
#551: FILE: ./include/rtw_mlme_ext.h:551:
+s32 issue_probereq_ex(struct adapter *padapter, struct ndis_802_11_ssid *pssid, u8 *da, u8 ch, bool append_wps, int try_cnt, int wait_ms);

CHECK: line length of 115 exceeds 100 columns
#552: FILE: ./include/rtw_mlme_ext.h:552:
+int issue_nulldata(struct adapter *padapter, unsigned char *da, unsigned int power_mode, int try_cnt, int wait_ms);

CHECK: line length of 103 exceeds 100 columns
#554: FILE: ./include/rtw_mlme_ext.h:554:
+int issue_qos_nulldata(struct adapter *padapter, unsigned char *da, u16 tid, int try_cnt, int wait_ms);

CHECK: line length of 103 exceeds 100 columns
#556: FILE: ./include/rtw_mlme_ext.h:556:
+int issue_deauth_ex(struct adapter *padapter, u8 *da, unsigned short reason, int try_cnt, int wait_ms);

CHECK: line length of 114 exceeds 100 columns
#557: FILE: ./include/rtw_mlme_ext.h:557:
+void issue_action_BA(struct adapter *padapter, unsigned char *raddr, unsigned char action, unsigned short status);

CHECK: line length of 117 exceeds 100 columns
#558: FILE: ./include/rtw_mlme_ext.h:558:
+void issue_action_SA_Query(struct adapter *padapter, unsigned char *raddr, unsigned char action, unsigned short tid);

WARNING: Single statement macros should not use a do {} while (0) loop
#601: FILE: ./include/rtw_mlme_ext.h:601:
+#define set_survey_timer(mlmeext, ms) \
+	do { \
+		_set_timer(&(mlmeext)->survey_timer, (ms)); \
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#606: FILE: ./include/rtw_mlme_ext.h:606:
+#define set_link_timer(mlmeext, ms) \
+	do { \
+		_set_timer(&(mlmeext)->link_timer, (ms)); \
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#610: FILE: ./include/rtw_mlme_ext.h:610:
+#define set_sa_query_timer(mlmeext, ms) \
+	do { \
+		_set_timer(&(mlmeext)->sa_query_timer, (ms)); \
+	} while (0)

CHECK: extern prototypes should be avoided in .h files
#615: FILE: ./include/rtw_mlme_ext.h:615:
+extern void process_addba_req(struct adapter *padapter, u8 *paddba_req, u8 *addr);

CHECK: extern prototypes should be avoided in .h files
#617: FILE: ./include/rtw_mlme_ext.h:617:
+extern void update_TSF(struct mlme_ext_priv *pmlmeext, u8 *pframe, uint len);

CHECK: extern prototypes should be avoided in .h files
#618: FILE: ./include/rtw_mlme_ext.h:618:
+extern void correct_TSF(struct adapter *padapter, struct mlme_ext_priv *pmlmeext);

CHECK: extern prototypes should be avoided in .h files
#619: FILE: ./include/rtw_mlme_ext.h:619:
+extern void adaptive_early_32k(struct mlme_ext_priv *pmlmeext, u8 *pframe, uint len);

CHECK: extern prototypes should be avoided in .h files
#620: FILE: ./include/rtw_mlme_ext.h:620:
+extern u8 traffic_status_watchdog(struct adapter *padapter, u8 from_timer);

CHECK: Please don't use multiple blank lines
#629: FILE: ./include/rtw_mlme_ext.h:629:
+
+

CHECK: Please don't use multiple blank lines
#637: FILE: ./include/rtw_mlme_ext.h:637:
+
+

CHECK: line length of 120 exceeds 100 columns
#657: FILE: ./include/rtw_mlme_ext.h:657:
+u8 set_csa_hdl(struct adapter *padapter, unsigned char *pbuf);	/* Kurt: Handling DFS channel switch announcement ie. */

CHECK: Please don't use multiple blank lines
#661: FILE: ./include/rtw_mlme_ext.h:661:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#666: FILE: ./include/rtw_mlme_ext.h:666:
+struct C2HEvent_Header {
+

CHECK: Avoid CamelCase: <_Get_BasicRate>
#690: FILE: ./include/rtw_mlme_ext.h:690:
+	GEN_EVT_CODE(_Get_BasicRate),

CHECK: Avoid CamelCase: <_Get_DataRate>
#691: FILE: ./include/rtw_mlme_ext.h:691:
+	GEN_EVT_CODE(_Get_DataRate),

CHECK: Avoid CamelCase: <_AtimDone>
#698: FILE: ./include/rtw_mlme_ext.h:698:
+	GEN_EVT_CODE(_AtimDone),

CHECK: Avoid CamelCase: <_TX_Report>
#699: FILE: ./include/rtw_mlme_ext.h:699:
+	GEN_EVT_CODE(_TX_Report),

CHECK: Avoid CamelCase: <_CCX_Report>
#700: FILE: ./include/rtw_mlme_ext.h:700:
+	GEN_EVT_CODE(_CCX_Report),			/*15*/

CHECK: Avoid CamelCase: <_DTM_Report>
#701: FILE: ./include/rtw_mlme_ext.h:701:
+	GEN_EVT_CODE(_DTM_Report),

CHECK: Avoid CamelCase: <_TX_Rate_Statistics>
#702: FILE: ./include/rtw_mlme_ext.h:702:
+	GEN_EVT_CODE(_TX_Rate_Statistics),

CHECK: Avoid CamelCase: <_ReportPwrState>
#708: FILE: ./include/rtw_mlme_ext.h:708:
+	GEN_EVT_CODE(_ReportPwrState),		/* filen: only for PCIE, USB */

CHECK: Avoid CamelCase: <_CloseRF>
#709: FILE: ./include/rtw_mlme_ext.h:709:
+	GEN_EVT_CODE(_CloseRF),				/* filen: only for PCIE, work around ASPM */

CHECK: Please don't use multiple blank lines
#714: FILE: ./include/rtw_mlme_ext.h:714:
+
+

total: 0 errors, 15 warnings, 55 checks, 719 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_mlme_ext.h has style problems, please review.
--------------------
./include/rtw_mlme.h
--------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_mlme.h:10:
+
+

WARNING: please, no space before tabs
#16: FILE: ./include/rtw_mlme.h:16:
+/* ^ICommented by Albert 20101105 */$

WARNING: please, no space before tabs
#17: FILE: ./include/rtw_mlme.h:17:
+/* ^IIncrease the scanning timeout because of increasing the SURVEY_TO value. */$

CHECK: line length of 125 exceeds 100 columns
#38: FILE: ./include/rtw_mlme.h:38:
+#define	WIFI_SITE_MONITOR			0x00000800		/* to indicate the station is under site surveying */

CHECK: Please don't use multiple blank lines
#49: FILE: ./include/rtw_mlme.h:49:
+
+

WARNING: please, no spaces at the start of a line
#51: FILE: ./include/rtw_mlme.h:51:
+ dot11AuthAlgrthm_Open = 0,$

WARNING: please, no spaces at the start of a line
#52: FILE: ./include/rtw_mlme.h:52:
+ dot11AuthAlgrthm_Shared,$

WARNING: please, no spaces at the start of a line
#53: FILE: ./include/rtw_mlme.h:53:
+ dot11AuthAlgrthm_8021X,$

WARNING: please, no spaces at the start of a line
#54: FILE: ./include/rtw_mlme.h:54:
+ dot11AuthAlgrthm_Auto,$

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_Auto>
#54: FILE: ./include/rtw_mlme.h:54:
+ dot11AuthAlgrthm_Auto,

WARNING: please, no spaces at the start of a line
#55: FILE: ./include/rtw_mlme.h:55:
+ dot11AuthAlgrthm_WAPI,$

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_WAPI>
#55: FILE: ./include/rtw_mlme.h:55:
+ dot11AuthAlgrthm_WAPI,

WARNING: please, no spaces at the start of a line
#56: FILE: ./include/rtw_mlme.h:56:
+ dot11AuthAlgrthm_MaxNum$

CHECK: Avoid CamelCase: <dot11AuthAlgrthm_MaxNum>
#56: FILE: ./include/rtw_mlme.h:56:
+ dot11AuthAlgrthm_MaxNum

WARNING: Block comments use * on subsequent lines
#74: FILE: ./include/rtw_mlme.h:74:
+/*
+

WARNING: please, no space before tabs
#100: FILE: ./include/rtw_mlme.h:100:
+^Iu32 ^I^I^INumTxOkInPeriod;$

WARNING: please, no space before tabs
#101: FILE: ./include/rtw_mlme.h:101:
+^Iu32 ^I^I^INumRxOkInPeriod;$

WARNING: please, no space before tabs
#102: FILE: ./include/rtw_mlme.h:102:
+^Iu32 ^I^I^INumRxUnicastOkInPeriod;$

CHECK: line length of 113 exceeds 100 columns
#107: FILE: ./include/rtw_mlme.h:107:
+	bool			bHigherBusyRxTraffic; /*  We may disable Tx interrupt according as Rx traffic. */

CHECK: line length of 113 exceeds 100 columns
#108: FILE: ./include/rtw_mlme.h:108:
+	bool			bHigherBusyTxTraffic; /*  We may disable Tx interrupt according as Tx traffic. */

CHECK: Blank lines aren't necessary after an open brace '{'
#122: FILE: ./include/rtw_mlme.h:122:
+struct mlme_priv {
+

CHECK: spinlock_t definition without comment
#123: FILE: ./include/rtw_mlme.h:123:
+	spinlock_t	lock;

CHECK: line length of 102 exceeds 100 columns
#124: FILE: ./include/rtw_mlme.h:124:
+	signed int	fw_state;	/* shall we protect this variable? maybe not necessarily... */

CHECK: line length of 104 exceeds 100 columns
#134: FILE: ./include/rtw_mlme.h:134:
+	u8 roam_tgt_addr[ETH_ALEN]; /* request to roam to specific target without other consideration */

CHECK: Please don't use multiple blank lines
#173: FILE: ./include/rtw_mlme.h:173:
+
+

WARNING: Block comments use a trailing */ on a separate line
#189: FILE: ./include/rtw_mlme.h:189:
+	 * in 802.11g BSS) */

CHECK: line length of 102 exceeds 100 columns
#222: FILE: ./include/rtw_mlme.h:222:
+	u8 *wps_assoc_resp_ie; /*  for CONFIG_IOCTL_CFG80211, this IE could include p2p ie / wfd ie */

CHECK: line length of 110 exceeds 100 columns
#227: FILE: ./include/rtw_mlme.h:227:
+	u32 wps_assoc_resp_ie_len; /*  for CONFIG_IOCTL_CFG80211, this IE len could include p2p ie / wfd ie */

CHECK: spinlock_t definition without comment
#241: FILE: ./include/rtw_mlme.h:241:
+	spinlock_t	bcn_update_lock;

CHECK: extern prototypes should be avoided in .h files
#254: FILE: ./include/rtw_mlme.h:254:
+extern int hostapd_mode_init(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#255: FILE: ./include/rtw_mlme.h:255:
+extern void hostapd_mode_unload(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#257: FILE: ./include/rtw_mlme.h:257:
+extern void rtw_joinbss_event_prehandle(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#258: FILE: ./include/rtw_mlme.h:258:
+extern void rtw_survey_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#259: FILE: ./include/rtw_mlme.h:259:
+extern void rtw_surveydone_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#260: FILE: ./include/rtw_mlme.h:260:
+extern void rtw_joinbss_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#261: FILE: ./include/rtw_mlme.h:261:
+extern void rtw_stassoc_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#262: FILE: ./include/rtw_mlme.h:262:
+extern void rtw_stadel_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#263: FILE: ./include/rtw_mlme.h:263:
+extern void rtw_atimdone_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#264: FILE: ./include/rtw_mlme.h:264:
+extern void rtw_cpwm_event_callback(struct adapter *adapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#265: FILE: ./include/rtw_mlme.h:265:
+extern void rtw_wmm_event_callback(struct adapter *padapter, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#267: FILE: ./include/rtw_mlme.h:267:
+extern void rtw_join_timeout_handler(struct timer_list *t);

CHECK: extern prototypes should be avoided in .h files
#268: FILE: ./include/rtw_mlme.h:268:
+extern void _rtw_scan_timeout_handler(struct timer_list *t);

CHECK: extern prototypes should be avoided in .h files
#272: FILE: ./include/rtw_mlme.h:272:
+extern void rtw_free_network_queue(struct adapter *adapter, u8 isfreeall);

CHECK: extern prototypes should be avoided in .h files
#273: FILE: ./include/rtw_mlme.h:273:
+extern int rtw_init_mlme_priv(struct adapter *adapter);/*  (struct mlme_priv *pmlmepriv); */

CHECK: extern prototypes should be avoided in .h files
#275: FILE: ./include/rtw_mlme.h:275:
+extern void rtw_free_mlme_priv(struct mlme_priv *pmlmepriv);

CHECK: Please don't use multiple blank lines
#277: FILE: ./include/rtw_mlme.h:277:
+
+

CHECK: extern prototypes should be avoided in .h files
#278: FILE: ./include/rtw_mlme.h:278:
+extern signed int rtw_select_and_join_from_scanned_queue(struct mlme_priv *pmlmepriv);

CHECK: line length of 135 exceeds 100 columns
#279: FILE: ./include/rtw_mlme.h:279:
+extern signed int rtw_set_key(struct adapter *adapter, struct security_priv *psecuritypriv, signed int keyid, u8 set_tx, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#279: FILE: ./include/rtw_mlme.h:279:
+extern signed int rtw_set_key(struct adapter *adapter, struct security_priv *psecuritypriv, signed int keyid, u8 set_tx, bool enqueue);

CHECK: extern prototypes should be avoided in .h files
#280: FILE: ./include/rtw_mlme.h:280:
+extern signed int rtw_set_auth(struct adapter *adapter, struct security_priv *psecuritypriv);

CHECK: extern prototypes should be avoided in .h files
#324: FILE: ./include/rtw_mlme.h:324:
+extern u16 rtw_get_capability(struct wlan_bssid_ex *bss);

CHECK: extern prototypes should be avoided in .h files
#325: FILE: ./include/rtw_mlme.h:325:
+extern void rtw_update_scanned_network(struct adapter *adapter, struct wlan_bssid_ex *target);

CHECK: line length of 107 exceeds 100 columns
#326: FILE: ./include/rtw_mlme.h:326:
+extern void rtw_disconnect_hdl_under_linked(struct adapter *adapter, struct sta_info *psta, u8 free_assoc);

CHECK: extern prototypes should be avoided in .h files
#326: FILE: ./include/rtw_mlme.h:326:
+extern void rtw_disconnect_hdl_under_linked(struct adapter *adapter, struct sta_info *psta, u8 free_assoc);

CHECK: extern prototypes should be avoided in .h files
#327: FILE: ./include/rtw_mlme.h:327:
+extern void rtw_generate_random_ibss(u8 *pibss);

CHECK: extern prototypes should be avoided in .h files
#328: FILE: ./include/rtw_mlme.h:328:
+extern struct wlan_network *rtw_find_network(struct __queue *scanned_queue, u8 *addr);

CHECK: extern prototypes should be avoided in .h files
#329: FILE: ./include/rtw_mlme.h:329:
+extern struct wlan_network *rtw_get_oldest_wlan_network(struct __queue *scanned_queue);

CHECK: line length of 105 exceeds 100 columns
#330: FILE: ./include/rtw_mlme.h:330:
+struct wlan_network *_rtw_find_same_network(struct __queue *scanned_queue, struct wlan_network *network);

CHECK: extern prototypes should be avoided in .h files
#332: FILE: ./include/rtw_mlme.h:332:
+extern void rtw_free_assoc_resources(struct adapter *adapter, int lock_scanned_queue);

CHECK: extern prototypes should be avoided in .h files
#333: FILE: ./include/rtw_mlme.h:333:
+extern void rtw_indicate_disconnect(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#334: FILE: ./include/rtw_mlme.h:334:
+extern void rtw_indicate_connect(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#338: FILE: ./include/rtw_mlme.h:338:
+extern int rtw_restruct_sec_ie(struct adapter *adapter, u8 *in_ie, u8 *out_ie, uint in_len);

CHECK: line length of 114 exceeds 100 columns
#339: FILE: ./include/rtw_mlme.h:339:
+extern int rtw_restruct_wmm_ie(struct adapter *adapter, u8 *in_ie, u8 *out_ie, uint in_len, uint initial_out_len);

CHECK: extern prototypes should be avoided in .h files
#339: FILE: ./include/rtw_mlme.h:339:
+extern int rtw_restruct_wmm_ie(struct adapter *adapter, u8 *in_ie, u8 *out_ie, uint in_len, uint initial_out_len);

CHECK: extern prototypes should be avoided in .h files
#340: FILE: ./include/rtw_mlme.h:340:
+extern void rtw_init_registrypriv_dev_network(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#342: FILE: ./include/rtw_mlme.h:342:
+extern void rtw_update_registrypriv_dev_network(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#344: FILE: ./include/rtw_mlme.h:344:
+extern void rtw_get_encrypt_decrypt_from_registrypriv(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#346: FILE: ./include/rtw_mlme.h:346:
+extern void _rtw_join_timeout_handler(struct timer_list *t);

CHECK: extern prototypes should be avoided in .h files
#347: FILE: ./include/rtw_mlme.h:347:
+extern void rtw_scan_timeout_handler(struct timer_list *t);

CHECK: extern prototypes should be avoided in .h files
#349: FILE: ./include/rtw_mlme.h:349:
+extern void rtw_dynamic_check_timer_handler(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#356: FILE: ./include/rtw_mlme.h:356:
+extern void _rtw_free_mlme_priv(struct mlme_priv *pmlmepriv);

CHECK: extern prototypes should be avoided in .h files
#360: FILE: ./include/rtw_mlme.h:360:
+extern struct wlan_network *rtw_alloc_network(struct mlme_priv *pmlmepriv);

CHECK: Please don't use multiple blank lines
#362: FILE: ./include/rtw_mlme.h:362:
+
+

CHECK: line length of 104 exceeds 100 columns
#363: FILE: ./include/rtw_mlme.h:363:
+extern void _rtw_free_network(struct mlme_priv *pmlmepriv, struct wlan_network *pnetwork, u8 isfreeall);

CHECK: extern prototypes should be avoided in .h files
#363: FILE: ./include/rtw_mlme.h:363:
+extern void _rtw_free_network(struct mlme_priv *pmlmepriv, struct wlan_network *pnetwork, u8 isfreeall);

CHECK: extern prototypes should be avoided in .h files
#364: FILE: ./include/rtw_mlme.h:364:
+extern void _rtw_free_network_nolock(struct mlme_priv *pmlmepriv, struct wlan_network *pnetwork);

CHECK: Please don't use multiple blank lines
#366: FILE: ./include/rtw_mlme.h:366:
+
+

CHECK: extern prototypes should be avoided in .h files
#367: FILE: ./include/rtw_mlme.h:367:
+extern struct wlan_network *_rtw_find_network(struct __queue *scanned_queue, u8 *addr);

CHECK: extern prototypes should be avoided in .h files
#369: FILE: ./include/rtw_mlme.h:369:
+extern signed int rtw_if_up(struct adapter *padapter);

CHECK: Please don't use multiple blank lines
#376: FILE: ./include/rtw_mlme.h:376:
+
+

CHECK: line length of 125 exceeds 100 columns
#381: FILE: ./include/rtw_mlme.h:381:
+unsigned int rtw_restructure_ht_ie(struct adapter *padapter, u8 *in_ie, u8 *out_ie, uint in_len, uint *pout_len, u8 channel);

CHECK: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#390: FILE: ./include/rtw_mlme.h:390:
+#define rtw_chk_roam_flags(adapter, flags) ((adapter)->mlmepriv.roam_flags & flags)

total: 0 errors, 13 warnings, 69 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_mlme.h has style problems, please review.
-----------------------
./include/rtw_pwrctrl.h
-----------------------
CHECK: Please don't use multiple blank lines
#16: FILE: ./include/rtw_pwrctrl.h:16:
+
+

WARNING: Block comments use * on subsequent lines
#33: FILE: ./include/rtw_pwrctrl.h:33:
+/*
+	BIT[2:0] = HW state

CHECK: line length of 106 exceeds 100 columns
#79: FILE: ./include/rtw_pwrctrl.h:79:
+#define	RT_RF_PS_LEVEL_ALWAYS_ASPM	BIT(6)	/*  Always enable ASPM and Clock Req in initialization. */

CHECK: line length of 130 exceeds 100 columns
#80: FILE: ./include/rtw_pwrctrl.h:80:
+#define	RT_RF_LPS_DISALBE_2R			BIT(30)	/*  When LPS is on, disable 2R if no packet is received or transmitted. */

CHECK: Macro argument 'ppsc' may be better as '(ppsc)' to avoid precedence issues
#83: FILE: ./include/rtw_pwrctrl.h:83:
+#define	RT_IN_PS_LEVEL(ppsc, _PS_FLAG)		((ppsc->cur_ps_level & _PS_FLAG) ? true : false)

CHECK: Macro argument '_PS_FLAG' may be better as '(_PS_FLAG)' to avoid precedence issues
#83: FILE: ./include/rtw_pwrctrl.h:83:
+#define	RT_IN_PS_LEVEL(ppsc, _PS_FLAG)		((ppsc->cur_ps_level & _PS_FLAG) ? true : false)

CHECK: Macro argument 'ppsc' may be better as '(ppsc)' to avoid precedence issues
#84: FILE: ./include/rtw_pwrctrl.h:84:
+#define	RT_CLEAR_PS_LEVEL(ppsc, _PS_FLAG)	(ppsc->cur_ps_level &= (~(_PS_FLAG)))

CHECK: Macro argument 'ppsc' may be better as '(ppsc)' to avoid precedence issues
#85: FILE: ./include/rtw_pwrctrl.h:85:
+#define	RT_SET_PS_LEVEL(ppsc, _PS_FLAG)		(ppsc->cur_ps_level |= _PS_FLAG)

CHECK: line length of 104 exceeds 100 columns
#89: FILE: ./include/rtw_pwrctrl.h:89:
+#define	RT_PCI_ASPM_OSC_ENABLE		BIT0 /*  PCI ASPM controlled by OS according to ACPI Spec 5.0 */

CHECK: line length of 114 exceeds 100 columns
#90: FILE: ./include/rtw_pwrctrl.h:90:
+#define	RT_PCI_ASPM_OSC_DISABLE		BIT1 /*  PCI ASPM controlled by driver or BIOS, i.e., force enable ASPM */

CHECK: struct mutex definition without comment
#121: FILE: ./include/rtw_pwrctrl.h:121:
+	struct mutex lock;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#122: FILE: ./include/rtw_pwrctrl.h:122:
+	volatile u8 rpwm; /*  requested power state for fw */

CHECK: line length of 117 exceeds 100 columns
#123: FILE: ./include/rtw_pwrctrl.h:123:
+	volatile u8 cpwm; /*  fw current power state. updated when 1. read from HCPWM 2. driver lowers power level */

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: ./include/rtw_pwrctrl.h:123:
+	volatile u8 cpwm; /*  fw current power state. updated when 1. read from HCPWM 2. driver lowers power level */

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#124: FILE: ./include/rtw_pwrctrl.h:124:
+	volatile u8 tog; /*  toggling */

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#125: FILE: ./include/rtw_pwrctrl.h:125:
+	volatile u8 cpwm_tog; /*  toggling */

CHECK: line length of 101 exceeds 100 columns
#153: FILE: ./include/rtw_pwrctrl.h:153:
+	u8 ips_mode_req; /*  used to accept the mode setting request, will update to ipsmode later */

CHECK: Please don't use multiple blank lines
#176: FILE: ./include/rtw_pwrctrl.h:176:
+
+

CHECK: Avoid CamelCase: <bAutoResume>
#180: FILE: ./include/rtw_pwrctrl.h:180:
+	u8 bAutoResume;

CHECK: Avoid CamelCase: <bSupportRemoteWakeup>
#183: FILE: ./include/rtw_pwrctrl.h:183:
+	u8 bSupportRemoteWakeup;

CHECK: Avoid CamelCase: <bHWPowerdown>
#198: FILE: ./include/rtw_pwrctrl.h:198:
+	u8 bHWPowerdown; /* power down mode selection. 0:radio off, 1:power down */

CHECK: line length of 119 exceeds 100 columns
#199: FILE: ./include/rtw_pwrctrl.h:199:
+	u8 bHWPwrPindetect; /* come from registrypriv.hwpwrp_detect. enable power down function. 0:disable, 1:enable */

CHECK: Avoid CamelCase: <bHWPwrPindetect>
#199: FILE: ./include/rtw_pwrctrl.h:199:
+	u8 bHWPwrPindetect; /* come from registrypriv.hwpwrp_detect. enable power down function. 0:disable, 1:enable */

WARNING: Single statement macros should not use a do {} while (0) loop
#210: FILE: ./include/rtw_pwrctrl.h:210:
+#define _rtw_set_pwr_state_check_timer(pwrctl, ms) \
+	do { \
+		_set_timer(&(pwrctl)->pwr_state_check_timer, (ms)); \
+	} while (0)

CHECK: extern prototypes should be avoided in .h files
#215: FILE: ./include/rtw_pwrctrl.h:215:
+extern void rtw_init_pwrctrl_priv(struct adapter *adapter);

CHECK: extern prototypes should be avoided in .h files
#216: FILE: ./include/rtw_pwrctrl.h:216:
+extern void rtw_free_pwrctrl_priv(struct adapter *adapter);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#218: FILE: ./include/rtw_pwrctrl.h:218:
+s32 rtw_register_task_alive(struct adapter *, u32 task);

WARNING: function definition argument 'struct adapter *' should also have an identifier name
#219: FILE: ./include/rtw_pwrctrl.h:219:
+void rtw_unregister_task_alive(struct adapter *, u32 task);

CHECK: extern prototypes should be avoided in .h files
#220: FILE: ./include/rtw_pwrctrl.h:220:
+extern s32 rtw_register_tx_alive(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#221: FILE: ./include/rtw_pwrctrl.h:221:
+extern void rtw_unregister_tx_alive(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#222: FILE: ./include/rtw_pwrctrl.h:222:
+extern s32 rtw_register_cmd_alive(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#223: FILE: ./include/rtw_pwrctrl.h:223:
+extern void rtw_unregister_cmd_alive(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#224: FILE: ./include/rtw_pwrctrl.h:224:
+extern void cpwm_int_hdl(struct adapter *padapter, struct reportpwrstate_parm *preportpwrstate);

CHECK: extern prototypes should be avoided in .h files
#225: FILE: ./include/rtw_pwrctrl.h:225:
+extern void LPS_Leave_check(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#227: FILE: ./include/rtw_pwrctrl.h:227:
+extern void LeaveAllPowerSaveMode(struct adapter *Adapter);

CHECK: extern prototypes should be avoided in .h files
#228: FILE: ./include/rtw_pwrctrl.h:228:
+extern void LeaveAllPowerSaveModeDirect(struct adapter *Adapter);

CHECK: line length of 106 exceeds 100 columns
#240: FILE: ./include/rtw_pwrctrl.h:240:
+void rtw_set_ps_mode(struct adapter *padapter, u8 ps_mode, u8 smart_ps, u8 bcn_ant_mode, const char *msg);

total: 0 errors, 8 warnings, 29 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_pwrctrl.h has style problems, please review.
-------------------
./include/rtw_qos.h
-------------------
CHECK: Please don't use multiple blank lines
#8: FILE: ./include/rtw_qos.h:8:
+
+

CHECK: Please don't use multiple blank lines
#12: FILE: ./include/rtw_qos.h:12:
+
+

CHECK: Please don't use multiple blank lines
#18: FILE: ./include/rtw_qos.h:18:
+
+

total: 0 errors, 0 warnings, 3 checks, 19 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_qos.h has style problems, please review.
--------------------
./include/rtw_recv.h
--------------------
CHECK: spaces preferred around that '<<' (ctx:VxV)
#15: FILE: ./include/rtw_recv.h:15:
+#define RXFRAME_ALIGN_SZ	(1<<RXFRAME_ALIGN)
                         	  ^

CHECK: Prefer using the BIT macro
#15: FILE: ./include/rtw_recv.h:15:
+#define RXFRAME_ALIGN_SZ	(1<<RXFRAME_ALIGN)

WARNING: Block comments use * on subsequent lines
#42: FILE: ./include/rtw_recv.h:42:
+/*
+	unsigned short	tid0_rxseq;

CHECK: Please don't use multiple blank lines
#61: FILE: ./include/rtw_recv.h:61:
+
+

CHECK: Avoid CamelCase: <RxMIMOEVMdbm>
#74: FILE: ./include/rtw_recv.h:74:
+	u8 RxMIMOEVMdbm[4];		/* per-path's EVM dbm */

WARNING: please, no space before tabs
#78: FILE: ./include/rtw_recv.h:78:
+^Iu16 ^ICfo_short[4];^I^I^I/*  per-path's Cfo_short */$

CHECK: Avoid CamelCase: <Cfo_short>
#78: FILE: ./include/rtw_recv.h:78:
+	u16 	Cfo_short[4];			/*  per-path's Cfo_short */

WARNING: please, no space before tabs
#79: FILE: ./include/rtw_recv.h:79:
+^Iu16 ^ICfo_tail[4];^I^I^I/*  per-path's Cfo_tail */$

CHECK: Avoid CamelCase: <Cfo_tail>
#79: FILE: ./include/rtw_recv.h:79:
+	u16 	Cfo_tail[4];			/*  per-path's Cfo_tail */

CHECK: Avoid CamelCase: <RxPower>
#81: FILE: ./include/rtw_recv.h:81:
+	s8		RxPower; /*  in dBm Translate from PWdB */

CHECK: line length of 172 exceeds 100 columns
#82: FILE: ./include/rtw_recv.h:82:
+	s8		RecvSignalPower;/*  Real power in dBm for this packet, no beautification and aggregation. Keep this raw info to be used for the other procedures. */

CHECK: Avoid CamelCase: <RxPwr>
#86: FILE: ./include/rtw_recv.h:86:
+	s8		RxPwr[4];				/* per-path's pwdb */

CHECK: Avoid CamelCase: <RxSNR>
#87: FILE: ./include/rtw_recv.h:87:
+	u8 RxSNR[4];				/* per-path's SNR */

CHECK: Avoid CamelCase: <btCoexPwrAdjust>
#89: FILE: ./include/rtw_recv.h:89:
+	u8 btCoexPwrAdjust;

CHECK: line length of 107 exceeds 100 columns
#110: FILE: ./include/rtw_recv.h:110:
+	u8 encrypt; /* when 0 indicates no encryption; when non-zero, indicates the encryption algorithm */

CHECK: Avoid CamelCase: <MacIDValidEntry>
#131: FILE: ./include/rtw_recv.h:131:
+	u32 MacIDValidEntry[2];	/*  64 bits present 64 entry. */

WARNING: Block comments use * on subsequent lines
#134: FILE: ./include/rtw_recv.h:134:
+/*
+	u8 signal_qual;

CHECK: Please don't use multiple blank lines
#143: FILE: ./include/rtw_recv.h:143:
+
+

CHECK: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#145: FILE: ./include/rtw_recv.h:145:
+#define SN_LESS(a, b)		(((a - b) & 0x800) != 0)

CHECK: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#145: FILE: ./include/rtw_recv.h:145:
+#define SN_LESS(a, b)		(((a - b) & 0x800) != 0)

CHECK: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#146: FILE: ./include/rtw_recv.h:146:
+#define SN_EQUAL(a, b)	(a == b)

CHECK: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#146: FILE: ./include/rtw_recv.h:146:
+#define SN_EQUAL(a, b)	(a == b)

CHECK: line length of 107 exceeds 100 columns
#167: FILE: ./include/rtw_recv.h:167:
+accesser of recv_priv: rtw_recv_entry(dispatch / passive level); recv_thread(passive) ; returnpkt(dispatch)

WARNING: Block comments use * on subsequent lines
#167: FILE: ./include/rtw_recv.h:167:
+/*
+accesser of recv_priv: rtw_recv_entry(dispatch / passive level); recv_thread(passive) ; returnpkt(dispatch)

CHECK: spinlock_t definition without comment
#173: FILE: ./include/rtw_recv.h:173:
+	spinlock_t	lock;

CHECK: line length of 104 exceeds 100 columns
#208: FILE: ./include/rtw_recv.h:208:
+	s8 rssi;	/* translate_percentage_to_dbm(ptarget_wlan->network.PhyInfo.SignalStrength); */

CHECK: Please don't use multiple blank lines
#215: FILE: ./include/rtw_recv.h:215:
+
+

CHECK: line length of 129 exceeds 100 columns
#223: FILE: ./include/rtw_recv.h:223:
+#define rtw_set_signal_stat_timer(recvpriv) _set_timer(&(recvpriv)->signal_stat_timer, (recvpriv)->signal_stat_sampling_interval)

CHECK: Macro argument reuse 'recvpriv' - possible side-effects?
#223: FILE: ./include/rtw_recv.h:223:
+#define rtw_set_signal_stat_timer(recvpriv) _set_timer(&(recvpriv)->signal_stat_timer, (recvpriv)->signal_stat_sampling_interval)

CHECK: Blank lines aren't necessary after an open brace '{'
#226: FILE: ./include/rtw_recv.h:226:
+struct sta_recv_priv {
+

CHECK: spinlock_t definition without comment
#227: FILE: ./include/rtw_recv.h:227:
+	spinlock_t	lock;

CHECK: Please don't use multiple blank lines
#241: FILE: ./include/rtw_recv.h:241:
+
+

CHECK: spinlock_t definition without comment
#245: FILE: ./include/rtw_recv.h:245:
+	spinlock_t recvbuf_lock;

CHECK: Please don't use multiple blank lines
#264: FILE: ./include/rtw_recv.h:264:
+
+

WARNING: Block comments use * on subsequent lines
#266: FILE: ./include/rtw_recv.h:266:
+/*
+	head  ----->

CHECK: Please don't use multiple blank lines
#274: FILE: ./include/rtw_recv.h:274:
+
+

CHECK: Please don't use multiple blank lines
#301: FILE: ./include/rtw_recv.h:301:
+
+

CHECK: Please don't use multiple blank lines
#309: FILE: ./include/rtw_recv.h:309:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#314: FILE: ./include/rtw_recv.h:314:
+		uint mem[RECVFRAME_HDR_ALIGN>>2];
 		                            ^

CHECK: line length of 131 exceeds 100 columns
#329: FILE: ./include/rtw_recv.h:329:
+extern union recv_frame *_rtw_alloc_recvframe(struct __queue *pfree_recv_queue);  /* get a free recv_frame from pfree_recv_queue */

CHECK: extern prototypes should be avoided in .h files
#329: FILE: ./include/rtw_recv.h:329:
+extern union recv_frame *_rtw_alloc_recvframe(struct __queue *pfree_recv_queue);  /* get a free recv_frame from pfree_recv_queue */

CHECK: line length of 130 exceeds 100 columns
#330: FILE: ./include/rtw_recv.h:330:
+extern union recv_frame *rtw_alloc_recvframe(struct __queue *pfree_recv_queue);  /* get a free recv_frame from pfree_recv_queue */

CHECK: extern prototypes should be avoided in .h files
#330: FILE: ./include/rtw_recv.h:330:
+extern union recv_frame *rtw_alloc_recvframe(struct __queue *pfree_recv_queue);  /* get a free recv_frame from pfree_recv_queue */

CHECK: extern prototypes should be avoided in .h files
#331: FILE: ./include/rtw_recv.h:331:
+extern int	 rtw_free_recvframe(union recv_frame *precvframe, struct __queue *pfree_recv_queue);

CHECK: extern prototypes should be avoided in .h files
#333: FILE: ./include/rtw_recv.h:333:
+extern int _rtw_enqueue_recvframe(union recv_frame *precvframe, struct __queue *queue);

CHECK: extern prototypes should be avoided in .h files
#334: FILE: ./include/rtw_recv.h:334:
+extern int rtw_enqueue_recvframe(union recv_frame *precvframe, struct __queue *queue);

CHECK: line length of 101 exceeds 100 columns
#336: FILE: ./include/rtw_recv.h:336:
+extern void rtw_free_recvframe_queue(struct __queue *pframequeue,  struct __queue *pfree_recv_queue);

CHECK: extern prototypes should be avoided in .h files
#336: FILE: ./include/rtw_recv.h:336:
+extern void rtw_free_recvframe_queue(struct __queue *pframequeue,  struct __queue *pfree_recv_queue);

CHECK: Comparison to NULL could be written "!precvframe"
#348: FILE: ./include/rtw_recv.h:348:
+	if (precvframe == NULL)

CHECK: line length of 113 exceeds 100 columns
#358: FILE: ./include/rtw_recv.h:358:
+	/* used for extract sz bytes from rx_data, update rx_data and return the updated rx_data to the caller */

CHECK: Please don't use multiple blank lines
#360: FILE: ./include/rtw_recv.h:360:
+
+

CHECK: Comparison to NULL could be written "!precvframe"
#361: FILE: ./include/rtw_recv.h:361:
+	if (precvframe == NULL)

CHECK: Please don't use multiple blank lines
#364: FILE: ./include/rtw_recv.h:364:
+
+

CHECK: Blank lines aren't necessary before a close brace '}'
#376: FILE: ./include/rtw_recv.h:376:
+
+}

CHECK: line length of 119 exceeds 100 columns
#382: FILE: ./include/rtw_recv.h:382:
+	/* used for append sz bytes from ptr to rx_tail, update rx_tail and return the updated rx_tail to the caller */

CHECK: Comparison to NULL could be written "!precvframe"
#386: FILE: ./include/rtw_recv.h:386:
+	if (precvframe == NULL)

CHECK: Blank lines aren't necessary before a close brace '}'
#402: FILE: ./include/rtw_recv.h:402:
+
+}

CHECK: Please don't use multiple blank lines
#404: FILE: ./include/rtw_recv.h:404:
+
+

CHECK: line length of 110 exceeds 100 columns
#410: FILE: ./include/rtw_recv.h:410:
+	/* used for extract sz bytes from rx_end, update rx_end and return the updated rx_end to the caller */

CHECK: Comparison to NULL could be written "!precvframe"
#413: FILE: ./include/rtw_recv.h:413:
+	if (precvframe == NULL)

CHECK: Blank lines aren't necessary before a close brace '}'
#427: FILE: ./include/rtw_recv.h:427:
+
+}

CHECK: Please don't use multiple blank lines
#434: FILE: ./include/rtw_recv.h:434:
+
+

CHECK: Avoid CamelCase: <SignalStrengthIndex>
#435: FILE: ./include/rtw_recv.h:435:
+static inline s32 translate_percentage_to_dbm(u32 SignalStrengthIndex)

CHECK: Avoid CamelCase: <SignalPower>
#437: FILE: ./include/rtw_recv.h:437:
+	s32	SignalPower; /*  in dBm. */

CHECK: Please don't use multiple blank lines
#446: FILE: ./include/rtw_recv.h:446:
+
+

CHECK: extern prototypes should be avoided in .h files
#449: FILE: ./include/rtw_recv.h:449:
+extern void _rtw_init_sta_recv_priv(struct sta_recv_priv *psta_recvpriv);

CHECK: extern prototypes should be avoided in .h files
#451: FILE: ./include/rtw_recv.h:451:
+extern void  mgt_dispatcher(struct adapter *padapter, union recv_frame *precv_frame);

total: 0 errors, 6 warnings, 61 checks, 453 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_recv.h has style problems, please review.
------------------
./include/rtw_rf.h
------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/rtw_rf.h:10:
+
+

CHECK: Avoid CamelCase: <cESS>
#50: FILE: ./include/rtw_rf.h:50:
+	cESS			= 0x0001,

CHECK: Avoid CamelCase: <cPollable>
#52: FILE: ./include/rtw_rf.h:52:
+	cPollable		= 0x0004,

CHECK: Avoid CamelCase: <cPollReq>
#53: FILE: ./include/rtw_rf.h:53:
+	cPollReq		= 0x0008,

CHECK: Avoid CamelCase: <cPrivacy>
#54: FILE: ./include/rtw_rf.h:54:
+	cPrivacy		= 0x0010,

CHECK: Avoid CamelCase: <cPBCC>
#56: FILE: ./include/rtw_rf.h:56:
+	cPBCC			= 0x0040,

CHECK: Avoid CamelCase: <cChannelAgility>
#57: FILE: ./include/rtw_rf.h:57:
+	cChannelAgility		= 0x0080,

CHECK: Avoid CamelCase: <cSpectrumMgnt>
#58: FILE: ./include/rtw_rf.h:58:
+	cSpectrumMgnt		= 0x0100,

CHECK: Avoid CamelCase: <cQos>
#59: FILE: ./include/rtw_rf.h:59:
+	cQos			= 0x0200,	/*  For HCCA, use with CF-Pollable and CF-PollReq */

CHECK: Avoid CamelCase: <cAPSD>
#61: FILE: ./include/rtw_rf.h:61:
+	cAPSD			= 0x0800,

CHECK: Avoid CamelCase: <cRM>
#62: FILE: ./include/rtw_rf.h:62:
+	cRM			= 0x1000,	/*  RRM (Radio Request Measurement) */

CHECK: Avoid CamelCase: <cDSSS_OFDM>
#63: FILE: ./include/rtw_rf.h:63:
+	cDSSS_OFDM		= 0x2000,

CHECK: Avoid CamelCase: <cDelayedBA>
#64: FILE: ./include/rtw_rf.h:64:
+	cDelayedBA		= 0x4000,

CHECK: Avoid CamelCase: <cImmediateBA>
#65: FILE: ./include/rtw_rf.h:65:
+	cImmediateBA		= 0x8000,

total: 0 errors, 0 warnings, 14 checks, 100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_rf.h has style problems, please review.
------------------------
./include/rtw_security.h
------------------------
CHECK: Macro argument reuse 'alg' - possible side-effects?
#21: FILE: ./include/rtw_security.h:21:
+#define is_wep_enc(alg) (((alg) == _WEP40_) || ((alg) == _WEP104_))

CHECK: Please don't use multiple blank lines
#37: FILE: ./include/rtw_security.h:37:
+
+

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWPANone>
#39: FILE: ./include/rtw_security.h:39:
+#define Ndis802_11AuthModeWPA2 (Ndis802_11AuthModeWPANone + 1)

CHECK: Blank lines aren't necessary after an open brace '{'
#47: FILE: ./include/rtw_security.h:47:
+union pn48	{
+

CHECK: Please don't use multiple blank lines
#82: FILE: ./include/rtw_security.h:82:
+
+

CHECK: Avoid CamelCase: <SsidBuf>
#87: FILE: ./include/rtw_security.h:87:
+	u8				SsidBuf[33];

CHECK: Please don't use multiple blank lines
#92: FILE: ./include/rtw_security.h:92:
+
+

CHECK: line length of 103 exceeds 100 columns
#94: FILE: ./include/rtw_security.h:94:
+	u32   dot11AuthAlgrthm;		/*  802.11 auth, could be open, shared, 8021x and authswitch */

CHECK: line length of 115 exceeds 100 columns
#98: FILE: ./include/rtw_security.h:98:
+	u32   dot11PrivacyKeyIndex;	/*  this is only valid for legendary wep, 0~3 for key id. (tx key index) */

CHECK: line length of 106 exceeds 100 columns
#105: FILE: ./include/rtw_security.h:105:
+	union Keytype	dot118021XGrpKey[BIP_MAX_KEYID + 1];	/*  802.1x Group Key, for inx0 and inx1 */

CHECK: Avoid CamelCase: <dot11Grptxpn>
#108: FILE: ./include/rtw_security.h:108:
+	union pn48		dot11Grptxpn;			/*  PN48 used for Grp Key xmit. */

CHECK: Avoid CamelCase: <dot11Grprxpn>
#109: FILE: ./include/rtw_security.h:109:
+	union pn48		dot11Grprxpn;			/*  PN48 used for Grp Key recv. */

CHECK: line length of 117 exceeds 100 columns
#110: FILE: ./include/rtw_security.h:110:
+	u32 dot11wBIPKeyid;						/*  key id used for BIP Key (tx key index) */

CHECK: line length of 101 exceeds 100 columns
#111: FILE: ./include/rtw_security.h:111:
+	union Keytype	dot11wBIPKey[BIP_MAX_KEYID + 1];	/*  BIP Key, for index4 and index5 */

CHECK: Avoid CamelCase: <dot11wBIPtxpn>
#112: FILE: ./include/rtw_security.h:112:
+	union pn48		dot11wBIPtxpn;			/*  PN48 used for Grp Key xmit. */

CHECK: Avoid CamelCase: <dot11wBIPrxpn>
#113: FILE: ./include/rtw_security.h:113:
+	union pn48		dot11wBIPrxpn;			/*  PN48 used for Grp Key recv. */

CHECK: line length of 113 exceeds 100 columns
#139: FILE: ./include/rtw_security.h:139:
+	s32	hw_decrypted;/* if the rx packets is hw_decrypted ==false, it means the hw has not been ready. */

CHECK: Please don't use multiple blank lines
#141: FILE: ./include/rtw_security.h:141:
+
+

CHECK: Please don't use multiple blank lines
#156: FILE: ./include/rtw_security.h:156:
+
+

CHECK: line length of 140 exceeds 100 columns
#164: FILE: ./include/rtw_security.h:164:
+	struct rt_pmkid_list		PMKIDList[NUM_PMKID_CACHE];	/*  Renamed from PreAuthKey[NUM_PRE_AUTH_KEY]. Annie, 2006-10-13. */

CHECK: Avoid CamelCase: <PMKIDIndex>
#165: FILE: ./include/rtw_security.h:165:
+	u8		PMKIDIndex;

CHECK: Avoid CamelCase: <bWepDefaultKeyIdxSet>
#167: FILE: ./include/rtw_security.h:167:
+	u8 bWepDefaultKeyIdxSet;

CHECK: Macro argument reuse 'psecuritypriv' - possible side-effects?
#171: FILE: ./include/rtw_security.h:171:
+#define GET_ENCRY_ALGO(psecuritypriv, psta, encry_algo, bmcst)\
+do {\
+	switch (psecuritypriv->dot11AuthAlgrthm) {\
+	case dot11AuthAlgrthm_Open:\
+	case dot11AuthAlgrthm_Shared:\
+	case dot11AuthAlgrthm_Auto:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	case dot11AuthAlgrthm_8021X:\
+		if (bmcst)\
+			encry_algo = (u8)psecuritypriv->dot118021XGrpPrivacy;\
+		else\
+			encry_algo = (u8)psta->dot118021XPrivacy;\
+		break;\
+	case dot11AuthAlgrthm_WAPI:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	} \
+} while (0)

CHECK: Macro argument 'psecuritypriv' may be better as '(psecuritypriv)' to avoid precedence issues
#171: FILE: ./include/rtw_security.h:171:
+#define GET_ENCRY_ALGO(psecuritypriv, psta, encry_algo, bmcst)\
+do {\
+	switch (psecuritypriv->dot11AuthAlgrthm) {\
+	case dot11AuthAlgrthm_Open:\
+	case dot11AuthAlgrthm_Shared:\
+	case dot11AuthAlgrthm_Auto:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	case dot11AuthAlgrthm_8021X:\
+		if (bmcst)\
+			encry_algo = (u8)psecuritypriv->dot118021XGrpPrivacy;\
+		else\
+			encry_algo = (u8)psta->dot118021XPrivacy;\
+		break;\
+	case dot11AuthAlgrthm_WAPI:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	} \
+} while (0)

CHECK: Macro argument 'psta' may be better as '(psta)' to avoid precedence issues
#171: FILE: ./include/rtw_security.h:171:
+#define GET_ENCRY_ALGO(psecuritypriv, psta, encry_algo, bmcst)\
+do {\
+	switch (psecuritypriv->dot11AuthAlgrthm) {\
+	case dot11AuthAlgrthm_Open:\
+	case dot11AuthAlgrthm_Shared:\
+	case dot11AuthAlgrthm_Auto:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	case dot11AuthAlgrthm_8021X:\
+		if (bmcst)\
+			encry_algo = (u8)psecuritypriv->dot118021XGrpPrivacy;\
+		else\
+			encry_algo = (u8)psta->dot118021XPrivacy;\
+		break;\
+	case dot11AuthAlgrthm_WAPI:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	} \
+} while (0)

CHECK: Macro argument reuse 'encry_algo' - possible side-effects?
#171: FILE: ./include/rtw_security.h:171:
+#define GET_ENCRY_ALGO(psecuritypriv, psta, encry_algo, bmcst)\
+do {\
+	switch (psecuritypriv->dot11AuthAlgrthm) {\
+	case dot11AuthAlgrthm_Open:\
+	case dot11AuthAlgrthm_Shared:\
+	case dot11AuthAlgrthm_Auto:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	case dot11AuthAlgrthm_8021X:\
+		if (bmcst)\
+			encry_algo = (u8)psecuritypriv->dot118021XGrpPrivacy;\
+		else\
+			encry_algo = (u8)psta->dot118021XPrivacy;\
+		break;\
+	case dot11AuthAlgrthm_WAPI:\
+		encry_algo = (u8)psecuritypriv->dot11PrivacyAlgrthm;\
+		break;\
+	} \
+} while (0)

CHECK: Macro argument reuse 'iv_len' - possible side-effects?
#191: FILE: ./include/rtw_security.h:191:
+#define SET_ICE_IV_LEN(iv_len, icv_len, encrypt)\
+do {\
+	switch (encrypt) {\
+	case _WEP40_:\
+	case _WEP104_:\
+		iv_len = 4;\
+		icv_len = 4;\
+		break;\
+	case _TKIP_:\
+		iv_len = 8;\
+		icv_len = 4;\
+		break;\
+	case _AES_:\
+		iv_len = 8;\
+		icv_len = 8;\
+		break;\
+	case _SMS4_:\
+		iv_len = 18;\
+		icv_len = 16;\
+		break;\
+	default:\
+		iv_len = 0;\
+		icv_len = 0;\
+		break;\
+	} \
+} while (0)

CHECK: Macro argument reuse 'icv_len' - possible side-effects?
#191: FILE: ./include/rtw_security.h:191:
+#define SET_ICE_IV_LEN(iv_len, icv_len, encrypt)\
+do {\
+	switch (encrypt) {\
+	case _WEP40_:\
+	case _WEP104_:\
+		iv_len = 4;\
+		icv_len = 4;\
+		break;\
+	case _TKIP_:\
+		iv_len = 8;\
+		icv_len = 4;\
+		break;\
+	case _AES_:\
+		iv_len = 8;\
+		icv_len = 8;\
+		break;\
+	case _SMS4_:\
+		iv_len = 18;\
+		icv_len = 16;\
+		break;\
+	default:\
+		iv_len = 0;\
+		icv_len = 0;\
+		break;\
+	} \
+} while (0)

CHECK: Please don't use multiple blank lines
#218: FILE: ./include/rtw_security.h:218:
+
+

CHECK: Macro argument reuse 'iv' - possible side-effects?
#219: FILE: ./include/rtw_security.h:219:
+#define GET_TKIP_PN(iv, dot11txpn)\
+do {\
+	dot11txpn._byte_.TSC0 = iv[2];\
+	dot11txpn._byte_.TSC1 = iv[0];\
+	dot11txpn._byte_.TSC2 = iv[4];\
+	dot11txpn._byte_.TSC3 = iv[5];\
+	dot11txpn._byte_.TSC4 = iv[6];\
+	dot11txpn._byte_.TSC5 = iv[7];\
+} while (0)

CHECK: Macro argument reuse 'dot11txpn' - possible side-effects?
#219: FILE: ./include/rtw_security.h:219:
+#define GET_TKIP_PN(iv, dot11txpn)\
+do {\
+	dot11txpn._byte_.TSC0 = iv[2];\
+	dot11txpn._byte_.TSC1 = iv[0];\
+	dot11txpn._byte_.TSC2 = iv[4];\
+	dot11txpn._byte_.TSC3 = iv[5];\
+	dot11txpn._byte_.TSC4 = iv[6];\
+	dot11txpn._byte_.TSC5 = iv[7];\
+} while (0)

CHECK: Please don't use multiple blank lines
#229: FILE: ./include/rtw_security.h:229:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#230: FILE: ./include/rtw_security.h:230:
+#define ROL32(A, n)	(((A) << (n)) | (((A)>>(32-(n)))  & ((1UL << (n)) - 1)))
                    	                     ^

CHECK: spaces preferred around that '-' (ctx:VxV)
#230: FILE: ./include/rtw_security.h:230:
+#define ROL32(A, n)	(((A) << (n)) | (((A)>>(32-(n)))  & ((1UL << (n)) - 1)))
                    	                          ^

CHECK: Macro argument reuse 'A' - possible side-effects?
#230: FILE: ./include/rtw_security.h:230:
+#define ROL32(A, n)	(((A) << (n)) | (((A)>>(32-(n)))  & ((1UL << (n)) - 1)))

CHECK: Macro argument reuse 'n' - possible side-effects?
#230: FILE: ./include/rtw_security.h:230:
+#define ROL32(A, n)	(((A) << (n)) | (((A)>>(32-(n)))  & ((1UL << (n)) - 1)))

CHECK: spaces preferred around that '-' (ctx:VxV)
#231: FILE: ./include/rtw_security.h:231:
+#define ROR32(A, n)	ROL32((A), 32-(n))
                    	             ^

CHECK: Avoid CamelCase: <nBytes>
#249: FILE: ./include/rtw_security.h:249:
+void rtw_secmicappend(struct mic_data *pmicdata, u8 *src, u32 nBytes);

CHECK: Lines should not end with a '('
#252: FILE: ./include/rtw_security.h:252:
+void rtw_seccalctkipmic(

CHECK: Avoid CamelCase: <Miccode>
#257: FILE: ./include/rtw_security.h:257:
+	u8 *Miccode,

total: 0 errors, 0 warnings, 40 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_security.h has style problems, please review.
-----------------------
./include/rtw_version.h
-----------------------
total: 0 errors, 0 warnings, 0 checks, 3 lines checked

./include/rtw_version.h has no obvious style problems and is ready for submission.
-------------------------
./include/rtw_wifi_regd.h
-------------------------
CHECK: Please don't use multiple blank lines
#16: FILE: ./include/rtw_wifi_regd.h:16:
+
+

total: 0 errors, 0 warnings, 1 checks, 17 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_wifi_regd.h has style problems, please review.
--------------------
./include/rtw_xmit.h
--------------------
CHECK: Macro argument reuse 'pattrib_iv' - possible side-effects?
#41: FILE: ./include/rtw_xmit.h:41:
+#define WEP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[3] = ((keyidx & 0x3)<<6);\
+	dot11txpn.val = (dot11txpn.val == 0xffffff) ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument reuse 'dot11txpn' - possible side-effects?
#41: FILE: ./include/rtw_xmit.h:41:
+#define WEP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[3] = ((keyidx & 0x3)<<6);\
+	dot11txpn.val = (dot11txpn.val == 0xffffff) ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument 'keyidx' may be better as '(keyidx)' to avoid precedence issues
#41: FILE: ./include/rtw_xmit.h:41:
+#define WEP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[3] = ((keyidx & 0x3)<<6);\
+	dot11txpn.val = (dot11txpn.val == 0xffffff) ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#46: FILE: ./include/rtw_xmit.h:46:
+	pattrib_iv[3] = ((keyidx & 0x3)<<6);\
 	                               ^

CHECK: Please don't use multiple blank lines
#50: FILE: ./include/rtw_xmit.h:50:
+
+

CHECK: Macro argument reuse 'pattrib_iv' - possible side-effects?
#51: FILE: ./include/rtw_xmit.h:51:
+#define TKIP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[1] = (dot11txpn._byte_.TSC1 | 0x20) & 0x7f;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument reuse 'dot11txpn' - possible side-effects?
#51: FILE: ./include/rtw_xmit.h:51:
+#define TKIP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[1] = (dot11txpn._byte_.TSC1 | 0x20) & 0x7f;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument 'keyidx' may be better as '(keyidx)' to avoid precedence issues
#51: FILE: ./include/rtw_xmit.h:51:
+#define TKIP_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[1] = (dot11txpn._byte_.TSC1 | 0x20) & 0x7f;\
+	pattrib_iv[2] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#56: FILE: ./include/rtw_xmit.h:56:
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
 	                                        ^

CHECK: Macro argument reuse 'pattrib_iv' - possible side-effects?
#64: FILE: ./include/rtw_xmit.h:64:
+#define AES_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = 0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument reuse 'dot11txpn' - possible side-effects?
#64: FILE: ./include/rtw_xmit.h:64:
+#define AES_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = 0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: Macro argument 'keyidx' may be better as '(keyidx)' to avoid precedence issues
#64: FILE: ./include/rtw_xmit.h:64:
+#define AES_IV(pattrib_iv, dot11txpn, keyidx)\
+do {\
+	pattrib_iv[0] = dot11txpn._byte_.TSC0;\
+	pattrib_iv[1] = dot11txpn._byte_.TSC1;\
+	pattrib_iv[2] = 0;\
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
+	pattrib_iv[4] = dot11txpn._byte_.TSC2;\
+	pattrib_iv[5] = dot11txpn._byte_.TSC3;\
+	pattrib_iv[6] = dot11txpn._byte_.TSC4;\
+	pattrib_iv[7] = dot11txpn._byte_.TSC5;\
+	dot11txpn.val = dot11txpn.val == 0xffffffffffffULL ? 0 : (dot11txpn.val + 1);\
+} while (0)

CHECK: spaces preferred around that '<<' (ctx:VxV)
#69: FILE: ./include/rtw_xmit.h:69:
+	pattrib_iv[3] = BIT(5) | ((keyidx & 0x3)<<6);\
 	                                        ^

CHECK: Please don't use multiple blank lines
#77: FILE: ./include/rtw_xmit.h:77:
+
+

CHECK: spaces preferred around that '>>' (ctx:VxV)
#119: FILE: ./include/rtw_xmit.h:119:
+	unsigned int value[TXDESC_SIZE>>2];
 	                              ^

CHECK: line length of 102 exceeds 100 columns
#141: FILE: ./include/rtw_xmit.h:141:
+	u32 pktlen;		/* the original 802.3 pkt raw_data len (not include ether_hdr data) */

CHECK: line length of 111 exceeds 100 columns
#144: FILE: ./include/rtw_xmit.h:144:
+	u8 encrypt;	/* when 0 indicates no encryption; when non-zero, indicates the encryption algorithm */

CHECK: Please don't use multiple blank lines
#225: FILE: ./include/rtw_xmit.h:225:
+
+

CHECK: Please don't use multiple blank lines
#264: FILE: ./include/rtw_xmit.h:264:
+
+

CHECK: Please don't use multiple blank lines
#296: FILE: ./include/rtw_xmit.h:296:
+
+

CHECK: spinlock_t definition without comment
#298: FILE: ./include/rtw_xmit.h:298:
+	spinlock_t	lock;

CHECK: line length of 107 exceeds 100 columns
#300: FILE: ./include/rtw_xmit.h:300:
+	signed int	apsd_setting;	/* When bit mask is on, the associated edca queue supports APSD. */

CHECK: Please don't use multiple blank lines
#302: FILE: ./include/rtw_xmit.h:302:
+
+

CHECK: Please don't use multiple blank lines
#317: FILE: ./include/rtw_xmit.h:317:
+
+

CHECK: Please don't use multiple blank lines
#320: FILE: ./include/rtw_xmit.h:320:
+
+

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#322: FILE: ./include/rtw_xmit.h:322:
+	volatile signed int	head;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#323: FILE: ./include/rtw_xmit.h:323:
+	volatile signed int	tail;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#324: FILE: ./include/rtw_xmit.h:324:
+	volatile signed int	free_sz;	/* in units of 64 bytes */

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#325: FILE: ./include/rtw_xmit.h:325:
+	volatile signed int      free_cmdsz;

WARNING: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#326: FILE: ./include/rtw_xmit.h:326:
+	volatile signed int	 txsz[8];

CHECK: Blank lines aren't necessary after an open brace '{'
#339: FILE: ./include/rtw_xmit.h:339:
+struct	xmit_priv {
+

CHECK: spinlock_t definition without comment
#340: FILE: ./include/rtw_xmit.h:340:
+	spinlock_t	lock;

CHECK: line length of 134 exceeds 100 columns
#391: FILE: ./include/rtw_xmit.h:391:
+	u8 wmm_para_seq[4];/* sequence for wmm ac parameter strength from large to small. it's value is 0->vo, 1->vi, 2->be, 3->bk. */

CHECK: struct mutex definition without comment
#413: FILE: ./include/rtw_xmit.h:413:
+	struct mutex ack_tx_mutex;

CHECK: spinlock_t definition without comment
#416: FILE: ./include/rtw_xmit.h:416:
+	spinlock_t lock_sctx;

CHECK: extern prototypes should be avoided in .h files
#419: FILE: ./include/rtw_xmit.h:419:
+extern struct xmit_frame *__rtw_alloc_cmdxmitframe(struct xmit_priv *pxmitpriv,

CHECK: Alignment should match open parenthesis
#420: FILE: ./include/rtw_xmit.h:420:
+extern struct xmit_frame *__rtw_alloc_cmdxmitframe(struct xmit_priv *pxmitpriv,
+		enum cmdbuf_type buf_type);

CHECK: extern prototypes should be avoided in .h files
#424: FILE: ./include/rtw_xmit.h:424:
+extern struct xmit_buf *rtw_alloc_xmitbuf_ext(struct xmit_priv *pxmitpriv);

CHECK: extern prototypes should be avoided in .h files
#425: FILE: ./include/rtw_xmit.h:425:
+extern s32 rtw_free_xmitbuf_ext(struct xmit_priv *pxmitpriv, struct xmit_buf *pxmitbuf);

CHECK: extern prototypes should be avoided in .h files
#427: FILE: ./include/rtw_xmit.h:427:
+extern struct xmit_buf *rtw_alloc_xmitbuf(struct xmit_priv *pxmitpriv);

CHECK: extern prototypes should be avoided in .h files
#428: FILE: ./include/rtw_xmit.h:428:
+extern s32 rtw_free_xmitbuf(struct xmit_priv *pxmitpriv, struct xmit_buf *pxmitbuf);

CHECK: extern prototypes should be avoided in .h files
#431: FILE: ./include/rtw_xmit.h:431:
+extern void rtw_update_protection(struct adapter *padapter, u8 *ie, uint ie_len);

CHECK: extern prototypes should be avoided in .h files
#432: FILE: ./include/rtw_xmit.h:432:
+extern s32 rtw_make_wlanhdr(struct adapter *padapter, u8 *hdr, struct pkt_attrib *pattrib);

CHECK: extern prototypes should be avoided in .h files
#433: FILE: ./include/rtw_xmit.h:433:
+extern s32 rtw_put_snap(u8 *data, u16 h_proto);

CHECK: extern prototypes should be avoided in .h files
#435: FILE: ./include/rtw_xmit.h:435:
+extern struct xmit_frame *rtw_alloc_xmitframe(struct xmit_priv *pxmitpriv);

CHECK: extern prototypes should be avoided in .h files
#438: FILE: ./include/rtw_xmit.h:438:
+extern s32 rtw_free_xmitframe(struct xmit_priv *pxmitpriv, struct xmit_frame *pxmitframe);

CHECK: extern prototypes should be avoided in .h files
#439: FILE: ./include/rtw_xmit.h:439:
+extern void rtw_free_xmitframe_queue(struct xmit_priv *pxmitpriv, struct __queue *pframequeue);

CHECK: line length of 109 exceeds 100 columns
#440: FILE: ./include/rtw_xmit.h:440:
+struct tx_servq *rtw_get_sta_pending(struct adapter *padapter, struct sta_info *psta, signed int up, u8 *ac);

CHECK: extern prototypes should be avoided in .h files
#441: FILE: ./include/rtw_xmit.h:441:
+extern s32 rtw_xmitframe_enqueue(struct adapter *padapter, struct xmit_frame *pxmitframe);

CHECK: extern prototypes should be avoided in .h files
#443: FILE: ./include/rtw_xmit.h:443:
+extern s32 rtw_xmit_classifier(struct adapter *padapter, struct xmit_frame *pxmitframe);

CHECK: extern prototypes should be avoided in .h files
#444: FILE: ./include/rtw_xmit.h:444:
+extern u32 rtw_calculate_wlan_pkt_size_by_attribue(struct pkt_attrib *pattrib);

CHECK: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#445: FILE: ./include/rtw_xmit.h:445:
+#define rtw_wlan_pkt_size(f) rtw_calculate_wlan_pkt_size_by_attribue(&f->attrib)

CHECK: line length of 112 exceeds 100 columns
#446: FILE: ./include/rtw_xmit.h:446:
+extern s32 rtw_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe);

CHECK: extern prototypes should be avoided in .h files
#446: FILE: ./include/rtw_xmit.h:446:
+extern s32 rtw_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe);

CHECK: line length of 117 exceeds 100 columns
#447: FILE: ./include/rtw_xmit.h:447:
+extern s32 rtw_mgmt_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe);

CHECK: extern prototypes should be avoided in .h files
#447: FILE: ./include/rtw_xmit.h:447:
+extern s32 rtw_mgmt_xmitframe_coalesce(struct adapter *padapter, struct sk_buff *pkt, struct xmit_frame *pxmitframe);

CHECK: Please don't use multiple blank lines
#451: FILE: ./include/rtw_xmit.h:451:
+
+

CHECK: Please don't use multiple blank lines
#455: FILE: ./include/rtw_xmit.h:455:
+
+

CHECK: Please don't use multiple blank lines
#459: FILE: ./include/rtw_xmit.h:459:
+
+

CHECK: Please don't use multiple blank lines
#463: FILE: ./include/rtw_xmit.h:463:
+
+

CHECK: line length of 103 exceeds 100 columns
#467: FILE: ./include/rtw_xmit.h:467:
+signed int xmitframe_enqueue_for_sleeping_sta(struct adapter *padapter, struct xmit_frame *pxmitframe);

total: 0 errors, 5 warnings, 56 checks, 491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/rtw_xmit.h has style problems, please review.
--------------------
./include/sdio_hal.h
--------------------
total: 0 errors, 0 warnings, 0 checks, 16 lines checked

./include/sdio_hal.h has no obvious style problems and is ready for submission.
--------------------
./include/sdio_ops.h
--------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/sdio_ops.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#13: FILE: ./include/sdio_ops.h:13:
+extern void sdio_set_intf_ops(struct adapter *padapter, struct _io_ops *pops);

CHECK: extern prototypes should be avoided in .h files
#17: FILE: ./include/sdio_ops.h:17:
+extern u8 SdioLocalCmd52Read1Byte(struct adapter *padapter, u32 addr);

CHECK: extern prototypes should be avoided in .h files
#18: FILE: ./include/sdio_ops.h:18:
+extern void SdioLocalCmd52Write1Byte(struct adapter *padapter, u32 addr, u8 v);

CHECK: extern prototypes should be avoided in .h files
#19: FILE: ./include/sdio_ops.h:19:
+extern s32 sdio_local_read(struct adapter *padapter, u32 addr, u32 cnt, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#20: FILE: ./include/sdio_ops.h:20:
+extern s32 sdio_local_write(struct adapter *padapter, u32 addr, u32 cnt, u8 *pbuf);

CHECK: extern prototypes should be avoided in .h files
#25: FILE: ./include/sdio_ops.h:25:
+extern void sd_int_hdl(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#26: FILE: ./include/sdio_ops.h:26:
+extern u8 CheckIPSStatus(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#28: FILE: ./include/sdio_ops.h:28:
+extern void InitInterrupt8723BSdio(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#29: FILE: ./include/sdio_ops.h:29:
+extern void InitSysInterrupt8723BSdio(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#30: FILE: ./include/sdio_ops.h:30:
+extern void EnableInterrupt8723BSdio(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#31: FILE: ./include/sdio_ops.h:31:
+extern void DisableInterrupt8723BSdio(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#32: FILE: ./include/sdio_ops.h:32:
+extern u8 HalQueryTxBufferStatus8723BSdio(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#33: FILE: ./include/sdio_ops.h:33:
+extern void HalQueryTxOQTBufferStatus8723BSdio(struct adapter *padapter);

total: 0 errors, 0 warnings, 14 checks, 34 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/sdio_ops.h has style problems, please review.
--------------------------
./include/sdio_ops_linux.h
--------------------------
CHECK: Please don't use multiple blank lines
#28: FILE: ./include/sdio_ops_linux.h:28:
+
+

total: 0 errors, 0 warnings, 1 checks, 30 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/sdio_ops_linux.h has style problems, please review.
--------------------
./include/sta_info.h
--------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/sta_info.h:10:
+
+

CHECK: Please don't use multiple blank lines
#15: FILE: ./include/sta_info.h:15:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#43: FILE: ./include/sta_info.h:43:
+struct	stainfo_stats	{
+

CHECK: Blank lines aren't necessary after an open brace '{'
#71: FILE: ./include/sta_info.h:71:
+struct sta_info {
+

CHECK: spinlock_t definition without comment
#72: FILE: ./include/sta_info.h:72:
+	spinlock_t	lock;

CHECK: line length of 103 exceeds 100 columns
#95: FILE: ./include/sta_info.h:95:
+	union pn48		dot11wtxpn;			/*  PN48 used for Unicast mgmt xmit. */

CHECK: Please don't use multiple blank lines
#98: FILE: ./include/sta_info.h:98:
+
+

WARNING: please, no space before tabs
#125: FILE: ./include/sta_info.h:125:
+^I/* unsigned char ^Iampdu_txen_bitmap; */$

CHECK: Please don't use multiple blank lines
#128: FILE: ./include/sta_info.h:128:
+
+

CHECK: line length of 107 exceeds 100 columns
#193: FILE: ./include/sta_info.h:193:
+	/*  Please be care, dont declare too much structure here. It will cost memory * STA support num. */

CHECK: Avoid CamelCase: <bValid>
#199: FILE: ./include/sta_info.h:199:
+	u8 bValid;				/*  record the sta status link or not? */

CHECK: Avoid CamelCase: <IOTPeer>
#200: FILE: ./include/sta_info.h:200:
+	u8 IOTPeer;			/*  Enum value.	HT_IOT_PEER_E */

CHECK: Macro argument reuse 'sta' - possible side-effects?
#220: FILE: ./include/sta_info.h:220:
+#define sta_rx_pkts(sta) \
+	(sta->sta_stats.rx_mgnt_pkts \
+	+ sta->sta_stats.rx_ctrl_pkts \
+	+ sta->sta_stats.rx_data_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#220: FILE: ./include/sta_info.h:220:
+#define sta_rx_pkts(sta) \
+	(sta->sta_stats.rx_mgnt_pkts \
+	+ sta->sta_stats.rx_ctrl_pkts \
+	+ sta->sta_stats.rx_data_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#225: FILE: ./include/sta_info.h:225:
+#define sta_rx_data_pkts(sta) \
+	(sta->sta_stats.rx_data_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#228: FILE: ./include/sta_info.h:228:
+#define sta_last_rx_data_pkts(sta) \
+	(sta->sta_stats.last_rx_data_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#231: FILE: ./include/sta_info.h:231:
+#define sta_rx_beacon_pkts(sta) \
+	(sta->sta_stats.rx_beacon_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#234: FILE: ./include/sta_info.h:234:
+#define sta_last_rx_beacon_pkts(sta) \
+	(sta->sta_stats.last_rx_beacon_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#237: FILE: ./include/sta_info.h:237:
+#define sta_rx_probersp_pkts(sta) \
+	(sta->sta_stats.rx_probersp_pkts)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#240: FILE: ./include/sta_info.h:240:
+#define sta_last_rx_probersp_pkts(sta) \
+	(sta->sta_stats.last_rx_probersp_pkts)

CHECK: Macro argument reuse 'sta' - possible side-effects?
#243: FILE: ./include/sta_info.h:243:
+#define sta_update_last_rx_pkts(sta) \
+	do { \
+		sta->sta_stats.last_rx_mgnt_pkts = sta->sta_stats.rx_mgnt_pkts; \
+		sta->sta_stats.last_rx_beacon_pkts = sta->sta_stats.rx_beacon_pkts; \
+		sta->sta_stats.last_rx_probereq_pkts = sta->sta_stats.rx_probereq_pkts; \
+		sta->sta_stats.last_rx_probersp_pkts = sta->sta_stats.rx_probersp_pkts; \
+		sta->sta_stats.last_rx_probersp_bm_pkts = sta->sta_stats.rx_probersp_bm_pkts; \
+		sta->sta_stats.last_rx_probersp_uo_pkts = sta->sta_stats.rx_probersp_uo_pkts; \
+		sta->sta_stats.last_rx_ctrl_pkts = sta->sta_stats.rx_ctrl_pkts; \
+		sta->sta_stats.last_rx_data_pkts = sta->sta_stats.rx_data_pkts; \
+	} while (0)

CHECK: Macro argument 'sta' may be better as '(sta)' to avoid precedence issues
#243: FILE: ./include/sta_info.h:243:
+#define sta_update_last_rx_pkts(sta) \
+	do { \
+		sta->sta_stats.last_rx_mgnt_pkts = sta->sta_stats.rx_mgnt_pkts; \
+		sta->sta_stats.last_rx_beacon_pkts = sta->sta_stats.rx_beacon_pkts; \
+		sta->sta_stats.last_rx_probereq_pkts = sta->sta_stats.rx_probereq_pkts; \
+		sta->sta_stats.last_rx_probersp_pkts = sta->sta_stats.rx_probersp_pkts; \
+		sta->sta_stats.last_rx_probersp_bm_pkts = sta->sta_stats.rx_probersp_bm_pkts; \
+		sta->sta_stats.last_rx_probersp_uo_pkts = sta->sta_stats.rx_probersp_uo_pkts; \
+		sta->sta_stats.last_rx_ctrl_pkts = sta->sta_stats.rx_ctrl_pkts; \
+		sta->sta_stats.last_rx_data_pkts = sta->sta_stats.rx_data_pkts; \
+	} while (0)

CHECK: Blank lines aren't necessary after an open brace '{'
#258: FILE: ./include/sta_info.h:258:
+struct	sta_priv {
+

CHECK: spinlock_t definition without comment
#263: FILE: ./include/sta_info.h:263:
+	spinlock_t sta_hash_lock;

CHECK: spinlock_t definition without comment
#273: FILE: ./include/sta_info.h:273:
+	spinlock_t asoc_list_lock;

CHECK: spinlock_t definition without comment
#274: FILE: ./include/sta_info.h:274:
+	spinlock_t auth_list_lock;

CHECK: Please don't use multiple blank lines
#296: FILE: ./include/sta_info.h:296:
+
+

CHECK: Please don't use multiple blank lines
#314: FILE: ./include/sta_info.h:314:
+
+

CHECK: extern prototypes should be avoided in .h files
#315: FILE: ./include/sta_info.h:315:
+extern u32 _rtw_init_sta_priv(struct sta_priv *pstapriv);

CHECK: extern prototypes should be avoided in .h files
#316: FILE: ./include/sta_info.h:316:
+extern u32 _rtw_free_sta_priv(struct sta_priv *pstapriv);

CHECK: Macro argument reuse 'offset' - possible side-effects?
#318: FILE: ./include/sta_info.h:318:
+#define stainfo_offset_valid(offset) (offset < NUM_STA && offset >= 0)

CHECK: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#318: FILE: ./include/sta_info.h:318:
+#define stainfo_offset_valid(offset) (offset < NUM_STA && offset >= 0)

CHECK: extern prototypes should be avoided in .h files
#322: FILE: ./include/sta_info.h:322:
+extern struct sta_info *rtw_alloc_stainfo(struct	sta_priv *pstapriv, u8 *hwaddr);

CHECK: extern prototypes should be avoided in .h files
#323: FILE: ./include/sta_info.h:323:
+extern u32 rtw_free_stainfo(struct adapter *padapter, struct sta_info *psta);

CHECK: extern prototypes should be avoided in .h files
#324: FILE: ./include/sta_info.h:324:
+extern void rtw_free_all_stainfo(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#325: FILE: ./include/sta_info.h:325:
+extern struct sta_info *rtw_get_stainfo(struct sta_priv *pstapriv, u8 *hwaddr);

CHECK: extern prototypes should be avoided in .h files
#326: FILE: ./include/sta_info.h:326:
+extern u32 rtw_init_bcmc_stainfo(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#327: FILE: ./include/sta_info.h:327:
+extern struct sta_info *rtw_get_bcmc_stainfo(struct adapter *padapter);

CHECK: extern prototypes should be avoided in .h files
#328: FILE: ./include/sta_info.h:328:
+extern u8 rtw_access_ctrl(struct adapter *padapter, u8 *mac_addr);

total: 0 errors, 1 warnings, 38 checks, 330 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/sta_info.h has style problems, please review.
----------------
./include/wifi.h
----------------
CHECK: line length of 102 exceeds 100 columns
#16: FILE: ./include/wifi.h:16:
+/*  This test verifies the WLAN NIC can update the NAV through sending the CTS with large duration. */

CHECK: spaces preferred around that '|' (ctx:VxV)
#23: FILE: ./include/wifi.h:23:
+	WIFI_QOS_DATA_TYPE	= (BIT(7)|BIT(3)),	/*  QoS Data */
 	                  	         ^

CHECK: Blank lines aren't necessary after an open brace '{'
#27: FILE: ./include/wifi.h:27:
+enum {
+

WARNING: please, no spaces at the start of a line
#29: FILE: ./include/wifi.h:29:
+    WIFI_ASSOCREQ       = (0 | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#30: FILE: ./include/wifi.h:30:
+    WIFI_ASSOCRSP       = (BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#31: FILE: ./include/wifi.h:31:
+    WIFI_REASSOCREQ     = (BIT(5) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#32: FILE: ./include/wifi.h:32:
+    WIFI_REASSOCRSP     = (BIT(5) | BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#33: FILE: ./include/wifi.h:33:
+    WIFI_PROBEREQ       = (BIT(6) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#34: FILE: ./include/wifi.h:34:
+    WIFI_PROBERSP       = (BIT(6) | BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#35: FILE: ./include/wifi.h:35:
+    WIFI_BEACON         = (BIT(7) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#36: FILE: ./include/wifi.h:36:
+    WIFI_ATIM           = (BIT(7) | BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#37: FILE: ./include/wifi.h:37:
+    WIFI_DISASSOC       = (BIT(7) | BIT(5) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#38: FILE: ./include/wifi.h:38:
+    WIFI_AUTH           = (BIT(7) | BIT(5) | BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#39: FILE: ./include/wifi.h:39:
+    WIFI_DEAUTH         = (BIT(7) | BIT(6) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#40: FILE: ./include/wifi.h:40:
+    WIFI_ACTION         = (BIT(7) | BIT(6) | BIT(4) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#41: FILE: ./include/wifi.h:41:
+    WIFI_ACTION_NOACK = (BIT(7) | BIT(6) | BIT(5) | WIFI_MGT_TYPE),$

WARNING: please, no spaces at the start of a line
#44: FILE: ./include/wifi.h:44:
+    WIFI_NDPA         = (BIT(6) | BIT(4) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#45: FILE: ./include/wifi.h:45:
+    WIFI_PSPOLL         = (BIT(7) | BIT(5) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#46: FILE: ./include/wifi.h:46:
+    WIFI_RTS            = (BIT(7) | BIT(5) | BIT(4) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#47: FILE: ./include/wifi.h:47:
+    WIFI_CTS            = (BIT(7) | BIT(6) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#48: FILE: ./include/wifi.h:48:
+    WIFI_ACK            = (BIT(7) | BIT(6) | BIT(4) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#49: FILE: ./include/wifi.h:49:
+    WIFI_CFEND          = (BIT(7) | BIT(6) | BIT(5) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#50: FILE: ./include/wifi.h:50:
+    WIFI_CFEND_CFACK    = (BIT(7) | BIT(6) | BIT(5) | BIT(4) | WIFI_CTRL_TYPE),$

WARNING: please, no spaces at the start of a line
#53: FILE: ./include/wifi.h:53:
+    WIFI_DATA           = (0 | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#54: FILE: ./include/wifi.h:54:
+    WIFI_DATA_CFACK     = (BIT(4) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#55: FILE: ./include/wifi.h:55:
+    WIFI_DATA_CFPOLL    = (BIT(5) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#56: FILE: ./include/wifi.h:56:
+    WIFI_DATA_CFACKPOLL = (BIT(5) | BIT(4) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#57: FILE: ./include/wifi.h:57:
+    WIFI_DATA_NULL      = (BIT(6) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#58: FILE: ./include/wifi.h:58:
+    WIFI_CF_ACK         = (BIT(6) | BIT(4) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#59: FILE: ./include/wifi.h:59:
+    WIFI_CF_POLL        = (BIT(6) | BIT(5) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#60: FILE: ./include/wifi.h:60:
+    WIFI_CF_ACKPOLL     = (BIT(6) | BIT(5) | BIT(4) | WIFI_DATA_TYPE),$

WARNING: please, no spaces at the start of a line
#61: FILE: ./include/wifi.h:61:
+    WIFI_QOS_DATA_NULL^I= (BIT(6) | WIFI_QOS_DATA_TYPE),$

CHECK: Avoid CamelCase: <GetToDs>
#76: FILE: ./include/wifi.h:76:
+#define GetToDs(pbuf)	(((*(__le16 *)(pbuf)) & cpu_to_le16(_TO_DS_)) != 0)

CHECK: Avoid CamelCase: <GetFrDs>
#81: FILE: ./include/wifi.h:81:
+#define GetFrDs(pbuf)	(((*(__le16 *)(pbuf)) & cpu_to_le16(_FROM_DS_)) != 0)

CHECK: Macro argument reuse 'pframe' - possible side-effects?
#83: FILE: ./include/wifi.h:83:
+#define get_tofr_ds(pframe)	((GetToDs(pframe) << 1) | GetFrDs(pframe))

CHECK: Avoid CamelCase: <SetFrameType>
#126: FILE: ./include/wifi.h:126:
+#define SetFrameType(pbuf, type)	\

CHECK: Macro argument reuse 'pbuf' - possible side-effects?
#126: FILE: ./include/wifi.h:126:
+#define SetFrameType(pbuf, type)	\
+	do {	\
+		*(unsigned short *)(pbuf) &= cpu_to_le16(~(BIT(3) | BIT(2))); \
+		*(unsigned short *)(pbuf) |= cpu_to_le16(type); \
+	} while (0)

CHECK: Macro argument reuse 'pbuf' - possible side-effects?
#135: FILE: ./include/wifi.h:135:
+#define SetFrameSubType(pbuf, type) \
+	do {    \
+		*(__le16 *)(pbuf) &= cpu_to_le16(~(BIT(7) | BIT(6) |	\
+		 BIT(5) | BIT(4) | BIT(3) | BIT(2))); \
+		*(__le16 *)(pbuf) |= cpu_to_le16(type); \
+	} while (0)

CHECK: Avoid CamelCase: <SetFragNum>
#148: FILE: ./include/wifi.h:148:
+#define SetFragNum(pbuf, num) \

CHECK: Macro argument reuse 'pbuf' - possible side-effects?
#148: FILE: ./include/wifi.h:148:
+#define SetFragNum(pbuf, num) \
+	do {    \
+		*(unsigned short *)((size_t)(pbuf) + 22) = \
+			((*(unsigned short *)((size_t)(pbuf) + 22)) &	\
+			le16_to_cpu(~(0x000f))) | \
+			cpu_to_le16(0x0f & (num));     \
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#148: FILE: ./include/wifi.h:148:
+#define SetFragNum(pbuf, num) \
+	do {    \
+		*(unsigned short *)((size_t)(pbuf) + 22) = \
+			((*(unsigned short *)((size_t)(pbuf) + 22)) &	\
+			le16_to_cpu(~(0x000f))) | \
+			cpu_to_le16(0x0f & (num));     \
+	} while (0)

CHECK: Macro argument reuse 'pbuf' - possible side-effects?
#156: FILE: ./include/wifi.h:156:
+#define SetSeqNum(pbuf, num) \
+	do {    \
+		*(__le16 *)((size_t)(pbuf) + 22) = \
+			((*(__le16 *)((size_t)(pbuf) + 22)) & cpu_to_le16((unsigned short)0x000f)) | \
+			cpu_to_le16((unsigned short)(0xfff0 & (num << 4))); \
+	} while (0)

CHECK: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#156: FILE: ./include/wifi.h:156:
+#define SetSeqNum(pbuf, num) \
+	do {    \
+		*(__le16 *)((size_t)(pbuf) + 22) = \
+			((*(__le16 *)((size_t)(pbuf) + 22)) & cpu_to_le16((unsigned short)0x000f)) | \
+			cpu_to_le16((unsigned short)(0xfff0 & (num << 4))); \
+	} while (0)

WARNING: Single statement macros should not use a do {} while (0) loop
#156: FILE: ./include/wifi.h:156:
+#define SetSeqNum(pbuf, num) \
+	do {    \
+		*(__le16 *)((size_t)(pbuf) + 22) = \
+			((*(__le16 *)((size_t)(pbuf) + 22)) & cpu_to_le16((unsigned short)0x000f)) | \
+			cpu_to_le16((unsigned short)(0xfff0 & (num << 4))); \
+	} while (0)

CHECK: line length of 102 exceeds 100 columns
#159: FILE: ./include/wifi.h:159:
+			((*(__le16 *)((size_t)(pbuf) + 22)) & cpu_to_le16((unsigned short)0x000f)) | \

CHECK: Please don't use multiple blank lines
#166: FILE: ./include/wifi.h:166:
+
+

CHECK: Macro argument 'tid' may be better as '(tid)' to avoid precedence issues
#167: FILE: ./include/wifi.h:167:
+#define SetPriority(pbuf, tid)	\
+	(*(__le16 *)(pbuf) |= cpu_to_le16(tid & 0xf))

CHECK: Macro argument 'eosp' may be better as '(eosp)' to avoid precedence issues
#172: FILE: ./include/wifi.h:172:
+#define SetEOSP(pbuf, eosp)	\
+		(*(__le16 *)(pbuf) |= cpu_to_le16((eosp & 1) << 4))

CHECK: Macro argument 'ack' may be better as '(ack)' to avoid precedence issues
#175: FILE: ./include/wifi.h:175:
+#define SetAckpolicy(pbuf, ack)	\
+	(*(__le16 *)(pbuf) |= cpu_to_le16((ack & 3) << 5))

CHECK: Avoid CamelCase: <GetAddr4Ptr>
#190: FILE: ./include/wifi.h:190:
+#define GetAddr4Ptr(pbuf)	((unsigned char *)((size_t)(pbuf) + 24))

WARNING: Missing a blank line after declarations
#195: FILE: ./include/wifi.h:195:
+	unsigned char *ra;
+	ra = GetAddr1Ptr(pframe);

CHECK: Please use a blank line after function/struct/union/enum declarations
#198: FILE: ./include/wifi.h:198:
+}
+static inline unsigned char *get_ta(unsigned char *pframe)

WARNING: Missing a blank line after declarations
#201: FILE: ./include/wifi.h:201:
+	unsigned char *ta;
+	ta = GetAddr2Ptr(pframe);

CHECK: Please don't use multiple blank lines
#228: FILE: ./include/wifi.h:228:
+
+

CHECK: Please don't use multiple blank lines
#275: FILE: ./include/wifi.h:275:
+
+

WARNING: Comparisons should place the constant on the right side of the test
#278: FILE: ./include/wifi.h:278:
+	if (WIFI_CTRL_TYPE == GetFrameType(pframe))

CHECK: Please use a blank line after function/struct/union/enum declarations
#283: FILE: ./include/wifi.h:283:
+}
+/*-----------------------------------------------------------------------------

WARNING: Block comments use * on subsequent lines
#284: FILE: ./include/wifi.h:284:
+/*-----------------------------------------------------------------------------
+			Below is for the security related definition

WARNING: Block comments use a trailing */ on a separate line
#285: FILE: ./include/wifi.h:285:
+------------------------------------------------------------------------------*/

WARNING: Block comments use * on subsequent lines
#297: FILE: ./include/wifi.h:297:
+/* ---------------------------------------------------------------------------
+					Below is the fixed elements...

WARNING: Block comments use a trailing */ on a separate line
#298: FILE: ./include/wifi.h:298:
+-----------------------------------------------------------------------------*/

WARNING: Block comments use * on subsequent lines
#309: FILE: ./include/wifi.h:309:
+/*-----------------------------------------------------------------------------
+				Below is the definition for 802.11i / 802.1x

WARNING: Block comments use a trailing */ on a separate line
#310: FILE: ./include/wifi.h:310:
+------------------------------------------------------------------------------*/

WARNING: Block comments use * on subsequent lines
#316: FILE: ./include/wifi.h:316:
+/*-----------------------------------------------------------------------------
+				Below is the definition for WMM

WARNING: Block comments use a trailing */ on a separate line
#317: FILE: ./include/wifi.h:317:
+------------------------------------------------------------------------------*/

WARNING: Block comments use * on subsequent lines
#321: FILE: ./include/wifi.h:321:
+/*-----------------------------------------------------------------------------
+				Below is the definition for 802.11n

WARNING: Block comments use a trailing */ on a separate line
#322: FILE: ./include/wifi.h:322:
+------------------------------------------------------------------------------*/

CHECK: Avoid CamelCase: <GetOrderBit>
#323: FILE: ./include/wifi.h:323:
+#define GetOrderBit(pbuf)	(((*(unsigned short *)(pbuf)) & cpu_to_le16(_ORDER_)) != 0)

WARNING: please, no space before tabs
#335: FILE: ./include/wifi.h:335:
+^Iunsigned char ^Iht_param;$

WARNING: please, no space before tabs
#338: FILE: ./include/wifi.h:338:
+^Iunsigned char ^Ibasic_set[16];$

WARNING: Prefer __packed over __attribute__((packed))
#339: FILE: ./include/wifi.h:339:
+} __attribute__ ((packed));

CHECK: Please don't use multiple blank lines
#341: FILE: ./include/wifi.h:341:
+
+

CHECK: Avoid CamelCase: <Beamforming_caps>
#349: FILE: ./include/wifi.h:349:
+			__le16	Beamforming_caps;

WARNING: Prefer __packed over __attribute__((packed))
#354: FILE: ./include/wifi.h:354:
+} __attribute__ ((packed));

WARNING: Prefer __packed over __attribute__((packed))
#360: FILE: ./include/wifi.h:360:
+}  __attribute__ ((packed));

WARNING: please, no space before tabs
#363: FILE: ./include/wifi.h:363:
+^Iunsigned char ^IACI_AIFSN;$

WARNING: please, no space before tabs
#364: FILE: ./include/wifi.h:364:
+^Iunsigned char ^ICW;$

WARNING: Prefer __packed over __attribute__((packed))
#366: FILE: ./include/wifi.h:366:
+}  __attribute__ ((packed));

WARNING: please, no space before tabs
#369: FILE: ./include/wifi.h:369:
+^Iunsigned char ^IQoS_info;$

WARNING: please, no space before tabs
#370: FILE: ./include/wifi.h:370:
+^Iunsigned char ^Ireserved;$

WARNING: Prefer __packed over __attribute__((packed))
#372: FILE: ./include/wifi.h:372:
+}  __attribute__ ((packed));

WARNING: please, no space before tabs
#375: FILE: ./include/wifi.h:375:
+^Iunsigned char ^Idialog_token;$

WARNING: Prefer __packed over __attribute__((packed))
#379: FILE: ./include/wifi.h:379:
+}  __attribute__ ((packed));

WARNING: please, no space before tabs
#399: FILE: ./include/wifi.h:399:
+/* ^I===============WPS Section =============== */$

WARNING: please, no space before tabs
#400: FILE: ./include/wifi.h:400:
+/* ^IWPS attribute ID */$

WARNING: please, no space before tabs
#403: FILE: ./include/wifi.h:403:
+/* ^I=====================P2P Section ===================== */$

CHECK: line length of 102 exceeds 100 columns
#412: FILE: ./include/wifi.h:412:
+	P2P_STATE_NONE = 0,							/* 	P2P disable */

WARNING: please, no space before tabs
#412: FILE: ./include/wifi.h:412:
+^IP2P_STATE_NONE = 0,^I^I^I^I^I^I^I/* ^IP2P disable */$

CHECK: line length of 129 exceeds 100 columns
#413: FILE: ./include/wifi.h:413:
+	P2P_STATE_IDLE = 1,								/* 	P2P had enabled and do nothing */

WARNING: please, no space before tabs
#413: FILE: ./include/wifi.h:413:
+^IP2P_STATE_IDLE = 1,^I^I^I^I^I^I^I^I/* ^IP2P had enabled and do nothing */$

CHECK: line length of 111 exceeds 100 columns
#414: FILE: ./include/wifi.h:414:
+	P2P_STATE_LISTEN = 2,							/* 	In pure listen state */

WARNING: please, no space before tabs
#414: FILE: ./include/wifi.h:414:
+^IP2P_STATE_LISTEN = 2,^I^I^I^I^I^I^I/* ^IIn pure listen state */$

CHECK: line length of 104 exceeds 100 columns
#415: FILE: ./include/wifi.h:415:
+	P2P_STATE_SCAN = 3,							/* 	In scan phase */

WARNING: please, no space before tabs
#415: FILE: ./include/wifi.h:415:
+^IP2P_STATE_SCAN = 3,^I^I^I^I^I^I^I/* ^IIn scan phase */$

CHECK: line length of 116 exceeds 100 columns
#416: FILE: ./include/wifi.h:416:
+	P2P_STATE_FIND_PHASE_LISTEN = 4,				/* 	In the listen state of find phase */

WARNING: please, no space before tabs
#416: FILE: ./include/wifi.h:416:
+^IP2P_STATE_FIND_PHASE_LISTEN = 4,^I^I^I^I/* ^IIn the listen state of find phase */$

CHECK: line length of 116 exceeds 100 columns
#417: FILE: ./include/wifi.h:417:
+	P2P_STATE_FIND_PHASE_SEARCH = 5,				/* 	In the search state of find phase */

WARNING: please, no space before tabs
#417: FILE: ./include/wifi.h:417:
+^IP2P_STATE_FIND_PHASE_SEARCH = 5,^I^I^I^I/* ^IIn the search state of find phase */$

CHECK: line length of 104 exceeds 100 columns
#418: FILE: ./include/wifi.h:418:
+	P2P_STATE_TX_PROVISION_DIS_REQ = 6,			/* 	In P2P provisioning discovery */

WARNING: please, no space before tabs
#418: FILE: ./include/wifi.h:418:
+^IP2P_STATE_TX_PROVISION_DIS_REQ = 6,^I^I^I/* ^IIn P2P provisioning discovery */$

CHECK: line length of 134 exceeds 100 columns
#421: FILE: ./include/wifi.h:421:
+	P2P_STATE_GONEGO_ING = 9,						/* 	Doing the group owner negotiation handshake */

WARNING: please, no space before tabs
#421: FILE: ./include/wifi.h:421:
+^IP2P_STATE_GONEGO_ING = 9,^I^I^I^I^I^I/* ^IDoing the group owner negotiation handshake */$

CHECK: line length of 142 exceeds 100 columns
#422: FILE: ./include/wifi.h:422:
+	P2P_STATE_GONEGO_OK = 10,						/* 	finish the group negotiation handshake with success */

WARNING: please, no space before tabs
#422: FILE: ./include/wifi.h:422:
+^IP2P_STATE_GONEGO_OK = 10,^I^I^I^I^I^I/* ^Ifinish the group negotiation handshake with success */$

CHECK: line length of 134 exceeds 100 columns
#423: FILE: ./include/wifi.h:423:
+	P2P_STATE_GONEGO_FAIL = 11,					/* 	finish the group negotiation handshake with failure */

WARNING: please, no space before tabs
#423: FILE: ./include/wifi.h:423:
+^IP2P_STATE_GONEGO_FAIL = 11,^I^I^I^I^I/* ^Ifinish the group negotiation handshake with failure */$

CHECK: line length of 131 exceeds 100 columns
#424: FILE: ./include/wifi.h:424:
+	P2P_STATE_RECV_INVITE_REQ_MATCH = 12,		/* 	receiving the P2P Invitation request and match with the profile. */

WARNING: please, no space before tabs
#424: FILE: ./include/wifi.h:424:
+^IP2P_STATE_RECV_INVITE_REQ_MATCH = 12,^I^I/* ^Ireceiving the P2P Invitation request and match with the profile. */$

WARNING: please, no space before tabs
#425: FILE: ./include/wifi.h:425:
+^IP2P_STATE_PROVISIONING_ING = 13,^I^I^I^I/* ^IDoing the P2P WPS */$

WARNING: please, no space before tabs
#426: FILE: ./include/wifi.h:426:
+^IP2P_STATE_PROVISIONING_DONE = 14,^I^I^I/* ^IFinish the P2P WPS */$

CHECK: line length of 118 exceeds 100 columns
#427: FILE: ./include/wifi.h:427:
+	P2P_STATE_TX_INVITE_REQ = 15,					/* 	Transmit the P2P Invitation request */

WARNING: please, no space before tabs
#427: FILE: ./include/wifi.h:427:
+^IP2P_STATE_TX_INVITE_REQ = 15,^I^I^I^I^I/* ^ITransmit the P2P Invitation request */$

CHECK: line length of 120 exceeds 100 columns
#428: FILE: ./include/wifi.h:428:
+	P2P_STATE_RX_INVITE_RESP_OK = 16,				/* 	Receiving the P2P Invitation response */

WARNING: please, no space before tabs
#428: FILE: ./include/wifi.h:428:
+^IP2P_STATE_RX_INVITE_RESP_OK = 16,^I^I^I^I/* ^IReceiving the P2P Invitation response */$

CHECK: line length of 134 exceeds 100 columns
#429: FILE: ./include/wifi.h:429:
+	P2P_STATE_RECV_INVITE_REQ_DISMATCH = 17,	/* 	receiving the P2P Invitation request and mismatch with the profile. */

WARNING: please, no space before tabs
#429: FILE: ./include/wifi.h:429:
+^IP2P_STATE_RECV_INVITE_REQ_DISMATCH = 17,^I/* ^Ireceiving the P2P Invitation request and mismatch with the profile. */$

CHECK: line length of 132 exceeds 100 columns
#430: FILE: ./include/wifi.h:430:
+	P2P_STATE_RECV_INVITE_REQ_GO = 18,			/* 	receiving the P2P Invitation request and this wifi is GO. */

WARNING: please, no space before tabs
#430: FILE: ./include/wifi.h:430:
+^IP2P_STATE_RECV_INVITE_REQ_GO = 18,^I^I^I/* ^Ireceiving the P2P Invitation request and this wifi is GO. */$

CHECK: line length of 142 exceeds 100 columns
#431: FILE: ./include/wifi.h:431:
+	P2P_STATE_RECV_INVITE_REQ_JOIN = 19,			/* 	receiving the P2P Invitation request to join an existing P2P Group. */

WARNING: please, no space before tabs
#431: FILE: ./include/wifi.h:431:
+^IP2P_STATE_RECV_INVITE_REQ_JOIN = 19,^I^I^I/* ^Ireceiving the P2P Invitation request to join an existing P2P Group. */$

CHECK: line length of 124 exceeds 100 columns
#432: FILE: ./include/wifi.h:432:
+	P2P_STATE_RX_INVITE_RESP_FAIL = 20,			/* 	recveing the P2P Invitation response with failure */

WARNING: please, no space before tabs
#432: FILE: ./include/wifi.h:432:
+^IP2P_STATE_RX_INVITE_RESP_FAIL = 20,^I^I^I/* ^Irecveing the P2P Invitation response with failure */$

CHECK: line length of 139 exceeds 100 columns
#433: FILE: ./include/wifi.h:433:
+	P2P_STATE_RX_INFOR_NOREADY = 21,			/*  receiving p2p negotiation response with information is not available */

CHECK: line length of 137 exceeds 100 columns
#434: FILE: ./include/wifi.h:434:
+	P2P_STATE_TX_INFOR_NOREADY = 22,			/*  sending p2p negotiation response with information is not available */

CHECK: Macro argument reuse 'mac' - possible side-effects?
#444: FILE: ./include/wifi.h:444:
+#define IP_MCAST_MAC(mac)		((mac[0] == 0x01) && (mac[1] == 0x00) && (mac[2] == 0x5e))

CHECK: Macro argument reuse 'mac' - possible side-effects?
#445: FILE: ./include/wifi.h:445:
+#define ICMPV6_MCAST_MAC(mac)	((mac[0] == 0x33) && (mac[1] == 0x33) && (mac[2] != 0xff))

CHECK: Prefer kernel type 's16' over 'int16_t'
#460: FILE: ./include/wifi.h:460:
+	int16_t power_limit;

total: 0 errors, 79 warnings, 48 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/wifi.h has style problems, please review.
-----------------------
./include/wlan_bssdef.h
-----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/wlan_bssdef.h:10:
+
+

CHECK: Please don't use multiple blank lines
#13: FILE: ./include/wlan_bssdef.h:13:
+
+

WARNING: do not add new typedefs
#18: FILE: ./include/wlan_bssdef.h:18:
+typedef unsigned char   NDIS_802_11_MAC_ADDRESS[6];

CHECK: line length of 102 exceeds 100 columns
#19: FILE: ./include/wlan_bssdef.h:19:
+typedef unsigned char   NDIS_802_11_RATES[NDIS_802_11_LENGTH_RATES];        /*  Set of 8 data rates */

WARNING: do not add new typedefs
#19: FILE: ./include/wlan_bssdef.h:19:
+typedef unsigned char   NDIS_802_11_RATES[NDIS_802_11_LENGTH_RATES];        /*  Set of 8 data rates */

CHECK: line length of 103 exceeds 100 columns
#20: FILE: ./include/wlan_bssdef.h:20:
+typedef unsigned char   NDIS_802_11_RATES_EX[NDIS_802_11_LENGTH_RATES_EX];  /*  Set of 16 data rates */

WARNING: do not add new typedefs
#20: FILE: ./include/wlan_bssdef.h:20:
+typedef unsigned char   NDIS_802_11_RATES_EX[NDIS_802_11_LENGTH_RATES_EX];  /*  Set of 16 data rates */

CHECK: Avoid CamelCase: <Ndis802_11FH>
#28: FILE: ./include/wlan_bssdef.h:28:
+	Ndis802_11FH,

CHECK: Avoid CamelCase: <Ndis802_11OFDM5>
#30: FILE: ./include/wlan_bssdef.h:30:
+	Ndis802_11OFDM5,

CHECK: Avoid CamelCase: <Ndis802_11NetworkTypeMax>
#32: FILE: ./include/wlan_bssdef.h:32:
+	Ndis802_11NetworkTypeMax    /*  not a real type, defined as an upper bound */

WARNING: Block comments use * on subsequent lines
#36: FILE: ./include/wlan_bssdef.h:36:
+/*
+	FW will only save the channel number in DSConfig.

CHECK: Avoid CamelCase: <Ndis802_11AuthModeShared>
#77: FILE: ./include/wlan_bssdef.h:77:
+	Ndis802_11AuthModeShared,

CHECK: Avoid CamelCase: <Ndis802_11AuthModeAutoSwitch>
#78: FILE: ./include/wlan_bssdef.h:78:
+	Ndis802_11AuthModeAutoSwitch,

CHECK: Avoid CamelCase: <Ndis802_11AuthModeWAPI>
#82: FILE: ./include/wlan_bssdef.h:82:
+	Ndis802_11AuthModeWAPI,

CHECK: Avoid CamelCase: <Ndis802_11AuthModeMax>
#83: FILE: ./include/wlan_bssdef.h:83:
+	Ndis802_11AuthModeMax   /*  Not a real mode, defined as upper bound */

CHECK: Avoid CamelCase: <Ndis802_11WEPEnabled>
#87: FILE: ./include/wlan_bssdef.h:87:
+	Ndis802_11WEPEnabled,

CHECK: Avoid CamelCase: <Ndis802_11Encryption1Enabled>
#88: FILE: ./include/wlan_bssdef.h:88:
+	Ndis802_11Encryption1Enabled = Ndis802_11WEPEnabled,

CHECK: Avoid CamelCase: <Ndis802_11WEPKeyAbsent>
#91: FILE: ./include/wlan_bssdef.h:91:
+	Ndis802_11WEPKeyAbsent,

CHECK: Avoid CamelCase: <Ndis802_11Encryption1KeyAbsent>
#92: FILE: ./include/wlan_bssdef.h:92:
+	Ndis802_11Encryption1KeyAbsent = Ndis802_11WEPKeyAbsent,

CHECK: Avoid CamelCase: <Ndis802_11WEPNotSupported>
#93: FILE: ./include/wlan_bssdef.h:93:
+	Ndis802_11WEPNotSupported,

CHECK: Avoid CamelCase: <Ndis802_11EncryptionNotSupported>
#94: FILE: ./include/wlan_bssdef.h:94:
+	Ndis802_11EncryptionNotSupported = Ndis802_11WEPNotSupported,

CHECK: Avoid CamelCase: <Ndis802_11Encryption2Enabled>
#95: FILE: ./include/wlan_bssdef.h:95:
+	Ndis802_11Encryption2Enabled,

CHECK: Avoid CamelCase: <Ndis802_11Encryption2KeyAbsent>
#96: FILE: ./include/wlan_bssdef.h:96:
+	Ndis802_11Encryption2KeyAbsent,

CHECK: Avoid CamelCase: <Ndis802_11Encryption3Enabled>
#97: FILE: ./include/wlan_bssdef.h:97:
+	Ndis802_11Encryption3Enabled,

CHECK: Avoid CamelCase: <Ndis802_11Encryption3KeyAbsent>
#98: FILE: ./include/wlan_bssdef.h:98:
+	Ndis802_11Encryption3KeyAbsent,

CHECK: Avoid CamelCase: <Ndis802_11_EncrypteionWAPI>
#99: FILE: ./include/wlan_bssdef.h:99:
+	Ndis802_11_EncrypteionWAPI

WARNING: Block comments use a trailing */ on a separate line
#142: FILE: ./include/wlan_bssdef.h:142:
+	 * * translate scan to UI */

WARNING: Block comments should align the * on each line
#154: FILE: ./include/wlan_bssdef.h:154:
+/* temporally add #pragma pack for structure alignment issue of
+*   struct wlan_bssid_ex and get_wlan_bssid_ex_sz()

total: 0 errors, 6 warnings, 22 checks, 216 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/wlan_bssdef.h has style problems, please review.
----------------------
./include/xmit_osdep.h
----------------------
CHECK: Please don't use multiple blank lines
#10: FILE: ./include/xmit_osdep.h:10:
+
+

CHECK: extern prototypes should be avoided in .h files
#28: FILE: ./include/xmit_osdep.h:28:
+extern void _rtw_xmit_entry(struct sk_buff *pkt, struct net_device *pnetdev);

CHECK: extern prototypes should be avoided in .h files
#29: FILE: ./include/xmit_osdep.h:29:
+extern netdev_tx_t rtw_xmit_entry(struct sk_buff *pkt, struct net_device *pnetdev);

CHECK: line length of 107 exceeds 100 columns
#33: FILE: ./include/xmit_osdep.h:33:
+int rtw_os_xmit_resource_alloc(struct adapter *padapter, struct xmit_buf *pxmitbuf, u32 alloc_sz, u8 flag);

CHECK: line length of 106 exceeds 100 columns
#34: FILE: ./include/xmit_osdep.h:34:
+void rtw_os_xmit_resource_free(struct adapter *padapter, struct xmit_buf *pxmitbuf, u32 free_sz, u8 flag);

CHECK: extern prototypes should be avoided in .h files
#36: FILE: ./include/xmit_osdep.h:36:
+extern uint rtw_remainder_len(struct pkt_file *pfile);

CHECK: extern prototypes should be avoided in .h files
#37: FILE: ./include/xmit_osdep.h:37:
+extern void _rtw_open_pktfile(struct sk_buff *pkt, struct pkt_file *pfile);

CHECK: extern prototypes should be avoided in .h files
#38: FILE: ./include/xmit_osdep.h:38:
+extern uint _rtw_pktfile_read(struct pkt_file *pfile, u8 *rmem, uint rlen);

CHECK: extern prototypes should be avoided in .h files
#39: FILE: ./include/xmit_osdep.h:39:
+extern signed int rtw_endofpktfile(struct pkt_file *pfile);

CHECK: extern prototypes should be avoided in .h files
#41: FILE: ./include/xmit_osdep.h:41:
+extern void rtw_os_pkt_complete(struct adapter *padapter, struct sk_buff *pkt);

CHECK: extern prototypes should be avoided in .h files
#42: FILE: ./include/xmit_osdep.h:42:
+extern void rtw_os_xmit_complete(struct adapter *padapter, struct xmit_frame *pxframe);

total: 0 errors, 0 warnings, 11 checks, 44 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./include/xmit_osdep.h has style problems, please review.
-------------------------
./os_dep/ioctl_cfg80211.c
-------------------------
CHECK: Lines should not end with a '('
#108: FILE: ./os_dep/ioctl_cfg80211.c:108:
+static struct ieee80211_supported_band *rtw_spt_band_alloc(

CHECK: line length of 118 exceeds 100 columns
#128: FILE: ./os_dep/ioctl_cfg80211.c:128:
+	spt_band->channels = (struct ieee80211_channel *)(((u8 *)spt_band) + sizeof(struct ieee80211_supported_band));

CHECK: line length of 131 exceeds 100 columns
#129: FILE: ./os_dep/ioctl_cfg80211.c:129:
+	spt_band->bitrates = (struct ieee80211_rate *)(((u8 *)spt_band->channels) + sizeof(struct ieee80211_channel) * n_channels);

CHECK: line length of 101 exceeds 100 columns
#208: FILE: ./os_dep/ioctl_cfg80211.c:208:
+struct cfg80211_bss *rtw_cfg80211_inform_bss(struct adapter *padapter, struct wlan_network *pnetwork)

CHECK: Unnecessary parentheses around padapter->mlmepriv
#224: FILE: ./os_dep/ioctl_cfg80211.c:224:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: line length of 111 exceeds 100 columns
#233: FILE: ./os_dep/ioctl_cfg80211.c:233:
+		if (rtw_get_wapi_ie(pnetwork->network.ies, pnetwork->network.ie_length, NULL, &wapi_len) > 0) {

CHECK: line length of 148 exceeds 100 columns
#249: FILE: ./os_dep/ioctl_cfg80211.c:249:
+		wpsie = rtw_get_wps_ie(pnetwork->network.ies + _FIXED_IE_LENGTH_, pnetwork->network.ie_length - _FIXED_IE_LENGTH_, NULL, &wpsielen);

CHECK: line length of 120 exceeds 100 columns
#252: FILE: ./os_dep/ioctl_cfg80211.c:252:
+			psr = rtw_get_wps_attr_content(wpsie, wpsielen, WPS_ATTR_SELECTED_REGISTRAR, (u8 *)(&sr), NULL);

CHECK: line length of 105 exceeds 100 columns
#275: FILE: ./os_dep/ioctl_cfg80211.c:275:
+	/* We've set wiphy's signal_type as CFG80211_SIGNAL_TYPE_MBM: signal strength in mBm (100*dBm) */

CHECK: line length of 111 exceeds 100 columns
#278: FILE: ./os_dep/ioctl_cfg80211.c:278:
+		notify_signal = 100 * translate_percentage_to_dbm(padapter->recvpriv.signal_strength);/* dbm */

CHECK: line length of 119 exceeds 100 columns
#280: FILE: ./os_dep/ioctl_cfg80211.c:280:
+		notify_signal = 100 * translate_percentage_to_dbm(pnetwork->network.phy_info.signal_strength);/* dbm */

CHECK: Unnecessary parentheses around pwlanhdr->frame_control
#289: FILE: ./os_dep/ioctl_cfg80211.c:289:
+	fctrl = &(pwlanhdr->frame_control);

CHECK: Unnecessary parentheses around padapter->eeprompriv
#299: FILE: ./os_dep/ioctl_cfg80211.c:299:
+		memcpy(pwlanhdr->addr1, myid(&(padapter->eeprompriv)), ETH_ALEN);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv.mlmext_info.network
#335: FILE: ./os_dep/ioctl_cfg80211.c:335:
+	struct wlan_bssid_ex  *pnetwork = &(padapter->mlmeextpriv.mlmext_info.network);

CHECK: line length of 104 exceeds 100 columns
#343: FILE: ./os_dep/ioctl_cfg80211.c:343:
+	freq = rtw_ieee80211_channel_to_frequency(pnetwork->configuration.ds_config, NL80211_BAND_2GHZ);

CHECK: Comparison to NULL could be written "bss"
#353: FILE: ./os_dep/ioctl_cfg80211.c:353:
+	return	(bss != NULL);

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#359: FILE: ./os_dep/ioctl_cfg80211.c:359:
+	struct wlan_network  *cur_network = &(pmlmepriv->cur_network);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv.mlmext_info.network
#369: FILE: ./os_dep/ioctl_cfg80211.c:369:
+		struct wlan_bssid_ex  *pnetwork = &(padapter->mlmeextpriv.mlmext_info.network);

CHECK: line length of 113 exceeds 100 columns
#380: FILE: ./os_dep/ioctl_cfg80211.c:380:
+			if (!memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Unnecessary parentheses around scanned->network.ssid
#380: FILE: ./os_dep/ioctl_cfg80211.c:380:
+			if (!memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Unnecessary parentheses around pnetwork->ssid
#380: FILE: ./os_dep/ioctl_cfg80211.c:380:
+			if (!memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: line length of 128 exceeds 100 columns
#381: FILE: ./os_dep/ioctl_cfg80211.c:381:
+				&& !memcmp(scanned->network.mac_address, pnetwork->mac_address, sizeof(NDIS_802_11_MAC_ADDRESS))

CHECK: Logical continuations should be on the previous line
#381: FILE: ./os_dep/ioctl_cfg80211.c:381:
+			if (!memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))
+				&& !memcmp(scanned->network.mac_address, pnetwork->mac_address, sizeof(NDIS_802_11_MAC_ADDRESS))

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#401: FILE: ./os_dep/ioctl_cfg80211.c:401:
+	struct wlan_network  *cur_network = &(pmlmepriv->cur_network);

CHECK: Logical continuations should be on the previous line
#405: FILE: ./os_dep/ioctl_cfg80211.c:405:
+	if (pwdev->iftype != NL80211_IFTYPE_STATION
+		&& pwdev->iftype != NL80211_IFTYPE_P2P_CLIENT

CHECK: Unnecessary parentheses around padapter->mlmeextpriv.mlmext_info.network
#414: FILE: ./os_dep/ioctl_cfg80211.c:414:
+		struct wlan_bssid_ex  *pnetwork = &(padapter->mlmeextpriv.mlmext_info.network);

CHECK: line length of 113 exceeds 100 columns
#422: FILE: ./os_dep/ioctl_cfg80211.c:422:
+		if (!memcmp(scanned->network.mac_address, pnetwork->mac_address, sizeof(NDIS_802_11_MAC_ADDRESS))

CHECK: line length of 112 exceeds 100 columns
#423: FILE: ./os_dep/ioctl_cfg80211.c:423:
+			&& !memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Logical continuations should be on the previous line
#423: FILE: ./os_dep/ioctl_cfg80211.c:423:
+		if (!memcmp(scanned->network.mac_address, pnetwork->mac_address, sizeof(NDIS_802_11_MAC_ADDRESS))
+			&& !memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Unnecessary parentheses around scanned->network.ssid
#423: FILE: ./os_dep/ioctl_cfg80211.c:423:
+			&& !memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Unnecessary parentheses around pnetwork->ssid
#423: FILE: ./os_dep/ioctl_cfg80211.c:423:
+			&& !memcmp(&(scanned->network.ssid), &(pnetwork->ssid), sizeof(struct ndis_802_11_ssid))

CHECK: Logical continuations should be on the previous line
#474: FILE: ./os_dep/ioctl_cfg80211.c:474:
+	if (pwdev->iftype != NL80211_IFTYPE_STATION
+		&& pwdev->iftype != NL80211_IFTYPE_P2P_CLIENT

CHECK: line length of 107 exceeds 100 columns
#488: FILE: ./os_dep/ioctl_cfg80211.c:488:
+						WLAN_STATUS_UNSPECIFIED_FAILURE, GFP_ATOMIC/*GFP_KERNEL*/);

CHECK: line length of 106 exceeds 100 columns
#493: FILE: ./os_dep/ioctl_cfg80211.c:493:
+static int rtw_cfg80211_ap_set_encryption(struct net_device *dev, struct ieee_param *param, u32 param_len)

CHECK: Unnecessary parentheses around padapter->securitypriv
#500: FILE: ./os_dep/ioctl_cfg80211.c:500:
+	struct security_priv *psecuritypriv =  &(padapter->securitypriv);

CHECK: Unnecessary parentheses around 'wep_key_idx >= WEP_KEYS'
#535: FILE: ./os_dep/ioctl_cfg80211.c:535:
+		if ((wep_key_idx >= WEP_KEYS) || (wep_key_len <= 0)) {

CHECK: Unnecessary parentheses around 'wep_key_len <= 0'
#535: FILE: ./os_dep/ioctl_cfg80211.c:535:
+		if ((wep_key_idx >= WEP_KEYS) || (wep_key_len <= 0)) {

CHECK: line length of 101 exceeds 100 columns
#544: FILE: ./os_dep/ioctl_cfg80211.c:544:
+			/* wep default key has not been set, so use this key index as default key. */

CHECK: line length of 108 exceeds 100 columns
#559: FILE: ./os_dep/ioctl_cfg80211.c:559:
+		memcpy(&(psecuritypriv->dot11DefKey[wep_key_idx].skey[0]), param->u.crypt.key, wep_key_len);

CHECK: Unnecessary parentheses around psecuritypriv->dot11DefKey[wep_key_idx].skey[0]
#559: FILE: ./os_dep/ioctl_cfg80211.c:559:
+		memcpy(&(psecuritypriv->dot11DefKey[wep_key_idx].skey[0]), param->u.crypt.key, wep_key_len);

CHECK: line length of 128 exceeds 100 columns
#573: FILE: ./os_dep/ioctl_cfg80211.c:573:
+				memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 128 exceeds 100 columns
#582: FILE: ./os_dep/ioctl_cfg80211.c:582:
+				memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: Unnecessary parentheses around param->u.crypt.key[16]
#585: FILE: ./os_dep/ioctl_cfg80211.c:585:
+				memcpy(txkey, &(param->u.crypt.key[16]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[24]
#586: FILE: ./os_dep/ioctl_cfg80211.c:586:
+				memcpy(rxkey, &(param->u.crypt.key[24]), 8);

CHECK: line length of 128 exceeds 100 columns
#593: FILE: ./os_dep/ioctl_cfg80211.c:593:
+				memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 103 exceeds 100 columns
#602: FILE: ./os_dep/ioctl_cfg80211.c:602:
+			psecuritypriv->dot11PrivacyAlgrthm = psecuritypriv->dot118021XGrpPrivacy;/*  */

CHECK: line length of 132 exceeds 100 columns
#604: FILE: ./os_dep/ioctl_cfg80211.c:604:
+			rtw_ap_set_group_key(padapter, param->u.crypt.key, psecuritypriv->dot118021XGrpPrivacy, param->u.crypt.idx);

CHECK: line length of 144 exceeds 100 columns
#609: FILE: ./os_dep/ioctl_cfg80211.c:609:
+				pbcmc_sta->dot118021XPrivacy = psecuritypriv->dot118021XGrpPrivacy;/* rx will use bmc_sta's dot118021XPrivacy */

CHECK: line length of 152 exceeds 100 columns
#619: FILE: ./os_dep/ioctl_cfg80211.c:619:
+				memcpy(psta->dot118021x_UncstKey.skey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 107 exceeds 100 columns
#629: FILE: ./os_dep/ioctl_cfg80211.c:629:
+					memcpy(psta->dot11tkiptxmickey.skey, &(param->u.crypt.key[16]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[16]
#629: FILE: ./os_dep/ioctl_cfg80211.c:629:
+					memcpy(psta->dot11tkiptxmickey.skey, &(param->u.crypt.key[16]), 8);

CHECK: line length of 107 exceeds 100 columns
#630: FILE: ./os_dep/ioctl_cfg80211.c:630:
+					memcpy(psta->dot11tkiprxmickey.skey, &(param->u.crypt.key[24]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[24]
#630: FILE: ./os_dep/ioctl_cfg80211.c:630:
+					memcpy(psta->dot11tkiprxmickey.skey, &(param->u.crypt.key[24]), 8);

CHECK: line length of 136 exceeds 100 columns
#648: FILE: ./os_dep/ioctl_cfg80211.c:648:
+					memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 136 exceeds 100 columns
#656: FILE: ./os_dep/ioctl_cfg80211.c:656:
+					memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: Unnecessary parentheses around param->u.crypt.key[16]
#659: FILE: ./os_dep/ioctl_cfg80211.c:659:
+					memcpy(txkey, &(param->u.crypt.key[16]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[24]
#660: FILE: ./os_dep/ioctl_cfg80211.c:660:
+					memcpy(rxkey, &(param->u.crypt.key[24]), 8);

CHECK: line length of 136 exceeds 100 columns
#667: FILE: ./os_dep/ioctl_cfg80211.c:667:
+					memcpy(grpkey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 111 exceeds 100 columns
#676: FILE: ./os_dep/ioctl_cfg80211.c:676:
+				psecuritypriv->dot11PrivacyAlgrthm = psecuritypriv->dot118021XGrpPrivacy;/*  */

CHECK: line length of 140 exceeds 100 columns
#678: FILE: ./os_dep/ioctl_cfg80211.c:678:
+				rtw_ap_set_group_key(padapter, param->u.crypt.key, psecuritypriv->dot118021XGrpPrivacy, param->u.crypt.idx);

CHECK: line length of 152 exceeds 100 columns
#683: FILE: ./os_dep/ioctl_cfg80211.c:683:
+					pbcmc_sta->dot118021XPrivacy = psecuritypriv->dot118021XGrpPrivacy;/* rx will use bmc_sta's dot118021XPrivacy */

CHECK: line length of 103 exceeds 100 columns
#694: FILE: ./os_dep/ioctl_cfg80211.c:694:
+static int rtw_cfg80211_set_encryption(struct net_device *dev, struct ieee_param *param, u32 param_len)

CHECK: line length of 101 exceeds 100 columns
#739: FILE: ./os_dep/ioctl_cfg80211.c:739:
+			/* wep default key has not been set, so use this key index as default key. */

CHECK: line length of 108 exceeds 100 columns
#755: FILE: ./os_dep/ioctl_cfg80211.c:755:
+		memcpy(&(psecuritypriv->dot11DefKey[wep_key_idx].skey[0]), param->u.crypt.key, wep_key_len);

CHECK: Unnecessary parentheses around psecuritypriv->dot11DefKey[wep_key_idx].skey[0]
#755: FILE: ./os_dep/ioctl_cfg80211.c:755:
+		memcpy(&(psecuritypriv->dot11DefKey[wep_key_idx].skey[0]), param->u.crypt.key, wep_key_len);

CHECK: line length of 106 exceeds 100 columns
#768: FILE: ./os_dep/ioctl_cfg80211.c:768:
+		if (check_fwstate(pmlmepriv, WIFI_STATION_STATE | WIFI_MP_STATE) == true) { /* sta mode */

CHECK: line length of 113 exceeds 100 columns
#775: FILE: ./os_dep/ioctl_cfg80211.c:775:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||

CHECK: Unnecessary parentheses around 'padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled'
#775: FILE: ./os_dep/ioctl_cfg80211.c:775:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled'
#775: FILE: ./os_dep/ioctl_cfg80211.c:775:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: line length of 114 exceeds 100 columns
#776: FILE: ./os_dep/ioctl_cfg80211.c:776:
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: line length of 109 exceeds 100 columns
#777: FILE: ./os_dep/ioctl_cfg80211.c:777:
+					psta->dot118021XPrivacy = padapter->securitypriv.dot11PrivacyAlgrthm;

CHECK: line length of 160 exceeds 100 columns
#782: FILE: ./os_dep/ioctl_cfg80211.c:782:
+					memcpy(psta->dot118021x_UncstKey.skey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 104 exceeds 100 columns
#784: FILE: ./os_dep/ioctl_cfg80211.c:784:
+					if (strcmp(param->u.crypt.alg, "TKIP") == 0) { /* set mic key */

CHECK: line length of 115 exceeds 100 columns
#785: FILE: ./os_dep/ioctl_cfg80211.c:785:
+						memcpy(psta->dot11tkiptxmickey.skey, &(param->u.crypt.key[16]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[16]
#785: FILE: ./os_dep/ioctl_cfg80211.c:785:
+						memcpy(psta->dot11tkiptxmickey.skey, &(param->u.crypt.key[16]), 8);

CHECK: line length of 115 exceeds 100 columns
#786: FILE: ./os_dep/ioctl_cfg80211.c:786:
+						memcpy(psta->dot11tkiprxmickey.skey, &(param->u.crypt.key[24]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[24]
#786: FILE: ./os_dep/ioctl_cfg80211.c:786:
+						memcpy(psta->dot11tkiprxmickey.skey, &(param->u.crypt.key[24]), 8);

CHECK: line length of 105 exceeds 100 columns
#789: FILE: ./os_dep/ioctl_cfg80211.c:789:
+						/* _set_timer(&padapter->securitypriv.tkip_timer, 50); */

CHECK: line length of 129 exceeds 100 columns
#794: FILE: ./os_dep/ioctl_cfg80211.c:794:
+					if (strcmp(param->u.crypt.alg, "TKIP") == 0 || strcmp(param->u.crypt.alg, "CCMP") == 0) {

CHECK: line length of 202 exceeds 100 columns
#795: FILE: ./os_dep/ioctl_cfg80211.c:795:
+						memcpy(padapter->securitypriv.dot118021XGrpKey[param->u.crypt.idx].skey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 156 exceeds 100 columns
#796: FILE: ./os_dep/ioctl_cfg80211.c:796:
+						memcpy(padapter->securitypriv.dot118021XGrptxmickey[param->u.crypt.idx].skey, &(param->u.crypt.key[16]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[16]
#796: FILE: ./os_dep/ioctl_cfg80211.c:796:
+						memcpy(padapter->securitypriv.dot118021XGrptxmickey[param->u.crypt.idx].skey, &(param->u.crypt.key[16]), 8);

CHECK: line length of 156 exceeds 100 columns
#797: FILE: ./os_dep/ioctl_cfg80211.c:797:
+						memcpy(padapter->securitypriv.dot118021XGrprxmickey[param->u.crypt.idx].skey, &(param->u.crypt.key[24]), 8);

CHECK: Unnecessary parentheses around param->u.crypt.key[24]
#797: FILE: ./os_dep/ioctl_cfg80211.c:797:
+						memcpy(padapter->securitypriv.dot118021XGrprxmickey[param->u.crypt.idx].skey, &(param->u.crypt.key[24]), 8);

CHECK: line length of 111 exceeds 100 columns
#800: FILE: ./os_dep/ioctl_cfg80211.c:800:
+						padapter->securitypriv.dot118021XGrpKeyid = param->u.crypt.idx;

CHECK: line length of 124 exceeds 100 columns
#801: FILE: ./os_dep/ioctl_cfg80211.c:801:
+						rtw_set_key(padapter, &padapter->securitypriv, param->u.crypt.idx, 1, true);

CHECK: line length of 198 exceeds 100 columns
#804: FILE: ./os_dep/ioctl_cfg80211.c:804:
+						memcpy(padapter->securitypriv.dot11wBIPKey[param->u.crypt.idx].skey, param->u.crypt.key, (param->u.crypt.key_len > 16 ? 16 : param->u.crypt.key_len));

CHECK: line length of 107 exceeds 100 columns
#805: FILE: ./os_dep/ioctl_cfg80211.c:805:
+						padapter->securitypriv.dot11wBIPKeyid = param->u.crypt.idx;

CHECK: line length of 113 exceeds 100 columns
#817: FILE: ./os_dep/ioctl_cfg80211.c:817:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||

CHECK: Unnecessary parentheses around 'padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled'
#817: FILE: ./os_dep/ioctl_cfg80211.c:817:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: Unnecessary parentheses around 'padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled'
#817: FILE: ./os_dep/ioctl_cfg80211.c:817:
+				if ((padapter->securitypriv.ndisencryptstatus == Ndis802_11Encryption2Enabled) ||
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: line length of 114 exceeds 100 columns
#818: FILE: ./os_dep/ioctl_cfg80211.c:818:
+				    (padapter->securitypriv.ndisencryptstatus ==  Ndis802_11Encryption3Enabled)) {

CHECK: line length of 114 exceeds 100 columns
#819: FILE: ./os_dep/ioctl_cfg80211.c:819:
+					pbcmc_sta->dot118021XPrivacy = padapter->securitypriv.dot11PrivacyAlgrthm;

CHECK: Logical continuations should be on the previous line
#901: FILE: ./os_dep/ioctl_cfg80211.c:901:
+	} else if (check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true
+		|| check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true) {

CHECK: line length of 168 exceeds 100 columns
#943: FILE: ./os_dep/ioctl_cfg80211.c:943:
+	if ((key_index < WEP_KEYS) && ((psecuritypriv->dot11PrivacyAlgrthm == _WEP40_) || (psecuritypriv->dot11PrivacyAlgrthm == _WEP104_))) { /* set wep default key */

CHECK: Unnecessary parentheses around 'key_index < WEP_KEYS'
#943: FILE: ./os_dep/ioctl_cfg80211.c:943:
+	if ((key_index < WEP_KEYS) && ((psecuritypriv->dot11PrivacyAlgrthm == _WEP40_) || (psecuritypriv->dot11PrivacyAlgrthm == _WEP104_))) { /* set wep default key */

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm == _WEP40_'
#943: FILE: ./os_dep/ioctl_cfg80211.c:943:
+	if ((key_index < WEP_KEYS) && ((psecuritypriv->dot11PrivacyAlgrthm == _WEP40_) || (psecuritypriv->dot11PrivacyAlgrthm == _WEP104_))) { /* set wep default key */

CHECK: Unnecessary parentheses around 'psecuritypriv->dot11PrivacyAlgrthm == _WEP104_'
#943: FILE: ./os_dep/ioctl_cfg80211.c:943:
+	if ((key_index < WEP_KEYS) && ((psecuritypriv->dot11PrivacyAlgrthm == _WEP40_) || (psecuritypriv->dot11PrivacyAlgrthm == _WEP104_))) { /* set wep default key */

CHECK: line length of 122 exceeds 100 columns
#955: FILE: ./os_dep/ioctl_cfg80211.c:955:
+		psecuritypriv->bWepDefaultKeyIdxSet = 1; /* set the flag to represent that wep default key has been set */

CHECK: Logical continuations should be on the previous line
#987: FILE: ./os_dep/ioctl_cfg80211.c:987:
+	if (check_fwstate(pmlmepriv, WIFI_STATION_STATE)
+		&& check_fwstate(pmlmepriv, _FW_LINKED)) {

CHECK: Unnecessary parentheses around pmlmepriv->cur_network
#988: FILE: ./os_dep/ioctl_cfg80211.c:988:
+		struct wlan_network  *cur_network = &(pmlmepriv->cur_network);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#1030: FILE: ./os_dep/ioctl_cfg80211.c:1030:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: Using comparison to true is error prone
#1033: FILE: ./os_dep/ioctl_cfg80211.c:1033:
+	if (adapter_to_dvobj(padapter)->processing_dev_remove == true) {

CHECK: Unnecessary parentheses around padapter->mlmepriv
#1127: FILE: ./os_dep/ioctl_cfg80211.c:1127:
+	struct	mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue
#1128: FILE: ./os_dep/ioctl_cfg80211.c:1128:
+	struct __queue *queue	= &(pmlmepriv->scanned_queue);

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1131: FILE: ./os_dep/ioctl_cfg80211.c:1131:
+	spin_lock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: line length of 119 exceeds 100 columns
#1138: FILE: ./os_dep/ioctl_cfg80211.c:1138:
+		/* report network only if the current channel set contains the channel to which this network belongs */

CHECK: line length of 123 exceeds 100 columns
#1139: FILE: ./os_dep/ioctl_cfg80211.c:1139:
+		if (rtw_ch_set_search_ch(padapter->mlmeextpriv.channel_set, pnetwork->network.configuration.ds_config) >= 0

CHECK: Logical continuations should be on the previous line
#1140: FILE: ./os_dep/ioctl_cfg80211.c:1140:
+		if (rtw_ch_set_search_ch(padapter->mlmeextpriv.channel_set, pnetwork->network.configuration.ds_config) >= 0
+			&& true == rtw_validate_ssid(&(pnetwork->network.ssid))) {

CHECK: Unnecessary parentheses around pnetwork->network.ssid
#1140: FILE: ./os_dep/ioctl_cfg80211.c:1140:
+			&& true == rtw_validate_ssid(&(pnetwork->network.ssid))) {

CHECK: Using comparison to true is error prone
#1140: FILE: ./os_dep/ioctl_cfg80211.c:1140:
+			&& true == rtw_validate_ssid(&(pnetwork->network.ssid))) {

CHECK: Unnecessary parentheses around pmlmepriv->scanned_queue.lock
#1146: FILE: ./os_dep/ioctl_cfg80211.c:1146:
+	spin_unlock_bh(&(pmlmepriv->scanned_queue.lock));

CHECK: Unnecessary parentheses around padapter->mlmepriv
#1154: FILE: ./os_dep/ioctl_cfg80211.c:1154:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: line length of 110 exceeds 100 columns
#1211: FILE: ./os_dep/ioctl_cfg80211.c:1211:
+		if (check_fwstate(pmlmepriv, WIFI_UNDER_WPS | _FW_UNDER_SURVEY | _FW_UNDER_LINKING) == true) {

CHECK: Using comparison to true is error prone
#1234: FILE: ./os_dep/ioctl_cfg80211.c:1234:
+	if (pmlmepriv->LinkDetectInfo.bBusyTraffic == true) {

CHECK: line length of 112 exceeds 100 columns
#1274: FILE: ./os_dep/ioctl_cfg80211.c:1274:
+		_status = rtw_sitesurvey_cmd(padapter, ssid, RTW_SSID_SCAN_AMOUNT, ch, survey_times_for_one_ch);

CHECK: line length of 112 exceeds 100 columns
#1278: FILE: ./os_dep/ioctl_cfg80211.c:1278:
+				memcpy(&ch[j * survey_times + i], &ch[j], sizeof(struct rtw_ieee80211_channel));

CHECK: line length of 123 exceeds 100 columns
#1279: FILE: ./os_dep/ioctl_cfg80211.c:1279:
+		_status = rtw_sitesurvey_cmd(padapter, ssid, RTW_SSID_SCAN_AMOUNT, ch, survey_times * request->n_channels);

CHECK: Using comparison to false is error prone
#1285: FILE: ./os_dep/ioctl_cfg80211.c:1285:
+	if (_status == false)

CHECK: braces {} should be used on all arms of this statement
#1401: FILE: ./os_dep/ioctl_cfg80211.c:1401:
+	if (key_mgt == WLAN_AKM_SUITE_8021X)
[...]
+	else if (key_mgt == WLAN_AKM_SUITE_PSK) {
[...]

CHECK: line length of 111 exceeds 100 columns
#1447: FILE: ./os_dep/ioctl_cfg80211.c:1447:
+		if (rtw_parse_wpa_ie(pwpa, wpa_ielen + 2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {

CHECK: line length of 114 exceeds 100 columns
#1456: FILE: ./os_dep/ioctl_cfg80211.c:1456:
+		if (rtw_parse_wpa2_ie(pwpa2, wpa2_ielen + 2, &group_cipher, &pairwise_cipher, NULL) == _SUCCESS) {

CHECK: line length of 105 exceeds 100 columns
#1522: FILE: ./os_dep/ioctl_cfg80211.c:1522:
+			memcpy(padapter->securitypriv.wps_ie, wps_ie, padapter->securitypriv.wps_ie_len);

CHECK: Logical continuations should be on the previous line
#1531: FILE: ./os_dep/ioctl_cfg80211.c:1531:
+	if (padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_
+		|| padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_WTMIC_

CHECK: Logical continuations should be on the previous line
#1532: FILE: ./os_dep/ioctl_cfg80211.c:1532:
+		|| padapter->securitypriv.dot11PrivacyAlgrthm == _TKIP_WTMIC_
+		|| padapter->securitypriv.dot11PrivacyAlgrthm == _AES_)

CHECK: line length of 102 exceeds 100 columns
#1612: FILE: ./os_dep/ioctl_cfg80211.c:1612:
+		if (rtw_set_802_11_infrastructure_mode(padapter, Ndis802_11Infrastructure) == false) {

CHECK: Using comparison to true is error prone
#1636: FILE: ./os_dep/ioctl_cfg80211.c:1636:
+	if (adapter_wdev_data(padapter)->block == true) {

CHECK: line length of 105 exceeds 100 columns
#1714: FILE: ./os_dep/ioctl_cfg80211.c:1714:
+			wep_total_len = wep_key_len + FIELD_OFFSET(struct ndis_802_11_wep, key_material);

CHECK: Avoid CamelCase: <blInserted>
#1839: FILE: ./os_dep/ioctl_cfg80211.c:1839:
+	u8 index, blInserted = false;

CHECK: line length of 106 exceeds 100 columns
#1851: FILE: ./os_dep/ioctl_cfg80211.c:1851:
+			memcpy(psecuritypriv->PMKIDList[index].PMKID, (u8 *)pmksa->pmkid, WLAN_PMKID_LEN);

CHECK: line length of 112 exceeds 100 columns
#1860: FILE: ./os_dep/ioctl_cfg80211.c:1860:
+		memcpy(psecuritypriv->PMKIDList[psecuritypriv->PMKIDIndex].Bssid, (u8 *)pmksa->bssid, ETH_ALEN);

CHECK: line length of 118 exceeds 100 columns
#1861: FILE: ./os_dep/ioctl_cfg80211.c:1861:
+		memcpy(psecuritypriv->PMKIDList[psecuritypriv->PMKIDIndex].PMKID, (u8 *)pmksa->pmkid, WLAN_PMKID_LEN);

CHECK: line length of 107 exceeds 100 columns
#1932: FILE: ./os_dep/ioctl_cfg80211.c:1932:
+void rtw_cfg80211_indicate_sta_disassoc(struct adapter *padapter, unsigned char *da, unsigned short reason)

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2063: FILE: ./os_dep/ioctl_cfg80211.c:2063:
+		struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2064: FILE: ./os_dep/ioctl_cfg80211.c:2064:
+		struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: line length of 102 exceeds 100 columns
#2111: FILE: ./os_dep/ioctl_cfg80211.c:2111:
+static int rtw_cfg80211_add_monitor_if(struct adapter *padapter, char *name, struct net_device **ndev)

CHECK: Lines should not end with a '('
#2180: FILE: ./os_dep/ioctl_cfg80211.c:2180:
+	cfg80211_rtw_add_virtual_intf(

CHECK: line length of 116 exceeds 100 columns
#2244: FILE: ./os_dep/ioctl_cfg80211.c:2244:
+static int rtw_add_beacon(struct adapter *adapter, const u8 *head, size_t head_len, const u8 *tail, size_t tail_len)

CHECK: Unnecessary parentheses around adapter->mlmepriv
#2249: FILE: ./os_dep/ioctl_cfg80211.c:2249:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Alignment should match open parenthesis
#2309: FILE: ./os_dep/ioctl_cfg80211.c:2309:
+static int cfg80211_rtw_change_beacon(struct wiphy *wiphy, struct net_device *ndev,
+		struct cfg80211_ap_update *info)

CHECK: Unnecessary parentheses around padapter->mlmepriv
#2340: FILE: ./os_dep/ioctl_cfg80211.c:2340:
+	struct mlme_priv *pmlmepriv = &(padapter->mlmepriv);

CHECK: line length of 104 exceeds 100 columns
#2373: FILE: ./os_dep/ioctl_cfg80211.c:2373:
+				updated = ap_free_sta(padapter, psta, true, WLAN_REASON_DEAUTH_LEAVING);

CHECK: Comparison to NULL could be written "!psta"
#2430: FILE: ./os_dep/ioctl_cfg80211.c:2430:
+	if (psta == NULL) {

CHECK: Unnecessary parentheses around padapter->xmitpriv
#2472: FILE: ./os_dep/ioctl_cfg80211.c:2472:
+	struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->mlmeextpriv
#2473: FILE: ./os_dep/ioctl_cfg80211.c:2473:
+	struct mlme_ext_priv *pmlmeext = &(padapter->mlmeextpriv);

CHECK: line length of 103 exceeds 100 columns
#2481: FILE: ./os_dep/ioctl_cfg80211.c:2481:
+		set_channel_bwmode(padapter, tx_ch, HAL_PRIME_CHNL_OFFSET_DONT_CARE, CHANNEL_WIDTH_20);

total: 0 errors, 0 warnings, 146 checks, 2814 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/ioctl_cfg80211.c has style problems, please review.
-------------------------
./os_dep/ioctl_cfg80211.o
-------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/ioctl_cfg80211.o has style problems, please review.
---------------------
./os_dep/mlme_linux.c
---------------------
CHECK: Unnecessary parentheses around adapter->mlmepriv
#41: FILE: ./os_dep/mlme_linux.c:41:
+	struct mlme_priv *pmlmepriv = &(adapter->mlmepriv);

CHECK: Alignment should match open parenthesis
#44: FILE: ./os_dep/mlme_linux.c:44:
+	if ((check_fwstate(pmlmepriv, WIFI_ADHOC_MASTER_STATE) == true) ||
+		(check_fwstate(pmlmepriv, WIFI_ADHOC_STATE) == true)) {

CHECK: Avoid CamelCase: <backupPMKIDList>
#61: FILE: ./os_dep/mlme_linux.c:61:
+static struct rt_pmkid_list   backupPMKIDList[NUM_PMKID_CACHE];

CHECK: Avoid CamelCase: <backupPMKIDIndex>
#64: FILE: ./os_dep/mlme_linux.c:64:
+	u8 backupPMKIDIndex = 0;

CHECK: Avoid CamelCase: <backupTKIPCountermeasure>
#65: FILE: ./os_dep/mlme_linux.c:65:
+	u8 backupTKIPCountermeasure = 0x00;

CHECK: Avoid CamelCase: <backupTKIPcountermeasure_time>
#66: FILE: ./os_dep/mlme_linux.c:66:
+	u32 backupTKIPcountermeasure_time = 0;

CHECK: line length of 112 exceeds 100 columns
#78: FILE: ./os_dep/mlme_linux.c:78:
+		/*  When the countermeasure is trigger, the driver have to disconnect with AP for 60 seconds. */

CHECK: line length of 129 exceeds 100 columns
#80: FILE: ./os_dep/mlme_linux.c:80:
+		memcpy(&backupPMKIDList[0], &adapter->securitypriv.PMKIDList[0], sizeof(struct rt_pmkid_list) * NUM_PMKID_CACHE);

CHECK: line length of 106 exceeds 100 columns
#91: FILE: ./os_dep/mlme_linux.c:91:
+		/*  Restore the PMK information to securitypriv structure for the following connection. */

CHECK: line length of 129 exceeds 100 columns
#92: FILE: ./os_dep/mlme_linux.c:92:
+		memcpy(&adapter->securitypriv.PMKIDList[0], &backupPMKIDList[0], sizeof(struct rt_pmkid_list) * NUM_PMKID_CACHE);

CHECK: line length of 111 exceeds 100 columns
#125: FILE: ./os_dep/mlme_linux.c:125:
+	netif_carrier_off(adapter->pnetdev); /*  Do it first for tx broadcast pkt after disconnection issue! */

CHECK: line length of 105 exceeds 100 columns
#161: FILE: ./os_dep/mlme_linux.c:161:
+		wrqu.data.length = (wrqu.data.length < IW_CUSTOM_MAX) ? wrqu.data.length : IW_CUSTOM_MAX;

total: 0 errors, 0 warnings, 12 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/mlme_linux.c has style problems, please review.
---------------------
./os_dep/mlme_linux.o
---------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/mlme_linux.o has style problems, please review.
------------------------
./os_dep/osdep_service.c
------------------------
WARNING: Block comments should align the * on each line
#10: FILE: ./os_dep/osdep_service.c:10:
+/*
+* Translate the OS dependent @param error_code to OS independent RTW_STATUS_CODE

CHECK: Please don't use multiple blank lines
#155: FILE: ./os_dep/osdep_service.c:155:
+
+

WARNING: Missing a blank line after declarations
#207: FILE: ./os_dep/osdep_service.c:207:
+	void *buf;
+	if (rtw_cbuf_empty(cbuf))

CHECK: multiple assignments should be avoided
#229: FILE: ./os_dep/osdep_service.c:229:
+		cbuf->write = cbuf->read = 0;

total: 0 errors, 2 warnings, 2 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/osdep_service.c has style problems, please review.
------------------------
./os_dep/osdep_service.o
------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/osdep_service.o has style problems, please review.
-------------------
./os_dep/os_intfs.c
-------------------
CHECK: Please don't use multiple blank lines
#20: FILE: ./os_dep/os_intfs.c:20:
+
+

CHECK: line length of 151 exceeds 100 columns
#73: FILE: ./os_dep/os_intfs.c:73:
+static int rtw_ampdu_enable = 1;/* for enable tx_ampdu ,0: disable, 0x1:enable (but wifi_spec should be 0), 0x2: force enable (don't care wifi_spec) */

CHECK: line length of 128 exceeds 100 columns
#75: FILE: ./os_dep/os_intfs.c:75:
+static int rtw_ampdu_amsdu;/*  0: disabled, 1:enabled, 2:auto . There is an IOT issu with DLINK DIR-629 when the flag turn on */

CHECK: line length of 107 exceeds 100 columns
#82: FILE: ./os_dep/os_intfs.c:82:
+/*  BIT0: Enable VHT LDPC Rx, BIT1: Enable VHT LDPC Tx, BIT4: Enable HT LDPC Rx, BIT5: Enable HT LDPC Tx */

CHECK: line length of 107 exceeds 100 columns
#84: FILE: ./os_dep/os_intfs.c:84:
+/*  BIT0: Enable VHT STBC Rx, BIT1: Enable VHT STBC Tx, BIT4: Enable HT STBC Rx, BIT5: Enable HT STBC Tx */

CHECK: line length of 119 exceeds 100 columns
#86: FILE: ./os_dep/os_intfs.c:86:
+/*  BIT0: Enable VHT Beamformer, BIT1: Enable VHT Beamformee, BIT4: Enable HT Beamformer, BIT5: Enable HT Beamformee */

CHECK: line length of 295 exceeds 100 columns
#100: FILE: ./os_dep/os_intfs.c:100:
+static int rtw_antdiv_type; /* 0:decide by efuse  1: for 88EE, 1Tx and 1RxCG are diversity.(2 Ant with SPDT), 2:  for 88EE, 1Tx and 2Rx are diversity.(2 Ant, Tx and RxCG are both on aux port, RxCS is on main port), 3: for 88EE, 1Tx and 1RxCG are fixed.(1Ant, Tx and RxCG are both on aux port) */

CHECK: Please don't use multiple blank lines
#102: FILE: ./os_dep/os_intfs.c:102:
+
+

CHECK: Please don't use multiple blank lines
#147: FILE: ./os_dep/os_intfs.c:147:
+
+

CHECK: Please don't use multiple blank lines
#242: FILE: ./os_dep/os_intfs.c:242:
+
+

CHECK: Avoid CamelCase: <RFE_Type>
#270: FILE: ./os_dep/os_intfs.c:270:
+	registry_par->RFE_Type = 64;

CHECK: Unnecessary parentheses around padapter->xmitpriv
#295: FILE: ./os_dep/os_intfs.c:295:
+	struct xmit_priv *pxmitpriv = &(padapter->xmitpriv);

CHECK: Unnecessary parentheses around padapter->recvpriv
#296: FILE: ./os_dep/os_intfs.c:296:
+	struct recv_priv *precvpriv = &(padapter->recvpriv);

CHECK: Please don't use multiple blank lines
#342: FILE: ./os_dep/os_intfs.c:342:
+
+

CHECK: line length of 105 exceeds 100 columns
#430: FILE: ./os_dep/os_intfs.c:430:
+		pnetdev = rtw_alloc_etherdev_with_old_priv(sizeof(struct adapter), (void *)old_padapter);

CHECK: Unnecessary parentheses around 'padapter->DriverState != DRIVER_DISAPPEAR'
#466: FILE: ./os_dep/os_intfs.c:466:
+	if ((padapter->DriverState != DRIVER_DISAPPEAR) && pnetdev)

CHECK: line length of 114 exceeds 100 columns
#483: FILE: ./os_dep/os_intfs.c:483:
+		wait_for_completion(&padapter->cmdpriv.terminate_cmdthread_comp); /* wait for cmd_thread to run */

CHECK: Blank lines aren't necessary before a close brace '}'
#560: FILE: ./os_dep/os_intfs.c:560:
+
+}

CHECK: Blank lines aren't necessary before a close brace '}'
#631: FILE: ./os_dep/os_intfs.c:631:
+
+}

CHECK: Please don't use multiple blank lines
#633: FILE: ./os_dep/os_intfs.c:633:
+
+

CHECK: line length of 104 exceeds 100 columns
#661: FILE: ./os_dep/os_intfs.c:661:
+	/*  We don't need to memset padapter->XXX to zero, because adapter is allocated by vzalloc(). */

CHECK: Please don't use multiple blank lines
#891: FILE: ./os_dep/os_intfs.c:891:
+
+

CHECK: Blank lines aren't necessary after an open brace '{'
#908: FILE: ./os_dep/os_intfs.c:908:
+{
+

WARNING: Comparisons should place the constant on the right side of the test
#925: FILE: ./os_dep/os_intfs.c:925:
+		status =  (_SUCCESS == ips_netdrv_open(padapter)) ? (0) : (-1);

WARNING: Block comments use * on subsequent lines
#945: FILE: ./os_dep/os_intfs.c:945:
+/*if (!padapter->hw_init_completed)
+	{

WARNING: Block comments use a trailing */ on a separate line
#951: FILE: ./os_dep/os_intfs.c:951:
+	else*/

CHECK: Blank lines aren't necessary after an open brace '{'
#990: FILE: ./os_dep/os_intfs.c:990:
+	if (padapter->bup) {
+

WARNING: else is not generally useful after a break or return
#1004: FILE: ./os_dep/os_intfs.c:1004:
+				break;
+			} else {

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#1006: FILE: ./os_dep/os_intfs.c:1006:
+				msleep(10);

CHECK: line length of 104 exceeds 100 columns
#1025: FILE: ./os_dep/os_intfs.c:1025:
+			/* amy modify 20120221 for power seq is different between driver open and ips */

CHECK: Blank lines aren't necessary before a close brace '}'
#1033: FILE: ./os_dep/os_intfs.c:1033:
+
+	}

CHECK: Logical continuations should be on the previous line
#1042: FILE: ./os_dep/os_intfs.c:1042:
+		if (check_fwstate(pmlmepriv, WIFI_STATION_STATE)
+			&& check_fwstate(pmlmepriv, _FW_LINKED)) {

CHECK: line length of 105 exceeds 100 columns
#1084: FILE: ./os_dep/os_intfs.c:1084:
+	if ((rtw_hal_check_ips_status(padapter)) || (adapter_to_pwrctl(padapter)->rf_pwrstate == rf_off))

WARNING: msleep < 20ms can sleep for up to 20ms; see function description of msleep().
#1111: FILE: ./os_dep/os_intfs.c:1111:
+		msleep(1);

CHECK: Unnecessary parentheses around '!padapter->bup'
#1113: FILE: ./os_dep/os_intfs.c:1113:
+	if ((!padapter->bup) || (padapter->bDriverStopped) || (padapter->bSurpriseRemoved)) {

CHECK: Unnecessary parentheses around 'padapter->bDriverStopped'
#1113: FILE: ./os_dep/os_intfs.c:1113:
+	if ((!padapter->bup) || (padapter->bDriverStopped) || (padapter->bSurpriseRemoved)) {

CHECK: Unnecessary parentheses around 'padapter->bSurpriseRemoved'
#1113: FILE: ./os_dep/os_intfs.c:1113:
+	if ((!padapter->bup) || (padapter->bDriverStopped) || (padapter->bSurpriseRemoved)) {

WARNING: void function return statements are not generally useful
#1141: FILE: ./os_dep/os_intfs.c:1141:
+	return;
+}

CHECK: line length of 101 exceeds 100 columns
#1165: FILE: ./os_dep/os_intfs.c:1165:
+	if ((padapter->intf_init) && (padapter->intf_init(adapter_to_dvobj(padapter)) != _SUCCESS)) {

CHECK: Unnecessary parentheses around 'padapter->intf_init'
#1165: FILE: ./os_dep/os_intfs.c:1165:
+	if ((padapter->intf_init) && (padapter->intf_init(adapter_to_dvobj(padapter)) != _SUCCESS)) {

CHECK: line length of 111 exceeds 100 columns
#1171: FILE: ./os_dep/os_intfs.c:1171:
+	if ((padapter->intf_alloc_irq) && (padapter->intf_alloc_irq(adapter_to_dvobj(padapter)) != _SUCCESS)) {

CHECK: Unnecessary parentheses around 'padapter->intf_alloc_irq'
#1171: FILE: ./os_dep/os_intfs.c:1171:
+	if ((padapter->intf_alloc_irq) && (padapter->intf_alloc_irq(adapter_to_dvobj(padapter)) != _SUCCESS)) {

WARNING: braces {} are not necessary for single statement blocks
#1214: FILE: ./os_dep/os_intfs.c:1214:
+	if (pwrpriv) {
+		pwrpriv->bInSuspend = false;
+	}

total: 0 errors, 8 warnings, 35 checks, 1221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/os_intfs.c has style problems, please review.
-------------------
./os_dep/os_intfs.o
-------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/os_intfs.o has style problems, please review.
---------------------
./os_dep/recv_linux.c
---------------------
CHECK: multiple assignments should be avoided
#24: FILE: ./os_dep/recv_linux.c:24:
+	precvframe->u.hdr.pkt_newalloc = precvframe->u.hdr.pkt = NULL;

CHECK: No space is necessary after a cast
#33: FILE: ./os_dep/recv_linux.c:33:
+	precvframe = (union recv_frame *) precvpriv->precv_frame_buf;

WARNING: braces {} are not necessary for single statement blocks
#48: FILE: ./os_dep/recv_linux.c:48:
+	if (precvbuf->pskb) {
+		dev_kfree_skb_any(precvbuf->pskb);
+	}

CHECK: Alignment should match open parenthesis
#71: FILE: ./os_dep/recv_linux.c:71:
+	if (sub_skb->len >= 8 &&
+		((!memcmp(sub_skb->data, rfc1042_header, SNAP_SIZE) &&

CHECK: line length of 107 exceeds 100 columns
#93: FILE: ./os_dep/recv_linux.c:93:
+void rtw_os_recv_indicate_pkt(struct adapter *padapter, struct sk_buff *pkt, struct rx_pkt_attrib *pattrib)

CHECK: line length of 108 exceeds 100 columns
#114: FILE: ./os_dep/recv_linux.c:114:
+					struct net_device *pnetdev = (struct net_device *)padapter->pnetdev;

CHECK: spaces preferred around that '*' (ctx:VxV)
#154: FILE: ./os_dep/recv_linux.c:154:
+		if (cur_time - psecuritypriv->last_mic_err_time < 60*HZ) {
 		                                                    ^

WARNING: braces {} are not necessary for any arm of this statement
#163: FILE: ./os_dep/recv_linux.c:163:
+	if (bgroup) {
[...]
+	} else {
[...]

CHECK: line length of 103 exceeds 100 columns
#169: FILE: ./os_dep/recv_linux.c:169:
+	cfg80211_michael_mic_failure(padapter->pnetdev, (u8 *)&pmlmepriv->assoc_bssid[0], key_type, -1,

CHECK: Alignment should match open parenthesis
#170: FILE: ./os_dep/recv_linux.c:170:
+	cfg80211_michael_mic_failure(padapter->pnetdev, (u8 *)&pmlmepriv->assoc_bssid[0], key_type, -1,
+		NULL, GFP_ATOMIC);

WARNING: braces {} are not necessary for any arm of this statement
#173: FILE: ./os_dep/recv_linux.c:173:
+	if (bgroup) {
[...]
+	} else {
[...]

CHECK: Unnecessary parentheses around padapter->recvpriv
#193: FILE: ./os_dep/recv_linux.c:193:
+	precvpriv = &(padapter->recvpriv);

CHECK: Unnecessary parentheses around precvpriv->free_recv_queue
#194: FILE: ./os_dep/recv_linux.c:194:
+	pfree_recv_queue = &(precvpriv->free_recv_queue);

CHECK: Blank lines aren't necessary before a close brace '}'
#228: FILE: ./os_dep/recv_linux.c:228:
+
+}

total: 0 errors, 3 warnings, 11 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/recv_linux.c has style problems, please review.
---------------------
./os_dep/recv_linux.o
---------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/recv_linux.o has style problems, please review.
--------------------
./os_dep/sdio_intf.c
--------------------
CHECK: Please don't use multiple blank lines
#50: FILE: ./os_dep/sdio_intf.c:50:
+
+

CHECK: spaces required around that '?' (ctx:VxV)
#83: FILE: ./os_dep/sdio_intf.c:83:
+	return err?_FAIL:_SUCCESS;
 	          ^

CHECK: spaces required around that ':' (ctx:VxV)
#83: FILE: ./os_dep/sdio_intf.c:83:
+	return err?_FAIL:_SUCCESS;
 	                ^

CHECK: braces {} should be used on all arms of this statement
#99: FILE: ./os_dep/sdio_intf.c:99:
+			if (err) {
[...]
+			} else
[...]

CHECK: Unbalanced braces around else statement
#104: FILE: ./os_dep/sdio_intf.c:104:
+			} else

CHECK: Please use a blank line after function/struct/union/enum declarations
#171: FILE: ./os_dep/sdio_intf.c:171:
+}
+static struct dvobj_priv *sdio_dvobj_init(struct sdio_func *func)

CHECK: Please don't use multiple blank lines
#241: FILE: ./os_dep/sdio_intf.c:241:
+
+

CHECK: line length of 102 exceeds 100 columns
#242: FILE: ./os_dep/sdio_intf.c:242:
+static struct adapter *rtw_sdio_if1_init(struct dvobj_priv *dvobj, const struct sdio_device_id  *pdid)

CHECK: Please don't use multiple blank lines
#275: FILE: ./os_dep/sdio_intf.c:275:
+
+

CHECK: No space is necessary after a cast
#292: FILE: ./os_dep/sdio_intf.c:292:
+	hal_btcoex_Initialize((void *) padapter);

CHECK: Lines should not end with a '('
#361: FILE: ./os_dep/sdio_intf.c:361:
+static int rtw_drv_init(

total: 0 errors, 0 warnings, 11 checks, 494 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/sdio_intf.c has style problems, please review.
--------------------
./os_dep/sdio_intf.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/sdio_intf.o has style problems, please review.
-------------------------
./os_dep/sdio_ops_linux.c
-------------------------
WARNING: else is not generally useful after a break or return
#222: FILE: ./os_dep/sdio_ops_linux.c:222:
+				break;
+			} else {

WARNING: else is not generally useful after a break or return
#298: FILE: ./os_dep/sdio_ops_linux.c:298:
+				break;
+			} else {

CHECK: Blank lines aren't necessary before a close brace '}'
#309: FILE: ./os_dep/sdio_ops_linux.c:309:
+
+	}

CHECK: Unnecessary parentheses around 'cnt == 1'
#345: FILE: ./os_dep/sdio_ops_linux.c:345:
+	if (unlikely((cnt == 1) || (cnt == 2))) {

CHECK: Unnecessary parentheses around 'cnt == 2'
#345: FILE: ./os_dep/sdio_ops_linux.c:345:
+	if (unlikely((cnt == 1) || (cnt == 2))) {

CHECK: Unnecessary parentheses around 'cnt == 1'
#439: FILE: ./os_dep/sdio_ops_linux.c:439:
+	if (unlikely((cnt == 1) || (cnt == 2))) {

CHECK: Unnecessary parentheses around 'cnt == 2'
#439: FILE: ./os_dep/sdio_ops_linux.c:439:
+	if (unlikely((cnt == 1) || (cnt == 2))) {

total: 0 errors, 2 warnings, 5 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/sdio_ops_linux.c has style problems, please review.
-------------------------
./os_dep/sdio_ops_linux.o
-------------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/sdio_ops_linux.o has style problems, please review.
--------------------
./os_dep/wifi_regd.c
--------------------
CHECK: spaces preferred around that '*' (ctx:ExV)
#110: FILE: ./os_dep/wifi_regd.c:110:
+							       *reg)
 							       ^

total: 0 errors, 0 warnings, 1 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/wifi_regd.c has style problems, please review.
--------------------
./os_dep/wifi_regd.o
--------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/wifi_regd.o has style problems, please review.
---------------------
./os_dep/xmit_linux.c
---------------------
CHECK: Please don't use multiple blank lines
#9: FILE: ./os_dep/xmit_linux.c:9:
+
+

CHECK: multiple assignments should be avoided
#18: FILE: ./os_dep/xmit_linux.c:18:
+	pfile->cur_addr = pfile->buf_start = pktptr->data;

CHECK: multiple assignments should be avoided
#19: FILE: ./os_dep/xmit_linux.c:19:
+	pfile->pkt_len = pfile->buf_len = pktptr->len;

CHECK: line length of 106 exceeds 100 columns
#46: FILE: ./os_dep/xmit_linux.c:46:
+int rtw_os_xmit_resource_alloc(struct adapter *padapter, struct xmit_buf *pxmitbuf, u32 alloc_sz, u8 flag)

CHECK: line length of 111 exceeds 100 columns
#53: FILE: ./os_dep/xmit_linux.c:53:
+		pxmitbuf->pbuf = (u8 *)N_BYTE_ALIGMENT((SIZE_PTR)(pxmitbuf->pallocated_buf), XMITBUF_ALIGN_SZ);

CHECK: line length of 105 exceeds 100 columns
#59: FILE: ./os_dep/xmit_linux.c:59:
+void rtw_os_xmit_resource_free(struct adapter *padapter, struct xmit_buf *pxmitbuf, u32 free_sz, u8 flag)

CHECK: Unnecessary parentheses around 'pxmitpriv->hwxmits[queue].accnt < WMM_XMIT_THRESHOLD'
#74: FILE: ./os_dep/xmit_linux.c:74:
+		if (__netif_subqueue_stopped(padapter->pnetdev, queue) &&
+		    (pxmitpriv->hwxmits[queue].accnt < WMM_XMIT_THRESHOLD))

CHECK: Logical continuations should be on the previous line
#195: FILE: ./os_dep/xmit_linux.c:195:
+	if (!rtw_mc2u_disable
+		&& check_fwstate(pmlmepriv, WIFI_AP_STATE) == true

CHECK: Logical continuations should be on the previous line
#196: FILE: ./os_dep/xmit_linux.c:196:
+		&& check_fwstate(pmlmepriv, WIFI_AP_STATE) == true
+		&& (IP_MCAST_MAC(pkt->data)

CHECK: Logical continuations should be on the previous line
#197: FILE: ./os_dep/xmit_linux.c:197:
+		&& (IP_MCAST_MAC(pkt->data)
+			|| ICMPV6_MCAST_MAC(pkt->data)

CHECK: Logical continuations should be on the previous line
#199: FILE: ./os_dep/xmit_linux.c:199:
+			)
+		&& padapter->registrypriv.wifi_spec == 0) {

total: 0 errors, 0 warnings, 11 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/xmit_linux.c has style problems, please review.
---------------------
./os_dep/xmit_linux.o
---------------------
ERROR: Does not appear to be a unified-diff format patch

total: 1 errors, 0 warnings, 0 checks, 0 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./os_dep/xmit_linux.o has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
